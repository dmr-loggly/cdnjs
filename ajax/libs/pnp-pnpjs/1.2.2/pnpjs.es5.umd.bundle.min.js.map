{"version":3,"sources":["webpack://pnp/webpack/universalModuleDefinition","webpack://pnp/webpack/bootstrap","webpack://pnp/./build/packages/common/src/adalclient.js","webpack://pnp/./build/packages/common/src/collections.js","webpack://pnp/./build/packages/common/src/libconfig.js","webpack://pnp/./build/packages/common/src/storage.js","webpack://pnp/./build/packages/common/index.js","webpack://pnp/./build/packages/common/src/util.js","webpack://pnp/./build/packages/sp/src/config/splibconfig.js","webpack://pnp/./build/packages/sp/src/utils/toabsoluteurl.js","webpack://pnp/./build/packages/common/src/netutil.js","webpack://pnp/(webpack)/buildin/global.js","webpack://pnp/./node_modules/adal-angular/dist/adal.min.js","webpack://pnp/./build/packages/logging/src/logger.js","webpack://pnp/./build/packages/logging/src/loglevel.js","webpack://pnp/./build/packages/logging/src/listeners.js","webpack://pnp/./build/packages/config-store/src/configuration.js","webpack://pnp/./build/packages/config-store/src/providers/cachingConfigurationProvider.js","webpack://pnp/./build/packages/config-store/src/providers/spListConfigurationProvider.js","webpack://pnp/./build/packages/odata/src/caching.js","webpack://pnp/./build/packages/odata/src/parsers.js","webpack://pnp/./node_modules/tslib/tslib.es6.js","webpack://pnp/./build/packages/odata/src/pipeline.js","webpack://pnp/./build/packages/odata/src/queryable.js","webpack://pnp/./build/packages/odata/src/odatabatch.js","webpack://pnp/./build/packages/graph/src/config/graphlibconfig.js","webpack://pnp/./build/packages/graph/src/net/graphhttpclient.js","webpack://pnp/./build/packages/graph/src/types.js","webpack://pnp/./build/packages/graph/src/graphqueryable.js","webpack://pnp/./build/packages/graph/src/members.js","webpack://pnp/./build/packages/graph/src/calendars.js","webpack://pnp/./build/packages/graph/src/attachments.js","webpack://pnp/./build/packages/graph/src/conversations.js","webpack://pnp/./build/packages/graph/src/plans.js","webpack://pnp/./build/packages/graph/src/photos.js","webpack://pnp/./build/packages/graph/src/teams.js","webpack://pnp/./build/packages/graph/src/groups.js","webpack://pnp/./build/packages/graph/src/onenote.js","webpack://pnp/./build/packages/graph/src/contacts.js","webpack://pnp/./build/packages/graph/src/me.js","webpack://pnp/./build/packages/graph/src/users.js","webpack://pnp/./build/packages/graph/src/rest.js","webpack://pnp/./build/packages/graph/src/batch.js","webpack://pnp/./build/packages/sp/src/utils/extractweburl.js","webpack://pnp/./build/packages/sp/src/odata.js","webpack://pnp/./build/packages/sp/src/net/digestcache.js","webpack://pnp/./build/packages/sp/src/net/sphttpclient.js","webpack://pnp/./build/packages/sp/src/siteusers.js","webpack://pnp/./build/packages/sp/src/utils/metadata.js","webpack://pnp/./build/packages/sp/src/sharepointqueryable.js","webpack://pnp/./build/packages/sp/src/sitegroups.js","webpack://pnp/./build/packages/sp/src/roles.js","webpack://pnp/./build/packages/sp/src/types.js","webpack://pnp/./build/packages/sp/src/sharepointqueryablesecurable.js","webpack://pnp/./build/packages/sp/src/sharepointqueryableshareable.js","webpack://pnp/./build/packages/sp/src/webparts.js","webpack://pnp/./build/packages/sp/src/folders.js","webpack://pnp/./build/packages/sp/src/contenttypes.js","webpack://pnp/./build/packages/sp/src/attachmentfiles.js","webpack://pnp/./build/packages/sp/src/views.js","webpack://pnp/./build/packages/sp/src/fields.js","webpack://pnp/./build/packages/sp/src/forms.js","webpack://pnp/./build/packages/sp/src/subscriptions.js","webpack://pnp/./build/packages/sp/src/usercustomactions.js","webpack://pnp/./build/packages/sp/src/lists.js","webpack://pnp/./build/packages/sp/src/comments.js","webpack://pnp/./build/packages/sp/src/items.js","webpack://pnp/./build/packages/sp/src/files.js","webpack://pnp/./build/packages/sp/src/clientsidepages.js","webpack://pnp/./build/packages/sp/src/appcatalog.js","webpack://pnp/./build/packages/sp/src/batch.js","webpack://pnp/./build/packages/sp/src/navigation.js","webpack://pnp/./build/packages/sp/src/regionalsettings.js","webpack://pnp/./build/packages/sp/src/search.js","webpack://pnp/./build/packages/sp/src/searchsuggest.js","webpack://pnp/./build/packages/sp/src/features.js","webpack://pnp/./build/packages/sp/src/relateditems.js","webpack://pnp/./build/packages/sp/src/webs.js","webpack://pnp/./build/packages/sp/src/site.js","webpack://pnp/./build/packages/sp/src/userprofiles.js","webpack://pnp/./build/packages/sp/src/social.js","webpack://pnp/./build/packages/sp/src/utilities.js","webpack://pnp/./build/packages/sp/src/rest.js","webpack://pnp/./build/packages/sp-addinhelpers/src/sprestaddin.js","webpack://pnp/./build/packages/pnpjs/es5/src/pnpjs.js","webpack://pnp/./build/packages/pnpjs/es5/src/config/pnplibconfig.js","webpack://pnp/./build/packages/pnpjs/es5/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","adalclient_AdalClient","netutil","[object Object]","clientId","tenant","redirectUri","super","this","_displayCallback","_loginPromise","spfxContext","cliendId","pageContext","aadInfo","tenantId","toString","util","location","origin","url","options","Error","getToken","getResource","then","token","fetch","resource","Promise","resolve","reject","ensureAuthContext","_","login","_authContext","acquireToken","message","catch","adal_min","displayCall","navigateToLoginRequestUrl","getCachedUser","popupWindow","open","focus","pollTimer","setInterval","closed","undefined","clearInterval","document","URL","indexOf","handleWindowCallback","hash","close","e","_loginInProgress","parser","createElement","href","protocol","hostname","objectEntries","entries","keys","map","k","objectToMap","Map","mergeMaps","target","maps","length","forEach","v","set","libconfig_RuntimeConfigImpl","_v","config","defaultCachingStore","defaultCachingTimeoutSeconds","globalCacheDisable","enableCacheExpiration","cacheExpirationIntervalMilliseconds","RuntimeConfig","storage_PnPClientStorageWrapper","store","defaultTimeoutMinutes","enabled","test","cacheExpirationHandler","getItem","persistable","JSON","parse","Date","expiration","delete","expire","setItem","createPersistable","removeItem","put","defaultTimeout","pnp","deleteExpired","setTimeout","console","error","MemoryStorage","_store","size","clear","index","Array","from","data","PnPClientStorage","_local","_session","local","getStore","session","localStorage","sessionStorage","__webpack_exports__","getCtxCallback","context","method","params","apply","dateAdd","date","interval","units","ret","toLowerCase","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setTime","getTime","combine","paths","filter","path","stringIsNullOrEmpty","replace","join","getRandomString","chars","text","possible","charAt","Math","floor","random","getGUID","isFunc","cf","objectDefinedNotNull","obj","isArray","array","constructor","extend","source","noOverwrite","check","getOwnPropertyNames","reduce","isUrlAbsolute","getAttrValueFromString","html","attrName","match","RegExp","exec","sanitizeGuid","guid","matches","jsS","stringify","hOP","getHashCode","charCodeAt","setup","SPRuntimeConfig","_pnp_common__WEBPACK_IMPORTED_MODULE_0__","headers","spPart","baseUrl","web","absoluteUrl","fetchClientFactory","global","toAbsoluteUrl","_config_splibconfig__WEBPACK_IMPORTED_MODULE_1__","candidateUrl","_spPageContextInfo","webAbsoluteUrl","webServerRelativeUrl","substr","mergeHeaders","mergeOptions","FetchClient","BearerTokenFetchClient","_util__WEBPACK_IMPORTED_MODULE_0__","Request","append","_token","Headers","g","Function","eval","AuthenticationContext","a","REQUEST_TYPE","LOGIN","RENEW_TOKEN","UNKNOWN","RESPONSE_TYPE","ID_TOKEN_TOKEN","TOKEN","CONSTANTS","ACCESS_TOKEN","EXPIRES_IN","ID_TOKEN","ERROR_DESCRIPTION","SESSION_STATE","ERROR","STORAGE","TOKEN_KEYS","ACCESS_TOKEN_KEY","EXPIRATION_KEY","STATE_LOGIN","STATE_RENEW","NONCE_IDTOKEN","USERNAME","IDTOKEN","LOGIN_REQUEST","LOGIN_ERROR","RENEW_STATUS","ANGULAR_LOGIN_REQUEST","RESOURCE_DELIMETER","CACHE_DELIMETER","LOADFRAME_TIMEOUT","TOKEN_RENEW_STATUS_CANCELED","TOKEN_RENEW_STATUS_COMPLETED","TOKEN_RENEW_STATUS_IN_PROGRESS","LOGGING_LEVEL","WARN","INFO","VERBOSE","LEVEL_STRING_MAP","0","1","2","3","POPUP_WIDTH","POPUP_HEIGHT","_singletonInstance","instance","callback","popUp","isAngular","_user","_activeRenewals","_acquireTokenInProgress","_renewStates","_callBackMappedToRenewStates","_callBacksMappedToRenewStates","_openedWindows","_requestType","_adalInstance","_cloneConfig","loginResource","split","postLogoutRedirectUri","anonymousEndpoints","loadFrameTimeout","Logging","piiLoggingEnabled","level","log","info","_guid","state","_idTokenNonce","b","_getItem","_saveItem","verbose","_getNavigateUrl","encodeURIComponent","push","registerCallback","_loginPopup","promptUser","_openPopup","screenLeft","screenX","f","screenTop","screenY","innerWidth","documentElement","clientWidth","body","h","innerHeight","clientHeight","j","warn","_handlePopupError","_broadcast","encodeURI","bubbles","cancelable","detail","createEvent","initCustomEvent","CustomEvent","Event","dispatchEvent","loginInProgress","_hasResource","_isEmpty","getCachedToken","expireOffsetSeconds","_now","_createUser","_renewToken","_addAdalFrame","_urlRemoveQueryStringParameter","_addHintParameters","verbosePii","src","_loadFrameTimeout","_renewIdToken","_urlContainsQueryStringParameter","_loadFrame","extraQueryParameter","acquireTokenPopup","acquireTokenRedirect","infoPii","clearCache","clearCacheForResource","logOut","logOutUri","getUser","profile","sid","upn","_extractIdToken","aud","userName","email","_getHash","substring","isCallback","_deserialize","getLoginError","getRequestInfo","valid","parameters","stateMatch","stateResponse","requestType","_matchState","parent","_matchNonce","nonce","_getResourceFromState","saveTokenFromHash","error_description","_expiresIn","exp","getResourceForEndpoint","endpoints","_getHostFromUri","String","opener","_serialize","_addLibMetadata","_decodeJwt","JWSPayload","_base64DecodeStringUrlSafe","atob","decodeURIComponent","escape","_decode","fromCharCode","header","JWSSig","_convertUrlSafeToRegularBase64EncodedString","slice","correlationId","_decimalToHex","crypto","msCrypto","getRandomValues","Uint8Array","parseInt","round","getElementById","opera","navigator","userAgent","setAttribute","style","visibility","position","width","height","borderWidth","getElementsByTagName","appendChild","insertAdjacentHTML","frames","cacheLocation","_supportsLocalStorage","_supportsSessionStorage","_libVersion","toUTCString","stack","errorPii","warnPii","inject","Logger","activeLogLevel","_instance","LoggerImpl","listeners","listener","subscribe","clearSubscribers","count","json","write","entry","err","subscribers","subscriber","LogLevel","ConsoleListener","msg","format","FunctionListener","configuration_Settings","_settings","common","provider","getConfiguration","cachingConfigurationProvider_CachingConfigurationProvider","wrappedProvider","cacheKey","cacheStore","selectPnPCache","getOrPut","providedConfig","pnpCache","spListConfigurationProvider_SPListConfigurationProvider","listTitle","keyFieldName","valueFieldName","lists","getByTitle","items","select","item","toUrl","caching_CachingOptions","storeName","storage","CachingParserWrapper","cacheOptions","response","cacheData","HttpRequestError","status","statusText","isHttpRequestError","parsers_ODataParserBase","handleError","parseImpl","has","parseFloat","txt","parseODataJSON","ok","clone","result","results","ODataDefaultParser","TextParser","BlobParser","blob","JSONParser","parsers_BufferParser","arrayBuffer","buffer","LambdaParser","__decorate","decorators","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","setResult","hasResult","next","pipeline","shift","pipe","requestId","promise","ctx","returnResult","isBatched","batch","addResolveBatchDependency","requestPipelineMethod","alwaysRun","propertyKey","descriptor","args","pipeline_PipelineMethods","verb","requestAbsoluteUrl","isCached","cachingOptions","batchDependency","hydrate","add","batchId","client","clientFactory","opts","getDefaultPipeline","logStart","caching","send","logEnd","queryable_Queryable","_query","_options","_url","_parentUrl","_useCaching","_cachingOptions","pathPart","query","toRequestContext","parentUrl","configureFrom","queryable_ODataQueryable","_batch","getCore","addDependency","hasBatch","odatabatch_ODataBatch","_batchId","_reqs","_deps","_rDeps","requests","id","toUpperCase","resolver","all","executeImpl","GraphRuntimeConfig","graphPart","fromSPFxContext","graphhttpclient_GraphHttpClient","_impl","fetchRaw","rawHeaders","retry","delay","attempts","retryCount","retryContext","GraphEndpoints","endpoint","Beta","V1","regex","replaces","graphqueryable_GraphQueryable","urlStr","additionalPath","includeBatch","configure","inBatch","ensure","toUrlAndQuery","GraphQueryableCollection","selects","expands","orderBy","ascending","top","num","GraphQueryableSearchableCollection","GraphQueryableInstance","members_Members","postCore","@odata.id","members_Member","Owners","calendars_Calendar","events","calendars_Events","calendars_Event","properties","event","getById","patchCore","deleteCore","attachments_Attachments","attachments_Attachment","bytes","@odata.type","contentBytes","conversations_Conversations","conversations_Conversation","conversations_Threads","conversations_Thread","conversations_Posts","conversations_Post","threads","posts","post","attachments","conversations_Senders","remover","plans_Plans","plans_Plan","photos_Photo","content","teams_Teams","description","teamProperties","groupProps","graph","groups","GroupType","Office365","gar","group","createTeam","team","teams_Team","setEndpoint","groups_Groups","groups_Group","mailNickname","groupType","additionalProperties","postBody","displayName","mailEnabled","securityEnabled","Security","groupTypes","calendar","owners","plans","members","conversations","acceptedSenders","rejectedSenders","photo","putCore","securityEnabledOnly","start","end","view","toISOString","onenote_OneNote","notebooks","onenote_Notebooks","sections","onenote_Sections","pages","onenote_Pages","onenote_Notebook","notebook","onenote_Section","section","contacts_Contacts","contacts_Contact","givenName","surName","emailAddresses","businessPhones","contact","contacts_ContactFolders","contacts_ContactFolder","parentFolderId","contactFolder","contacts","childFolders","contacts_ChildFolders","me_Me","onenote","contactFolders","users_Users","users_User","rest_GraphRest","teams","me","users","batch_GraphBatch","batchUrl","batchRequest","formatRequests","batchOptions","Accept","Content-Type","_parseResponse","parsedResponse","responses","chain","request","nextLink","reqInfo","requestFragment","graphResponse","parsedResponses","fill","responseId","Response","extractWebUrl","odataUrlFrom","candidate","parts","__metadata","uri","odata_SPODataEntityParserImpl","odata_SPODataEntityArrayParserImpl","spODataEntity","spODataEntityArray","CachedDigest","digests","digestcache_DigestCache","_httpClient","_digests","webUrl","cachedDigest","cache","credentials","splibconfig","GetContextWebInformation","newCachedDigest","FormDigestValue","seconds","FormDigestTimeoutSeconds","sphttpclient_SPHttpClient","_digestCache","getDigest","digest","setRetry","SiteUsers_1","metadata","type","sharepointqueryable_SharePointQueryable","_forceCaching","lastIndexOf","aliasedParams","labelName","dependencyDispose","addBatchDependency","toabsoluteurl","SharePointQueryableCollection","skip","sharepointqueryable_SharePointQueryableInstance","mapper","props","X-HTTP-Method","eTag","IF-Match","defaultPath","siteusers_SiteUsers","siteusers_SiteUser","loginName","su","concat","LoginName","getByLoginName","update","_update","user","_delete","sitegroups_SiteGroups","siteusers_CurrentUser","SiteGroups_1","PrincipalType","sg","sitegroups_SiteGroup","Id","groupName","retGroup","getParent","RoleAssignments_1","roles_RoleAssignments","ra","bindings","roles_RoleDefinitionBindings","principalId","roleDefId","roles_RoleDefinitions","roles_RoleDefinition","roleTypeKind","order","basePermissions","BasePermissions","Description","Name","Order","definition","retDef","getByName","ControlMode","FieldTypes","DateTimeFieldFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","PermissionKind","types_PrincipalType","PrincipalSource","RoleType","PageType","SharingLinkKind","SharingRole","SharingOperationStatusCode","SPSharedObjectType","SharingDomainRestrictionMode","RenderListDataOptions","FieldUserSelectionMode","ChoiceFieldFormatType","UrlZone","sharepointqueryablesecurable_SharePointQueryableSecurable","roleAssignments","firstUniqueAncestorSecurableObject","q","GetUserEffectivePermissions","getUserEffectivePermissions","copyRoleAssignments","clearSubscopes","permission","perms","hasPermissions","getCurrentUserEffectivePermissions","perm","FullMask","High","Low","sharepointqueryableshareable_SharePointQueryableShareable","kind","expString","createLink","emailData","settings","linkKind","loginNames","role","requireSignin","propagateAcl","userStr","Key","roleFilter","Edit","Contributor","Reader","def","includeAnonymousLinkInEmail","peoplePickerInput","roleValue","useSimplifiedRoles","emailBody","emailSubject","subject","sendEmail","bypass","sendShareObjectRequest","getRoleValue","recipients","shareId","Guest","getShareObjectWeb","expand","as","sharepointqueryableshareable_SharePointQueryableShareableWeb","View","dependency","shareObject","unshareObjectWeb","sharepointqueryableshareable_SharePointQueryableShareableItem","OrganizationView","getShareLink","shareWith","checkPermissions","getSharingInformation","getObjectSharingSettings","unshareObject","deleteLinkByKind","unshareLink","sharepointqueryableshareable_FileFolderShared","getShareable","shareable","sharepointqueryableshareable_SharePointQueryableShareableFile","sharepointqueryableshareable_SharePointQueryableShareableFolder","shareEverything","webparts_LimitedWebPartManager","webparts","webparts_WebPartDefinitions","webPartId","xml","webPartXml","webparts_WebPartDefinition","webpart","webparts_WebPart","zoneId","zoneIndex","Folders_1","folders_Folders","folders_Folder","folder","contentTypeOrder","files","files_Files","folders","listItemAllFields","parentFolder","serverRelativeUrl","uniqueContentTypeOrder","items_Item","destUrl","ServerRelativeUrl","srcUrl","webBaseUrl","hostUrl","methodUrl","ContentTypes_1","contenttypes_ContentTypes","contentTypeId","contentType","ct","contenttypes_ContentType","additionalSettings","assign","Group","StringValue","fieldLinks","contenttypes_FieldLinks","fields","workflowAssociations","fl","contenttypes_FieldLink","AttachmentFiles_1","attachmentfiles_AttachmentFiles","attachmentfiles_AttachmentFile","file","_deleteWithETag","getParsed","Views_1","ViewFields_1","views_Views","views_View","title","personalView","PersonalView","Title","views_ViewFields","fieldTitleOrInternalName","fieldInternalName","field","Fields_1","fields_Fields","fields_Field","SchemaXml","fieldType","maxLength","FieldTypeKind","MaxLength","formula","dateFormat","outputType","Text","DateFormat","Formula","OutputType","displayFormat","DateOnly","calendarType","Gregorian","friendlyDisplayFormat","DateTimeCalendarType","DisplayFormat","FriendlyDisplayFormat","minValue","maxValue","MinimumValue","MaximumValue","currencyLocalId","CurrencyLocaleId","numberOfLines","richText","restrictedMode","appendOnly","allowHyperlink","AllowHyperlink","AppendOnly","NumberOfLines","RestrictedMode","RichText","Hyperlink","selectionMode","SelectionMode","lookupListId","lookupFieldName","LookupFieldName","LookupListId","choices","Dropdown","fillIn","Choices","EditFormat","FillInChoice","show","forms_Forms","subscriptions_Subscriptions","subscriptionId","expirationDate","expirationDateTime","subscription","notificationUrl","clientState","UserCustomActions_1","usercustomactions_UserCustomActions","uca","action","Lists_1","lists_Lists","list","lists_List","template","enableContentTypes","addSettings","AllowContentTypes","BaseTemplate","ContentTypesEnabled","addOrUpdateSettings","created","contentTypes","items_Items","views","forms","defaultView","userCustomActions","effectiveBasePermissions","eventReceivers","relatedFields","informationRightsManagementSettings","subscriptions","rootFolder","viewId","retList","Recycle","viewXml","RenderListData","overrideParameters","itemId","formId","RenderListFormData","ReserveListItemId","ListItemEntityTypeFullName","formValues","decodedUrl","bNewDocumentUpdate","checkInComment","listItemCreateInfo","FolderPath","DecodedUrl","res","AddValidateUpdateItemUsingPath","Comments_1","Replies_1","comments_Comments","comments_Comment","replies","comments_Replies","Items_1","stringId","reverse","_parent","nextUrl","__next","PagedItemCollection","requestSize","acceptHeader","itemsCollector","gatherer","last","hasNext","getNext","getPaged","listItemEntityTypeFullName","removeDependency","ensureListItemEntityTypeName","listItemEntityType","candidatelistItemEntityTypeFullName","getListItemEntityTypeFullName","attachmentFiles","comments","effectiveBasePermissionsForUI","fieldValuesAsHTML","fieldValuesAsText","fieldValuesForEdit","files_File","versions","items_ItemVersions","items_ItemUpdatedParser","GetWOPIFrameUrl","newDocumentUpdate","versionId","items_ItemVersion","odata.etag","Files_1","Versions_1","shouldOverWrite","progress","chunkSize","setContentChunked","fileUrl","templateFileType","files_Versions","comment","uploadId","checkinType","CheckinType","Major","scope","WebPartsPersonalizationScope","Shared","moveOperations","MoveOperations","Overwrite","binaryStringResponseBody","fileSize","blockCount","blockNumber","currentPointer","stage","totalBlocks","startUpload","pointer","continueUpload","finishUpload","fragment","StartUpload","fileOffset","ContinueUpload","label","TemplateFileType","PromotedState","appcatalog_AppCatalog","appcatalog_App","filename","batch_SPBatch","statusRegExp","lines","line","trim","absoluteRequestUrl","batchBody","currentChangeSetId","castHeaders","ParseResponse","getNextOrder","collection","max","regexIndexOf","startpos","search","getBoundedDivMarkup","boundaryStartPattern","collector","blocks","cleanedHtml","startIndex","openCounter","searchIndex","nextDivOpen","nextCloseDiv","markup","reindex","columns","controls","clientsidepages_ClientSidePage","commentsDisabled","library","pageName","pageLayoutType","fs","pageServerRelPath","ServerRelativePath","addTemplateFile","ClientSidePage","far","BannerImageUrl","Url","CanvasContent1","ClientSideApplicationId","ContentTypeId","PageLayoutType","iar","CommentsDisabled","page","load","escapedString","escaped","unespace","clientsidepages_CanvasSection","toHtml","control","clientsidepages_CanvasColumn","fromHtml","mergeColumnToTree","clientsidepages_ClientSideWebpart","mergePartToTree","ClientSideText","updateProperties","setCommentsOn","findControl","predicate","on","column","controlData","sectionIndex","sectionFactor","addControl","_memId","defaultColumn","addColumn","factor","clientsidepages_CanvasControl","controlType","dataVersion","jsonData","jsonToEscapedString","getControlData","escapedStringToJson","displayMode","ClientSidePart","_text","startsWith","editorType","controlIndex","propertieJson","htmlProperties","serverProcessedContent","canvasDataVersion","part","import","component","manifest","Manifest","preconfiguredEntries","default","parseJsonProperties","instanceId","renderHtmlProperties","webPartData","setProperties","htmlProps","searchablePlainTexts","imageSources","links","navigation_NavigationNodes","node","navigation_NavigationNode","visible","IsVisible","nodeId","previousNodeId","children","navigation_Navigation","quicklaunch","topNavigationBar","navigation_NavigationService","menuNodeKey","depth","mapProviderName","customProperties","currentUrl","TimeZone_1","TimeZones_1","regionalsettings_RegionalSettings","installedLanguages","regionalsettings_InstalledLanguages","globalInstalledLanguages","timeZone","regionalsettings_TimeZone","timeZones","regionalsettings_TimeZones","utcTime","dateIsoString","UTCToLocalTime","localTime","getTimezoneOffset","LocalTimeToUTC","funcs","search_props","toPropCase","str","$1","SearchQueryBuilder","queryText","Proxy","Querytext","self","proxy","pk","mappedPk","propKey","search_Search","queryInit","parseQuery","HitHighlightedProperties","fixArrProp","Properties","RefinementFilters","ReorderingRules","SelectProperties","SortList","search_SearchResults","prop","finalQuery","toSearchQuery","rawResponse","_raw","_primary","postquery","ElapsedTime","RawSearchResults","RowCount","PrimaryQueryResult","RelevantResults","TotalRows","TotalRowsIncludingDuplicates","PrimarySearchResults","formatSearchResults","Table","Rows","pageNumber","pageSize","rows","RowLimit","StartRow","execute","rawResults","tempResults","tempResult","cells","Cells","cell","configurable","Value","writable","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","SearchBuiltInSourceId","Documents","ItemsMatchingContentType","ItemsMatchingTag","ItemsRelatedToCurrentUser","ItemsWithSameKeywordAsThisItem","LocalPeopleResults","LocalReportsAndDataResults","LocalSharePointResults","LocalVideoResults","Pages","Pictures","Popular","RecentlyChangedItems","RecommendedItems","Wiki","searchsuggest_SearchSuggest","mapQueryToQueryString","suggest","PeopleNames","PersonalResults","Queries","querytext","querySetter","checkProp","sp","setProp","Features_1","features_Features","force","featdefScope","featureId","feature","features_Feature","remove","DefinitionId","RelatedItemManagerImpl_1","relateditems_RelatedItemManagerImpl","sourceListName","sourceItemId","SourceItemID","SourceListName","sourceWebUrl","targetListName","targetItemID","targetWebUrl","tryAddReverseLink","SourceWebUrl","TargetItemID","TargetListName","TargetWebUrl","TryAddReverseLink","targetItemUrl","TargetItemUrl","sourceItemUrl","targetItemId","SourceItemUrl","tryDeleteReverseLink","TryDeleteReverseLink","Webs_1","Web_1","webs_Webs","language","inheritPermissions","Language","UseSamePermissionsAsParentSite","WebTemplate","webs_Web","webs_WebInfos","webs","ParentWeb","site_Site","openWebById","nWebTemplateFilter","nConfigurationFilter","allProperties","webinfos","features","availablefields","navigation","siteUsers","siteGroups","siteUserInfoList","regionalSettings","currentUser","roleDefinitions","relatedItems","FromUrl","associatedOwnerGroup","associatedMemberGroup","associatedVisitorGroup","defaultDocumentLibrary","folderRelativeUrl","fileRelativeUrl","listRelativeUrl","colorPaletteUrl","fontSchemeUrl","backgroundImageUrl","shareGenerated","logonName","includeCrossLanugage","customListTemplate","progId","libraryTitle","listRelativePath","getList","Site_1","rootWeb","SupportedSchemaVersions","absoluteWebUrl","GetDocumentLibraries","absolutePageUrl","GetWebUrlFromPageUrl","webId","fromUrl","ProfileLoader_1","ClientPeoplePickerQuery_1","userprofiles_UserProfileQuery","clientPeoplePickerQuery","userprofiles_ClientPeoplePickerQuery","profileLoader","userprofiles_ProfileLoader","editProfileLink","isMyPeopleListPublic","maxCount","myFollowers","myProperties","trendingTags","propertyName","follower","followee","profilePicSource","reader","FileReader","onload","readAsArrayBuffer","Uint16Array","accountName","propertyValue","propertyValues","emails","createPersonalSiteEnqueueBulk","ownerUserProfile","userProfile","interactiveRequest","createPersonalSite","share","shareAllSocialData","queryParams","clientPeoplePickerResolveUser","clientPeoplePickerSearchUser","emailIDs","createClientPeoplePickerQueryParametersRequestBody","ClientPeoplePickerResolveUser","ClientPeoplePickerSearchUser","SocialQuery_1","MySocialQuery_1","social_SocialQuery","my","social_MySocialQuery","FollowedSitesUri","FollowedDocumentsUri","actorInfo","createSocialActorInfoRequestBody","actor","types","Followed","FollowedCount","Followers","Suggestions","SocialActorType","SocialActorTypes","SocialFollowResult","SocialStatusCode","utilities_UtilityMethod","methodName","getBaseUrl","Body","From","Subject","To","CC","BCC","AdditionalHeaders","excute","input","scopes","sources","inputIsEmailOnly","addToUserInfoList","matchUserInfoList","pageAddress","inputs","rest_SPRest","_baseUrl","usingCaching","site","profiles","social","createBatch","utility","fm","sprestaddin_sp","addInWebUrl","hostWebUrl","_cdImpl","urlPart","pnpjs_sp","pnpjs_graph","pnpjs_config","pnpjs_setup","pnpjs"],"mappings":"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","file":"pnpjs.es5.umd.bundle.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pnp\"] = factory();\n\telse\n\t\troot[\"pnp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","import { BearerTokenFetchClient } from \"./netutil\";\r\nimport { combine, isUrlAbsolute } from \"./util\";\r\n// @ts-ignore\r\nimport * as adal from \"adal-angular/dist/adal.min.js\";\r\n/**\r\n * Azure AD Client for use in the browser\r\n */\r\nexport class AdalClient extends BearerTokenFetchClient {\r\n    /**\r\n     * Creates a new instance of AdalClient\r\n     * @param clientId Azure App Id\r\n     * @param tenant Office 365 tenant (Ex: {tenant}.onmicrosoft.com)\r\n     * @param redirectUri The redirect url used to authenticate the\r\n     */\r\n    constructor(clientId, tenant, redirectUri) {\r\n        super(null);\r\n        this.clientId = clientId;\r\n        this.tenant = tenant;\r\n        this.redirectUri = redirectUri;\r\n        this._displayCallback = null;\r\n        this._loginPromise = null;\r\n    }\r\n    /**\r\n     * Creates a new AdalClient using the values of the supplied SPFx context\r\n     *\r\n     * @param spfxContext Current SPFx context\r\n     * @param clientId Optional client id to use instead of the built-in SPFx id\r\n     * @description Using this method and the default clientId requires that the features described in\r\n     * this article https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aadhttpclient are activated in the tenant. If not you can\r\n     * creat your own app, grant permissions and use that clientId here along with the SPFx context\r\n     */\r\n    static fromSPFxContext(spfxContext, cliendId = \"c58637bb-e2e1-4312-8a00-04b5ffcd3403\") {\r\n        // this \"magic\" client id is the one to which permissions are granted behind the scenes\r\n        // this redirectUrl is the page as used by spfx\r\n        return new AdalClient(cliendId, spfxContext.pageContext.aadInfo.tenantId.toString(), combine(window.location.origin, \"/_forms/spfxsinglesignon.aspx\"));\r\n    }\r\n    /**\r\n     * Conducts the fetch opertation against the AAD secured resource\r\n     *\r\n     * @param url Absolute URL for the request\r\n     * @param options Any fetch options passed to the underlying fetch implementation\r\n     */\r\n    fetch(url, options) {\r\n        if (!isUrlAbsolute(url)) {\r\n            throw Error(\"You must supply absolute urls to AdalClient.fetch.\");\r\n        }\r\n        // the url we are calling is the resource\r\n        return this.getToken(this.getResource(url)).then(token => {\r\n            this.token = token;\r\n            return super.fetch(url, options);\r\n        });\r\n    }\r\n    /**\r\n     * Gets a token based on the current user\r\n     *\r\n     * @param resource The resource for which we are requesting a token\r\n     */\r\n    getToken(resource) {\r\n        return new Promise((resolve, reject) => {\r\n            this.ensureAuthContext().then(_ => this.login()).then(_ => {\r\n                AdalClient._authContext.acquireToken(resource, (message, token) => {\r\n                    if (message) {\r\n                        return reject(Error(message));\r\n                    }\r\n                    resolve(token);\r\n                });\r\n            }).catch(reject);\r\n        });\r\n    }\r\n    /**\r\n     * Ensures we have created and setup the adal AuthenticationContext instance\r\n     */\r\n    ensureAuthContext() {\r\n        return new Promise(resolve => {\r\n            if (AdalClient._authContext === null) {\r\n                AdalClient._authContext = adal.inject({\r\n                    clientId: this.clientId,\r\n                    displayCall: (url) => {\r\n                        if (this._displayCallback) {\r\n                            this._displayCallback(url);\r\n                        }\r\n                    },\r\n                    navigateToLoginRequestUrl: false,\r\n                    redirectUri: this.redirectUri,\r\n                    tenant: this.tenant,\r\n                });\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n    /**\r\n     * Ensures the current user is logged in\r\n     */\r\n    login() {\r\n        if (this._loginPromise) {\r\n            return this._loginPromise;\r\n        }\r\n        this._loginPromise = new Promise((resolve, reject) => {\r\n            if (AdalClient._authContext.getCachedUser()) {\r\n                return resolve();\r\n            }\r\n            this._displayCallback = (url) => {\r\n                const popupWindow = window.open(url, \"login\", \"width=483, height=600\");\r\n                if (!popupWindow) {\r\n                    return reject(Error(\"Could not open pop-up window for auth. Likely pop-ups are blocked by the browser.\"));\r\n                }\r\n                if (popupWindow && popupWindow.focus) {\r\n                    popupWindow.focus();\r\n                }\r\n                const pollTimer = window.setInterval(() => {\r\n                    if (!popupWindow || popupWindow.closed || popupWindow.closed === undefined) {\r\n                        window.clearInterval(pollTimer);\r\n                    }\r\n                    try {\r\n                        if (popupWindow.document.URL.indexOf(this.redirectUri) !== -1) {\r\n                            window.clearInterval(pollTimer);\r\n                            AdalClient._authContext.handleWindowCallback(popupWindow.location.hash);\r\n                            popupWindow.close();\r\n                            resolve();\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        reject(e);\r\n                    }\r\n                }, 30);\r\n            };\r\n            // this triggers the login process\r\n            this.ensureAuthContext().then(_ => {\r\n                AdalClient._authContext._loginInProgress = false;\r\n                AdalClient._authContext.login();\r\n                this._displayCallback = null;\r\n            });\r\n        });\r\n        return this._loginPromise;\r\n    }\r\n    /**\r\n     * Parses out the root of the request url to use as the resource when getting the token\r\n     *\r\n     * After: https://gist.github.com/jlong/2428561\r\n     * @param url The url to parse\r\n     */\r\n    getResource(url) {\r\n        const parser = document.createElement(\"a\");\r\n        parser.href = url;\r\n        return `${parser.protocol}//${parser.hostname}`;\r\n    }\r\n}\r\n/**\r\n * Our auth context\r\n */\r\nAdalClient._authContext = null;\r\n//# sourceMappingURL=adalclient.js.map","import { isFunc } from \"./util\";\r\n/**\r\n * Used to calculate the object properties, with polyfill if needed\r\n */\r\nconst objectEntries = isFunc(Object.entries) ? Object.entries : (o) => Object.keys(o).map((k) => [k, o[k]]);\r\n/**\r\n * Converts the supplied object to a map\r\n *\r\n * @param o The object to map\r\n */\r\nexport function objectToMap(o) {\r\n    if (o !== undefined && o !== null) {\r\n        return new Map(objectEntries(o));\r\n    }\r\n    return new Map();\r\n}\r\n/**\r\n * Merges to Map instances together, overwriting values in target with matching keys, last in wins\r\n *\r\n * @param target map into which the other maps are merged\r\n * @param maps One or more maps to merge into the target\r\n */\r\nexport function mergeMaps(target, ...maps) {\r\n    for (let i = 0; i < maps.length; i++) {\r\n        maps[i].forEach((v, k) => {\r\n            target.set(k, v);\r\n        });\r\n    }\r\n    return target;\r\n}\r\n//# sourceMappingURL=collections.js.map","import { mergeMaps, objectToMap } from \"./collections\";\r\nexport function setup(config) {\r\n    RuntimeConfig.extend(config);\r\n}\r\n// lable mapping for known config values\r\nconst s = [\r\n    \"defaultCachingStore\",\r\n    \"defaultCachingTimeoutSeconds\",\r\n    \"globalCacheDisable\",\r\n    \"enableCacheExpiration\",\r\n    \"cacheExpirationIntervalMilliseconds\",\r\n    \"spfxContext\",\r\n];\r\nexport class RuntimeConfigImpl {\r\n    constructor(_v = new Map()) {\r\n        this._v = _v;\r\n        // setup defaults\r\n        this._v.set(s[0], \"session\");\r\n        this._v.set(s[1], 60);\r\n        this._v.set(s[2], false);\r\n        this._v.set(s[3], false);\r\n        this._v.set(s[4], 750);\r\n        this._v.set(s[5], null);\r\n    }\r\n    /**\r\n     *\r\n     * @param config The set of properties to add to the globa configuration instance\r\n     */\r\n    extend(config) {\r\n        this._v = mergeMaps(this._v, objectToMap(config));\r\n    }\r\n    get(key) {\r\n        return this._v.get(key);\r\n    }\r\n    get defaultCachingStore() {\r\n        return this.get(s[0]);\r\n    }\r\n    get defaultCachingTimeoutSeconds() {\r\n        return this.get(s[1]);\r\n    }\r\n    get globalCacheDisable() {\r\n        return this.get(s[2]);\r\n    }\r\n    get enableCacheExpiration() {\r\n        return this.get(s[3]);\r\n    }\r\n    get cacheExpirationIntervalMilliseconds() {\r\n        return this.get(s[4]);\r\n    }\r\n    get spfxContext() {\r\n        return this.get(s[5]);\r\n    }\r\n}\r\nconst _runtimeConfig = new RuntimeConfigImpl();\r\nexport let RuntimeConfig = _runtimeConfig;\r\n//# sourceMappingURL=libconfig.js.map","import { dateAdd, getCtxCallback, jsS, objectDefinedNotNull } from \"./util\";\r\nimport { RuntimeConfig } from \"./libconfig\";\r\n/**\r\n * A wrapper class to provide a consistent interface to browser based storage\r\n *\r\n */\r\nexport class PnPClientStorageWrapper {\r\n    /**\r\n     * Creates a new instance of the PnPClientStorageWrapper class\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(store, defaultTimeoutMinutes = -1) {\r\n        this.store = store;\r\n        this.defaultTimeoutMinutes = defaultTimeoutMinutes;\r\n        this.enabled = this.test();\r\n        // if the cache timeout is enabled call the handler\r\n        // this will clear any expired items and set the timeout function\r\n        if (RuntimeConfig.enableCacheExpiration) {\r\n            this.cacheExpirationHandler();\r\n        }\r\n    }\r\n    /**\r\n     * Get a value from storage, or null if that value does not exist\r\n     *\r\n     * @param key The key whose value we want to retrieve\r\n     */\r\n    get(key) {\r\n        if (!this.enabled) {\r\n            return null;\r\n        }\r\n        const o = this.store.getItem(key);\r\n        if (!objectDefinedNotNull(o)) {\r\n            return null;\r\n        }\r\n        const persistable = JSON.parse(o);\r\n        if (new Date(persistable.expiration) <= new Date()) {\r\n            this.delete(key);\r\n            return null;\r\n        }\r\n        else {\r\n            return persistable.value;\r\n        }\r\n    }\r\n    /**\r\n     * Adds a value to the underlying storage\r\n     *\r\n     * @param key The key to use when storing the provided value\r\n     * @param o The value to store\r\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\r\n     */\r\n    put(key, o, expire) {\r\n        if (this.enabled) {\r\n            this.store.setItem(key, this.createPersistable(o, expire));\r\n        }\r\n    }\r\n    /**\r\n     * Deletes a value from the underlying storage\r\n     *\r\n     * @param key The key of the pair we want to remove from storage\r\n     */\r\n    delete(key) {\r\n        if (this.enabled) {\r\n            this.store.removeItem(key);\r\n        }\r\n    }\r\n    /**\r\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\r\n     *\r\n     * @param key The key to use when storing the provided value\r\n     * @param getter A function which will upon execution provide the desired value\r\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\r\n     */\r\n    getOrPut(key, getter, expire) {\r\n        if (!this.enabled) {\r\n            return getter();\r\n        }\r\n        return new Promise((resolve) => {\r\n            const o = this.get(key);\r\n            if (o == null) {\r\n                getter().then((d) => {\r\n                    this.put(key, d, expire);\r\n                    resolve(d);\r\n                });\r\n            }\r\n            else {\r\n                resolve(o);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\r\n     */\r\n    deleteExpired() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.enabled) {\r\n                resolve();\r\n            }\r\n            try {\r\n                for (let i = 0; i < this.store.length; i++) {\r\n                    const key = this.store.key(i);\r\n                    if (key !== null) {\r\n                        // test the stored item to see if we stored it\r\n                        if (/[\"|']?pnp[\"|']? ?: ?1/i.test(this.store.getItem(key))) {\r\n                            // get those items as get will delete from cache if they are expired\r\n                            this.get(key);\r\n                        }\r\n                    }\r\n                }\r\n                resolve();\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Used to determine if the wrapped storage is available currently\r\n     */\r\n    test() {\r\n        const str = \"t\";\r\n        try {\r\n            this.store.setItem(str, str);\r\n            this.store.removeItem(str);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Creates the persistable to store\r\n     */\r\n    createPersistable(o, expire) {\r\n        if (expire === undefined) {\r\n            // ensure we are by default inline with the global library setting\r\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\r\n            if (this.defaultTimeoutMinutes > 0) {\r\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\r\n            }\r\n            expire = dateAdd(new Date(), \"second\", defaultTimeout);\r\n        }\r\n        return jsS({ pnp: 1, expiration: expire, value: o });\r\n    }\r\n    /**\r\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\r\n     */\r\n    cacheExpirationHandler() {\r\n        this.deleteExpired().then(_ => {\r\n            // call ourself in the future\r\n            setTimeout(getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\r\n        }).catch(e => {\r\n            console.error(e);\r\n        });\r\n    }\r\n}\r\n/**\r\n * A thin implementation of in-memory storage for use in nodejs\r\n */\r\nclass MemoryStorage {\r\n    constructor(_store = new Map()) {\r\n        this._store = _store;\r\n    }\r\n    get length() {\r\n        return this._store.size;\r\n    }\r\n    clear() {\r\n        this._store.clear();\r\n    }\r\n    getItem(key) {\r\n        return this._store.get(key);\r\n    }\r\n    key(index) {\r\n        return Array.from(this._store)[index][0];\r\n    }\r\n    removeItem(key) {\r\n        this._store.delete(key);\r\n    }\r\n    setItem(key, data) {\r\n        this._store.set(key, data);\r\n    }\r\n}\r\n/**\r\n * A class that will establish wrappers for both local and session storage\r\n */\r\nexport class PnPClientStorage {\r\n    /**\r\n     * Creates a new instance of the PnPClientStorage class\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(_local = null, _session = null) {\r\n        this._local = _local;\r\n        this._session = _session;\r\n    }\r\n    /**\r\n     * Provides access to the local storage of the browser\r\n     */\r\n    get local() {\r\n        if (this._local === null) {\r\n            this._local = this.getStore(\"local\");\r\n        }\r\n        return this._local;\r\n    }\r\n    /**\r\n     * Provides access to the session storage of the browser\r\n     */\r\n    get session() {\r\n        if (this._session === null) {\r\n            this._session = this.getStore(\"session\");\r\n        }\r\n        return this._session;\r\n    }\r\n    getStore(name) {\r\n        if (name === \"local\") {\r\n            return new PnPClientStorageWrapper(typeof (localStorage) === \"undefined\" ? new MemoryStorage() : localStorage);\r\n        }\r\n        return new PnPClientStorageWrapper(typeof (sessionStorage) === \"undefined\" ? new MemoryStorage() : sessionStorage);\r\n    }\r\n}\r\n//# sourceMappingURL=storage.js.map","export * from \"./src/common\";\r\n//# sourceMappingURL=index.js.map","/**\r\n * Gets a callback function which will maintain context across async calls.\r\n * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\r\n *\r\n * @param context The object that will be the 'this' value in the callback\r\n * @param method The method to which we will apply the context and parameters\r\n * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\r\n */\r\nexport function getCtxCallback(context, method, ...params) {\r\n    return function () {\r\n        method.apply(context, params);\r\n    };\r\n}\r\n/**\r\n * Adds a value to a date\r\n *\r\n * @param date The date to which we will add units, done in local time\r\n * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\r\n * @param units The amount to add to date of the given interval\r\n *\r\n * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\r\n */\r\nexport function dateAdd(date, interval, units) {\r\n    let ret = new Date(date); // don't change original date\r\n    switch (interval.toLowerCase()) {\r\n        case \"year\":\r\n            ret.setFullYear(ret.getFullYear() + units);\r\n            break;\r\n        case \"quarter\":\r\n            ret.setMonth(ret.getMonth() + 3 * units);\r\n            break;\r\n        case \"month\":\r\n            ret.setMonth(ret.getMonth() + units);\r\n            break;\r\n        case \"week\":\r\n            ret.setDate(ret.getDate() + 7 * units);\r\n            break;\r\n        case \"day\":\r\n            ret.setDate(ret.getDate() + units);\r\n            break;\r\n        case \"hour\":\r\n            ret.setTime(ret.getTime() + units * 3600000);\r\n            break;\r\n        case \"minute\":\r\n            ret.setTime(ret.getTime() + units * 60000);\r\n            break;\r\n        case \"second\":\r\n            ret.setTime(ret.getTime() + units * 1000);\r\n            break;\r\n        default:\r\n            ret = undefined;\r\n            break;\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * Combines an arbitrary set of paths ensuring and normalizes the slashes\r\n *\r\n * @param paths 0 to n path parts to combine\r\n */\r\nexport function combine(...paths) {\r\n    return paths\r\n        .filter(path => !stringIsNullOrEmpty(path))\r\n        .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\r\n        .join(\"/\")\r\n        .replace(/\\\\/g, \"/\");\r\n}\r\n/**\r\n * Gets a random string of chars length\r\n *\r\n * https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\r\n *\r\n * @param chars The length of the random string to generate\r\n */\r\nexport function getRandomString(chars) {\r\n    const text = new Array(chars);\r\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (let i = 0; i < chars; i++) {\r\n        text[i] = possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text.join(\"\");\r\n}\r\n/**\r\n * Gets a random GUID value\r\n *\r\n * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n */\r\n/* tslint:disable no-bitwise */\r\nexport function getGUID() {\r\n    let d = new Date().getTime();\r\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n        const r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n    });\r\n    return guid;\r\n}\r\n/* tslint:enable */\r\n/**\r\n * Determines if a given value is a function\r\n *\r\n * @param cf The thing to test for functionness\r\n */\r\nexport function isFunc(cf) {\r\n    return typeof cf === \"function\";\r\n}\r\n/**\r\n * Determines if an object is both defined and not null\r\n * @param obj Object to test\r\n */\r\nexport function objectDefinedNotNull(obj) {\r\n    return typeof obj !== \"undefined\" && obj !== null;\r\n}\r\n/**\r\n * @returns whether the provided parameter is a JavaScript Array or not.\r\n*/\r\nexport function isArray(array) {\r\n    if (Array.isArray) {\r\n        return Array.isArray(array);\r\n    }\r\n    return array && typeof array.length === \"number\" && array.constructor === Array;\r\n}\r\n/**\r\n * Provides functionality to extend the given object by doing a shallow copy\r\n *\r\n * @param target The object to which properties will be copied\r\n * @param source The source object from which properties will be copied\r\n * @param noOverwrite If true existing properties on the target are not overwritten from the source\r\n * @param filter If provided allows additional filtering on what properties are copied (propName: string) => boolean\r\n *\r\n */\r\nexport function extend(target, source, noOverwrite = false, filter = () => true) {\r\n    if (!objectDefinedNotNull(source)) {\r\n        return target;\r\n    }\r\n    // ensure we don't overwrite things we don't want overwritten\r\n    const check = noOverwrite ? (o, i) => !(i in o) : () => true;\r\n    // final filter we will use\r\n    const f = (v) => check(target, v) && filter(v);\r\n    return Object.getOwnPropertyNames(source)\r\n        .filter(f)\r\n        .reduce((t, v) => {\r\n        t[v] = source[v];\r\n        return t;\r\n    }, target);\r\n}\r\n/**\r\n * Determines if a given url is absolute\r\n *\r\n * @param url The url to check to see if it is absolute\r\n */\r\nexport function isUrlAbsolute(url) {\r\n    return /^https?:\\/\\/|^\\/\\//i.test(url);\r\n}\r\n/**\r\n * Determines if a string is null or empty or undefined\r\n *\r\n * @param s The string to test\r\n */\r\nexport function stringIsNullOrEmpty(s) {\r\n    return s === undefined || s === null || s.length < 1;\r\n}\r\n/**\r\n * Gets an attribute value from an html/xml string block. NOTE: if the input attribute value has\r\n * RegEx special characters they will be escaped in the returned string\r\n *\r\n * @param html HTML to search\r\n * @param attrName The name of the attribute to find\r\n */\r\nexport function getAttrValueFromString(html, attrName) {\r\n    // make the input safe for regex\r\n    html = html.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n    const reg = new RegExp(`${attrName}\\\\s*?=\\\\s*?(\"|')([^\\\\1]*?)\\\\1`, \"i\");\r\n    const match = reg.exec(html);\r\n    return match !== null && match.length > 0 ? match[2] : null;\r\n}\r\n/**\r\n * Ensures guid values are represented consistently as \"ea123463-137d-4ae3-89b8-cf3fc578ca05\"\r\n *\r\n * @param guid The candidate guid\r\n */\r\nexport function sanitizeGuid(guid) {\r\n    if (stringIsNullOrEmpty(guid)) {\r\n        return guid;\r\n    }\r\n    const matches = /([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})/i.exec(guid);\r\n    return matches === null ? guid : matches[1];\r\n}\r\n/**\r\n * Shorthand for oToS\r\n *\r\n * @param o Any type of object\r\n */\r\nexport function jsS(o) {\r\n    return JSON.stringify(o);\r\n}\r\n/**\r\n * Shorthand for Object.hasOwnProperty\r\n *\r\n * @param o Object to check for\r\n * @param p Name of the property\r\n */\r\nexport function hOP(o, p) {\r\n    return Object.hasOwnProperty.call(o, p);\r\n}\r\n/**\r\n * Generates a ~unique hash code for this ObjectPathQueue\r\n *\r\n * From: https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript\r\n */\r\n// tslint:disable:no-bitwise\r\nexport function getHashCode(s) {\r\n    let hash = 0;\r\n    if (s.length === 0) {\r\n        return hash;\r\n    }\r\n    for (let i = 0; i < s.length; i++) {\r\n        const chr = s.charCodeAt(i);\r\n        hash = ((hash << 5) - hash) + chr;\r\n        hash |= 0; // Convert to 32bit integer\r\n    }\r\n    return hash;\r\n}\r\n// tslint:enable:no-bitwise\r\n//# sourceMappingURL=util.js.map","import { RuntimeConfig, FetchClient, } from \"@pnp/common\";\r\nexport function setup(config) {\r\n    RuntimeConfig.extend(config);\r\n}\r\nexport class SPRuntimeConfigImpl {\r\n    get headers() {\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (spPart !== undefined && spPart.headers !== undefined) {\r\n            return spPart.headers;\r\n        }\r\n        return {};\r\n    }\r\n    get baseUrl() {\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (spPart !== undefined && spPart.baseUrl !== undefined) {\r\n            return spPart.baseUrl;\r\n        }\r\n        if (RuntimeConfig.spfxContext !== undefined && RuntimeConfig.spfxContext !== null) {\r\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\r\n        }\r\n        return null;\r\n    }\r\n    get fetchClientFactory() {\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        // use a configured factory firt\r\n        if (spPart !== undefined && spPart.fetchClientFactory !== undefined) {\r\n            return spPart.fetchClientFactory;\r\n        }\r\n        else {\r\n            return () => new FetchClient();\r\n        }\r\n    }\r\n}\r\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\r\n//# sourceMappingURL=splibconfig.js.map","import { combine, isUrlAbsolute, hOP } from \"@pnp/common\";\r\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\r\n/**\r\n * Ensures that a given url is absolute for the current web based on context\r\n *\r\n * @param candidateUrl The url to make absolute\r\n *\r\n */\r\nexport function toAbsoluteUrl(candidateUrl) {\r\n    return new Promise((resolve) => {\r\n        if (isUrlAbsolute(candidateUrl)) {\r\n            // if we are already absolute, then just return the url\r\n            return resolve(candidateUrl);\r\n        }\r\n        if (SPRuntimeConfig.baseUrl !== null) {\r\n            // base url specified either with baseUrl of spfxContext config property\r\n            return resolve(combine(SPRuntimeConfig.baseUrl, candidateUrl));\r\n        }\r\n        if (global._spPageContextInfo !== undefined) {\r\n            // operating in classic pages\r\n            if (hOP(global._spPageContextInfo, \"webAbsoluteUrl\")) {\r\n                return resolve(combine(global._spPageContextInfo.webAbsoluteUrl, candidateUrl));\r\n            }\r\n            else if (hOP(global._spPageContextInfo, \"webServerRelativeUrl\")) {\r\n                return resolve(combine(global._spPageContextInfo.webServerRelativeUrl, candidateUrl));\r\n            }\r\n        }\r\n        // does window.location exist and have a certain path part in it?\r\n        if (global.location !== undefined) {\r\n            const baseUrl = global.location.toString().toLowerCase();\r\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s) => {\r\n                const index = baseUrl.indexOf(s);\r\n                if (index > 0) {\r\n                    return resolve(combine(baseUrl.substr(0, index), candidateUrl));\r\n                }\r\n            });\r\n        }\r\n        return resolve(candidateUrl);\r\n    });\r\n}\r\n//# sourceMappingURL=toabsoluteurl.js.map","import { extend, objectDefinedNotNull } from \"./util\";\r\nexport function mergeHeaders(target, source) {\r\n    if (source !== undefined && source !== null) {\r\n        const temp = new Request(\"\", { headers: source });\r\n        temp.headers.forEach((value, name) => {\r\n            target.append(name, value);\r\n        });\r\n    }\r\n}\r\nexport function mergeOptions(target, source) {\r\n    if (objectDefinedNotNull(source)) {\r\n        const headers = extend(target.headers || {}, source.headers);\r\n        target = extend(target, source);\r\n        target.headers = headers;\r\n    }\r\n}\r\n/**\r\n * Makes requests using the global/window fetch API\r\n */\r\nexport class FetchClient {\r\n    fetch(url, options) {\r\n        return global.fetch(url, options);\r\n    }\r\n}\r\n/**\r\n * Makes requests using the fetch API adding the supplied token to the Authorization header\r\n */\r\nexport class BearerTokenFetchClient extends FetchClient {\r\n    constructor(_token) {\r\n        super();\r\n        this._token = _token;\r\n    }\r\n    get token() {\r\n        return this._token || \"\";\r\n    }\r\n    set token(token) {\r\n        this._token = token;\r\n    }\r\n    fetch(url, options = {}) {\r\n        const headers = new Headers();\r\n        mergeHeaders(headers, options.headers);\r\n        headers.set(\"Authorization\", `Bearer ${this._token}`);\r\n        options.headers = headers;\r\n        return super.fetch(url, options);\r\n    }\r\n}\r\n//# sourceMappingURL=netutil.js.map","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/*! adal-angular v1.0.17 2018-02-27 */\r\nvar AuthenticationContext=function(){\"use strict\";return AuthenticationContext=function(a){if(this.REQUEST_TYPE={LOGIN:\"LOGIN\",RENEW_TOKEN:\"RENEW_TOKEN\",UNKNOWN:\"UNKNOWN\"},this.RESPONSE_TYPE={ID_TOKEN_TOKEN:\"id_token token\",TOKEN:\"token\"},this.CONSTANTS={ACCESS_TOKEN:\"access_token\",EXPIRES_IN:\"expires_in\",ID_TOKEN:\"id_token\",ERROR_DESCRIPTION:\"error_description\",SESSION_STATE:\"session_state\",ERROR:\"error\",STORAGE:{TOKEN_KEYS:\"adal.token.keys\",ACCESS_TOKEN_KEY:\"adal.access.token.key\",EXPIRATION_KEY:\"adal.expiration.key\",STATE_LOGIN:\"adal.state.login\",STATE_RENEW:\"adal.state.renew\",NONCE_IDTOKEN:\"adal.nonce.idtoken\",SESSION_STATE:\"adal.session.state\",USERNAME:\"adal.username\",IDTOKEN:\"adal.idtoken\",ERROR:\"adal.error\",ERROR_DESCRIPTION:\"adal.error.description\",LOGIN_REQUEST:\"adal.login.request\",LOGIN_ERROR:\"adal.login.error\",RENEW_STATUS:\"adal.token.renew.status\",ANGULAR_LOGIN_REQUEST:\"adal.angular.login.request\"},RESOURCE_DELIMETER:\"|\",CACHE_DELIMETER:\"||\",LOADFRAME_TIMEOUT:6e3,TOKEN_RENEW_STATUS_CANCELED:\"Canceled\",TOKEN_RENEW_STATUS_COMPLETED:\"Completed\",TOKEN_RENEW_STATUS_IN_PROGRESS:\"In Progress\",LOGGING_LEVEL:{ERROR:0,WARN:1,INFO:2,VERBOSE:3},LEVEL_STRING_MAP:{0:\"ERROR:\",1:\"WARNING:\",2:\"INFO:\",3:\"VERBOSE:\"},POPUP_WIDTH:483,POPUP_HEIGHT:600},AuthenticationContext.prototype._singletonInstance)return AuthenticationContext.prototype._singletonInstance;if(AuthenticationContext.prototype._singletonInstance=this,this.instance=\"https://login.microsoftonline.com/\",this.config={},this.callback=null,this.popUp=!1,this.isAngular=!1,this._user=null,this._activeRenewals={},this._loginInProgress=!1,this._acquireTokenInProgress=!1,this._renewStates=[],this._callBackMappedToRenewStates={},this._callBacksMappedToRenewStates={},this._openedWindows=[],this._requestType=this.REQUEST_TYPE.LOGIN,window._adalInstance=this,a.displayCall&&\"function\"!=typeof a.displayCall)throw new Error(\"displayCall is not a function\");if(!a.clientId)throw new Error(\"clientId is required\");this.config=this._cloneConfig(a),void 0===this.config.navigateToLoginRequestUrl&&(this.config.navigateToLoginRequestUrl=!0),this.config.popUp&&(this.popUp=!0),this.config.callback&&\"function\"==typeof this.config.callback&&(this.callback=this.config.callback),this.config.instance&&(this.instance=this.config.instance),this.config.loginResource||(this.config.loginResource=this.config.clientId),this.config.redirectUri||(this.config.redirectUri=window.location.href.split(\"?\")[0].split(\"#\")[0]),this.config.postLogoutRedirectUri||(this.config.postLogoutRedirectUri=window.location.href.split(\"?\")[0].split(\"#\")[0]),this.config.anonymousEndpoints||(this.config.anonymousEndpoints=[]),this.config.isAngular&&(this.isAngular=this.config.isAngular),this.config.loadFrameTimeout&&(this.CONSTANTS.LOADFRAME_TIMEOUT=this.config.loadFrameTimeout)},\"undefined\"!=typeof window&&(window.Logging={piiLoggingEnabled:!1,level:0,log:function(a){}}),AuthenticationContext.prototype.login=function(){if(this._loginInProgress)return void this.info(\"Login in progress\");this._loginInProgress=!0;var a=this._guid();this.config.state=a,this._idTokenNonce=this._guid();var b=this._getItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST);b&&\"\"!==b?this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST,\"\"):b=window.location.href,this.verbose(\"Expected state: \"+a+\" startPage:\"+b),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,b),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,a,!0),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\");var c=this._getNavigateUrl(\"id_token\",null)+\"&nonce=\"+encodeURIComponent(this._idTokenNonce);this.config.displayCall?this.config.displayCall(c):this.popUp?(this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,\"\"),this._renewStates.push(a),this.registerCallback(a,this.config.clientId,this.callback),this._loginPopup(c)):this.promptUser(c)},AuthenticationContext.prototype._openPopup=function(a,b,c,d){try{var e=window.screenLeft?window.screenLeft:window.screenX,f=window.screenTop?window.screenTop:window.screenY,g=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,h=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,i=g/2-c/2+e,j=h/2-d/2+f,k=window.open(a,b,\"width=\"+c+\", height=\"+d+\", top=\"+j+\", left=\"+i);return k.focus&&k.focus(),k}catch(a){return this.warn(\"Error opening popup, \"+a.message),this._loginInProgress=!1,this._acquireTokenInProgress=!1,null}},AuthenticationContext.prototype._handlePopupError=function(a,b,c,d,e){this.warn(d),this._saveItem(this.CONSTANTS.STORAGE.ERROR,c),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,d),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,e),b&&this._activeRenewals[b]&&(this._activeRenewals[b]=null),this._loginInProgress=!1,this._acquireTokenInProgress=!1,a&&a(d,null,c)},AuthenticationContext.prototype._loginPopup=function(a,b,c){var d=this._openPopup(a,\"login\",this.CONSTANTS.POPUP_WIDTH,this.CONSTANTS.POPUP_HEIGHT),e=c||this.callback;if(null==d){var f=\"Popup Window is null. This can happen if you are using IE\";return void this._handlePopupError(e,b,\"Error opening popup\",f,f)}if(this._openedWindows.push(d),-1!=this.config.redirectUri.indexOf(\"#\"))var g=this.config.redirectUri.split(\"#\")[0];else var g=this.config.redirectUri;var h=this,i=window.setInterval(function(){if(!d||d.closed||void 0===d.closed){var a=\"Popup Window closed\",c=\"Popup Window closed by UI action/ Popup Window handle destroyed due to cross zone navigation in IE/Edge\";return h.isAngular&&h._broadcast(\"adal:popUpClosed\",c+h.CONSTANTS.RESOURCE_DELIMETER+a),h._handlePopupError(e,b,a,c,c),void window.clearInterval(i)}try{var f=d.location;if(-1!=encodeURI(f.href).indexOf(encodeURI(g)))return h.isAngular?h._broadcast(\"adal:popUpHashChanged\",f.hash):h.handleWindowCallback(f.hash),window.clearInterval(i),h._loginInProgress=!1,h._acquireTokenInProgress=!1,h.info(\"Closing popup window\"),h._openedWindows=[],void d.close()}catch(a){}},1)},AuthenticationContext.prototype._broadcast=function(a,b){!function(){function a(a,b){b=b||{bubbles:!1,cancelable:!1,detail:void 0};var c=document.createEvent(\"CustomEvent\");return c.initCustomEvent(a,b.bubbles,b.cancelable,b.detail),c}if(\"function\"==typeof window.CustomEvent)return!1;a.prototype=window.Event.prototype,window.CustomEvent=a}();var c=new CustomEvent(a,{detail:b});window.dispatchEvent(c)},AuthenticationContext.prototype.loginInProgress=function(){return this._loginInProgress},AuthenticationContext.prototype._hasResource=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);return b&&!this._isEmpty(b)&&b.indexOf(a+this.CONSTANTS.RESOURCE_DELIMETER)>-1},AuthenticationContext.prototype.getCachedToken=function(a){if(!this._hasResource(a))return null;var b=this._getItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a),c=this._getItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a),d=this.config.expireOffsetSeconds||300;return c&&c>this._now()+d?b:(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a,\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a,0),null)},AuthenticationContext.prototype.getCachedUser=function(){if(this._user)return this._user;var a=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);return this._user=this._createUser(a),this._user},AuthenticationContext.prototype.registerCallback=function(a,b,c){this._activeRenewals[b]=a,this._callBacksMappedToRenewStates[a]||(this._callBacksMappedToRenewStates[a]=[]);var d=this;this._callBacksMappedToRenewStates[a].push(c),this._callBackMappedToRenewStates[a]||(this._callBackMappedToRenewStates[a]=function(c,e,f,g){d._activeRenewals[b]=null;for(var h=0;h<d._callBacksMappedToRenewStates[a].length;++h)try{d._callBacksMappedToRenewStates[a][h](c,e,f,g)}catch(f){d.warn(f)}d._callBacksMappedToRenewStates[a]=null,d._callBackMappedToRenewStates[a]=null})},AuthenticationContext.prototype._renewToken=function(a,b,c){this.info(\"renewToken is called for resource:\"+a);var d=this._addAdalFrame(\"adalRenewFrame\"+a),e=this._guid()+\"|\"+a;this.config.state=e,this._renewStates.push(e),this.verbose(\"Renew token Expected state: \"+e),c=c||\"token\";var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(c,a),\"prompt\");c===this.RESPONSE_TYPE.ID_TOKEN_TOKEN&&(this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),f+=\"&nonce=\"+encodeURIComponent(this._idTokenNonce)),f+=\"&prompt=none\",f=this._addHintParameters(f),this.registerCallback(e,a,b),this.verbosePii(\"Navigate to:\"+f),d.src=\"about:blank\",this._loadFrameTimeout(f,\"adalRenewFrame\"+a,a)},AuthenticationContext.prototype._renewIdToken=function(a,b){this.info(\"renewIdToken is called\");var c=this._addAdalFrame(\"adalIdTokenFrame\"),d=this._guid()+\"|\"+this.config.clientId;this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),this.config.state=d,this._renewStates.push(d),this.verbose(\"Renew Idtoken Expected state: \"+d);var e=null===b||void 0===b?null:this.config.clientId,b=b||\"id_token\",f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(b,e),\"prompt\");f+=\"&prompt=none\",f=this._addHintParameters(f),f+=\"&nonce=\"+encodeURIComponent(this._idTokenNonce),this.registerCallback(d,this.config.clientId,a),this.verbosePii(\"Navigate to:\"+f),c.src=\"about:blank\",this._loadFrameTimeout(f,\"adalIdTokenFrame\",this.config.clientId)},AuthenticationContext.prototype._urlContainsQueryStringParameter=function(a,b){return new RegExp(\"[\\\\?&]\"+a+\"=\").test(b)},AuthenticationContext.prototype._urlRemoveQueryStringParameter=function(a,b){var c=new RegExp(\"(\\\\&\"+b+\"=)[^&]+\");return a=a.replace(c,\"\"),c=new RegExp(\"(\"+b+\"=)[^&]+&\"),a=a.replace(c,\"\"),c=new RegExp(\"(\"+b+\"=)[^&]+\"),a=a.replace(c,\"\")},AuthenticationContext.prototype._loadFrameTimeout=function(a,b,c){this.verbose(\"Set loading state to pending for: \"+c),this._saveItem(this.CONSTANTS.STORAGE.RENEW_STATUS+c,this.CONSTANTS.TOKEN_RENEW_STATUS_IN_PROGRESS),this._loadFrame(a,b);var d=this;setTimeout(function(){if(d._getItem(d.CONSTANTS.STORAGE.RENEW_STATUS+c)===d.CONSTANTS.TOKEN_RENEW_STATUS_IN_PROGRESS){d.verbose(\"Loading frame has timed out after: \"+d.CONSTANTS.LOADFRAME_TIMEOUT/1e3+\" seconds for resource \"+c);var a=d._activeRenewals[c];a&&d._callBackMappedToRenewStates[a]&&d._callBackMappedToRenewStates[a](\"Token renewal operation failed due to timeout\",null,\"Token Renewal Failed\"),d._saveItem(d.CONSTANTS.STORAGE.RENEW_STATUS+c,d.CONSTANTS.TOKEN_RENEW_STATUS_CANCELED)}},d.CONSTANTS.LOADFRAME_TIMEOUT)},AuthenticationContext.prototype._loadFrame=function(a,b){var c=this;c.info(\"LoadFrame: \"+b);var d=b;setTimeout(function(){var b=c._addAdalFrame(d);\"\"!==b.src&&\"about:blank\"!==b.src||(b.src=a,c._loadFrame(a,d))},500)},AuthenticationContext.prototype.acquireToken=function(a,b){if(this._isEmpty(a))return this.warn(\"resource is required\"),void b(\"resource is required\",null,\"resource is required\");var c=this.getCachedToken(a);return c?(this.info(\"Token is already in cache for resource:\"+a),void b(null,c,null)):this._user||this.config.extraQueryParameter&&-1!==this.config.extraQueryParameter.indexOf(\"login_hint\")?void(this._activeRenewals[a]?this.registerCallback(this._activeRenewals[a],a,b):(this._requestType=this.REQUEST_TYPE.RENEW_TOKEN,a===this.config.clientId?this._user?(this.verbose(\"renewing idtoken\"),this._renewIdToken(b)):(this.verbose(\"renewing idtoken and access_token\"),this._renewIdToken(b,this.RESPONSE_TYPE.ID_TOKEN_TOKEN)):this._user?(this.verbose(\"renewing access_token\"),this._renewToken(a,b)):(this.verbose(\"renewing idtoken and access_token\"),this._renewToken(a,b,this.RESPONSE_TYPE.ID_TOKEN_TOKEN)))):(this.warn(\"User login is required\"),void b(\"User login is required\",null,\"login required\"))},AuthenticationContext.prototype.acquireTokenPopup=function(a,b,c,d){if(this._isEmpty(a))return this.warn(\"resource is required\"),void d(\"resource is required\",null,\"resource is required\");if(!this._user)return this.warn(\"User login is required\"),void d(\"User login is required\",null,\"login required\");if(this._acquireTokenInProgress)return this.warn(\"Acquire token interactive is already in progress\"),void d(\"Acquire token interactive is already in progress\",null,\"Acquire token interactive is already in progress\");var e=this._guid()+\"|\"+a;this.config.state=e,this._renewStates.push(e),this._requestType=this.REQUEST_TYPE.RENEW_TOKEN,this.verbose(\"Renew token Expected state: \"+e);var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(\"token\",a),\"prompt\");if(f+=\"&prompt=select_account\",b&&(f+=b),c&&-1===f.indexOf(\"&claims\"))f+=\"&claims=\"+encodeURIComponent(c);else if(c&&-1!==f.indexOf(\"&claims\"))throw new Error(\"Claims cannot be passed as an extraQueryParameter\");f=this._addHintParameters(f),this._acquireTokenInProgress=!0,this.info(\"acquireToken interactive is called for the resource \"+a),this.registerCallback(e,a,d),this._loginPopup(f,a,d)},AuthenticationContext.prototype.acquireTokenRedirect=function(a,b,c){if(this._isEmpty(a))return this.warn(\"resource is required\"),void d(\"resource is required\",null,\"resource is required\");var d=this.callback;if(!this._user)return this.warn(\"User login is required\"),void d(\"User login is required\",null,\"login required\");if(this._acquireTokenInProgress)return this.warn(\"Acquire token interactive is already in progress\"),void d(\"Acquire token interactive is already in progress\",null,\"Acquire token interactive is already in progress\");var e=this._guid()+\"|\"+a;this.config.state=e,this.verbose(\"Renew token Expected state: \"+e);var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(\"token\",a),\"prompt\");if(f+=\"&prompt=select_account\",b&&(f+=b),c&&-1===f.indexOf(\"&claims\"))f+=\"&claims=\"+encodeURIComponent(c);else if(c&&-1!==f.indexOf(\"&claims\"))throw new Error(\"Claims cannot be passed as an extraQueryParameter\");f=this._addHintParameters(f),this._acquireTokenInProgress=!0,this.info(\"acquireToken interactive is called for the resource \"+a),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,window.location.href),this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,e,!0),this.promptUser(f)},AuthenticationContext.prototype.promptUser=function(a){a?(this.infoPii(\"Navigate to:\"+a),window.location.replace(a)):this.info(\"Navigate url is empty\")},AuthenticationContext.prototype.clearCache=function(){this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST,\"\"),this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,\"\"),this._renewStates=[],this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\"),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\");var a=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);if(!this._isEmpty(a)){a=a.split(this.CONSTANTS.RESOURCE_DELIMETER);for(var b=0;b<a.length&&\"\"!==a[b];b++)this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a[b],\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a[b],0)}this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,\"\")},AuthenticationContext.prototype.clearCacheForResource=function(a){this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\"),this._hasResource(a)&&(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a,\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a,0))},AuthenticationContext.prototype.logOut=function(){this.clearCache(),this._user=null;var a;if(this.config.logOutUri)a=this.config.logOutUri;else{var b=\"common\",c=\"\";this.config.tenant&&(b=this.config.tenant),this.config.postLogoutRedirectUri&&(c=\"post_logout_redirect_uri=\"+encodeURIComponent(this.config.postLogoutRedirectUri)),a=this.instance+b+\"/oauth2/logout?\"+c}this.infoPii(\"Logout navigate to: \"+a),this.promptUser(a)},AuthenticationContext.prototype._isEmpty=function(a){return void 0===a||!a||0===a.length},AuthenticationContext.prototype.getUser=function(a){if(\"function\"!=typeof a)throw new Error(\"callback is not a function\");if(this._user)return void a(null,this._user);var b=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);this._isEmpty(b)?(this.warn(\"User information is not available\"),a(\"User information is not available\",null)):(this.info(\"User exists in cache: \"),this._user=this._createUser(b),a(null,this._user))},AuthenticationContext.prototype._addHintParameters=function(a){if(this._user&&this._user.profile)if(this._user.profile.sid&&-1!==a.indexOf(\"&prompt=none\"))this._urlContainsQueryStringParameter(\"sid\",a)||(a+=\"&sid=\"+encodeURIComponent(this._user.profile.sid));else if(this._user.profile.upn&&(this._urlContainsQueryStringParameter(\"login_hint\",a)||(a+=\"&login_hint=\"+encodeURIComponent(this._user.profile.upn)),!this._urlContainsQueryStringParameter(\"domain_hint\",a)&&this._user.profile.upn.indexOf(\"@\")>-1)){var b=this._user.profile.upn.split(\"@\");a+=\"&domain_hint=\"+encodeURIComponent(b[b.length-1])}return a},AuthenticationContext.prototype._createUser=function(a){var b=null,c=this._extractIdToken(a);return c&&c.hasOwnProperty(\"aud\")&&(c.aud.toLowerCase()===this.config.clientId.toLowerCase()?(b={userName:\"\",profile:c},c.hasOwnProperty(\"upn\")?b.userName=c.upn:c.hasOwnProperty(\"email\")&&(b.userName=c.email)):this.warn(\"IdToken has invalid aud field\")),b},AuthenticationContext.prototype._getHash=function(a){return a.indexOf(\"#/\")>-1?a=a.substring(a.indexOf(\"#/\")+2):a.indexOf(\"#\")>-1&&(a=a.substring(1)),a},AuthenticationContext.prototype.isCallback=function(a){a=this._getHash(a);var b=this._deserialize(a);return b.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||b.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||b.hasOwnProperty(this.CONSTANTS.ID_TOKEN)},AuthenticationContext.prototype.getLoginError=function(){return this._getItem(this.CONSTANTS.STORAGE.LOGIN_ERROR)},AuthenticationContext.prototype.getRequestInfo=function(a){a=this._getHash(a);var b=this._deserialize(a),c={valid:!1,parameters:{},stateMatch:!1,stateResponse:\"\",requestType:this.REQUEST_TYPE.UNKNOWN};if(b&&(c.parameters=b,b.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||b.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||b.hasOwnProperty(this.CONSTANTS.ID_TOKEN))){c.valid=!0;var d=\"\";if(!b.hasOwnProperty(\"state\"))return this.warn(\"No state returned\"),c;if(this.verbose(\"State: \"+b.state),d=b.state,c.stateResponse=d,this._matchState(c))return c;if(!c.stateMatch&&window.parent){c.requestType=this._requestType;for(var e=this._renewStates,f=0;f<e.length;f++)if(e[f]===c.stateResponse){c.stateMatch=!0;break}}}return c},AuthenticationContext.prototype._matchNonce=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN);if(b){b=b.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<b.length;c++)if(b[c]===a.profile.nonce)return!0}return!1},AuthenticationContext.prototype._matchState=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.STATE_LOGIN);if(b){b=b.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<b.length;c++)if(b[c]===a.stateResponse)return a.requestType=this.REQUEST_TYPE.LOGIN,a.stateMatch=!0,!0}var d=this._getItem(this.CONSTANTS.STORAGE.STATE_RENEW);if(d){d=d.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<d.length;c++)if(d[c]===a.stateResponse)return a.requestType=this.REQUEST_TYPE.RENEW_TOKEN,a.stateMatch=!0,!0}return!1},AuthenticationContext.prototype._getResourceFromState=function(a){if(a){var b=a.indexOf(\"|\");if(b>-1&&b+1<a.length)return a.substring(b+1)}return\"\"},AuthenticationContext.prototype.saveTokenFromHash=function(a){this.info(\"State status:\"+a.stateMatch+\"; Request type:\"+a.requestType),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\");var b=this._getResourceFromState(a.stateResponse);if(a.parameters.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION))this.infoPii(\"Error :\"+a.parameters.error+\"; Error description:\"+a.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),this._saveItem(this.CONSTANTS.STORAGE.ERROR,a.parameters.error),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,a.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),a.requestType===this.REQUEST_TYPE.LOGIN&&(this._loginInProgress=!1,this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,a.parameters.error_description));else if(a.stateMatch){this.info(\"State is right\"),a.parameters.hasOwnProperty(this.CONSTANTS.SESSION_STATE)&&this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,a.parameters[this.CONSTANTS.SESSION_STATE]);var c;a.parameters.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)&&(this.info(\"Fragment has access token\"),this._hasResource(b)||(c=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||\"\",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,c+b+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+b,a.parameters[this.CONSTANTS.ACCESS_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+b,this._expiresIn(a.parameters[this.CONSTANTS.EXPIRES_IN]))),a.parameters.hasOwnProperty(this.CONSTANTS.ID_TOKEN)&&(this.info(\"Fragment has id token\"),this._loginInProgress=!1,this._user=this._createUser(a.parameters[this.CONSTANTS.ID_TOKEN]),this._user&&this._user.profile?this._matchNonce(this._user)?(this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,a.parameters[this.CONSTANTS.ID_TOKEN]),b=this.config.loginResource?this.config.loginResource:this.config.clientId,this._hasResource(b)||(c=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||\"\",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,c+b+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+b,a.parameters[this.CONSTANTS.ID_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+b,this._user.profile.exp)):(this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"Nonce received: \"+this._user.profile.nonce+\" is not same as requested: \"+this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN)),this._user=null):(a.parameters.error=\"invalid id_token\",a.parameters.error_description=\"Invalid id_token. id_token: \"+a.parameters[this.CONSTANTS.ID_TOKEN],this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"invalid id_token\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"Invalid id_token. id_token: \"+a.parameters[this.CONSTANTS.ID_TOKEN])))}else a.parameters.error=\"Invalid_state\",a.parameters.error_description=\"Invalid_state. state: \"+a.stateResponse,this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"Invalid_state\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"Invalid_state. state: \"+a.stateResponse);this._saveItem(this.CONSTANTS.STORAGE.RENEW_STATUS+b,this.CONSTANTS.TOKEN_RENEW_STATUS_COMPLETED)},AuthenticationContext.prototype.getResourceForEndpoint=function(a){if(this.config&&this.config.anonymousEndpoints)for(var b=0;b<this.config.anonymousEndpoints.length;b++)if(a.indexOf(this.config.anonymousEndpoints[b])>-1)return null;if(this.config&&this.config.endpoints)for(var c in this.config.endpoints)if(a.indexOf(c)>-1)return this.config.endpoints[c];return a.indexOf(\"http://\")>-1||a.indexOf(\"https://\")>-1?this._getHostFromUri(a)===this._getHostFromUri(this.config.redirectUri)?this.config.loginResource:null:this.config.loginResource},AuthenticationContext.prototype._getHostFromUri=function(a){var b=String(a).replace(/^(https?:)\\/\\//,\"\");return b=b.split(\"/\")[0]},AuthenticationContext.prototype.handleWindowCallback=function(a){if(null==a&&(a=window.location.hash),this.isCallback(a)){var b=null,c=!1;this._openedWindows.length>0&&this._openedWindows[this._openedWindows.length-1].opener&&this._openedWindows[this._openedWindows.length-1].opener._adalInstance?(b=this._openedWindows[this._openedWindows.length-1].opener._adalInstance,c=!0):window.parent&&window.parent._adalInstance&&(b=window.parent._adalInstance);var d,e,f=b.getRequestInfo(a),g=null;e=c||window.parent!==window?b._callBackMappedToRenewStates[f.stateResponse]:b.callback,b.info(\"Returned from redirect url\"),b.saveTokenFromHash(f),f.requestType===this.REQUEST_TYPE.RENEW_TOKEN&&window.parent?(window.parent!==window?b.verbose(\"Window is in iframe, acquiring token silently\"):b.verbose(\"acquiring token interactive in progress\"),d=f.parameters[b.CONSTANTS.ACCESS_TOKEN]||f.parameters[b.CONSTANTS.ID_TOKEN],g=b.CONSTANTS.ACCESS_TOKEN):f.requestType===this.REQUEST_TYPE.LOGIN&&(d=f.parameters[b.CONSTANTS.ID_TOKEN],g=b.CONSTANTS.ID_TOKEN);var h=f.parameters[b.CONSTANTS.ERROR_DESCRIPTION],i=f.parameters[b.CONSTANTS.ERROR];try{e&&e(h,d,i,g)}catch(a){b.error(\"Error occurred in user defined callback function: \"+a)}window.parent!==window||c||(b.config.navigateToLoginRequestUrl?window.location.href=b._getItem(b.CONSTANTS.STORAGE.LOGIN_REQUEST):window.location.hash=\"\")}},AuthenticationContext.prototype._getNavigateUrl=function(a,b){var c=\"common\";this.config.tenant&&(c=this.config.tenant);var d=this.instance+c+\"/oauth2/authorize\"+this._serialize(a,this.config,b)+this._addLibMetadata();return this.info(\"Navigate url:\"+d),d},AuthenticationContext.prototype._extractIdToken=function(a){var b=this._decodeJwt(a);if(!b)return null;try{var c=b.JWSPayload,d=this._base64DecodeStringUrlSafe(c);return d?JSON.parse(d):(this.info(\"The returned id_token could not be base64 url safe decoded.\"),null)}catch(a){this.error(\"The returned id_token could not be decoded\",a)}return null},AuthenticationContext.prototype._base64DecodeStringUrlSafe=function(a){return a=a.replace(/-/g,\"+\").replace(/_/g,\"/\"),window.atob?decodeURIComponent(escape(window.atob(a))):decodeURIComponent(escape(this._decode(a)))},AuthenticationContext.prototype._decode=function(a){var b=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";a=String(a).replace(/=+$/,\"\");var c=a.length;if(c%4==1)throw new Error(\"The token to be decoded is not correctly encoded.\");for(var d,e,f,g,h,i,j,k,l=\"\",m=0;m<c;m+=4){if(d=b.indexOf(a.charAt(m)),e=b.indexOf(a.charAt(m+1)),f=b.indexOf(a.charAt(m+2)),g=b.indexOf(a.charAt(m+3)),m+2===c-1){h=d<<18|e<<12|f<<6,i=h>>16&255,j=h>>8&255,l+=String.fromCharCode(i,j);break}if(m+1===c-1){h=d<<18|e<<12,i=h>>16&255,l+=String.fromCharCode(i);break}h=d<<18|e<<12|f<<6|g,i=h>>16&255,j=h>>8&255,k=255&h,l+=String.fromCharCode(i,j,k)}return l},AuthenticationContext.prototype._decodeJwt=function(a){if(this._isEmpty(a))return null;var b=/^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/,c=b.exec(a);return!c||c.length<4?(this.warn(\"The returned id_token is not parseable.\"),null):{header:c[1],JWSPayload:c[2],JWSSig:c[3]}},AuthenticationContext.prototype._convertUrlSafeToRegularBase64EncodedString=function(a){return a.replace(\"-\",\"+\").replace(\"_\",\"/\")},AuthenticationContext.prototype._serialize=function(a,b,c){var d=[];if(null!==b){d.push(\"?response_type=\"+a),d.push(\"client_id=\"+encodeURIComponent(b.clientId)),c&&d.push(\"resource=\"+encodeURIComponent(c)),d.push(\"redirect_uri=\"+encodeURIComponent(b.redirectUri)),d.push(\"state=\"+encodeURIComponent(b.state)),b.hasOwnProperty(\"slice\")&&d.push(\"slice=\"+encodeURIComponent(b.slice)),b.hasOwnProperty(\"extraQueryParameter\")&&d.push(b.extraQueryParameter);var e=b.correlationId?b.correlationId:this._guid();d.push(\"client-request-id=\"+encodeURIComponent(e))}return d.join(\"&\")},AuthenticationContext.prototype._deserialize=function(a){var b,c=/\\+/g,d=/([^&=]+)=([^&]*)/g,e=function(a){return decodeURIComponent(a.replace(c,\" \"))},f={};for(b=d.exec(a);b;)f[e(b[1])]=e(b[2]),b=d.exec(a);return f},AuthenticationContext.prototype._decimalToHex=function(a){for(var b=a.toString(16);b.length<2;)b=\"0\"+b;return b},AuthenticationContext.prototype._guid=function(){var a=window.crypto||window.msCrypto;if(a&&a.getRandomValues){var b=new Uint8Array(16);return a.getRandomValues(b),b[6]|=64,b[6]&=79,b[8]|=128,b[8]&=191,this._decimalToHex(b[0])+this._decimalToHex(b[1])+this._decimalToHex(b[2])+this._decimalToHex(b[3])+\"-\"+this._decimalToHex(b[4])+this._decimalToHex(b[5])+\"-\"+this._decimalToHex(b[6])+this._decimalToHex(b[7])+\"-\"+this._decimalToHex(b[8])+this._decimalToHex(b[9])+\"-\"+this._decimalToHex(b[10])+this._decimalToHex(b[11])+this._decimalToHex(b[12])+this._decimalToHex(b[13])+this._decimalToHex(b[14])+this._decimalToHex(b[15])}for(var c=\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\",d=\"0123456789abcdef\",e=0,f=\"\",g=0;g<36;g++)\"-\"!==c[g]&&\"4\"!==c[g]&&(e=16*Math.random()|0),\"x\"===c[g]?f+=d[e]:\"y\"===c[g]?(e&=3,e|=8,f+=d[e]):f+=c[g];return f},AuthenticationContext.prototype._expiresIn=function(a){return a||(a=3599),this._now()+parseInt(a,10)},AuthenticationContext.prototype._now=function(){return Math.round((new Date).getTime()/1e3)},AuthenticationContext.prototype._addAdalFrame=function(a){if(void 0!==a){this.info(\"Add adal frame to document:\"+a);var b=document.getElementById(a);if(!b){if(document.createElement&&document.documentElement&&(window.opera||-1===window.navigator.userAgent.indexOf(\"MSIE 5.0\"))){var c=document.createElement(\"iframe\");c.setAttribute(\"id\",a),c.setAttribute(\"aria-hidden\",\"true\"),c.style.visibility=\"hidden\",c.style.position=\"absolute\",c.style.width=c.style.height=c.borderWidth=\"0px\",b=document.getElementsByTagName(\"body\")[0].appendChild(c)}else document.body&&document.body.insertAdjacentHTML&&document.body.insertAdjacentHTML(\"beforeEnd\",'<iframe name=\"'+a+'\" id=\"'+a+'\" style=\"display:none\"></iframe>');window.frames&&window.frames[a]&&(b=window.frames[a])}return b}},AuthenticationContext.prototype._saveItem=function(a,b,c){if(this.config&&this.config.cacheLocation&&\"localStorage\"===this.config.cacheLocation){if(!this._supportsLocalStorage())return this.info(\"Local storage is not supported\"),!1;if(c){var d=this._getItem(a)||\"\";localStorage.setItem(a,d+b+this.CONSTANTS.CACHE_DELIMETER)}else localStorage.setItem(a,b);return!0}return this._supportsSessionStorage()?(sessionStorage.setItem(a,b),!0):(this.info(\"Session storage is not supported\"),!1)},AuthenticationContext.prototype._getItem=function(a){return this.config&&this.config.cacheLocation&&\"localStorage\"===this.config.cacheLocation?this._supportsLocalStorage()?localStorage.getItem(a):(this.info(\"Local storage is not supported\"),null):this._supportsSessionStorage()?sessionStorage.getItem(a):(this.info(\"Session storage is not supported\"),null)},AuthenticationContext.prototype._supportsLocalStorage=function(){try{return!!window.localStorage&&(window.localStorage.setItem(\"storageTest\",\"A\"),\"A\"==window.localStorage.getItem(\"storageTest\")&&(window.localStorage.removeItem(\"storageTest\"),!window.localStorage.getItem(\"storageTest\")))}catch(a){return!1}},AuthenticationContext.prototype._supportsSessionStorage=function(){try{return!!window.sessionStorage&&(window.sessionStorage.setItem(\"storageTest\",\"A\"),\"A\"==window.sessionStorage.getItem(\"storageTest\")&&(window.sessionStorage.removeItem(\"storageTest\"),!window.sessionStorage.getItem(\"storageTest\")))}catch(a){return!1}},AuthenticationContext.prototype._cloneConfig=function(a){if(null===a||\"object\"!=typeof a)return a;var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b},AuthenticationContext.prototype._addLibMetadata=function(){return\"&x-client-SKU=Js&x-client-Ver=\"+this._libVersion()},AuthenticationContext.prototype.log=function(a,b,c,d){if(a<=Logging.level){if(!Logging.piiLoggingEnabled&&d)return;var e=(new Date).toUTCString(),f=\"\";f=this.config.correlationId?e+\":\"+this.config.correlationId+\"-\"+this._libVersion()+\"-\"+this.CONSTANTS.LEVEL_STRING_MAP[a]+\" \"+b:e+\":\"+this._libVersion()+\"-\"+this.CONSTANTS.LEVEL_STRING_MAP[a]+\" \"+b,c&&(f+=\"\\nstack:\\n\"+c.stack),Logging.log(f)}},AuthenticationContext.prototype.error=function(a,b){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,a,b)},AuthenticationContext.prototype.warn=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,a,null)},AuthenticationContext.prototype.info=function(a){\r\nthis.log(this.CONSTANTS.LOGGING_LEVEL.INFO,a,null)},AuthenticationContext.prototype.verbose=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,a,null)},AuthenticationContext.prototype.errorPii=function(a,b){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,a,b,!0)},AuthenticationContext.prototype.warnPii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,a,null,!0)},AuthenticationContext.prototype.infoPii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.INFO,a,null,!0)},AuthenticationContext.prototype.verbosePii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,a,null,!0)},AuthenticationContext.prototype._libVersion=function(){return\"1.0.17\"},\"undefined\"!=typeof module&&module.exports&&(module.exports=AuthenticationContext,module.exports.inject=function(a){return new AuthenticationContext(a)}),AuthenticationContext}();","/**\r\n * Class used to subscribe ILogListener and log messages throughout an application\r\n *\r\n */\r\nexport class Logger {\r\n    /**\r\n     * Gets or sets the active log level to apply for log filtering\r\n     */\r\n    static get activeLogLevel() {\r\n        return Logger.instance.activeLogLevel;\r\n    }\r\n    static set activeLogLevel(value) {\r\n        Logger.instance.activeLogLevel = value;\r\n    }\r\n    static get instance() {\r\n        if (Logger._instance === undefined || Logger._instance === null) {\r\n            Logger._instance = new LoggerImpl();\r\n        }\r\n        return Logger._instance;\r\n    }\r\n    /**\r\n     * Adds ILogListener instances to the set of subscribed listeners\r\n     *\r\n     * @param listeners One or more listeners to subscribe to this log\r\n     */\r\n    static subscribe(...listeners) {\r\n        listeners.map(listener => Logger.instance.subscribe(listener));\r\n    }\r\n    /**\r\n     * Clears the subscribers collection, returning the collection before modifiction\r\n     */\r\n    static clearSubscribers() {\r\n        return Logger.instance.clearSubscribers();\r\n    }\r\n    /**\r\n     * Gets the current subscriber count\r\n     */\r\n    static get count() {\r\n        return Logger.instance.count;\r\n    }\r\n    /**\r\n     * Writes the supplied string to the subscribed listeners\r\n     *\r\n     * @param message The message to write\r\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\r\n     */\r\n    static write(message, level = 1 /* Info */) {\r\n        Logger.instance.log({ level: level, message: message });\r\n    }\r\n    /**\r\n     * Writes the supplied string to the subscribed listeners\r\n     *\r\n     * @param json The json object to stringify and write\r\n     * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\r\n     */\r\n    static writeJSON(json, level = 1 /* Info */) {\r\n        this.write(JSON.stringify(json), level);\r\n    }\r\n    /**\r\n     * Logs the supplied entry to the subscribed listeners\r\n     *\r\n     * @param entry The message to log\r\n     */\r\n    static log(entry) {\r\n        Logger.instance.log(entry);\r\n    }\r\n    /**\r\n     * Logs an error object to the subscribed listeners\r\n     *\r\n     * @param err The error object\r\n     */\r\n    static error(err) {\r\n        Logger.instance.log({ data: err, level: 3 /* Error */, message: err.message });\r\n    }\r\n}\r\nclass LoggerImpl {\r\n    constructor(activeLogLevel = 2 /* Warning */, subscribers = []) {\r\n        this.activeLogLevel = activeLogLevel;\r\n        this.subscribers = subscribers;\r\n    }\r\n    subscribe(listener) {\r\n        this.subscribers.push(listener);\r\n    }\r\n    clearSubscribers() {\r\n        const s = this.subscribers.slice(0);\r\n        this.subscribers.length = 0;\r\n        return s;\r\n    }\r\n    get count() {\r\n        return this.subscribers.length;\r\n    }\r\n    write(message, level = 1 /* Info */) {\r\n        this.log({ level: level, message: message });\r\n    }\r\n    log(entry) {\r\n        if (entry !== undefined && this.activeLogLevel <= entry.level) {\r\n            this.subscribers.map(subscriber => subscriber.log(entry));\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=logger.js.map","/**\r\n * A set of logging levels\r\n */\r\nexport var LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Verbose\"] = 0] = \"Verbose\";\r\n    LogLevel[LogLevel[\"Info\"] = 1] = \"Info\";\r\n    LogLevel[LogLevel[\"Warning\"] = 2] = \"Warning\";\r\n    LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\r\n    LogLevel[LogLevel[\"Off\"] = 99] = \"Off\";\r\n})(LogLevel || (LogLevel = {}));\r\n//# sourceMappingURL=loglevel.js.map","/**\r\n * Implementation of LogListener which logs to the console\r\n *\r\n */\r\nexport class ConsoleListener {\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    log(entry) {\r\n        const msg = this.format(entry);\r\n        switch (entry.level) {\r\n            case 0 /* Verbose */:\r\n            case 1 /* Info */:\r\n                console.log(msg);\r\n                break;\r\n            case 2 /* Warning */:\r\n                console.warn(msg);\r\n                break;\r\n            case 3 /* Error */:\r\n                console.error(msg);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Formats the message\r\n     *\r\n     * @param entry The information to format into a string\r\n     */\r\n    format(entry) {\r\n        const msg = [];\r\n        msg.push(\"Message: \" + entry.message);\r\n        if (entry.data !== undefined) {\r\n            msg.push(\" Data: \" + JSON.stringify(entry.data));\r\n        }\r\n        return msg.join(\"\");\r\n    }\r\n}\r\n/**\r\n * Implementation of LogListener which logs to the supplied function\r\n *\r\n */\r\nexport class FunctionListener {\r\n    /**\r\n     * Creates a new instance of the FunctionListener class\r\n     *\r\n     * @constructor\r\n     * @param  method The method to which any logging data will be passed\r\n     */\r\n    constructor(method) {\r\n        this.method = method;\r\n    }\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    log(entry) {\r\n        this.method(entry);\r\n    }\r\n}\r\n//# sourceMappingURL=listeners.js.map","import { mergeMaps, objectToMap, jsS } from \"@pnp/common\";\r\n/**\r\n * Class used to manage the current application settings\r\n *\r\n */\r\nexport class Settings {\r\n    /**\r\n     * Creates a new instance of the settings class\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(_settings = new Map()) {\r\n        this._settings = _settings;\r\n    }\r\n    /**\r\n     * Adds a new single setting, or overwrites a previous setting with the same key\r\n     *\r\n     * @param {string} key The key used to store this setting\r\n     * @param {string} value The setting value to store\r\n     */\r\n    add(key, value) {\r\n        this._settings.set(key, value);\r\n    }\r\n    /**\r\n     * Adds a JSON value to the collection as a string, you must use getJSON to rehydrate the object when read\r\n     *\r\n     * @param {string} key The key used to store this setting\r\n     * @param {any} value The setting value to store\r\n     */\r\n    addJSON(key, value) {\r\n        this._settings.set(key, jsS(value));\r\n    }\r\n    /**\r\n     * Applies the supplied hash to the setting collection overwriting any existing value, or created new values\r\n     *\r\n     * @param {TypedHash<any>} hash The set of values to add\r\n     */\r\n    apply(hash) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this._settings = mergeMaps(this._settings, objectToMap(hash));\r\n                resolve();\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Loads configuration settings into the collection from the supplied provider and returns a Promise\r\n     *\r\n     * @param {IConfigurationProvider} provider The provider from which we will load the settings\r\n     */\r\n    load(provider) {\r\n        return new Promise((resolve, reject) => {\r\n            provider.getConfiguration().then((value) => {\r\n                this._settings = mergeMaps(this._settings, objectToMap(value));\r\n                resolve();\r\n            }).catch(reject);\r\n        });\r\n    }\r\n    /**\r\n     * Gets a value from the configuration\r\n     *\r\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\r\n     * @return {string} string value from the configuration\r\n     */\r\n    get(key) {\r\n        return this._settings.get(key) || null;\r\n    }\r\n    /**\r\n     * Gets a JSON value, rehydrating the stored string to the original object\r\n     *\r\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\r\n     * @return {any} object from the configuration\r\n     */\r\n    getJSON(key) {\r\n        const o = this.get(key);\r\n        if (o === undefined || o === null) {\r\n            return o;\r\n        }\r\n        return JSON.parse(o);\r\n    }\r\n}\r\n//# sourceMappingURL=configuration.js.map","import { PnPClientStorage } from \"@pnp/common\";\r\n/**\r\n * A caching provider which can wrap other non-caching providers\r\n *\r\n */\r\nexport default class CachingConfigurationProvider {\r\n    /**\r\n     * Creates a new caching configuration provider\r\n     * @constructor\r\n     * @param {IConfigurationProvider} wrappedProvider Provider which will be used to fetch the configuration\r\n     * @param {string} cacheKey Key that will be used to store cached items to the cache\r\n     * @param {IPnPClientStore} cacheStore OPTIONAL storage, which will be used to store cached settings.\r\n     */\r\n    constructor(wrappedProvider, cacheKey, cacheStore) {\r\n        this.wrappedProvider = wrappedProvider;\r\n        this.cacheKey = cacheKey;\r\n        this.wrappedProvider = wrappedProvider;\r\n        this.store = (cacheStore) ? cacheStore : this.selectPnPCache();\r\n    }\r\n    /**\r\n     * Gets the wrapped configuration providers\r\n     *\r\n     * @return {IConfigurationProvider} Wrapped configuration provider\r\n     */\r\n    getWrappedProvider() {\r\n        return this.wrappedProvider;\r\n    }\r\n    /**\r\n     * Loads the configuration values either from the cache or from the wrapped provider\r\n     *\r\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\r\n     */\r\n    getConfiguration() {\r\n        // Cache not available, pass control to the wrapped provider\r\n        if ((!this.store) || (!this.store.enabled)) {\r\n            return this.wrappedProvider.getConfiguration();\r\n        }\r\n        return this.store.getOrPut(this.cacheKey, () => {\r\n            return this.wrappedProvider.getConfiguration().then((providedConfig) => {\r\n                this.store.put(this.cacheKey, providedConfig);\r\n                return providedConfig;\r\n            });\r\n        });\r\n    }\r\n    selectPnPCache() {\r\n        const pnpCache = new PnPClientStorage();\r\n        if ((pnpCache.local) && (pnpCache.local.enabled)) {\r\n            return pnpCache.local;\r\n        }\r\n        if ((pnpCache.session) && (pnpCache.session.enabled)) {\r\n            return pnpCache.session;\r\n        }\r\n        throw Error(\"Cannot create a caching configuration provider since cache is not available.\");\r\n    }\r\n}\r\n//# sourceMappingURL=cachingConfigurationProvider.js.map","import { default as CachingConfigurationProvider } from \"./cachingConfigurationProvider\";\r\n/**\r\n * A configuration provider which loads configuration values from a SharePoint list\r\n *\r\n */\r\nexport default class SPListConfigurationProvider {\r\n    /**\r\n     * Creates a new SharePoint list based configuration provider\r\n     * @constructor\r\n     * @param {string} webUrl Url of the SharePoint site, where the configuration list is located\r\n     * @param {string} listTitle Title of the SharePoint list, which contains the configuration settings (optional, default: \"config\")\r\n     * @param {string} keyFieldName The name of the field in the list to use as the setting key (optional, default: \"Title\")\r\n     * @param {string} valueFieldName The name of the field in the list to use as the setting value (optional, default: \"Value\")\r\n     */\r\n    constructor(web, listTitle = \"config\", keyFieldName = \"Title\", valueFieldName = \"Value\") {\r\n        this.web = web;\r\n        this.listTitle = listTitle;\r\n        this.keyFieldName = keyFieldName;\r\n        this.valueFieldName = valueFieldName;\r\n    }\r\n    /**\r\n     * Loads the configuration values from the SharePoint list\r\n     *\r\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\r\n     */\r\n    getConfiguration() {\r\n        return this.web.lists.getByTitle(this.listTitle).items.select(this.keyFieldName, this.valueFieldName).get()\r\n            .then((data) => data.reduce((c, item) => {\r\n            c[item[this.keyFieldName]] = item[this.valueFieldName];\r\n            return c;\r\n        }, {}));\r\n    }\r\n    /**\r\n     * Wraps the current provider in a cache enabled provider\r\n     *\r\n     * @return {CachingConfigurationProvider} Caching providers which wraps the current provider\r\n     */\r\n    asCaching(cacheKey = `pnp_configcache_splist_${this.web.toUrl()}+${this.listTitle}`) {\r\n        return new CachingConfigurationProvider(this, cacheKey);\r\n    }\r\n}\r\n//# sourceMappingURL=spListConfigurationProvider.js.map","import { RuntimeConfig, dateAdd, PnPClientStorage } from \"@pnp/common\";\r\nexport class CachingOptions {\r\n    constructor(key) {\r\n        this.key = key;\r\n        this.expiration = dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds);\r\n        this.storeName = RuntimeConfig.defaultCachingStore;\r\n    }\r\n    get store() {\r\n        if (this.storeName === \"local\") {\r\n            return CachingOptions.storage.local;\r\n        }\r\n        else {\r\n            return CachingOptions.storage.session;\r\n        }\r\n    }\r\n}\r\nCachingOptions.storage = new PnPClientStorage();\r\nexport class CachingParserWrapper {\r\n    constructor(parser, cacheOptions) {\r\n        this.parser = parser;\r\n        this.cacheOptions = cacheOptions;\r\n    }\r\n    parse(response) {\r\n        return this.parser.parse(response).then(r => this.cacheData(r));\r\n    }\r\n    cacheData(data) {\r\n        if (this.cacheOptions.store !== null) {\r\n            this.cacheOptions.store.put(this.cacheOptions.key, data, this.cacheOptions.expiration);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n//# sourceMappingURL=caching.js.map","import { isFunc, hOP } from \"@pnp/common\";\r\nexport class HttpRequestError extends Error {\r\n    constructor(message, response, status = response.status, statusText = response.statusText) {\r\n        super(message);\r\n        this.response = response;\r\n        this.status = status;\r\n        this.statusText = statusText;\r\n        this.isHttpRequestError = true;\r\n    }\r\n}\r\nexport class ODataParserBase {\r\n    parse(r) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.handleError(r, reject)) {\r\n                this.parseImpl(r, resolve, reject);\r\n            }\r\n        });\r\n    }\r\n    parseImpl(r, resolve, reject) {\r\n        if ((r.headers.has(\"Content-Length\") && parseFloat(r.headers.get(\"Content-Length\")) === 0) || r.status === 204) {\r\n            resolve({});\r\n        }\r\n        else {\r\n            // patch to handle cases of 200 response with no or whitespace only bodies (#487 & #545)\r\n            r.text()\r\n                .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\r\n                .then(json => resolve(this.parseODataJSON(json)))\r\n                .catch(e => reject(e));\r\n        }\r\n    }\r\n    /**\r\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\r\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\r\n     *\r\n     * @param r Current response object\r\n     * @param reject reject delegate for the surrounding promise\r\n     */\r\n    handleError(r, reject) {\r\n        if (!r.ok) {\r\n            reject(new HttpRequestError(`Error making HttpClient request in queryable: [${r.status}] ${r.statusText}`, r.clone()));\r\n        }\r\n        return r.ok;\r\n    }\r\n    /**\r\n     * Normalizes the json response by removing the various nested levels\r\n     *\r\n     * @param json json object to parse\r\n     */\r\n    parseODataJSON(json) {\r\n        let result = json;\r\n        if (hOP(json, \"d\")) {\r\n            if (hOP(json.d, \"results\")) {\r\n                result = json.d.results;\r\n            }\r\n            else {\r\n                result = json.d;\r\n            }\r\n        }\r\n        else if (hOP(json, \"value\")) {\r\n            result = json.value;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport class ODataDefaultParser extends ODataParserBase {\r\n}\r\nexport class TextParser extends ODataParserBase {\r\n    parseImpl(r, resolve) {\r\n        r.text().then(resolve);\r\n    }\r\n}\r\nexport class BlobParser extends ODataParserBase {\r\n    parseImpl(r, resolve) {\r\n        r.blob().then(resolve);\r\n    }\r\n}\r\nexport class JSONParser extends ODataParserBase {\r\n    parseImpl(r, resolve) {\r\n        r.json().then(resolve);\r\n    }\r\n}\r\nexport class BufferParser extends ODataParserBase {\r\n    parseImpl(r, resolve) {\r\n        if (isFunc(r.arrayBuffer)) {\r\n            r.arrayBuffer().then(resolve);\r\n        }\r\n        else {\r\n            r.buffer().then(resolve);\r\n        }\r\n    }\r\n}\r\nexport class LambdaParser extends ODataParserBase {\r\n    constructor(parser) {\r\n        super();\r\n        this.parser = parser;\r\n    }\r\n    parseImpl(r, resolve) {\r\n        this.parser(r).then(resolve);\r\n    }\r\n}\r\n//# sourceMappingURL=parsers.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as tslib_1 from \"tslib\";\r\nimport { extend, isFunc, hOP } from \"@pnp/common\";\r\nimport { Logger } from \"@pnp/logging\";\r\nimport { CachingOptions, CachingParserWrapper } from \"./caching\";\r\n/**\r\n * Resolves the context's result value\r\n *\r\n * @param context The current context\r\n */\r\nfunction returnResult(context) {\r\n    Logger.log({\r\n        data: Logger.activeLogLevel === 0 /* Verbose */ ? context.result : {},\r\n        level: 1 /* Info */,\r\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result from pipeline. Set logging to verbose to see data.`,\r\n    });\r\n    return Promise.resolve(context.result);\r\n}\r\n/**\r\n * Sets the result on the context\r\n */\r\nexport function setResult(context, value) {\r\n    return new Promise((resolve) => {\r\n        context.result = value;\r\n        context.hasResult = true;\r\n        resolve(context);\r\n    });\r\n}\r\n/**\r\n * Invokes the next method in the provided context's pipeline\r\n *\r\n * @param c The current request context\r\n */\r\nfunction next(c) {\r\n    if (c.pipeline.length > 0) {\r\n        return c.pipeline.shift()(c);\r\n    }\r\n    else {\r\n        return Promise.resolve(c);\r\n    }\r\n}\r\n/**\r\n * Executes the current request context's pipeline\r\n *\r\n * @param context Current context\r\n */\r\nexport function pipe(context) {\r\n    if (context.pipeline.length < 1) {\r\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, 2 /* Warning */);\r\n    }\r\n    const promise = next(context).then(ctx => returnResult(ctx)).catch((e) => {\r\n        Logger.error(e);\r\n        throw e;\r\n    });\r\n    if (context.isBatched) {\r\n        // this will block the batch's execute method from returning until the child requets have been resolved\r\n        context.batch.addResolveBatchDependency(promise);\r\n    }\r\n    return promise;\r\n}\r\n/**\r\n * decorator factory applied to methods in the pipeline to control behavior\r\n */\r\nexport function requestPipelineMethod(alwaysRun = false) {\r\n    return (target, propertyKey, descriptor) => {\r\n        const method = descriptor.value;\r\n        descriptor.value = function (...args) {\r\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\r\n            if (!alwaysRun && args.length > 0 && hOP(args[0], \"hasResult\") && args[0].hasResult) {\r\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, 0 /* Verbose */);\r\n                return Promise.resolve(args[0]);\r\n            }\r\n            // apply the tagged method\r\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, 0 /* Verbose */);\r\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\r\n            return method.apply(target, args).then((ctx) => next(ctx));\r\n        };\r\n    };\r\n}\r\n/**\r\n * Contains the methods used within the request pipeline\r\n */\r\nexport class PipelineMethods {\r\n    /**\r\n     * Logs the start of the request\r\n     */\r\n    static logStart(context) {\r\n        return new Promise(resolve => {\r\n            Logger.log({\r\n                data: Logger.activeLogLevel === 1 /* Info */ ? {} : context,\r\n                level: 1 /* Info */,\r\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.verb} request (${context.requestAbsoluteUrl})`,\r\n            });\r\n            resolve(context);\r\n        });\r\n    }\r\n    /**\r\n     * Handles caching of the request\r\n     */\r\n    static caching(context) {\r\n        return new Promise(resolve => {\r\n            // handle caching, if applicable\r\n            if (context.isCached) {\r\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, 1 /* Info */);\r\n                let cacheOptions = new CachingOptions(context.requestAbsoluteUrl.toLowerCase());\r\n                if (context.cachingOptions !== undefined) {\r\n                    cacheOptions = extend(cacheOptions, context.cachingOptions);\r\n                }\r\n                // we may not have a valid store\r\n                if (cacheOptions.store !== null) {\r\n                    // check if we have the data in cache and if so resolve the promise and return\r\n                    let data = cacheOptions.store.get(cacheOptions.key);\r\n                    if (data !== null) {\r\n                        // ensure we clear any held batch dependency we are resolving from the cache\r\n                        Logger.log({\r\n                            data: Logger.activeLogLevel === 1 /* Info */ ? {} : data,\r\n                            level: 1 /* Info */,\r\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\r\n                        });\r\n                        if (isFunc(context.batchDependency)) {\r\n                            context.batchDependency();\r\n                        }\r\n                        // handle the case where a parser needs to take special actions with a cached result\r\n                        if (hOP(context.parser, \"hydrate\")) {\r\n                            data = context.parser.hydrate(data);\r\n                        }\r\n                        return setResult(context, data).then(ctx => resolve(ctx));\r\n                    }\r\n                }\r\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, 1 /* Info */);\r\n                // if we don't then wrap the supplied parser in the caching parser wrapper\r\n                // and send things on their way\r\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\r\n            }\r\n            return resolve(context);\r\n        });\r\n    }\r\n    /**\r\n     * Sends the request\r\n     */\r\n    static send(context) {\r\n        return new Promise((resolve, reject) => {\r\n            // send or batch the request\r\n            if (context.isBatched) {\r\n                // we are in a batch, so add to batch, remove dependency, and resolve with the batch's promise\r\n                const p = context.batch.add(context.requestAbsoluteUrl, context.verb, context.options, context.parser, context.requestId);\r\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\r\n                if (isFunc(context.batchDependency)) {\r\n                    context.batchDependency();\r\n                }\r\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, 1 /* Info */);\r\n                // we set the result as the promise which will be resolved by the batch's execution\r\n                resolve(setResult(context, p));\r\n            }\r\n            else {\r\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, 1 /* Info */);\r\n                // we are not part of a batch, so proceed as normal\r\n                const client = context.clientFactory();\r\n                const opts = extend(context.options || {}, { method: context.verb });\r\n                client.fetch(context.requestAbsoluteUrl, opts)\r\n                    .then(response => context.parser.parse(response))\r\n                    .then(result => setResult(context, result))\r\n                    .then(ctx => resolve(ctx))\r\n                    .catch(e => reject(e));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Logs the end of the request\r\n     */\r\n    static logEnd(context) {\r\n        return new Promise(resolve => {\r\n            if (context.isBatched) {\r\n                Logger.log({\r\n                    data: Logger.activeLogLevel === 1 /* Info */ ? {} : context,\r\n                    level: 1 /* Info */,\r\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.verb} request will complete in batch ${context.batch.batchId}.`,\r\n                });\r\n            }\r\n            else {\r\n                Logger.log({\r\n                    data: Logger.activeLogLevel === 1 /* Info */ ? {} : context,\r\n                    level: 1 /* Info */,\r\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.verb} request.`,\r\n                });\r\n            }\r\n            resolve(context);\r\n        });\r\n    }\r\n}\r\ntslib_1.__decorate([\r\n    requestPipelineMethod(true)\r\n], PipelineMethods, \"logStart\", null);\r\ntslib_1.__decorate([\r\n    requestPipelineMethod()\r\n], PipelineMethods, \"caching\", null);\r\ntslib_1.__decorate([\r\n    requestPipelineMethod()\r\n], PipelineMethods, \"send\", null);\r\ntslib_1.__decorate([\r\n    requestPipelineMethod(true)\r\n], PipelineMethods, \"logEnd\", null);\r\nexport function getDefaultPipeline() {\r\n    return [\r\n        PipelineMethods.logStart,\r\n        PipelineMethods.caching,\r\n        PipelineMethods.send,\r\n        PipelineMethods.logEnd,\r\n    ].slice(0);\r\n}\r\n//# sourceMappingURL=pipeline.js.map","import { combine, RuntimeConfig, mergeOptions, objectDefinedNotNull, } from \"@pnp/common\";\r\nimport { ODataDefaultParser, JSONParser } from \"./parsers\";\r\nimport { getDefaultPipeline, pipe, } from \"./pipeline\";\r\nexport class Queryable {\r\n    constructor() {\r\n        this._query = new Map();\r\n        this._options = {};\r\n        this._url = \"\";\r\n        this._parentUrl = \"\";\r\n        this._useCaching = false;\r\n        this._cachingOptions = null;\r\n    }\r\n    /**\r\n    * Gets the currentl url\r\n    *\r\n    */\r\n    toUrl() {\r\n        return this._url;\r\n    }\r\n    /**\r\n     * Directly concatonates the supplied string to the current url, not normalizing \"/\" chars\r\n     *\r\n     * @param pathPart The string to concatonate to the url\r\n     */\r\n    concat(pathPart) {\r\n        this._url += pathPart;\r\n        return this;\r\n    }\r\n    /**\r\n     * Provides access to the query builder for this url\r\n     *\r\n     */\r\n    get query() {\r\n        return this._query;\r\n    }\r\n    /**\r\n     * Sets custom options for current object and all derived objects accessible via chaining\r\n     *\r\n     * @param options custom options\r\n     */\r\n    configure(options) {\r\n        mergeOptions(this._options, options);\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures this instance from the configure options of the supplied instance\r\n     *\r\n     * @param o Instance from which options should be taken\r\n     */\r\n    configureFrom(o) {\r\n        mergeOptions(this._options, o._options);\r\n        return this;\r\n    }\r\n    /**\r\n     * Enables caching for this request\r\n     *\r\n     * @param options Defines the options used when caching this request\r\n     */\r\n    usingCaching(options) {\r\n        if (!RuntimeConfig.globalCacheDisable) {\r\n            this._useCaching = true;\r\n            if (options !== undefined) {\r\n                this._cachingOptions = options;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    getCore(parser = new JSONParser(), options = {}) {\r\n        return this.toRequestContext(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    postCore(options = {}, parser = new JSONParser()) {\r\n        return this.toRequestContext(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    patchCore(options = {}, parser = new JSONParser()) {\r\n        return this.toRequestContext(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    deleteCore(options = {}, parser = new JSONParser()) {\r\n        return this.toRequestContext(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    putCore(options = {}, parser = new JSONParser()) {\r\n        return this.toRequestContext(\"PUT\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    /**\r\n     * Appends the given string and normalizes \"/\" chars\r\n     *\r\n     * @param pathPart The string to append\r\n     */\r\n    append(pathPart) {\r\n        this._url = combine(this._url, pathPart);\r\n    }\r\n    /**\r\n     * Gets the parent url used when creating this instance\r\n     *\r\n     */\r\n    get parentUrl() {\r\n        return this._parentUrl;\r\n    }\r\n    /**\r\n     * Extends this queryable from the provided parent\r\n     *\r\n     * @param parent Parent queryable from which we will derive a base url\r\n     * @param path Additional path\r\n     */\r\n    extend(parent, path) {\r\n        this._parentUrl = parent._url;\r\n        this._url = combine(this._parentUrl, path || \"\");\r\n        this.configureFrom(parent);\r\n    }\r\n}\r\nexport class ODataQueryable extends Queryable {\r\n    constructor() {\r\n        super();\r\n        this._batch = null;\r\n    }\r\n    /**\r\n     * Adds this query to the supplied batch\r\n     *\r\n     * @example\r\n     * ```\r\n     *\r\n     * let b = pnp.sp.createBatch();\r\n     * pnp.sp.web.inBatch(b).get().then(...);\r\n     * b.execute().then(...)\r\n     * ```\r\n     */\r\n    inBatch(batch) {\r\n        if (this.batch !== null) {\r\n            throw Error(\"This query is already part of a batch.\");\r\n        }\r\n        this._batch = batch;\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets the currentl url\r\n     *\r\n     */\r\n    toUrl() {\r\n        return this._url;\r\n    }\r\n    /**\r\n     * Executes the currently built request\r\n     *\r\n     * @param parser Allows you to specify a parser to handle the result\r\n     * @param getOptions The options used for this request\r\n     */\r\n    get(parser = new ODataDefaultParser(), options = {}) {\r\n        return this.getCore(parser, options);\r\n    }\r\n    getCore(parser = new ODataDefaultParser(), options = {}) {\r\n        return this.toRequestContext(\"GET\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    postCore(options = {}, parser = new ODataDefaultParser()) {\r\n        return this.toRequestContext(\"POST\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    patchCore(options = {}, parser = new ODataDefaultParser()) {\r\n        return this.toRequestContext(\"PATCH\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    deleteCore(options = {}, parser = new ODataDefaultParser()) {\r\n        return this.toRequestContext(\"DELETE\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    putCore(options = {}, parser = new ODataDefaultParser()) {\r\n        return this.toRequestContext(\"PUT\", options, parser, getDefaultPipeline()).then(context => pipe(context));\r\n    }\r\n    /**\r\n     * Blocks a batch call from occuring, MUST be cleared by calling the returned function\r\n    */\r\n    addBatchDependency() {\r\n        if (this._batch !== null) {\r\n            return this._batch.addDependency();\r\n        }\r\n        return () => null;\r\n    }\r\n    /**\r\n     * Indicates if the current query has a batch associated\r\n     *\r\n     */\r\n    get hasBatch() {\r\n        return objectDefinedNotNull(this._batch);\r\n    }\r\n    /**\r\n     * The batch currently associated with this query or null\r\n     *\r\n     */\r\n    get batch() {\r\n        return this.hasBatch ? this._batch : null;\r\n    }\r\n}\r\n//# sourceMappingURL=queryable.js.map","import { getGUID } from \"@pnp/common\";\r\nexport class ODataBatch {\r\n    constructor(_batchId = getGUID()) {\r\n        this._batchId = _batchId;\r\n        this._reqs = [];\r\n        this._deps = [];\r\n        this._rDeps = [];\r\n    }\r\n    get batchId() {\r\n        return this._batchId;\r\n    }\r\n    /**\r\n     * The requests contained in this batch\r\n     */\r\n    get requests() {\r\n        return this._reqs;\r\n    }\r\n    /**\r\n     *\r\n     * @param url Request url\r\n     * @param method Request method (GET, POST, etc)\r\n     * @param options Any request options\r\n     * @param parser The parser used to handle the eventual return from the query\r\n     * @param id An identifier used to track a request within a batch\r\n     */\r\n    add(url, method, options, parser, id) {\r\n        const info = {\r\n            id,\r\n            method: method.toUpperCase(),\r\n            options,\r\n            parser,\r\n            reject: null,\r\n            resolve: null,\r\n            url,\r\n        };\r\n        const p = new Promise((resolve, reject) => {\r\n            info.resolve = resolve;\r\n            info.reject = reject;\r\n        });\r\n        this._reqs.push(info);\r\n        return p;\r\n    }\r\n    /**\r\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\r\n     * MUST be cleared using the returned resolve delegate to allow batches to run\r\n     */\r\n    addDependency() {\r\n        let resolver = () => void (0);\r\n        this._deps.push(new Promise((resolve) => {\r\n            resolver = resolve;\r\n        }));\r\n        return resolver;\r\n    }\r\n    /**\r\n     * The batch's execute method will not resolve util any promises added here resolve\r\n     *\r\n     * @param p The dependent promise\r\n     */\r\n    addResolveBatchDependency(p) {\r\n        this._rDeps.push(p);\r\n    }\r\n    /**\r\n     * Execute the current batch and resolve the associated promises\r\n     *\r\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\r\n     */\r\n    execute() {\r\n        // we need to check the dependencies twice due to how different engines handle things.\r\n        // We can get a second set of promises added during the first set resolving\r\n        return Promise.all(this._deps)\r\n            .then(() => Promise.all(this._deps))\r\n            .then(() => this.executeImpl())\r\n            .then(() => Promise.all(this._rDeps))\r\n            .then(() => void (0));\r\n    }\r\n}\r\n//# sourceMappingURL=odatabatch.js.map","import { RuntimeConfig, AdalClient } from \"@pnp/common\";\r\nexport function setup(config) {\r\n    RuntimeConfig.extend(config);\r\n}\r\nexport class GraphRuntimeConfigImpl {\r\n    get headers() {\r\n        const graphPart = RuntimeConfig.get(\"graph\");\r\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\r\n            return graphPart.headers;\r\n        }\r\n        return {};\r\n    }\r\n    get fetchClientFactory() {\r\n        const graphPart = RuntimeConfig.get(\"graph\");\r\n        // use a configured factory firt\r\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\r\n            return graphPart.fetchClientFactory;\r\n        }\r\n        // then try and use spfx context if available\r\n        if (RuntimeConfig.spfxContext !== undefined) {\r\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\r\n        }\r\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\r\n    }\r\n}\r\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\r\n//# sourceMappingURL=graphlibconfig.js.map","import { extend, mergeHeaders, getCtxCallback, } from \"@pnp/common\";\r\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\r\nexport class GraphHttpClient {\r\n    constructor() {\r\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\r\n    }\r\n    fetch(url, options = {}) {\r\n        const headers = new Headers();\r\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\r\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\r\n        // second we add the local options so we can overwrite the globals\r\n        mergeHeaders(headers, options.headers);\r\n        if (!headers.has(\"Content-Type\")) {\r\n            headers.append(\"Content-Type\", \"application/json\");\r\n        }\r\n        const opts = extend(options, { headers: headers });\r\n        return this.fetchRaw(url, opts);\r\n    }\r\n    fetchRaw(url, options = {}) {\r\n        // here we need to normalize the headers\r\n        const rawHeaders = new Headers();\r\n        mergeHeaders(rawHeaders, options.headers);\r\n        options = extend(options, { headers: rawHeaders });\r\n        const retry = (ctx) => {\r\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\r\n                // Check if request was throttled - http status code 429\r\n                // Check if request failed due to server unavailable - http status code 503\r\n                if (response.status !== 429 && response.status !== 503) {\r\n                    ctx.reject(response);\r\n                }\r\n                // grab our current delay\r\n                const delay = ctx.delay;\r\n                // Increment our counters.\r\n                ctx.delay *= 2;\r\n                ctx.attempts++;\r\n                // If we have exceeded the retry count, reject.\r\n                if (ctx.retryCount <= ctx.attempts) {\r\n                    ctx.reject(response);\r\n                }\r\n                // Set our retry timeout for {delay} milliseconds.\r\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\r\n            });\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            const retryContext = {\r\n                attempts: 0,\r\n                delay: 100,\r\n                reject: reject,\r\n                resolve: resolve,\r\n                retryCount: 7,\r\n            };\r\n            retry.call(this, retryContext);\r\n        });\r\n    }\r\n    get(url, options = {}) {\r\n        const opts = extend(options, { method: \"GET\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n    post(url, options = {}) {\r\n        const opts = extend(options, { method: \"POST\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n    patch(url, options = {}) {\r\n        const opts = extend(options, { method: \"PATCH\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n    delete(url, options = {}) {\r\n        const opts = extend(options, { method: \"DELETE\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n}\r\n//# sourceMappingURL=graphhttpclient.js.map","export class GraphEndpoints {\r\n    /**\r\n     *\r\n     * @param url The url to set the endpoint\r\n     */\r\n    static ensure(url, endpoint) {\r\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\r\n        let regex = new RegExp(endpoint, \"i\");\r\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\r\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\r\n        return url.replace(regex, `/${endpoint}/`);\r\n    }\r\n}\r\nGraphEndpoints.Beta = \"beta\";\r\nGraphEndpoints.V1 = \"v1.0\";\r\n//# sourceMappingURL=types.js.map","import { combine, extend, isUrlAbsolute, getGUID, } from \"@pnp/common\";\r\nimport { ODataQueryable, } from \"@pnp/odata\";\r\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\r\nimport { GraphEndpoints } from \"./types\";\r\n/**\r\n * Queryable Base Class\r\n *\r\n */\r\nexport class GraphQueryable extends ODataQueryable {\r\n    /**\r\n     * Creates a new instance of the Queryable class\r\n     *\r\n     * @constructor\r\n     * @param baseUrl A string or Queryable that should form the base part of the url\r\n     *\r\n     */\r\n    constructor(baseUrl, path) {\r\n        super();\r\n        if (typeof baseUrl === \"string\") {\r\n            const urlStr = baseUrl;\r\n            this._parentUrl = urlStr;\r\n            this._url = combine(urlStr, path);\r\n        }\r\n        else {\r\n            this.extend(baseUrl, path);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new instance of the supplied factory and extends this into that new instance\r\n     *\r\n     * @param factory constructor for the new queryable\r\n     */\r\n    as(factory) {\r\n        const o = new factory(this._url, null);\r\n        return extend(o, this, true);\r\n    }\r\n    /**\r\n     * Gets the full url with query information\r\n     *\r\n     */\r\n    toUrlAndQuery() {\r\n        let url = this.toUrl();\r\n        if (!isUrlAbsolute(url)) {\r\n            url = combine(\"https://graph.microsoft.com\", url);\r\n        }\r\n        if (this.query.size > 0) {\r\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\r\n            url += `${char}${Array.from(this.query).map((v) => v[0] + \"=\" + v[1]).join(\"&\")}`;\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * Gets a parent for this instance as specified\r\n     *\r\n     * @param factory The contructor for the class to create\r\n     */\r\n    getParent(factory, baseUrl = this.parentUrl, path) {\r\n        return new factory(baseUrl, path);\r\n    }\r\n    /**\r\n     * Clones this queryable into a new queryable instance of T\r\n     * @param factory Constructor used to create the new instance\r\n     * @param additionalPath Any additional path to include in the clone\r\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\r\n     */\r\n    clone(factory, additionalPath, includeBatch = true) {\r\n        let clone = new factory(this, additionalPath);\r\n        clone.configure(this._options);\r\n        // TODO:: include batching info in clone\r\n        if (includeBatch) {\r\n            clone = clone.inBatch(this._batch);\r\n        }\r\n        return clone;\r\n    }\r\n    setEndpoint(endpoint) {\r\n        this._url = GraphEndpoints.ensure(this._url, endpoint);\r\n        return this;\r\n    }\r\n    /**\r\n     * Converts the current instance to a request context\r\n     *\r\n     * @param verb The request verb\r\n     * @param options The set of supplied request options\r\n     * @param parser The supplied ODataParser instance\r\n     * @param pipeline Optional request processing pipeline\r\n     */\r\n    toRequestContext(verb, options = {}, parser, pipeline) {\r\n        // TODO:: add batch support\r\n        return Promise.resolve({\r\n            batch: this.batch,\r\n            batchDependency: () => void (0),\r\n            cachingOptions: this._cachingOptions,\r\n            clientFactory: () => new GraphHttpClient(),\r\n            isBatched: this.hasBatch,\r\n            isCached: /^get$/i.test(verb) && this._useCaching,\r\n            options: options,\r\n            parser: parser,\r\n            pipeline: pipeline,\r\n            requestAbsoluteUrl: this.toUrlAndQuery(),\r\n            requestId: getGUID(),\r\n            verb: verb,\r\n        });\r\n    }\r\n}\r\n/**\r\n * Represents a REST collection which can be filtered, paged, and selected\r\n *\r\n */\r\nexport class GraphQueryableCollection extends GraphQueryable {\r\n    /**\r\n     *\r\n     * @param filter The string representing the filter query\r\n     */\r\n    filter(filter) {\r\n        this.query.set(\"$filter\", filter);\r\n        return this;\r\n    }\r\n    /**\r\n     * Choose which fields to return\r\n     *\r\n     * @param selects One or more fields to return\r\n     */\r\n    select(...selects) {\r\n        if (selects.length > 0) {\r\n            this.query.set(\"$select\", selects.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Expands fields such as lookups to get additional data\r\n     *\r\n     * @param expands The Fields for which to expand the values\r\n     */\r\n    expand(...expands) {\r\n        if (expands.length > 0) {\r\n            this.query.set(\"$expand\", expands.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Orders based on the supplied fields\r\n     *\r\n     * @param orderby The name of the field on which to sort\r\n     * @param ascending If false DESC is appended, otherwise ASC (default)\r\n     */\r\n    orderBy(orderBy, ascending = true) {\r\n        const o = \"$orderby\";\r\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\r\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\r\n        this.query.set(o, query.join(\",\"));\r\n        return this;\r\n    }\r\n    /**\r\n     * Limits the query to only return the specified number of items\r\n     *\r\n     * @param top The query row limit\r\n     */\r\n    top(top) {\r\n        this.query.set(\"$top\", top.toString());\r\n        return this;\r\n    }\r\n    /**\r\n     * Skips a set number of items in the return set\r\n     *\r\n     * @param num Number of items to skip\r\n     */\r\n    skip(num) {\r\n        this.query.set(\"$top\", num.toString());\r\n        return this;\r\n    }\r\n    /**\r\n     * \tTo request second and subsequent pages of Graph data\r\n     */\r\n    skipToken(token) {\r\n        this.query.set(\"$skiptoken\", token);\r\n        return this;\r\n    }\r\n    /**\r\n     * \tRetrieves the total count of matching resources\r\n     */\r\n    get count() {\r\n        this.query.set(\"$count\", \"true\");\r\n        return this;\r\n    }\r\n}\r\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\r\n    /**\r\n     * \tTo request second and subsequent pages of Graph data\r\n     */\r\n    search(query) {\r\n        this.query.set(\"$search\", query);\r\n        return this;\r\n    }\r\n}\r\n/**\r\n * Represents an instance that can be selected\r\n *\r\n */\r\nexport class GraphQueryableInstance extends GraphQueryable {\r\n    /**\r\n     * Choose which fields to return\r\n     *\r\n     * @param selects One or more fields to return\r\n     */\r\n    select(...selects) {\r\n        if (selects.length > 0) {\r\n            this.query.set(\"$select\", selects.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Expands fields such as lookups to get additional data\r\n     *\r\n     * @param expands The Fields for which to expand the values\r\n     */\r\n    expand(...expands) {\r\n        if (expands.length > 0) {\r\n            this.query.set(\"$expand\", expands.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n}\r\n//# sourceMappingURL=graphqueryable.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\nexport class Members extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"members\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\r\n     * the members navigation property. You can add users or other groups.\r\n     * Important: You can add only users to Office 365 groups.\r\n     *\r\n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\r\n     */\r\n    add(id) {\r\n        return this.clone(Members, \"$ref\").postCore({\r\n            body: jsS({\r\n                \"@odata.id\": id,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Gets a member of the group by id\r\n     *\r\n     * @param id Group member's id\r\n     */\r\n    getById(id) {\r\n        return new Member(this, id);\r\n    }\r\n}\r\nexport class Member extends GraphQueryableInstance {\r\n}\r\nexport class Owners extends Members {\r\n    constructor(baseUrl, path = \"owners\") {\r\n        super(baseUrl, path);\r\n    }\r\n}\r\n//# sourceMappingURL=members.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\n// import { Attachments } from \"./attachments\";\r\nexport class Calendars extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"calendars\") {\r\n        super(baseUrl, path);\r\n    }\r\n}\r\nexport class Calendar extends GraphQueryableInstance {\r\n    get events() {\r\n        return new Events(this);\r\n    }\r\n}\r\nexport class Events extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"events\") {\r\n        super(baseUrl, path);\r\n    }\r\n    getById(id) {\r\n        return new Event(this, id);\r\n    }\r\n    /**\r\n     * Adds a new event to the collection\r\n     *\r\n     * @param properties The set of properties used to create the event\r\n     */\r\n    add(properties) {\r\n        return this.postCore({\r\n            body: jsS(properties),\r\n        }).then(r => {\r\n            return {\r\n                data: r,\r\n                event: this.getById(r.id),\r\n            };\r\n        });\r\n    }\r\n}\r\nexport class Event extends GraphQueryableInstance {\r\n    // TODO:: when supported\r\n    // /**\r\n    //  * Gets the collection of attachments for this event\r\n    //  */\r\n    // public get attachments(): Attachments {\r\n    //     return new Attachments(this);\r\n    // }\r\n    /**\r\n     * Update the properties of an event object\r\n     *\r\n     * @param properties Set of properties of this event to update\r\n     */\r\n    update(properties) {\r\n        return this.patchCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n    /**\r\n     * Deletes this event\r\n     */\r\n    delete() {\r\n        return this.deleteCore();\r\n    }\r\n}\r\n//# sourceMappingURL=calendars.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\nexport class Attachments extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"attachments\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets a member of the group by id\r\n     *\r\n     * @param id Attachment id\r\n     */\r\n    getById(id) {\r\n        return new Attachment(this, id);\r\n    }\r\n    /**\r\n     * Add attachment to this collection\r\n     *\r\n     * @param name Name given to the attachment file\r\n     * @param bytes File content\r\n     */\r\n    addFile(name, bytes) {\r\n        return this.postCore({\r\n            body: jsS({\r\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\r\n                contentBytes: bytes,\r\n                name: name,\r\n            }),\r\n        });\r\n    }\r\n}\r\nexport class Attachment extends GraphQueryableInstance {\r\n}\r\n//# sourceMappingURL=attachments.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\nimport { Attachments } from \"./attachments\";\r\nexport class Conversations extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"conversations\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Create a new conversation by including a thread and a post.\r\n     *\r\n     * @param properties Properties used to create the new conversation\r\n     */\r\n    add(properties) {\r\n        return this.postCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n    /**\r\n     * Gets a conversation from this collection by id\r\n     *\r\n     * @param id Group member's id\r\n     */\r\n    getById(id) {\r\n        return new Conversation(this, id);\r\n    }\r\n}\r\nexport class Threads extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"threads\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets a thread from this collection by id\r\n     *\r\n     * @param id Group member's id\r\n     */\r\n    getById(id) {\r\n        return new Thread(this, id);\r\n    }\r\n    /**\r\n     * Adds a new thread to this collection\r\n     *\r\n     * @param properties properties used to create the new thread\r\n     * @returns Id of the new thread\r\n     */\r\n    add(properties) {\r\n        return this.postCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n}\r\nexport class Posts extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"posts\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets a thread from this collection by id\r\n     *\r\n     * @param id Group member's id\r\n     */\r\n    getById(id) {\r\n        return new Post(this, id);\r\n    }\r\n    /**\r\n     * Adds a new thread to this collection\r\n     *\r\n     * @param properties properties used to create the new thread\r\n     * @returns Id of the new thread\r\n     */\r\n    add(properties) {\r\n        return this.postCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n}\r\nexport class Conversation extends GraphQueryableInstance {\r\n    /**\r\n     * Get all the threads in a group conversation.\r\n     */\r\n    get threads() {\r\n        return new Threads(this);\r\n    }\r\n    /**\r\n     * Updates this conversation\r\n     */\r\n    update(properties) {\r\n        return this.patchCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n    /**\r\n     * Deletes this member from the group\r\n     */\r\n    delete() {\r\n        return this.deleteCore();\r\n    }\r\n}\r\nexport class Thread extends GraphQueryableInstance {\r\n    /**\r\n     * Get all the threads in a group conversation.\r\n     */\r\n    get posts() {\r\n        return new Posts(this);\r\n    }\r\n    /**\r\n     * Reply to a thread in a group conversation and add a new post to it\r\n     *\r\n     * @param post Contents of the post\r\n     */\r\n    reply(post) {\r\n        return this.clone(Thread, \"reply\").postCore({\r\n            body: jsS({\r\n                post: post,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Deletes this member from the group\r\n     */\r\n    delete() {\r\n        return this.deleteCore();\r\n    }\r\n}\r\nexport class Post extends GraphQueryableInstance {\r\n    get attachments() {\r\n        return new Attachments(this);\r\n    }\r\n    /**\r\n     * Deletes this post\r\n     */\r\n    delete() {\r\n        return this.deleteCore();\r\n    }\r\n    /**\r\n     * Forward a post to a recipient\r\n     */\r\n    forward(info) {\r\n        return this.clone(Post, \"forward\").postCore({\r\n            body: jsS(info),\r\n        });\r\n    }\r\n    /**\r\n     * Reply to a thread in a group conversation and add a new post to it\r\n     *\r\n     * @param post Contents of the post\r\n     */\r\n    reply(post) {\r\n        return this.clone(Post, \"reply\").postCore({\r\n            body: jsS({\r\n                post: post,\r\n            }),\r\n        });\r\n    }\r\n}\r\nexport class Senders extends GraphQueryableCollection {\r\n    constructor(baseUrl, path) {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Add a new user or group to this senders collection\r\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\r\n     */\r\n    add(id) {\r\n        return this.clone(Senders, \"$ref\").postCore({\r\n            body: jsS({\r\n                \"@odata.id\": id,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Removes the entity from the collection\r\n     *\r\n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\r\n     */\r\n    remove(id) {\r\n        const remover = this.clone(Senders, \"$ref\");\r\n        remover.query.set(\"$id\", id);\r\n        return remover.deleteCore();\r\n    }\r\n}\r\n//# sourceMappingURL=conversations.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nexport class Plans extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"planner/plans\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets a plan from this collection by id\r\n     *\r\n     * @param id Plan's id\r\n     */\r\n    getById(id) {\r\n        return new Plan(this, id);\r\n    }\r\n}\r\nexport class Plan extends GraphQueryableInstance {\r\n}\r\n//# sourceMappingURL=plans.js.map","import { GraphQueryableInstance } from \"./graphqueryable\";\r\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\r\nexport class Photo extends GraphQueryableInstance {\r\n    constructor(baseUrl, path = \"photo\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets the image bytes as a blob (browser)\r\n     */\r\n    getBlob() {\r\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\r\n    }\r\n    /**\r\n     * Gets the image file byets as a Buffer (node.js)\r\n     */\r\n    getBuffer() {\r\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\r\n    }\r\n    /**\r\n     * Sets the file bytes\r\n     *\r\n     * @param content Image file contents, max 4 MB\r\n     */\r\n    setContent(content) {\r\n        return this.clone(Photo, \"$value\", false).patchCore({\r\n            body: content,\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=photos.js.map","import { graph, } from \"./rest\";\r\nimport { GroupType, } from \"./groups\";\r\nimport { GraphQueryableInstance, } from \"./graphqueryable\";\r\nimport { GraphEndpoints, } from \"./types\";\r\nimport { ODataDefaultParser, } from \"@pnp/odata\";\r\nimport { jsS, } from \"@pnp/common\";\r\nexport class Teams {\r\n    /**\r\n     * Creates a new team and associated Group with the given information\r\n     */\r\n    create(name, description = \"\", teamProperties = {}) {\r\n        const groupProps = description && description.length > 0 ? { description: description } : {};\r\n        return graph.groups.add(name, name, GroupType.Office365, groupProps).then((gar) => {\r\n            return gar.group.createTeam(teamProperties).then(data => {\r\n                return {\r\n                    data: data,\r\n                    group: gar.group,\r\n                    team: new Team(gar.group),\r\n                };\r\n            });\r\n        });\r\n    }\r\n}\r\n/**\r\n * Represents a Microsoft Team\r\n */\r\nexport class Team extends GraphQueryableInstance {\r\n    constructor(baseUrl, path = \"team\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Updates this team instance's properties\r\n     *\r\n     * @param properties The set of properties to update\r\n     */\r\n    // TODO:: update properties to be typed once type is available in graph-types\r\n    update(properties) {\r\n        return this.clone(Team, \"\").setEndpoint(GraphEndpoints.Beta).patchCore({\r\n            body: jsS(properties),\r\n        }).then(data => {\r\n            return {\r\n                data: data,\r\n                team: this,\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Executes the currently built request\r\n     *\r\n     * @param parser Allows you to specify a parser to handle the result\r\n     * @param getOptions The options used for this request\r\n     */\r\n    get(parser = new ODataDefaultParser(), options = {}) {\r\n        return this.clone(Team, \"\").setEndpoint(GraphEndpoints.Beta).getCore(parser, options);\r\n    }\r\n}\r\n//# sourceMappingURL=teams.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nimport { Members, Owners } from \"./members\";\r\nimport { extend, jsS } from \"@pnp/common\";\r\nimport { Calendar, Events } from \"./calendars\";\r\nimport { Conversations, Senders } from \"./conversations\";\r\nimport { Plans } from \"./plans\";\r\nimport { Photo } from \"./photos\";\r\nimport { Team } from \"./teams\";\r\nimport { GraphEndpoints } from \"./types\";\r\nexport var GroupType;\r\n(function (GroupType) {\r\n    /**\r\n     * Office 365 (aka unified group)\r\n     */\r\n    GroupType[GroupType[\"Office365\"] = 0] = \"Office365\";\r\n    /**\r\n     * Dynamic membership\r\n     */\r\n    GroupType[GroupType[\"Dynamic\"] = 1] = \"Dynamic\";\r\n    /**\r\n     * Security\r\n     */\r\n    GroupType[GroupType[\"Security\"] = 2] = \"Security\";\r\n})(GroupType || (GroupType = {}));\r\n/**\r\n * Describes a collection of Field objects\r\n *\r\n */\r\nexport class Groups extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"groups\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets a group from the collection using the specified id\r\n     *\r\n     * @param id Id of the group to get from this collection\r\n     */\r\n    getById(id) {\r\n        return new Group(this, id);\r\n    }\r\n    /**\r\n     * Create a new group as specified in the request body.\r\n     *\r\n     * @param name Name to display in the address book for the group\r\n     * @param mailNickname Mail alias for the group\r\n     * @param groupType Type of group being created\r\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\r\n     */\r\n    add(name, mailNickname, groupType, additionalProperties = {}) {\r\n        let postBody = extend({\r\n            displayName: name,\r\n            mailEnabled: groupType === GroupType.Office365,\r\n            mailNickname: mailNickname,\r\n            securityEnabled: groupType !== GroupType.Office365,\r\n        }, additionalProperties);\r\n        // include a group type if required\r\n        if (groupType !== GroupType.Security) {\r\n            postBody = extend(postBody, {\r\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\r\n            });\r\n        }\r\n        return this.postCore({\r\n            body: jsS(postBody),\r\n        }).then(r => {\r\n            return {\r\n                data: r,\r\n                group: this.getById(r.id),\r\n            };\r\n        });\r\n    }\r\n}\r\n/**\r\n * Represents a group entity\r\n */\r\nexport class Group extends GraphQueryableInstance {\r\n    /**\r\n     * The calendar associated with this group\r\n     */\r\n    get calendar() {\r\n        return new Calendar(this, \"calendar\");\r\n    }\r\n    /**\r\n     * Retrieve a list of event objects\r\n     */\r\n    get events() {\r\n        return new Events(this);\r\n    }\r\n    /**\r\n     * Gets the collection of owners for this group\r\n     */\r\n    get owners() {\r\n        return new Owners(this);\r\n    }\r\n    /**\r\n     * The collection of plans for this group\r\n     */\r\n    get plans() {\r\n        return new Plans(this);\r\n    }\r\n    /**\r\n     * Gets the collection of members for this group\r\n     */\r\n    get members() {\r\n        return new Members(this);\r\n    }\r\n    /**\r\n     * Gets the conversations collection for this group\r\n     */\r\n    get conversations() {\r\n        return new Conversations(this);\r\n    }\r\n    /**\r\n     * Gets the collection of accepted senders for this group\r\n     */\r\n    get acceptedSenders() {\r\n        return new Senders(this, \"acceptedsenders\");\r\n    }\r\n    /**\r\n     * Gets the collection of rejected senders for this group\r\n     */\r\n    get rejectedSenders() {\r\n        return new Senders(this, \"rejectedsenders\");\r\n    }\r\n    /**\r\n     * The photo associated with the group\r\n     */\r\n    get photo() {\r\n        return new Photo(this);\r\n    }\r\n    /**\r\n     * Gets the team associated with this group, if it exists\r\n     */\r\n    get team() {\r\n        return new Team(this);\r\n    }\r\n    /**\r\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\r\n     */\r\n    addFavorite() {\r\n        return this.clone(Group, \"addFavorite\").postCore();\r\n    }\r\n    /**\r\n     * Creates a Microsoft Team associated with this group\r\n     *\r\n     * @param properties Initial properties for the new Team\r\n     */\r\n    createTeam(properties) {\r\n        return this.clone(Group, \"team\").setEndpoint(GraphEndpoints.Beta).putCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n    /**\r\n     * Return all the groups that the specified group is a member of. The check is transitive\r\n     *\r\n     * @param securityEnabledOnly\r\n     */\r\n    getMemberGroups(securityEnabledOnly = false) {\r\n        return this.clone(Group, \"getMemberGroups\").postCore({\r\n            body: jsS({\r\n                securityEnabledOnly: securityEnabledOnly,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Deletes this group\r\n     */\r\n    delete() {\r\n        return this.deleteCore();\r\n    }\r\n    /**\r\n     * Update the properties of a group object\r\n     *\r\n     * @param properties Set of properties of this group to update\r\n     */\r\n    update(properties) {\r\n        return this.patchCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n    /**\r\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\r\n     */\r\n    removeFavorite() {\r\n        return this.clone(Group, \"removeFavorite\").postCore();\r\n    }\r\n    /**\r\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\r\n     */\r\n    resetUnseenCount() {\r\n        return this.clone(Group, \"resetUnseenCount\").postCore();\r\n    }\r\n    /**\r\n     * Calling this method will enable the current user to receive email notifications for this group,\r\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\r\n     */\r\n    subscribeByMail() {\r\n        return this.clone(Group, \"subscribeByMail\").postCore();\r\n    }\r\n    /**\r\n     * Calling this method will prevent the current user from receiving email notifications for this group\r\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\r\n     */\r\n    unsubscribeByMail() {\r\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\r\n    }\r\n    /**\r\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\r\n     *\r\n     * @param start Start date and time of the time range\r\n     * @param end End date and time of the time range\r\n     */\r\n    getCalendarView(start, end) {\r\n        const view = this.clone(Group, \"calendarView\");\r\n        view.query.set(\"startDateTime\", start.toISOString());\r\n        view.query.set(\"endDateTime\", end.toISOString());\r\n        return view.get();\r\n    }\r\n}\r\n//# sourceMappingURL=groups.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\n/**\r\n * Represents a onenote entity\r\n */\r\nexport class OneNote extends GraphQueryableInstance {\r\n    constructor(baseUrl, path = \"onenote\") {\r\n        super(baseUrl, path);\r\n    }\r\n    get notebooks() {\r\n        return new Notebooks(this);\r\n    }\r\n    get sections() {\r\n        return new Sections(this);\r\n    }\r\n    get pages() {\r\n        return new Pages(this);\r\n    }\r\n}\r\n/**\r\n * Describes a collection of Notebook objects\r\n *\r\n */\r\nexport class Notebooks extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"notebooks\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets a notebook instance by id\r\n     *\r\n     * @param id Notebook id\r\n     */\r\n    getById(id) {\r\n        return new Notebook(this, id);\r\n    }\r\n    /**\r\n     * Create a new notebook as specified in the request body.\r\n     *\r\n     * @param displayName Notebook display name\r\n     */\r\n    add(displayName) {\r\n        const postBody = {\r\n            displayName: displayName,\r\n        };\r\n        return this.postCore({\r\n            body: jsS(postBody),\r\n        }).then(r => {\r\n            return {\r\n                data: r,\r\n                notebook: this.getById(r.id),\r\n            };\r\n        });\r\n    }\r\n}\r\n/**\r\n * Describes a notebook instance\r\n *\r\n */\r\nexport class Notebook extends GraphQueryableInstance {\r\n    constructor(baseUrl, path) {\r\n        super(baseUrl, path);\r\n    }\r\n    get sections() {\r\n        return new Sections(this);\r\n    }\r\n}\r\n/**\r\n * Describes a collection of Sections objects\r\n *\r\n */\r\nexport class Sections extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"sections\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets a section instance by id\r\n     *\r\n     * @param id Section id\r\n     */\r\n    getById(id) {\r\n        return new Section(this, id);\r\n    }\r\n    /**\r\n     * Adds a new section\r\n     *\r\n     * @param displayName New section display name\r\n     */\r\n    add(displayName) {\r\n        const postBody = {\r\n            displayName: displayName,\r\n        };\r\n        return this.postCore({\r\n            body: jsS(postBody),\r\n        }).then(r => {\r\n            return {\r\n                data: r,\r\n                section: this.getById(r.id),\r\n            };\r\n        });\r\n    }\r\n}\r\n/**\r\n * Describes a sections instance\r\n *\r\n */\r\nexport class Section extends GraphQueryableInstance {\r\n    constructor(baseUrl, path) {\r\n        super(baseUrl, path);\r\n    }\r\n}\r\n/**\r\n * Describes a collection of Pages objects\r\n *\r\n */\r\nexport class Pages extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"pages\") {\r\n        super(baseUrl, path);\r\n    }\r\n}\r\n//# sourceMappingURL=onenote.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nimport { jsS, extend } from \"@pnp/common\";\r\nexport class Contacts extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"contacts\") {\r\n        super(baseUrl, path);\r\n    }\r\n    getById(id) {\r\n        return new Contact(this, id);\r\n    }\r\n    /**\r\n    * Create a new Contact for the user.\r\n    *\r\n    * @param givenName The contact's given name.\r\n    * @param surName The contact's surname.\r\n    * @param emailAddresses The contact's email addresses.\r\n    * @param businessPhones The contact's business phone numbers.\r\n    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\r\n    */\r\n    add(givenName, surName, emailAddresses, businessPhones, additionalProperties = {}) {\r\n        const postBody = extend({\r\n            businessPhones: businessPhones,\r\n            emailAddresses: emailAddresses,\r\n            givenName: givenName,\r\n            surName: surName,\r\n        }, additionalProperties);\r\n        return this.postCore({\r\n            body: jsS(postBody),\r\n        }).then(r => {\r\n            return {\r\n                contact: this.getById(r.id),\r\n                data: r,\r\n            };\r\n        });\r\n    }\r\n}\r\nexport class Contact extends GraphQueryableInstance {\r\n    /**\r\n     * Deletes this contact\r\n     */\r\n    delete() {\r\n        return this.deleteCore();\r\n    }\r\n    /**\r\n     * Update the properties of a contact object\r\n     *\r\n     * @param properties Set of properties of this contact to update\r\n     */\r\n    update(properties) {\r\n        return this.patchCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n}\r\nexport class ContactFolders extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"contactFolders\") {\r\n        super(baseUrl, path);\r\n    }\r\n    getById(id) {\r\n        return new ContactFolder(this, id);\r\n    }\r\n    /**\r\n     * Create a new Contact Folder for the user.\r\n     *\r\n     * @param displayName The folder's display name.\r\n     * @param parentFolderId The ID of the folder's parent folder.\r\n     */\r\n    add(displayName, parentFolderId) {\r\n        const postBody = {\r\n            displayName: displayName,\r\n            parentFolderId: parentFolderId,\r\n        };\r\n        return this.postCore({\r\n            body: jsS(postBody),\r\n        }).then(r => {\r\n            return {\r\n                contactFolder: this.getById(r.id),\r\n                data: r,\r\n            };\r\n        });\r\n    }\r\n}\r\nexport class ContactFolder extends GraphQueryableInstance {\r\n    /**\r\n     * Gets the contacts in this contact folder\r\n     */\r\n    get contacts() {\r\n        return new Contacts(this);\r\n    }\r\n    /**\r\n    * Gets the contacts in this contact folder\r\n    */\r\n    get childFolders() {\r\n        return new ChildFolders(this);\r\n    }\r\n    /**\r\n     * Deletes this contact folder\r\n     */\r\n    delete() {\r\n        return this.deleteCore();\r\n    }\r\n    /**\r\n     * Update the properties of a contact folder\r\n     *\r\n     * @param properties Set of properties of this contact folder to update\r\n     */\r\n    update(properties) {\r\n        return this.patchCore({\r\n            body: jsS(properties),\r\n        });\r\n    }\r\n}\r\nexport class ChildFolders extends GraphQueryableInstance {\r\n    constructor(baseUrl, path = \"childFolders\") {\r\n        super(baseUrl, path);\r\n    }\r\n    getById(id) {\r\n        return new ContactFolder(this, id);\r\n    }\r\n    /**\r\n     * Create a new Child Folder in Contact folder.\r\n     *\r\n     * @param displayName The folder's display name.\r\n     * @param parentFolderId The ID of the folder's parent folder.\r\n     */\r\n    add(displayName, parentFolderId) {\r\n        const postBody = {\r\n            displayName: displayName,\r\n            parentFolderId: parentFolderId,\r\n        };\r\n        return this.postCore({\r\n            body: jsS(postBody),\r\n        }).then(r => {\r\n            return {\r\n                contactFolder: this.getById(r.id),\r\n                data: r,\r\n            };\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=contacts.js.map","import { GraphQueryableInstance } from \"./graphqueryable\";\r\nimport { OneNote } from \"./onenote\";\r\nimport { Contacts, ContactFolders } from \"./contacts\";\r\nexport class Me extends GraphQueryableInstance {\r\n    constructor(baseUrl, path = \"me\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n    * The onenote associated with me\r\n    */\r\n    get onenote() {\r\n        return new OneNote(this);\r\n    }\r\n    /**\r\n    * The Contacts associated with the user\r\n    */\r\n    get contacts() {\r\n        return new Contacts(this);\r\n    }\r\n    /**\r\n     * The Contact Folders associated with the user\r\n     */\r\n    get contactFolders() {\r\n        return new ContactFolders(this);\r\n    }\r\n}\r\n//# sourceMappingURL=me.js.map","import { GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\r\nimport { Contacts, ContactFolders } from \"./contacts\";\r\nimport { OneNote } from \"./onenote\";\r\n/**\r\n * Describes a collection of Users objects\r\n *\r\n */\r\nexport class Users extends GraphQueryableCollection {\r\n    constructor(baseUrl, path = \"users\") {\r\n        super(baseUrl, path);\r\n    }\r\n    /**\r\n     * Gets a user from the collection using the specified id\r\n     *\r\n     * @param id Id of the user to get from this collection\r\n     */\r\n    getById(id) {\r\n        return new User(this, id);\r\n    }\r\n}\r\n/**\r\n * Represents a user entity\r\n */\r\nexport class User extends GraphQueryableInstance {\r\n    /**\r\n    * The onenote associated with me\r\n    */\r\n    get onenote() {\r\n        return new OneNote(this);\r\n    }\r\n    /**\r\n    * The Contacts associated with the user\r\n    */\r\n    get contacts() {\r\n        return new Contacts(this);\r\n    }\r\n    /**\r\n    * The Contact Folders associated with the user\r\n    */\r\n    get contactFolders() {\r\n        return new ContactFolders(this);\r\n    }\r\n}\r\n//# sourceMappingURL=users.js.map","import { GraphQueryable } from \"./graphqueryable\";\r\nimport { setup as _setup, } from \"./config/graphlibconfig\";\r\nimport { Groups } from \"./groups\";\r\nimport { Me } from \"./me\";\r\nimport { Teams } from \"./teams\";\r\nimport { Users } from \"./users\";\r\nexport class GraphRest extends GraphQueryable {\r\n    constructor(baseUrl, path) {\r\n        super(baseUrl, path);\r\n    }\r\n    get groups() {\r\n        return new Groups(this);\r\n    }\r\n    get teams() {\r\n        return new Teams();\r\n    }\r\n    get me() {\r\n        return new Me(this);\r\n    }\r\n    get users() {\r\n        return new Users(this);\r\n    }\r\n    setup(config) {\r\n        _setup(config);\r\n    }\r\n}\r\nexport let graph = new GraphRest(\"v1.0\");\r\n//# sourceMappingURL=rest.js.map","import { ODataBatch } from \"@pnp/odata\";\r\nimport { Logger } from \"@pnp/logging\";\r\nimport { objectDefinedNotNull, extend, jsS } from \"@pnp/common\";\r\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\r\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\r\nexport class GraphBatch extends ODataBatch {\r\n    constructor(batchUrl = \"https://graph.microsoft.com/beta/$batch\") {\r\n        super();\r\n        this.batchUrl = batchUrl;\r\n    }\r\n    executeImpl() {\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, 1 /* Info */);\r\n        const client = new GraphHttpClient();\r\n        const batchRequest = {\r\n            requests: this.formatRequests(),\r\n        };\r\n        const batchOptions = {\r\n            body: jsS(batchRequest),\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n        };\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, 1 /* Info */);\r\n        // let nextLinkFlag = false;\r\n        return client.fetch(this.batchUrl, batchOptions)\r\n            .then(r => r.json())\r\n            .then(this._parseResponse)\r\n            .then((parsedResponse) => {\r\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, 1 /* Info */);\r\n            return parsedResponse.responses.reduce((chain, response, index) => {\r\n                const request = this.requests[index];\r\n                if (objectDefinedNotNull(request)) {\r\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, 0 /* Verbose */);\r\n                    return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\r\n                }\r\n                else {\r\n                    // do we have a next url? if no this is an error\r\n                    if (parsedResponse.nextLink) {\r\n                        throw Error(\"Could not properly parse responses to match requests in batch.\");\r\n                    }\r\n                    // nextLinkFlag = true;\r\n                    // keep the chain moving, but don't add anything for this request yet\r\n                    // here we need to process the next link - so what do we do?\r\n                    // need to append a .then()\r\n                    // TODO::\r\n                    return chain;\r\n                }\r\n            }, Promise.resolve());\r\n        });\r\n    }\r\n    formatRequests() {\r\n        return this.requests.map((reqInfo, index) => {\r\n            let requestFragment = {\r\n                id: `${++index}`,\r\n                method: reqInfo.method,\r\n                url: reqInfo.url,\r\n            };\r\n            let headers = {};\r\n            // merge global config headers\r\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\r\n                headers = extend(headers, GraphRuntimeConfig.headers);\r\n            }\r\n            if (reqInfo.options !== undefined) {\r\n                // merge per request headers\r\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\r\n                    headers = extend(headers, reqInfo.options.headers);\r\n                }\r\n                // add a request body\r\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\r\n                    requestFragment = extend(requestFragment, {\r\n                        body: reqInfo.options.body,\r\n                    });\r\n                }\r\n            }\r\n            requestFragment = extend(requestFragment, {\r\n                headers: headers,\r\n            });\r\n            return requestFragment;\r\n        });\r\n    }\r\n    _parseResponse(graphResponse) {\r\n        return new Promise((resolve) => {\r\n            const parsedResponses = new Array(this.requests.length).fill(null);\r\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\r\n                const response = graphResponse.responses[i];\r\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\r\n                // the array of requests and make it easier to map them by index\r\n                const responseId = parseInt(response.id, 10) - 1;\r\n                if (response.status === 204) {\r\n                    parsedResponses[responseId] = new Response();\r\n                }\r\n                else {\r\n                    parsedResponses[responseId] = new Response(null, {\r\n                        headers: response.headers,\r\n                        status: response.status,\r\n                    });\r\n                }\r\n            }\r\n            resolve({\r\n                nextLink: graphResponse.nextLink,\r\n                responses: parsedResponses,\r\n            });\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=batch.js.map","import { stringIsNullOrEmpty } from \"@pnp/common\";\r\nexport function extractWebUrl(candidateUrl) {\r\n    if (stringIsNullOrEmpty(candidateUrl)) {\r\n        return \"\";\r\n    }\r\n    let index = candidateUrl.indexOf(\"_api/\");\r\n    if (index < 0) {\r\n        index = candidateUrl.indexOf(\"_vti_bin/\");\r\n    }\r\n    if (index > -1) {\r\n        return candidateUrl.substr(0, index);\r\n    }\r\n    // if all else fails just give them what they gave us back\r\n    return candidateUrl;\r\n}\r\n//# sourceMappingURL=extractweburl.js.map","import { extend, combine, hOP } from \"@pnp/common\";\r\nimport { Logger } from \"@pnp/logging\";\r\nimport { ODataParserBase } from \"@pnp/odata\";\r\nimport { extractWebUrl } from \"./utils/extractweburl\";\r\nexport function odataUrlFrom(candidate) {\r\n    const parts = [];\r\n    const s = [\"odata.type\", \"odata.editLink\", \"__metadata\", \"odata.metadata\"];\r\n    if (hOP(candidate, s[0]) && candidate[s[0]] === \"SP.Web\") {\r\n        // webs return an absolute url in the editLink\r\n        if (hOP(candidate, s[1])) {\r\n            parts.push(candidate[s[1]]);\r\n        }\r\n        else if (hOP(candidate, s[2])) {\r\n            // we are dealing with verbose, which has an absolute uri\r\n            parts.push(candidate.__metadata.uri);\r\n        }\r\n    }\r\n    else {\r\n        if (hOP(candidate, s[3]) && hOP(candidate, s[1])) {\r\n            // we are dealign with minimal metadata (default)\r\n            parts.push(extractWebUrl(candidate[s[3]]), \"_api\", candidate[s[1]]);\r\n        }\r\n        else if (hOP(candidate, s[1])) {\r\n            parts.push(\"_api\", candidate[s[1]]);\r\n        }\r\n        else if (hOP(candidate, s[2])) {\r\n            // we are dealing with verbose, which has an absolute uri\r\n            parts.push(candidate.__metadata.uri);\r\n        }\r\n    }\r\n    if (parts.length < 1) {\r\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", 2 /* Warning */);\r\n        return \"\";\r\n    }\r\n    return combine(...parts);\r\n}\r\nclass SPODataEntityParserImpl extends ODataParserBase {\r\n    constructor(factory) {\r\n        super();\r\n        this.factory = factory;\r\n        this.hydrate = (d) => {\r\n            const o = new this.factory(odataUrlFrom(d), null);\r\n            return extend(o, d);\r\n        };\r\n    }\r\n    parse(r) {\r\n        return super.parse(r).then((d) => {\r\n            const o = new this.factory(odataUrlFrom(d), null);\r\n            return extend(o, d);\r\n        });\r\n    }\r\n}\r\nclass SPODataEntityArrayParserImpl extends ODataParserBase {\r\n    constructor(factory) {\r\n        super();\r\n        this.factory = factory;\r\n        this.hydrate = (d) => {\r\n            return d.map(v => {\r\n                const o = new this.factory(odataUrlFrom(v), null);\r\n                return extend(o, v);\r\n            });\r\n        };\r\n    }\r\n    parse(r) {\r\n        return super.parse(r).then((d) => {\r\n            return d.map(v => {\r\n                const o = new this.factory(odataUrlFrom(v), null);\r\n                return extend(o, v);\r\n            });\r\n        });\r\n    }\r\n}\r\nexport function spODataEntity(factory) {\r\n    return new SPODataEntityParserImpl(factory);\r\n}\r\nexport function spODataEntityArray(factory) {\r\n    return new SPODataEntityArrayParserImpl(factory);\r\n}\r\n//# sourceMappingURL=odata.js.map","import { combine, extend } from \"@pnp/common\";\r\nimport { ODataDefaultParser } from \"@pnp/odata\";\r\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\r\nexport class CachedDigest {\r\n}\r\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\r\nconst digests = new Map();\r\nexport class DigestCache {\r\n    constructor(_httpClient, _digests = digests) {\r\n        this._httpClient = _httpClient;\r\n        this._digests = _digests;\r\n    }\r\n    getDigest(webUrl) {\r\n        const cachedDigest = this._digests.get(webUrl);\r\n        if (cachedDigest !== undefined) {\r\n            const now = new Date();\r\n            if (now < cachedDigest.expiration) {\r\n                return Promise.resolve(cachedDigest.value);\r\n            }\r\n        }\r\n        const url = combine(webUrl, \"/_api/contextinfo\");\r\n        const headers = {\r\n            \"Accept\": \"application/json;odata=verbose\",\r\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\r\n        };\r\n        return this._httpClient.fetchRaw(url, {\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: extend(headers, SPRuntimeConfig.headers, true),\r\n            method: \"POST\",\r\n        }).then((response) => {\r\n            const parser = new ODataDefaultParser();\r\n            return parser.parse(response).then((d) => d.GetContextWebInformation);\r\n        }).then((data) => {\r\n            const newCachedDigest = new CachedDigest();\r\n            newCachedDigest.value = data.FormDigestValue;\r\n            const seconds = data.FormDigestTimeoutSeconds;\r\n            const expiration = new Date();\r\n            expiration.setTime(expiration.getTime() + 1000 * seconds);\r\n            newCachedDigest.expiration = expiration;\r\n            this._digests.set(webUrl, newCachedDigest);\r\n            return newCachedDigest.value;\r\n        });\r\n    }\r\n    clear() {\r\n        this._digests.clear();\r\n    }\r\n}\r\n//# sourceMappingURL=digestcache.js.map","import { DigestCache } from \"./digestcache\";\r\nimport { extend, mergeHeaders, getCtxCallback, } from \"@pnp/common\";\r\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nexport class SPHttpClient {\r\n    constructor(_impl = SPRuntimeConfig.fetchClientFactory()) {\r\n        this._impl = _impl;\r\n        this._digestCache = new DigestCache(this);\r\n    }\r\n    fetch(url, options = {}) {\r\n        let opts = extend(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\r\n        const headers = new Headers();\r\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\r\n        mergeHeaders(headers, SPRuntimeConfig.headers);\r\n        // second we add the local options so we can overwrite the globals\r\n        mergeHeaders(headers, options.headers);\r\n        // lastly we apply any default headers we need that may not exist\r\n        if (!headers.has(\"Accept\")) {\r\n            headers.append(\"Accept\", \"application/json\");\r\n        }\r\n        if (!headers.has(\"Content-Type\")) {\r\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\r\n        }\r\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\r\n            headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-1.2.2\");\r\n        }\r\n        if (!headers.has(\"User-Agent\")) {\r\n            // this marks the requests for understanding by the service\r\n            headers.append(\"User-Agent\", \"NONISV|SharePointPnP|PnPCoreJS/1.2.2\");\r\n        }\r\n        opts = extend(opts, { headers: headers });\r\n        if (opts.method && opts.method.toUpperCase() !== \"GET\") {\r\n            // if we have either a request digest or an authorization header we don't need a digest\r\n            if (!headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\r\n                return this._digestCache.getDigest(extractWebUrl(url))\r\n                    .then((digest) => {\r\n                    headers.append(\"X-RequestDigest\", digest);\r\n                    return this.fetchRaw(url, opts);\r\n                });\r\n            }\r\n        }\r\n        return this.fetchRaw(url, opts);\r\n    }\r\n    fetchRaw(url, options = {}) {\r\n        // here we need to normalize the headers\r\n        const rawHeaders = new Headers();\r\n        mergeHeaders(rawHeaders, options.headers);\r\n        options = extend(options, { headers: rawHeaders });\r\n        const retry = (ctx) => {\r\n            // handles setting the proper timeout for a retry\r\n            const setRetry = (response) => {\r\n                let delay;\r\n                if (response.headers.has(\"Retry-After\")) {\r\n                    // if we have gotten a header, use that value as the delay value\r\n                    delay = parseInt(response.headers.get(\"Retry-After\"), 10);\r\n                }\r\n                else {\r\n                    // grab our current delay\r\n                    delay = ctx.delay;\r\n                    // Increment our counters.\r\n                    ctx.delay *= 2;\r\n                }\r\n                ctx.attempts++;\r\n                // If we have exceeded the retry count, reject.\r\n                if (ctx.retryCount <= ctx.attempts) {\r\n                    ctx.reject(Error(`Retry count exceeded (${ctx.retryCount}) for request. Response status: [${response.status}] ${response.statusText}`));\r\n                }\r\n                else {\r\n                    // Set our retry timeout for {delay} milliseconds.\r\n                    setTimeout(getCtxCallback(this, retry, ctx), delay);\r\n                }\r\n            };\r\n            // send the actual request\r\n            this._impl.fetch(url, options).then((response) => {\r\n                if (response.status === 429) {\r\n                    // we have been throttled\r\n                    setRetry(response);\r\n                }\r\n                else {\r\n                    ctx.resolve(response);\r\n                }\r\n            }).catch((response) => {\r\n                if (response.status === 503) {\r\n                    // http status code 503, we can retry this\r\n                    setRetry(response);\r\n                }\r\n                else {\r\n                    ctx.reject(response);\r\n                }\r\n            });\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            const retryContext = {\r\n                attempts: 0,\r\n                delay: 100,\r\n                reject: reject,\r\n                resolve: resolve,\r\n                retryCount: 7,\r\n            };\r\n            retry.call(this, retryContext);\r\n        });\r\n    }\r\n    get(url, options = {}) {\r\n        const opts = extend(options, { method: \"GET\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n    post(url, options = {}) {\r\n        const opts = extend(options, { method: \"POST\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n    patch(url, options = {}) {\r\n        const opts = extend(options, { method: \"PATCH\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n    delete(url, options = {}) {\r\n        const opts = extend(options, { method: \"DELETE\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n}\r\n//# sourceMappingURL=sphttpclient.js.map","import * as tslib_1 from \"tslib\";\r\nvar SiteUsers_1;\r\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { SiteGroups } from \"./sitegroups\";\r\nimport { jsS, extend } from \"@pnp/common\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Describes a collection of all site collection users\r\n *\r\n */\r\nlet SiteUsers = SiteUsers_1 = class SiteUsers extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a user from the collection by id\r\n     *\r\n     * @param id The id of the user to retrieve\r\n     */\r\n    getById(id) {\r\n        return new SiteUser(this, `getById(${id})`);\r\n    }\r\n    /**\r\n     * Gets a user from the collection by email\r\n     *\r\n     * @param email The email address of the user to retrieve\r\n     */\r\n    getByEmail(email) {\r\n        return new SiteUser(this, `getByEmail('${email}')`);\r\n    }\r\n    /**\r\n     * Gets a user from the collection by login name\r\n     *\r\n     * @param loginName The login name of the user to retrieve\r\n     */\r\n    getByLoginName(loginName) {\r\n        const su = new SiteUser(this);\r\n        su.concat(`('!@v::${encodeURIComponent(loginName)}')`);\r\n        return su;\r\n    }\r\n    /**\r\n     * Removes a user from the collection by id\r\n     *\r\n     * @param id The id of the user to remove\r\n     */\r\n    removeById(id) {\r\n        return this.clone(SiteUsers_1, `removeById(${id})`).postCore();\r\n    }\r\n    /**\r\n     * Removes a user from the collection by login name\r\n     *\r\n     * @param loginName The login name of the user to remove\r\n     */\r\n    removeByLoginName(loginName) {\r\n        const o = this.clone(SiteUsers_1, `removeByLoginName(@v)`);\r\n        o.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return o.postCore();\r\n    }\r\n    /**\r\n     * Adds a user to a group\r\n     *\r\n     * @param loginName The login name of the user to add to the group\r\n     *\r\n     */\r\n    add(loginName) {\r\n        return this.clone(SiteUsers_1, null).postCore({\r\n            body: jsS(extend(metadata(\"SP.User\"), { LoginName: loginName })),\r\n        }).then(() => this.getByLoginName(loginName));\r\n    }\r\n};\r\nSiteUsers = SiteUsers_1 = tslib_1.__decorate([\r\n    defaultPath(\"siteusers\")\r\n], SiteUsers);\r\nexport { SiteUsers };\r\n/**\r\n * Describes a single user\r\n *\r\n */\r\nexport class SiteUser extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * Updates this user instance with the supplied properties\r\n        *\r\n        * @param properties A plain object of property names and values to update for the user\r\n        */\r\n        this.update = this._update(\"SP.User\", data => ({ data, user: this }));\r\n        /**\r\n         * Delete this user\r\n         *\r\n         */\r\n        this.delete = this._delete;\r\n    }\r\n    /**\r\n     * Gets the groups for this user\r\n     *\r\n     */\r\n    get groups() {\r\n        return new SiteGroups(this, \"groups\");\r\n    }\r\n}\r\n/**\r\n * Represents the current user\r\n */\r\nlet CurrentUser = class CurrentUser extends SharePointQueryableInstance {\r\n};\r\nCurrentUser = tslib_1.__decorate([\r\n    defaultPath(\"currentuser\")\r\n], CurrentUser);\r\nexport { CurrentUser };\r\n//# sourceMappingURL=siteusers.js.map","export function metadata(type) {\r\n    return {\r\n        \"__metadata\": { \"type\": type },\r\n    };\r\n}\r\n//# sourceMappingURL=metadata.js.map","import { combine, isUrlAbsolute, mergeOptions, extend, getGUID, jsS, } from \"@pnp/common\";\r\nimport { ODataQueryable, } from \"@pnp/odata\";\r\nimport { Logger } from \"@pnp/logging\";\r\nimport { SPHttpClient } from \"./net/sphttpclient\";\r\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * SharePointQueryable Base Class\r\n *\r\n */\r\nexport class SharePointQueryable extends ODataQueryable {\r\n    /**\r\n     * Creates a new instance of the SharePointQueryable class\r\n     *\r\n     * @constructor\r\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\r\n     *\r\n     */\r\n    constructor(baseUrl, path) {\r\n        super();\r\n        this._forceCaching = false;\r\n        if (typeof baseUrl === \"string\") {\r\n            // we need to do some extra parsing to get the parent url correct if we are\r\n            // being created from just a string.\r\n            if (isUrlAbsolute(baseUrl) || baseUrl.lastIndexOf(\"/\") < 0) {\r\n                this._parentUrl = baseUrl;\r\n                this._url = combine(baseUrl, path);\r\n            }\r\n            else if (baseUrl.lastIndexOf(\"/\") > baseUrl.lastIndexOf(\"(\")) {\r\n                // .../items(19)/fields\r\n                const index = baseUrl.lastIndexOf(\"/\");\r\n                this._parentUrl = baseUrl.slice(0, index);\r\n                path = combine(baseUrl.slice(index), path);\r\n                this._url = combine(this._parentUrl, path);\r\n            }\r\n            else {\r\n                // .../items(19)\r\n                const index = baseUrl.lastIndexOf(\"(\");\r\n                this._parentUrl = baseUrl.slice(0, index);\r\n                this._url = combine(baseUrl, path);\r\n            }\r\n        }\r\n        else {\r\n            this.extend(baseUrl, path);\r\n            const target = baseUrl.query.get(\"@target\");\r\n            if (target !== undefined) {\r\n                this.query.set(\"@target\", target);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new instance of the supplied factory and extends this into that new instance\r\n     *\r\n     * @param factory constructor for the new SharePointQueryable\r\n     */\r\n    as(factory) {\r\n        const o = new factory(this._url, null);\r\n        return extend(o, this, true);\r\n    }\r\n    /**\r\n     * Gets the full url with query information\r\n     *\r\n     */\r\n    toUrlAndQuery() {\r\n        const aliasedParams = new Map(this.query);\r\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\r\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, 0 /* Verbose */);\r\n            aliasedParams.set(labelName, `'${value}'`);\r\n            return labelName;\r\n        });\r\n        if (aliasedParams.size > 0) {\r\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\r\n            url += `${char}${Array.from(aliasedParams).map((v) => v[0] + \"=\" + v[1]).join(\"&\")}`;\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * Choose which fields to return\r\n     *\r\n     * @param selects One or more fields to return\r\n     */\r\n    select(...selects) {\r\n        if (selects.length > 0) {\r\n            this.query.set(\"$select\", selects.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Expands fields such as lookups to get additional data\r\n     *\r\n     * @param expands The Fields for which to expand the values\r\n     */\r\n    expand(...expands) {\r\n        if (expands.length > 0) {\r\n            this.query.set(\"$expand\", expands.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets a parent for this instance as specified\r\n     *\r\n     * @param factory The contructor for the class to create\r\n     */\r\n    getParent(factory, baseUrl = this.parentUrl, path, batch) {\r\n        let parent = new factory(baseUrl, path).configureFrom(this);\r\n        const t = \"@target\";\r\n        if (this.query.has(t)) {\r\n            parent.query.set(t, this.query.get(t));\r\n        }\r\n        if (batch !== undefined) {\r\n            parent = parent.inBatch(batch);\r\n        }\r\n        return parent;\r\n    }\r\n    /**\r\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\r\n     * @param factory Constructor used to create the new instance\r\n     * @param additionalPath Any additional path to include in the clone\r\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\r\n     */\r\n    clone(factory, additionalPath, includeBatch = true) {\r\n        let clone = new factory(this, additionalPath).configureFrom(this);\r\n        const t = \"@target\";\r\n        if (this.query.has(t)) {\r\n            clone.query.set(t, this.query.get(t));\r\n        }\r\n        if (includeBatch && this.hasBatch) {\r\n            clone = clone.inBatch(this.batch);\r\n        }\r\n        return clone;\r\n    }\r\n    /**\r\n     * Converts the current instance to a request context\r\n     *\r\n     * @param verb The request verb\r\n     * @param options The set of supplied request options\r\n     * @param parser The supplied ODataParser instance\r\n     * @param pipeline Optional request processing pipeline\r\n     */\r\n    toRequestContext(verb, options = {}, parser, pipeline) {\r\n        const dependencyDispose = this.hasBatch ? this.addBatchDependency() : () => { return; };\r\n        return toAbsoluteUrl(this.toUrlAndQuery()).then(url => {\r\n            mergeOptions(options, this._options);\r\n            // build our request context\r\n            const context = {\r\n                batch: this.batch,\r\n                batchDependency: dependencyDispose,\r\n                cachingOptions: this._cachingOptions,\r\n                clientFactory: () => new SPHttpClient(),\r\n                isBatched: this.hasBatch,\r\n                isCached: this._forceCaching || (this._useCaching && /^get$/i.test(verb)),\r\n                options: options,\r\n                parser: parser,\r\n                pipeline: pipeline,\r\n                requestAbsoluteUrl: url,\r\n                requestId: getGUID(),\r\n                verb: verb,\r\n            };\r\n            return context;\r\n        });\r\n    }\r\n}\r\n/**\r\n * Represents a REST collection which can be filtered, paged, and selected\r\n *\r\n */\r\nexport class SharePointQueryableCollection extends SharePointQueryable {\r\n    /**\r\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\r\n     *\r\n     * @param filter The string representing the filter query\r\n     */\r\n    filter(filter) {\r\n        this.query.set(\"$filter\", filter);\r\n        return this;\r\n    }\r\n    /**\r\n     * Orders based on the supplied fields\r\n     *\r\n     * @param orderby The name of the field on which to sort\r\n     * @param ascending If false DESC is appended, otherwise ASC (default)\r\n     */\r\n    orderBy(orderBy, ascending = true) {\r\n        const o = \"$orderby\";\r\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\r\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\r\n        this.query.set(o, query.join(\",\"));\r\n        return this;\r\n    }\r\n    /**\r\n     * Skips the specified number of items\r\n     *\r\n     * @param skip The number of items to skip\r\n     */\r\n    skip(skip) {\r\n        this.query.set(\"$skip\", skip.toString());\r\n        return this;\r\n    }\r\n    /**\r\n     * Limits the query to only return the specified number of items\r\n     *\r\n     * @param top The query row limit\r\n     */\r\n    top(top) {\r\n        this.query.set(\"$top\", top.toString());\r\n        return this;\r\n    }\r\n}\r\n/**\r\n * Represents an instance that can be selected\r\n *\r\n */\r\nexport class SharePointQueryableInstance extends SharePointQueryable {\r\n    /**\r\n     * Curries the update function into the common pieces\r\n     *\r\n     * @param type\r\n     * @param mapper\r\n     */\r\n    _update(type, mapper) {\r\n        return (props) => this.postCore({\r\n            body: jsS(extend(metadata(type), props)),\r\n            headers: {\r\n                \"X-HTTP-Method\": \"MERGE\",\r\n            },\r\n        }).then((d) => mapper(d, props));\r\n    }\r\n    /**\r\n    * Deletes this instance\r\n    *\r\n    */\r\n    _delete() {\r\n        return this.postCore({\r\n            headers: {\r\n                \"X-HTTP-Method\": \"DELETE\",\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Deletes this instance with an etag value in the headers\r\n     *\r\n     * @param eTag eTag to delete\r\n     */\r\n    _deleteWithETag(eTag = \"*\") {\r\n        return this.postCore({\r\n            headers: {\r\n                \"IF-Match\": eTag,\r\n                \"X-HTTP-Method\": \"DELETE\",\r\n            },\r\n        });\r\n    }\r\n}\r\n/**\r\n * Decorator used to specify the default path for SharePointQueryable objects\r\n *\r\n * @param path\r\n */\r\nexport function defaultPath(path) {\r\n    return function (target) {\r\n        return class extends target {\r\n            constructor(...args) {\r\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\r\n            }\r\n        };\r\n    };\r\n}\r\n//# sourceMappingURL=sharepointqueryable.js.map","import * as tslib_1 from \"tslib\";\r\nvar SiteGroups_1;\r\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { SiteUsers } from \"./siteusers\";\r\nimport { extend, jsS, hOP } from \"@pnp/common\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Principal Type enum\r\n *\r\n */\r\nexport var PrincipalType;\r\n(function (PrincipalType) {\r\n    PrincipalType[PrincipalType[\"None\"] = 0] = \"None\";\r\n    PrincipalType[PrincipalType[\"User\"] = 1] = \"User\";\r\n    PrincipalType[PrincipalType[\"DistributionList\"] = 2] = \"DistributionList\";\r\n    PrincipalType[PrincipalType[\"SecurityGroup\"] = 4] = \"SecurityGroup\";\r\n    PrincipalType[PrincipalType[\"SharePointGroup\"] = 8] = \"SharePointGroup\";\r\n    PrincipalType[PrincipalType[\"All\"] = 15] = \"All\";\r\n})(PrincipalType || (PrincipalType = {}));\r\n/**\r\n * Describes a collection of site groups\r\n *\r\n */\r\nlet SiteGroups = SiteGroups_1 = class SiteGroups extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a group from the collection by id\r\n     *\r\n     * @param id The id of the group to retrieve\r\n     */\r\n    getById(id) {\r\n        const sg = new SiteGroup(this);\r\n        sg.concat(`(${id})`);\r\n        return sg;\r\n    }\r\n    /**\r\n     * Adds a new group to the site collection\r\n     *\r\n     * @param props The group properties object of property names and values to be set for the group\r\n     */\r\n    add(properties) {\r\n        const postBody = jsS(extend(metadata(\"SP.Group\"), properties));\r\n        return this.postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                group: this.getById(data.Id),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Gets a group from the collection by name\r\n     *\r\n     * @param groupName The name of the group to retrieve\r\n     */\r\n    getByName(groupName) {\r\n        return new SiteGroup(this, `getByName('${groupName}')`);\r\n    }\r\n    /**\r\n     * Removes the group with the specified member id from the collection\r\n     *\r\n     * @param id The id of the group to remove\r\n     */\r\n    removeById(id) {\r\n        return this.clone(SiteGroups_1, `removeById('${id}')`).postCore();\r\n    }\r\n    /**\r\n     * Removes the cross-site group with the specified name from the collection\r\n     *\r\n     * @param loginName The name of the group to remove\r\n     */\r\n    removeByLoginName(loginName) {\r\n        return this.clone(SiteGroups_1, `removeByLoginName('${loginName}')`).postCore();\r\n    }\r\n};\r\nSiteGroups = SiteGroups_1 = tslib_1.__decorate([\r\n    defaultPath(\"sitegroups\")\r\n], SiteGroups);\r\nexport { SiteGroups };\r\n/**\r\n * Describes a single group\r\n *\r\n */\r\nexport class SiteGroup extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.update = this._update(\"SP.Group\", (d, p) => {\r\n            let retGroup = this;\r\n            if (hOP(p, \"Title\")) {\r\n                /* tslint:disable-next-line no-string-literal */\r\n                retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${p[\"Title\"]}')`);\r\n            }\r\n            return {\r\n                data: d,\r\n                group: retGroup,\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Gets the users for this group\r\n     *\r\n     */\r\n    get users() {\r\n        return new SiteUsers(this, \"users\");\r\n    }\r\n}\r\n//# sourceMappingURL=sitegroups.js.map","import * as tslib_1 from \"tslib\";\r\nvar RoleAssignments_1;\r\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { SiteGroups } from \"./sitegroups\";\r\nimport { extend, jsS, hOP } from \"@pnp/common\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Describes a set of role assignments for the current scope\r\n *\r\n */\r\nlet RoleAssignments = RoleAssignments_1 = class RoleAssignments extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets the role assignment associated with the specified principal id from the collection.\r\n     *\r\n     * @param id The id of the role assignment\r\n     */\r\n    getById(id) {\r\n        const ra = new RoleAssignment(this);\r\n        ra.concat(`(${id})`);\r\n        return ra;\r\n    }\r\n    /**\r\n     * Adds a new role assignment with the specified principal and role definitions to the collection\r\n     *\r\n     * @param principalId The id of the user or group to assign permissions to\r\n     * @param roleDefId The id of the role definition that defines the permissions to assign\r\n     *\r\n     */\r\n    add(principalId, roleDefId) {\r\n        return this.clone(RoleAssignments_1, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\r\n    }\r\n    /**\r\n     * Removes the role assignment with the specified principal and role definition from the collection\r\n     *\r\n     * @param principalId The id of the user or group in the role assignment\r\n     * @param roleDefId The id of the role definition in the role assignment\r\n     *\r\n     */\r\n    remove(principalId, roleDefId) {\r\n        return this.clone(RoleAssignments_1, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\r\n    }\r\n};\r\nRoleAssignments = RoleAssignments_1 = tslib_1.__decorate([\r\n    defaultPath(\"roleassignments\")\r\n], RoleAssignments);\r\nexport { RoleAssignments };\r\n/**\r\n * Describes a role assignment\r\n *\r\n */\r\nexport class RoleAssignment extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Deletes this role assignment\r\n         *\r\n         */\r\n        this.delete = this._delete;\r\n    }\r\n    /**\r\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\r\n     *\r\n     */\r\n    get groups() {\r\n        return new SiteGroups(this, \"groups\");\r\n    }\r\n    /**\r\n     * Gets the role definition bindings for this role assignment\r\n     *\r\n     */\r\n    get bindings() {\r\n        return new RoleDefinitionBindings(this);\r\n    }\r\n}\r\n/**\r\n * Describes a collection of role definitions\r\n *\r\n */\r\nlet RoleDefinitions = class RoleDefinitions extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets the role definition with the specified id from the collection\r\n     *\r\n     * @param id The id of the role definition\r\n     *\r\n     */\r\n    getById(id) {\r\n        return new RoleDefinition(this, `getById(${id})`);\r\n    }\r\n    /**\r\n     * Gets the role definition with the specified name\r\n     *\r\n     * @param name The name of the role definition\r\n     *\r\n     */\r\n    getByName(name) {\r\n        return new RoleDefinition(this, `getbyname('${name}')`);\r\n    }\r\n    /**\r\n     * Gets the role definition with the specified role type\r\n     *\r\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\r\n     *\r\n     */\r\n    getByType(roleTypeKind) {\r\n        return new RoleDefinition(this, `getbytype(${roleTypeKind})`);\r\n    }\r\n    /**\r\n     * Creates a role definition\r\n     *\r\n     * @param name The new role definition's name\r\n     * @param description The new role definition's description\r\n     * @param order The order in which the role definition appears\r\n     * @param basePermissions The permissions mask for this role definition\r\n     *\r\n     */\r\n    add(name, description, order, basePermissions) {\r\n        const postBody = jsS({\r\n            BasePermissions: extend({ __metadata: { type: \"SP.BasePermissions\" } }, basePermissions),\r\n            Description: description,\r\n            Name: name,\r\n            Order: order,\r\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\r\n        });\r\n        return this.postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                definition: this.getById(data.Id),\r\n            };\r\n        });\r\n    }\r\n};\r\nRoleDefinitions = tslib_1.__decorate([\r\n    defaultPath(\"roledefinitions\")\r\n], RoleDefinitions);\r\nexport { RoleDefinitions };\r\n/**\r\n * Describes a role definition\r\n *\r\n */\r\nexport class RoleDefinition extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Deletes this role definition\r\n         *\r\n         */\r\n        this.delete = this._delete;\r\n        /* tslint:enable */\r\n    }\r\n    /**\r\n     * Updates this role definition with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the role definition\r\n     */\r\n    /* tslint:disable no-string-literal */\r\n    update(properties) {\r\n        const s = [\"BasePermissions\"];\r\n        if (hOP(properties, s[0]) !== undefined) {\r\n            properties[s[0]] = extend({ __metadata: { type: \"SP.\" + s[0] } }, properties[s[0]]);\r\n        }\r\n        const postBody = jsS(extend(metadata(\"SP.RoleDefinition\"), properties));\r\n        return this.postCore({\r\n            body: postBody,\r\n            headers: {\r\n                \"X-HTTP-Method\": \"MERGE\",\r\n            },\r\n        }).then((data) => {\r\n            let retDef = this;\r\n            if (hOP(properties, \"Name\")) {\r\n                const parent = this.getParent(RoleDefinitions, this.parentUrl, \"\");\r\n                retDef = parent.getByName(properties[\"Name\"]);\r\n            }\r\n            return {\r\n                data: data,\r\n                definition: retDef,\r\n            };\r\n        });\r\n    }\r\n}\r\n/**\r\n * Describes the role definitons bound to a role assignment object\r\n *\r\n */\r\nlet RoleDefinitionBindings = class RoleDefinitionBindings extends SharePointQueryableCollection {\r\n};\r\nRoleDefinitionBindings = tslib_1.__decorate([\r\n    defaultPath(\"roledefinitionbindings\")\r\n], RoleDefinitionBindings);\r\nexport { RoleDefinitionBindings };\r\n//# sourceMappingURL=roles.js.map","/**\r\n * Determines the display mode of the given control or view\r\n */\r\nexport var ControlMode;\r\n(function (ControlMode) {\r\n    ControlMode[ControlMode[\"Display\"] = 1] = \"Display\";\r\n    ControlMode[ControlMode[\"Edit\"] = 2] = \"Edit\";\r\n    ControlMode[ControlMode[\"New\"] = 3] = \"New\";\r\n})(ControlMode || (ControlMode = {}));\r\n/**\r\n * Specifies the type of the field.\r\n */\r\nexport var FieldTypes;\r\n(function (FieldTypes) {\r\n    FieldTypes[FieldTypes[\"Invalid\"] = 0] = \"Invalid\";\r\n    FieldTypes[FieldTypes[\"Integer\"] = 1] = \"Integer\";\r\n    FieldTypes[FieldTypes[\"Text\"] = 2] = \"Text\";\r\n    FieldTypes[FieldTypes[\"Note\"] = 3] = \"Note\";\r\n    FieldTypes[FieldTypes[\"DateTime\"] = 4] = \"DateTime\";\r\n    FieldTypes[FieldTypes[\"Counter\"] = 5] = \"Counter\";\r\n    FieldTypes[FieldTypes[\"Choice\"] = 6] = \"Choice\";\r\n    FieldTypes[FieldTypes[\"Lookup\"] = 7] = \"Lookup\";\r\n    FieldTypes[FieldTypes[\"Boolean\"] = 8] = \"Boolean\";\r\n    FieldTypes[FieldTypes[\"Number\"] = 9] = \"Number\";\r\n    FieldTypes[FieldTypes[\"Currency\"] = 10] = \"Currency\";\r\n    FieldTypes[FieldTypes[\"URL\"] = 11] = \"URL\";\r\n    FieldTypes[FieldTypes[\"Computed\"] = 12] = \"Computed\";\r\n    FieldTypes[FieldTypes[\"Threading\"] = 13] = \"Threading\";\r\n    FieldTypes[FieldTypes[\"Guid\"] = 14] = \"Guid\";\r\n    FieldTypes[FieldTypes[\"MultiChoice\"] = 15] = \"MultiChoice\";\r\n    FieldTypes[FieldTypes[\"GridChoice\"] = 16] = \"GridChoice\";\r\n    FieldTypes[FieldTypes[\"Calculated\"] = 17] = \"Calculated\";\r\n    FieldTypes[FieldTypes[\"File\"] = 18] = \"File\";\r\n    FieldTypes[FieldTypes[\"Attachments\"] = 19] = \"Attachments\";\r\n    FieldTypes[FieldTypes[\"User\"] = 20] = \"User\";\r\n    FieldTypes[FieldTypes[\"Recurrence\"] = 21] = \"Recurrence\";\r\n    FieldTypes[FieldTypes[\"CrossProjectLink\"] = 22] = \"CrossProjectLink\";\r\n    FieldTypes[FieldTypes[\"ModStat\"] = 23] = \"ModStat\";\r\n    FieldTypes[FieldTypes[\"Error\"] = 24] = \"Error\";\r\n    FieldTypes[FieldTypes[\"ContentTypeId\"] = 25] = \"ContentTypeId\";\r\n    FieldTypes[FieldTypes[\"PageSeparator\"] = 26] = \"PageSeparator\";\r\n    FieldTypes[FieldTypes[\"ThreadIndex\"] = 27] = \"ThreadIndex\";\r\n    FieldTypes[FieldTypes[\"WorkflowStatus\"] = 28] = \"WorkflowStatus\";\r\n    FieldTypes[FieldTypes[\"AllDayEvent\"] = 29] = \"AllDayEvent\";\r\n    FieldTypes[FieldTypes[\"WorkflowEventType\"] = 30] = \"WorkflowEventType\";\r\n})(FieldTypes || (FieldTypes = {}));\r\nexport var DateTimeFieldFormatType;\r\n(function (DateTimeFieldFormatType) {\r\n    DateTimeFieldFormatType[DateTimeFieldFormatType[\"DateOnly\"] = 0] = \"DateOnly\";\r\n    DateTimeFieldFormatType[DateTimeFieldFormatType[\"DateTime\"] = 1] = \"DateTime\";\r\n})(DateTimeFieldFormatType || (DateTimeFieldFormatType = {}));\r\n/**\r\n * Specifies the control settings while adding a field.\r\n */\r\nexport var AddFieldOptions;\r\n(function (AddFieldOptions) {\r\n    /**\r\n     *  Specify that a new field added to the list must also be added to the default content type in the site collection\r\n     */\r\n    AddFieldOptions[AddFieldOptions[\"DefaultValue\"] = 0] = \"DefaultValue\";\r\n    /**\r\n     * Specify that a new field added to the list must also be added to the default content type in the site collection.\r\n     */\r\n    AddFieldOptions[AddFieldOptions[\"AddToDefaultContentType\"] = 1] = \"AddToDefaultContentType\";\r\n    /**\r\n     * Specify that a new field must not be added to any other content type\r\n     */\r\n    AddFieldOptions[AddFieldOptions[\"AddToNoContentType\"] = 2] = \"AddToNoContentType\";\r\n    /**\r\n     *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\r\n     */\r\n    AddFieldOptions[AddFieldOptions[\"AddToAllContentTypes\"] = 4] = \"AddToAllContentTypes\";\r\n    /**\r\n     * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\r\n     */\r\n    AddFieldOptions[AddFieldOptions[\"AddFieldInternalNameHint\"] = 8] = \"AddFieldInternalNameHint\";\r\n    /**\r\n     * Specify that a new field that is added to the specified list must also be added to the default list view\r\n     */\r\n    AddFieldOptions[AddFieldOptions[\"AddFieldToDefaultView\"] = 16] = \"AddFieldToDefaultView\";\r\n    /**\r\n     * Specify to confirm that no other field has the same display name\r\n     */\r\n    AddFieldOptions[AddFieldOptions[\"AddFieldCheckDisplayName\"] = 32] = \"AddFieldCheckDisplayName\";\r\n})(AddFieldOptions || (AddFieldOptions = {}));\r\nexport var CalendarType;\r\n(function (CalendarType) {\r\n    CalendarType[CalendarType[\"Gregorian\"] = 1] = \"Gregorian\";\r\n    CalendarType[CalendarType[\"Japan\"] = 3] = \"Japan\";\r\n    CalendarType[CalendarType[\"Taiwan\"] = 4] = \"Taiwan\";\r\n    CalendarType[CalendarType[\"Korea\"] = 5] = \"Korea\";\r\n    CalendarType[CalendarType[\"Hijri\"] = 6] = \"Hijri\";\r\n    CalendarType[CalendarType[\"Thai\"] = 7] = \"Thai\";\r\n    CalendarType[CalendarType[\"Hebrew\"] = 8] = \"Hebrew\";\r\n    CalendarType[CalendarType[\"GregorianMEFrench\"] = 9] = \"GregorianMEFrench\";\r\n    CalendarType[CalendarType[\"GregorianArabic\"] = 10] = \"GregorianArabic\";\r\n    CalendarType[CalendarType[\"GregorianXLITEnglish\"] = 11] = \"GregorianXLITEnglish\";\r\n    CalendarType[CalendarType[\"GregorianXLITFrench\"] = 12] = \"GregorianXLITFrench\";\r\n    CalendarType[CalendarType[\"KoreaJapanLunar\"] = 14] = \"KoreaJapanLunar\";\r\n    CalendarType[CalendarType[\"ChineseLunar\"] = 15] = \"ChineseLunar\";\r\n    CalendarType[CalendarType[\"SakaEra\"] = 16] = \"SakaEra\";\r\n    CalendarType[CalendarType[\"UmAlQura\"] = 23] = \"UmAlQura\";\r\n})(CalendarType || (CalendarType = {}));\r\nexport var UrlFieldFormatType;\r\n(function (UrlFieldFormatType) {\r\n    UrlFieldFormatType[UrlFieldFormatType[\"Hyperlink\"] = 0] = \"Hyperlink\";\r\n    UrlFieldFormatType[UrlFieldFormatType[\"Image\"] = 1] = \"Image\";\r\n})(UrlFieldFormatType || (UrlFieldFormatType = {}));\r\nexport var PermissionKind;\r\n(function (PermissionKind) {\r\n    /**\r\n     * Has no permissions on the Site. Not available through the user interface.\r\n     */\r\n    PermissionKind[PermissionKind[\"EmptyMask\"] = 0] = \"EmptyMask\";\r\n    /**\r\n     * View items in lists, documents in document libraries, and Web discussion comments.\r\n     */\r\n    PermissionKind[PermissionKind[\"ViewListItems\"] = 1] = \"ViewListItems\";\r\n    /**\r\n     * Add items to lists, documents to document libraries, and Web discussion comments.\r\n     */\r\n    PermissionKind[PermissionKind[\"AddListItems\"] = 2] = \"AddListItems\";\r\n    /**\r\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\r\n     * in documents, and customize Web Part Pages in document libraries.\r\n     */\r\n    PermissionKind[PermissionKind[\"EditListItems\"] = 3] = \"EditListItems\";\r\n    /**\r\n     * Delete items from a list, documents from a document library, and Web discussion\r\n     * comments in documents.\r\n     */\r\n    PermissionKind[PermissionKind[\"DeleteListItems\"] = 4] = \"DeleteListItems\";\r\n    /**\r\n     * Approve a minor version of a list item or document.\r\n     */\r\n    PermissionKind[PermissionKind[\"ApproveItems\"] = 5] = \"ApproveItems\";\r\n    /**\r\n     * View the source of documents with server-side file handlers.\r\n     */\r\n    PermissionKind[PermissionKind[\"OpenItems\"] = 6] = \"OpenItems\";\r\n    /**\r\n     * View past versions of a list item or document.\r\n     */\r\n    PermissionKind[PermissionKind[\"ViewVersions\"] = 7] = \"ViewVersions\";\r\n    /**\r\n     * Delete past versions of a list item or document.\r\n     */\r\n    PermissionKind[PermissionKind[\"DeleteVersions\"] = 8] = \"DeleteVersions\";\r\n    /**\r\n     * Discard or check in a document which is checked out to another user.\r\n     */\r\n    PermissionKind[PermissionKind[\"CancelCheckout\"] = 9] = \"CancelCheckout\";\r\n    /**\r\n     * Create, change, and delete personal views of lists.\r\n     */\r\n    PermissionKind[PermissionKind[\"ManagePersonalViews\"] = 10] = \"ManagePersonalViews\";\r\n    /**\r\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\r\n     */\r\n    PermissionKind[PermissionKind[\"ManageLists\"] = 12] = \"ManageLists\";\r\n    /**\r\n     * View forms, views, and application pages, and enumerate lists.\r\n     */\r\n    PermissionKind[PermissionKind[\"ViewFormPages\"] = 13] = \"ViewFormPages\";\r\n    /**\r\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\r\n     * The list permissions in the site do not change.\r\n     */\r\n    PermissionKind[PermissionKind[\"AnonymousSearchAccessList\"] = 14] = \"AnonymousSearchAccessList\";\r\n    /**\r\n     * Allow users to open a Site, list, or folder to access items inside that container.\r\n     */\r\n    PermissionKind[PermissionKind[\"Open\"] = 17] = \"Open\";\r\n    /**\r\n     * View pages in a Site.\r\n     */\r\n    PermissionKind[PermissionKind[\"ViewPages\"] = 18] = \"ViewPages\";\r\n    /**\r\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\r\n     * a Windows SharePoint Services compatible editor.\r\n     */\r\n    PermissionKind[PermissionKind[\"AddAndCustomizePages\"] = 19] = \"AddAndCustomizePages\";\r\n    /**\r\n     * Apply a theme or borders to the entire Site.\r\n     */\r\n    PermissionKind[PermissionKind[\"ApplyThemeAndBorder\"] = 20] = \"ApplyThemeAndBorder\";\r\n    /**\r\n     * Apply a style sheet (.css file) to the Site.\r\n     */\r\n    PermissionKind[PermissionKind[\"ApplyStyleSheets\"] = 21] = \"ApplyStyleSheets\";\r\n    /**\r\n     * View reports on Site usage.\r\n     */\r\n    PermissionKind[PermissionKind[\"ViewUsageData\"] = 22] = \"ViewUsageData\";\r\n    /**\r\n     * Create a Site using Self-Service Site Creation.\r\n     */\r\n    PermissionKind[PermissionKind[\"CreateSSCSite\"] = 23] = \"CreateSSCSite\";\r\n    /**\r\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\r\n     */\r\n    PermissionKind[PermissionKind[\"ManageSubwebs\"] = 24] = \"ManageSubwebs\";\r\n    /**\r\n     * Create a group of users that can be used anywhere within the site collection.\r\n     */\r\n    PermissionKind[PermissionKind[\"CreateGroups\"] = 25] = \"CreateGroups\";\r\n    /**\r\n     * Create and change permission levels on the Site and assign permissions to users\r\n     * and groups.\r\n     */\r\n    PermissionKind[PermissionKind[\"ManagePermissions\"] = 26] = \"ManagePermissions\";\r\n    /**\r\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\r\n     * and WebDAV interfaces.\r\n     */\r\n    PermissionKind[PermissionKind[\"BrowseDirectories\"] = 27] = \"BrowseDirectories\";\r\n    /**\r\n     * View information about users of the Site.\r\n     */\r\n    PermissionKind[PermissionKind[\"BrowseUserInfo\"] = 28] = \"BrowseUserInfo\";\r\n    /**\r\n     * Add or remove personal Web Parts on a Web Part Page.\r\n     */\r\n    PermissionKind[PermissionKind[\"AddDelPrivateWebParts\"] = 29] = \"AddDelPrivateWebParts\";\r\n    /**\r\n     * Update Web Parts to display personalized information.\r\n     */\r\n    PermissionKind[PermissionKind[\"UpdatePersonalWebParts\"] = 30] = \"UpdatePersonalWebParts\";\r\n    /**\r\n     * Grant the ability to perform all administration tasks for the Site as well as\r\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\r\n     * through the object model or through the user interface (UI). When granted on the\r\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\r\n     * site collection scoped Features through the object model. To browse to the Site\r\n     * Collection Features page and activate or deactivate Site Collection scoped Features\r\n     * through the UI, you must be a Site Collection administrator.\r\n     */\r\n    PermissionKind[PermissionKind[\"ManageWeb\"] = 31] = \"ManageWeb\";\r\n    /**\r\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\r\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\r\n     */\r\n    PermissionKind[PermissionKind[\"AnonymousSearchAccessWebLists\"] = 32] = \"AnonymousSearchAccessWebLists\";\r\n    /**\r\n     * Use features that launch client applications. Otherwise, users must work on documents\r\n     * locally and upload changes.\r\n     */\r\n    PermissionKind[PermissionKind[\"UseClientIntegration\"] = 37] = \"UseClientIntegration\";\r\n    /**\r\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\r\n     */\r\n    PermissionKind[PermissionKind[\"UseRemoteAPIs\"] = 38] = \"UseRemoteAPIs\";\r\n    /**\r\n     * Manage alerts for all users of the Site.\r\n     */\r\n    PermissionKind[PermissionKind[\"ManageAlerts\"] = 39] = \"ManageAlerts\";\r\n    /**\r\n     * Create e-mail alerts.\r\n     */\r\n    PermissionKind[PermissionKind[\"CreateAlerts\"] = 40] = \"CreateAlerts\";\r\n    /**\r\n     * Allows a user to change his or her user information, such as adding a picture.\r\n     */\r\n    PermissionKind[PermissionKind[\"EditMyUserInfo\"] = 41] = \"EditMyUserInfo\";\r\n    /**\r\n     * Enumerate permissions on Site, list, folder, document, or list item.\r\n     */\r\n    PermissionKind[PermissionKind[\"EnumeratePermissions\"] = 63] = \"EnumeratePermissions\";\r\n    /**\r\n     * Has all permissions on the Site. Not available through the user interface.\r\n     */\r\n    PermissionKind[PermissionKind[\"FullMask\"] = 65] = \"FullMask\";\r\n})(PermissionKind || (PermissionKind = {}));\r\n/**\r\n * Specifies the type of a principal.\r\n */\r\n/* tslint:disable:no-bitwise */\r\nexport var PrincipalType;\r\n(function (PrincipalType) {\r\n    /**\r\n     * Enumeration whose value specifies no principal type.\r\n     */\r\n    PrincipalType[PrincipalType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Enumeration whose value specifies a user as the principal type.\r\n     */\r\n    PrincipalType[PrincipalType[\"User\"] = 1] = \"User\";\r\n    /**\r\n     * Enumeration whose value specifies a distribution list as the principal type.\r\n     */\r\n    PrincipalType[PrincipalType[\"DistributionList\"] = 2] = \"DistributionList\";\r\n    /**\r\n     * Enumeration whose value specifies a security group as the principal type.\r\n     */\r\n    PrincipalType[PrincipalType[\"SecurityGroup\"] = 4] = \"SecurityGroup\";\r\n    /**\r\n     * Enumeration whose value specifies a group as the principal type.\r\n     */\r\n    PrincipalType[PrincipalType[\"SharePointGroup\"] = 8] = \"SharePointGroup\";\r\n    /**\r\n     * Enumeration whose value specifies all principal types.\r\n     */\r\n    PrincipalType[PrincipalType[\"All\"] = 15] = \"All\";\r\n})(PrincipalType || (PrincipalType = {}));\r\n/* tslint:enable:no-bitwise */\r\n/**\r\n * Specifies the source of a principal.\r\n */\r\n/* tslint:disable:no-bitwise */\r\nexport var PrincipalSource;\r\n(function (PrincipalSource) {\r\n    /**\r\n     * Enumeration whose value specifies no principal source.\r\n     */\r\n    PrincipalSource[PrincipalSource[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Enumeration whose value specifies user information list as the principal source.\r\n     */\r\n    PrincipalSource[PrincipalSource[\"UserInfoList\"] = 1] = \"UserInfoList\";\r\n    /**\r\n     * Enumeration whose value specifies Active Directory as the principal source.\r\n     */\r\n    PrincipalSource[PrincipalSource[\"Windows\"] = 2] = \"Windows\";\r\n    /**\r\n     * Enumeration whose value specifies the current membership provider as the principal source.\r\n     */\r\n    PrincipalSource[PrincipalSource[\"MembershipProvider\"] = 4] = \"MembershipProvider\";\r\n    /**\r\n     * Enumeration whose value specifies the current role provider as the principal source.\r\n     */\r\n    PrincipalSource[PrincipalSource[\"RoleProvider\"] = 8] = \"RoleProvider\";\r\n    /**\r\n     * Enumeration whose value specifies all principal sources.\r\n     */\r\n    PrincipalSource[PrincipalSource[\"All\"] = 15] = \"All\";\r\n})(PrincipalSource || (PrincipalSource = {}));\r\n/* tslint:enable:no-bitwise */\r\nexport var RoleType;\r\n(function (RoleType) {\r\n    RoleType[RoleType[\"None\"] = 0] = \"None\";\r\n    RoleType[RoleType[\"Guest\"] = 1] = \"Guest\";\r\n    RoleType[RoleType[\"Reader\"] = 2] = \"Reader\";\r\n    RoleType[RoleType[\"Contributor\"] = 3] = \"Contributor\";\r\n    RoleType[RoleType[\"WebDesigner\"] = 4] = \"WebDesigner\";\r\n    RoleType[RoleType[\"Administrator\"] = 5] = \"Administrator\";\r\n})(RoleType || (RoleType = {}));\r\nexport var PageType;\r\n(function (PageType) {\r\n    PageType[PageType[\"Invalid\"] = -1] = \"Invalid\";\r\n    PageType[PageType[\"DefaultView\"] = 0] = \"DefaultView\";\r\n    PageType[PageType[\"NormalView\"] = 1] = \"NormalView\";\r\n    PageType[PageType[\"DialogView\"] = 2] = \"DialogView\";\r\n    PageType[PageType[\"View\"] = 3] = \"View\";\r\n    PageType[PageType[\"DisplayForm\"] = 4] = \"DisplayForm\";\r\n    PageType[PageType[\"DisplayFormDialog\"] = 5] = \"DisplayFormDialog\";\r\n    PageType[PageType[\"EditForm\"] = 6] = \"EditForm\";\r\n    PageType[PageType[\"EditFormDialog\"] = 7] = \"EditFormDialog\";\r\n    PageType[PageType[\"NewForm\"] = 8] = \"NewForm\";\r\n    PageType[PageType[\"NewFormDialog\"] = 9] = \"NewFormDialog\";\r\n    PageType[PageType[\"SolutionForm\"] = 10] = \"SolutionForm\";\r\n    PageType[PageType[\"PAGE_MAXITEMS\"] = 11] = \"PAGE_MAXITEMS\";\r\n})(PageType || (PageType = {}));\r\nexport var SharingLinkKind;\r\n(function (SharingLinkKind) {\r\n    /**\r\n     * Uninitialized link\r\n     */\r\n    SharingLinkKind[SharingLinkKind[\"Uninitialized\"] = 0] = \"Uninitialized\";\r\n    /**\r\n     * Direct link to the object being shared\r\n     */\r\n    SharingLinkKind[SharingLinkKind[\"Direct\"] = 1] = \"Direct\";\r\n    /**\r\n     * Organization-shareable link to the object being shared with view permissions\r\n     */\r\n    SharingLinkKind[SharingLinkKind[\"OrganizationView\"] = 2] = \"OrganizationView\";\r\n    /**\r\n     * Organization-shareable link to the object being shared with edit permissions\r\n     */\r\n    SharingLinkKind[SharingLinkKind[\"OrganizationEdit\"] = 3] = \"OrganizationEdit\";\r\n    /**\r\n     * View only anonymous link\r\n     */\r\n    SharingLinkKind[SharingLinkKind[\"AnonymousView\"] = 4] = \"AnonymousView\";\r\n    /**\r\n     * Read/Write anonymous link\r\n     */\r\n    SharingLinkKind[SharingLinkKind[\"AnonymousEdit\"] = 5] = \"AnonymousEdit\";\r\n    /**\r\n     * Flexible sharing Link where properties can change without affecting link URL\r\n     */\r\n    SharingLinkKind[SharingLinkKind[\"Flexible\"] = 6] = \"Flexible\";\r\n})(SharingLinkKind || (SharingLinkKind = {}));\r\n/**\r\n * Indicates the role of the sharing link\r\n */\r\nexport var SharingRole;\r\n(function (SharingRole) {\r\n    SharingRole[SharingRole[\"None\"] = 0] = \"None\";\r\n    SharingRole[SharingRole[\"View\"] = 1] = \"View\";\r\n    SharingRole[SharingRole[\"Edit\"] = 2] = \"Edit\";\r\n    SharingRole[SharingRole[\"Owner\"] = 3] = \"Owner\";\r\n})(SharingRole || (SharingRole = {}));\r\nexport var SharingOperationStatusCode;\r\n(function (SharingOperationStatusCode) {\r\n    /**\r\n     * The share operation completed without errors.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"CompletedSuccessfully\"] = 0] = \"CompletedSuccessfully\";\r\n    /**\r\n     * The share operation completed and generated requests for access.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"AccessRequestsQueued\"] = 1] = \"AccessRequestsQueued\";\r\n    /**\r\n     * The share operation failed as there were no resolved users.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"NoResolvedUsers\"] = -1] = \"NoResolvedUsers\";\r\n    /**\r\n     * The share operation failed due to insufficient permissions.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"AccessDenied\"] = -2] = \"AccessDenied\";\r\n    /**\r\n     * The share operation failed when attempting a cross site share, which is not supported.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"CrossSiteRequestNotSupported\"] = -3] = \"CrossSiteRequestNotSupported\";\r\n    /**\r\n     * The sharing operation failed due to an unknown error.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"UnknowError\"] = -4] = \"UnknowError\";\r\n    /**\r\n     * The text you typed is too long. Please shorten it.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"EmailBodyTooLong\"] = -5] = \"EmailBodyTooLong\";\r\n    /**\r\n     * The maximum number of unique scopes in the list has been exceeded.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"ListUniqueScopesExceeded\"] = -6] = \"ListUniqueScopesExceeded\";\r\n    /**\r\n     * The share operation failed because a sharing capability is disabled in the site.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"CapabilityDisabled\"] = -7] = \"CapabilityDisabled\";\r\n    /**\r\n     * The specified object for the share operation is not supported.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"ObjectNotSupported\"] = -8] = \"ObjectNotSupported\";\r\n    /**\r\n     * A SharePoint group cannot contain another SharePoint group.\r\n     */\r\n    SharingOperationStatusCode[SharingOperationStatusCode[\"NestedGroupsNotSupported\"] = -9] = \"NestedGroupsNotSupported\";\r\n})(SharingOperationStatusCode || (SharingOperationStatusCode = {}));\r\nexport var SPSharedObjectType;\r\n(function (SPSharedObjectType) {\r\n    SPSharedObjectType[SPSharedObjectType[\"Unknown\"] = 0] = \"Unknown\";\r\n    SPSharedObjectType[SPSharedObjectType[\"File\"] = 1] = \"File\";\r\n    SPSharedObjectType[SPSharedObjectType[\"Folder\"] = 2] = \"Folder\";\r\n    SPSharedObjectType[SPSharedObjectType[\"Item\"] = 3] = \"Item\";\r\n    SPSharedObjectType[SPSharedObjectType[\"List\"] = 4] = \"List\";\r\n    SPSharedObjectType[SPSharedObjectType[\"Web\"] = 5] = \"Web\";\r\n    SPSharedObjectType[SPSharedObjectType[\"Max\"] = 6] = \"Max\";\r\n})(SPSharedObjectType || (SPSharedObjectType = {}));\r\nexport var SharingDomainRestrictionMode;\r\n(function (SharingDomainRestrictionMode) {\r\n    SharingDomainRestrictionMode[SharingDomainRestrictionMode[\"None\"] = 0] = \"None\";\r\n    SharingDomainRestrictionMode[SharingDomainRestrictionMode[\"AllowList\"] = 1] = \"AllowList\";\r\n    SharingDomainRestrictionMode[SharingDomainRestrictionMode[\"BlockList\"] = 2] = \"BlockList\";\r\n})(SharingDomainRestrictionMode || (SharingDomainRestrictionMode = {}));\r\nexport var RenderListDataOptions;\r\n(function (RenderListDataOptions) {\r\n    RenderListDataOptions[RenderListDataOptions[\"None\"] = 0] = \"None\";\r\n    RenderListDataOptions[RenderListDataOptions[\"ContextInfo\"] = 1] = \"ContextInfo\";\r\n    RenderListDataOptions[RenderListDataOptions[\"ListData\"] = 2] = \"ListData\";\r\n    RenderListDataOptions[RenderListDataOptions[\"ListSchema\"] = 4] = \"ListSchema\";\r\n    RenderListDataOptions[RenderListDataOptions[\"MenuView\"] = 8] = \"MenuView\";\r\n    RenderListDataOptions[RenderListDataOptions[\"ListContentType\"] = 16] = \"ListContentType\";\r\n    RenderListDataOptions[RenderListDataOptions[\"FileSystemItemId\"] = 32] = \"FileSystemItemId\";\r\n    RenderListDataOptions[RenderListDataOptions[\"ClientFormSchema\"] = 64] = \"ClientFormSchema\";\r\n    RenderListDataOptions[RenderListDataOptions[\"QuickLaunch\"] = 128] = \"QuickLaunch\";\r\n    RenderListDataOptions[RenderListDataOptions[\"Spotlight\"] = 256] = \"Spotlight\";\r\n    RenderListDataOptions[RenderListDataOptions[\"Visualization\"] = 512] = \"Visualization\";\r\n    RenderListDataOptions[RenderListDataOptions[\"ViewMetadata\"] = 1024] = \"ViewMetadata\";\r\n    RenderListDataOptions[RenderListDataOptions[\"DisableAutoHyperlink\"] = 2048] = \"DisableAutoHyperlink\";\r\n    RenderListDataOptions[RenderListDataOptions[\"EnableMediaTAUrls\"] = 4096] = \"EnableMediaTAUrls\";\r\n    RenderListDataOptions[RenderListDataOptions[\"ParentInfo\"] = 8192] = \"ParentInfo\";\r\n    RenderListDataOptions[RenderListDataOptions[\"PageContextInfo\"] = 16384] = \"PageContextInfo\";\r\n    RenderListDataOptions[RenderListDataOptions[\"ClientSideComponentManifest\"] = 32768] = \"ClientSideComponentManifest\";\r\n})(RenderListDataOptions || (RenderListDataOptions = {}));\r\nexport var FieldUserSelectionMode;\r\n(function (FieldUserSelectionMode) {\r\n    FieldUserSelectionMode[FieldUserSelectionMode[\"PeopleAndGroups\"] = 1] = \"PeopleAndGroups\";\r\n    FieldUserSelectionMode[FieldUserSelectionMode[\"PeopleOnly\"] = 0] = \"PeopleOnly\";\r\n})(FieldUserSelectionMode || (FieldUserSelectionMode = {}));\r\nexport var ChoiceFieldFormatType;\r\n(function (ChoiceFieldFormatType) {\r\n    ChoiceFieldFormatType[ChoiceFieldFormatType[\"Dropdown\"] = 0] = \"Dropdown\";\r\n    ChoiceFieldFormatType[ChoiceFieldFormatType[\"RadioButtons\"] = 1] = \"RadioButtons\";\r\n})(ChoiceFieldFormatType || (ChoiceFieldFormatType = {}));\r\n/**\r\n * Specifies the originating zone of a request received.\r\n */\r\nexport var UrlZone;\r\n(function (UrlZone) {\r\n    /**\r\n     * Specifies the default zone used for requests unless another zone is specified.\r\n     */\r\n    UrlZone[UrlZone[\"DefaultZone\"] = 0] = \"DefaultZone\";\r\n    /**\r\n     * Specifies an intranet zone.\r\n     */\r\n    UrlZone[UrlZone[\"Intranet\"] = 1] = \"Intranet\";\r\n    /**\r\n     * Specifies an Internet zone.\r\n     */\r\n    UrlZone[UrlZone[\"Internet\"] = 2] = \"Internet\";\r\n    /**\r\n     * Specifies a custom zone.\r\n     */\r\n    UrlZone[UrlZone[\"Custom\"] = 3] = \"Custom\";\r\n    /**\r\n     * Specifies an extranet zone.\r\n     */\r\n    UrlZone[UrlZone[\"Extranet\"] = 4] = \"Extranet\";\r\n})(UrlZone || (UrlZone = {}));\r\n//# sourceMappingURL=types.js.map","import { RoleAssignments } from \"./roles\";\r\nimport { PermissionKind } from \"./types\";\r\nimport { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\r\nimport { hOP } from \"@pnp/common\";\r\nexport class SharePointQueryableSecurable extends SharePointQueryableInstance {\r\n    /**\r\n     * Gets the set of role assignments for this item\r\n     *\r\n     */\r\n    get roleAssignments() {\r\n        return new RoleAssignments(this);\r\n    }\r\n    /**\r\n     * Gets the closest securable up the security hierarchy whose permissions are applied to this list item\r\n     *\r\n     */\r\n    get firstUniqueAncestorSecurableObject() {\r\n        return new SharePointQueryableInstance(this, \"FirstUniqueAncestorSecurableObject\");\r\n    }\r\n    /**\r\n     * Gets the effective permissions for the user supplied\r\n     *\r\n     * @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\r\n     */\r\n    getUserEffectivePermissions(loginName) {\r\n        const q = this.clone(SharePointQueryable, \"getUserEffectivePermissions(@user)\");\r\n        q.query.set(\"@user\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get().then(r => {\r\n            // handle verbose mode\r\n            return hOP(r, \"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\r\n        });\r\n    }\r\n    /**\r\n     * Gets the effective permissions for the current user\r\n     */\r\n    getCurrentUserEffectivePermissions() {\r\n        // remove need to reference Web here, which created a circular build issue\r\n        const w = new SharePointQueryableInstance(\"_api/web\", \"currentuser\");\r\n        return w.select(\"LoginName\").get().then(user => {\r\n            return this.getUserEffectivePermissions(user.LoginName);\r\n        });\r\n    }\r\n    /**\r\n     * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\r\n     *\r\n     * @param copyRoleAssignments If true the permissions are copied from the current parent scope\r\n     * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\r\n     */\r\n    breakRoleInheritance(copyRoleAssignments = false, clearSubscopes = false) {\r\n        return this.clone(SharePointQueryableSecurable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`).postCore();\r\n    }\r\n    /**\r\n     * Removes the local role assignments so that it re-inherit role assignments from the parent object.\r\n     *\r\n     */\r\n    resetRoleInheritance() {\r\n        return this.clone(SharePointQueryableSecurable, \"resetroleinheritance\").postCore();\r\n    }\r\n    /**\r\n     * Determines if a given user has the appropriate permissions\r\n     *\r\n     * @param loginName The user to check\r\n     * @param permission The permission being checked\r\n     */\r\n    userHasPermissions(loginName, permission) {\r\n        return this.getUserEffectivePermissions(loginName).then(perms => {\r\n            return this.hasPermissions(perms, permission);\r\n        });\r\n    }\r\n    /**\r\n     * Determines if the current user has the requested permissions\r\n     *\r\n     * @param permission The permission we wish to check\r\n     */\r\n    currentUserHasPermissions(permission) {\r\n        return this.getCurrentUserEffectivePermissions().then(perms => {\r\n            return this.hasPermissions(perms, permission);\r\n        });\r\n    }\r\n    /**\r\n     * Taken from sp.js, checks the supplied permissions against the mask\r\n     *\r\n     * @param value The security principal's permissions on the given object\r\n     * @param perm The permission checked against the value\r\n     */\r\n    /* tslint:disable:no-bitwise */\r\n    hasPermissions(value, perm) {\r\n        if (!perm) {\r\n            return true;\r\n        }\r\n        if (perm === PermissionKind.FullMask) {\r\n            return (value.High & 32767) === 32767 && value.Low === 65535;\r\n        }\r\n        perm = perm - 1;\r\n        let num = 1;\r\n        if (perm >= 0 && perm < 32) {\r\n            num = num << perm;\r\n            return 0 !== (value.Low & num);\r\n        }\r\n        else if (perm >= 32 && perm < 64) {\r\n            num = num << perm - 32;\r\n            return 0 !== (value.High & num);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n//# sourceMappingURL=sharepointqueryablesecurable.js.map","import { extend, combine, jsS } from \"@pnp/common\";\r\nimport { odataUrlFrom } from \"./odata\";\r\nimport { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, } from \"./sharepointqueryable\";\r\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\r\nimport { RoleType, SharingLinkKind, SharingRole, } from \"./types\";\r\nimport { extractWebUrl } from \"./utils/extractweburl\";\r\n/**\r\n * Internal helper class used to augment classes to include sharing functionality\r\n */\r\nexport class SharePointQueryableShareable extends SharePointQueryable {\r\n    /**\r\n     * Gets a sharing link for the supplied\r\n     *\r\n     * @param kind The kind of link to share\r\n     * @param expiration The optional expiration for this link\r\n     */\r\n    getShareLink(kind, expiration = null) {\r\n        // date needs to be an ISO string or null\r\n        const expString = expiration !== null ? expiration.toISOString() : null;\r\n        // clone using the factory and send the request\r\n        return this.clone(SharePointQueryableShareable, \"shareLink\").postCore({\r\n            body: jsS({\r\n                request: {\r\n                    createLink: true,\r\n                    emailData: null,\r\n                    settings: {\r\n                        expiration: expString,\r\n                        linkKind: kind,\r\n                    },\r\n                },\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Shares this instance with the supplied users\r\n     *\r\n     * @param loginNames Resolved login names to share\r\n     * @param role The role\r\n     * @param requireSignin True to require the user is authenticated, otherwise false\r\n     * @param propagateAcl True to apply this share to all children\r\n     * @param emailData If supplied an email will be sent with the indicated properties\r\n     */\r\n    shareWith(loginNames, role, requireSignin = false, propagateAcl = false, emailData) {\r\n        // handle the multiple input types\r\n        if (!Array.isArray(loginNames)) {\r\n            loginNames = [loginNames];\r\n        }\r\n        const userStr = jsS(loginNames.map(login => { return { Key: login }; }));\r\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\r\n        // start by looking up the role definition id we need to set the roleValue\r\n        // remove need to reference Web here, which created a circular build issue\r\n        const w = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\r\n        return w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get().then((def) => {\r\n            if (!Array.isArray(def) || def.length < 1) {\r\n                throw Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\r\n            }\r\n            let postBody = {\r\n                includeAnonymousLinkInEmail: requireSignin,\r\n                peoplePickerInput: userStr,\r\n                propagateAcl: propagateAcl,\r\n                roleValue: `role:${def[0].Id}`,\r\n                useSimplifiedRoles: true,\r\n            };\r\n            if (emailData !== undefined) {\r\n                postBody = extend(postBody, {\r\n                    emailBody: emailData.body,\r\n                    emailSubject: emailData.subject !== undefined ? emailData.subject : \"\",\r\n                    sendEmail: true,\r\n                });\r\n            }\r\n            return this.clone(SharePointQueryableShareable, \"shareObject\").postCore({\r\n                body: jsS(postBody),\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Shares an object based on the supplied options\r\n     *\r\n     * @param options The set of options to send to the ShareObject method\r\n     * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\r\n     */\r\n    shareObject(options, bypass = false) {\r\n        if (bypass) {\r\n            // if the bypass flag is set send the supplied parameters directly to the service\r\n            return this.sendShareObjectRequest(options);\r\n        }\r\n        // extend our options with some defaults\r\n        options = extend(options, {\r\n            group: null,\r\n            includeAnonymousLinkInEmail: false,\r\n            propagateAcl: false,\r\n            useSimplifiedRoles: true,\r\n        }, true);\r\n        return this.getRoleValue(options.role, options.group).then(roleValue => {\r\n            // handle the multiple input types\r\n            if (!Array.isArray(options.loginNames)) {\r\n                options.loginNames = [options.loginNames];\r\n            }\r\n            const userStr = jsS(options.loginNames.map(login => { return { Key: login }; }));\r\n            let postBody = {\r\n                peoplePickerInput: userStr,\r\n                roleValue: roleValue,\r\n                url: options.url,\r\n            };\r\n            if (options.emailData !== undefined && options.emailData !== null) {\r\n                postBody = extend(postBody, {\r\n                    emailBody: options.emailData.body,\r\n                    emailSubject: options.emailData.subject !== undefined ? options.emailData.subject : \"Shared with you.\",\r\n                    sendEmail: true,\r\n                });\r\n            }\r\n            return this.sendShareObjectRequest(postBody);\r\n        });\r\n    }\r\n    /**\r\n     * Calls the web's UnshareObject method\r\n     *\r\n     * @param url The url of the object to unshare\r\n     */\r\n    unshareObjectWeb(url) {\r\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore({\r\n            body: jsS({\r\n                url: url,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\r\n     *\r\n     * @param recipients The array of Entities for which Permissions need to be checked.\r\n     */\r\n    checkPermissions(recipients) {\r\n        return this.clone(SharePointQueryableShareable, \"checkPermissions\").postCore({\r\n            body: jsS({\r\n                recipients: recipients,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Get Sharing Information.\r\n     *\r\n     * @param request The SharingInformationRequest Object.\r\n     */\r\n    getSharingInformation(request = null) {\r\n        return this.clone(SharePointQueryableShareable, \"getSharingInformation\").postCore({\r\n            body: jsS({\r\n                request: request,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Gets the sharing settings of an item.\r\n     *\r\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\r\n     */\r\n    getObjectSharingSettings(useSimplifiedRoles = true) {\r\n        return this.clone(SharePointQueryableShareable, \"getObjectSharingSettings\").postCore({\r\n            body: jsS({\r\n                useSimplifiedRoles: useSimplifiedRoles,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Unshares this object\r\n     */\r\n    unshareObject() {\r\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore();\r\n    }\r\n    /**\r\n     * Deletes a link by type\r\n     *\r\n     * @param kind Deletes a sharing link by the kind of link\r\n     */\r\n    deleteLinkByKind(kind) {\r\n        return this.clone(SharePointQueryableShareable, \"deleteLinkByKind\").postCore({\r\n            body: jsS({ linkKind: kind }),\r\n        });\r\n    }\r\n    /**\r\n     * Removes the specified link to the item.\r\n     *\r\n     * @param kind The kind of link to be deleted.\r\n     * @param shareId\r\n     */\r\n    unshareLink(kind, shareId = \"00000000-0000-0000-0000-000000000000\") {\r\n        return this.clone(SharePointQueryableShareable, \"unshareLink\").postCore({\r\n            body: jsS({ linkKind: kind, shareId: shareId }),\r\n        });\r\n    }\r\n    /**\r\n     * Calculates the roleValue string used in the sharing query\r\n     *\r\n     * @param role The Sharing Role\r\n     * @param group The Group type\r\n     */\r\n    getRoleValue(role, group) {\r\n        // we will give group precedence, because we had to make a choice\r\n        if (group !== undefined && group !== null) {\r\n            switch (group) {\r\n                case RoleType.Contributor:\r\n                    // remove need to reference Web here, which created a circular build issue\r\n                    const memberGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedmembergroup\");\r\n                    return memberGroup.select(\"Id\").get().then(g => `group: ${g.Id}`);\r\n                case RoleType.Reader:\r\n                case RoleType.Guest:\r\n                    // remove need to reference Web here, which created a circular build issue\r\n                    const visitorGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedvisitorgroup\");\r\n                    return visitorGroup.select(\"Id\").get().then(g => `group: ${g.Id}`);\r\n                default:\r\n                    throw Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\r\n            }\r\n        }\r\n        else {\r\n            const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\r\n            // remove need to reference Web here, which created a circular build issue\r\n            const roleDefs = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\r\n            return roleDefs.select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`).get().then(def => {\r\n                if (def.length < 1) {\r\n                    throw Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\r\n                }\r\n                return `role: ${def[0].Id}`;\r\n            });\r\n        }\r\n    }\r\n    getShareObjectWeb(candidate) {\r\n        return Promise.resolve(new SharePointQueryableInstance(extractWebUrl(candidate), \"/_api/SP.Web.ShareObject\"));\r\n    }\r\n    sendShareObjectRequest(options) {\r\n        return this.getShareObjectWeb(this.toUrl()).then(web => {\r\n            return web.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\").as(SharePointQueryableShareable).postCore({\r\n                body: jsS(options),\r\n            });\r\n        });\r\n    }\r\n}\r\nexport class SharePointQueryableShareableWeb extends SharePointQueryableSecurable {\r\n    /**\r\n     * Shares this web with the supplied users\r\n     * @param loginNames The resolved login names to share\r\n     * @param role The role to share this web\r\n     * @param emailData Optional email data\r\n     */\r\n    shareWith(loginNames, role = SharingRole.View, emailData) {\r\n        const dependency = this.addBatchDependency();\r\n        // remove need to reference Web here, which created a circular build issue\r\n        const web = new SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\r\n        return web.get().then((url) => {\r\n            dependency();\r\n            return this.shareObject(combine(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\r\n        });\r\n    }\r\n    /**\r\n     * Provides direct access to the static web.ShareObject method\r\n     *\r\n     * @param url The url to share\r\n     * @param loginNames Resolved loginnames string[] of a single login name string\r\n     * @param roleValue Role value\r\n     * @param emailData Optional email data\r\n     * @param groupId Optional group id\r\n     * @param propagateAcl\r\n     * @param includeAnonymousLinkInEmail\r\n     * @param useSimplifiedRoles\r\n     */\r\n    shareObject(url, loginNames, role, emailData, group, propagateAcl = false, includeAnonymousLinkInEmail = false, useSimplifiedRoles = true) {\r\n        return this.clone(SharePointQueryableShareable, null).shareObject({\r\n            emailData: emailData,\r\n            group: group,\r\n            includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\r\n            loginNames: loginNames,\r\n            propagateAcl: propagateAcl,\r\n            role: role,\r\n            url: url,\r\n            useSimplifiedRoles: useSimplifiedRoles,\r\n        });\r\n    }\r\n    /**\r\n     * Supplies a method to pass any set of arguments to ShareObject\r\n     *\r\n     * @param options The set of options to send to ShareObject\r\n     */\r\n    shareObjectRaw(options) {\r\n        return this.clone(SharePointQueryableShareable, null).shareObject(options, true);\r\n    }\r\n    /**\r\n     * Unshares the object\r\n     *\r\n     * @param url The url of the object to stop sharing\r\n     */\r\n    unshareObject(url) {\r\n        return this.clone(SharePointQueryableShareable, null).unshareObjectWeb(url);\r\n    }\r\n}\r\nexport class SharePointQueryableShareableItem extends SharePointQueryableSecurable {\r\n    /**\r\n     * Gets a link suitable for sharing for this item\r\n     *\r\n     * @param kind The type of link to share\r\n     * @param expiration The optional expiration date\r\n     */\r\n    getShareLink(kind = SharingLinkKind.OrganizationView, expiration = null) {\r\n        return this.clone(SharePointQueryableShareable, null).getShareLink(kind, expiration);\r\n    }\r\n    /**\r\n     * Shares this item with one or more users\r\n     *\r\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\r\n     * @param role The role (View | Edit) applied to the share\r\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\r\n     */\r\n    shareWith(loginNames, role = SharingRole.View, requireSignin = false, emailData) {\r\n        return this.clone(SharePointQueryableShareable, null).shareWith(loginNames, role, requireSignin, false, emailData);\r\n    }\r\n    /**\r\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\r\n     *\r\n     * @param recipients The array of Entities for which Permissions need to be checked.\r\n     */\r\n    checkSharingPermissions(recipients) {\r\n        return this.clone(SharePointQueryableShareable, null).checkPermissions(recipients);\r\n    }\r\n    /**\r\n     * Get Sharing Information.\r\n     *\r\n     * @param request The SharingInformationRequest Object.\r\n     */\r\n    getSharingInformation(request = null) {\r\n        return this.clone(SharePointQueryableShareable, null).getSharingInformation(request);\r\n    }\r\n    /**\r\n     * Gets the sharing settings of an item.\r\n     *\r\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\r\n     */\r\n    getObjectSharingSettings(useSimplifiedRoles = true) {\r\n        return this.clone(SharePointQueryableShareable, null).getObjectSharingSettings(useSimplifiedRoles);\r\n    }\r\n    /**\r\n     * Unshare this item\r\n     */\r\n    unshare() {\r\n        return this.clone(SharePointQueryableShareable, null).unshareObject();\r\n    }\r\n    /**\r\n     * Deletes a sharing link by kind\r\n     *\r\n     * @param kind Deletes a sharing link by the kind of link\r\n     */\r\n    deleteSharingLinkByKind(kind) {\r\n        return this.clone(SharePointQueryableShareable, null).deleteLinkByKind(kind);\r\n    }\r\n    /**\r\n     * Removes the specified link to the item.\r\n     *\r\n     * @param kind The kind of link to be deleted.\r\n     * @param shareId\r\n     */\r\n    unshareLink(kind, shareId) {\r\n        return this.clone(SharePointQueryableShareable, null).unshareLink(kind, shareId);\r\n    }\r\n}\r\nexport class FileFolderShared extends SharePointQueryableInstance {\r\n    /**\r\n     * Gets a link suitable for sharing\r\n     *\r\n     * @param kind The kind of link to get\r\n     * @param expiration Optional, an expiration for this link\r\n     */\r\n    getShareLink(kind = SharingLinkKind.OrganizationView, expiration = null) {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.getShareLink(kind, expiration);\r\n        });\r\n    }\r\n    /**\r\n         * Checks Permissions on the list of Users and returns back role the users have on the Item.\r\n         *\r\n         * @param recipients The array of Entities for which Permissions need to be checked.\r\n         */\r\n    checkSharingPermissions(recipients) {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.checkPermissions(recipients);\r\n        });\r\n    }\r\n    /**\r\n     * Get Sharing Information.\r\n     *\r\n     * @param request The SharingInformationRequest Object.\r\n     */\r\n    getSharingInformation(request = null) {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.getSharingInformation(request);\r\n        });\r\n    }\r\n    /**\r\n     * Gets the sharing settings of an item.\r\n     *\r\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\r\n     */\r\n    getObjectSharingSettings(useSimplifiedRoles = true) {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.getObjectSharingSettings(useSimplifiedRoles);\r\n        });\r\n    }\r\n    /**\r\n     * Unshare this item\r\n     */\r\n    unshare() {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.unshareObject();\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a sharing link by the kind of link\r\n     *\r\n     * @param kind The kind of link to be deleted.\r\n     */\r\n    deleteSharingLinkByKind(kind) {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.deleteLinkByKind(kind);\r\n        });\r\n    }\r\n    /**\r\n     * Removes the specified link to the item.\r\n     *\r\n     * @param kind The kind of link to be deleted.\r\n     * @param shareId The share id to delete\r\n     */\r\n    unshareLink(kind, shareId) {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.unshareLink(kind, shareId);\r\n        });\r\n    }\r\n    /**\r\n     * For files and folders we need to use the associated item end point\r\n     */\r\n    getShareable() {\r\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\r\n        return this.clone(SharePointQueryableShareableFile, \"listItemAllFields\", false).select(\"odata.id\").get().then(d => {\r\n            let shareable = new SharePointQueryableShareable(odataUrlFrom(d));\r\n            // we need to handle batching\r\n            if (this.hasBatch) {\r\n                shareable = shareable.inBatch(this.batch);\r\n            }\r\n            return shareable;\r\n        });\r\n    }\r\n}\r\nexport class SharePointQueryableShareableFile extends FileFolderShared {\r\n    /**\r\n     * Shares this item with one or more users\r\n     *\r\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\r\n     * @param role The role (View | Edit) applied to the share\r\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\r\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\r\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\r\n     */\r\n    shareWith(loginNames, role = SharingRole.View, requireSignin = false, emailData) {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.shareWith(loginNames, role, requireSignin, false, emailData);\r\n        });\r\n    }\r\n}\r\nexport class SharePointQueryableShareableFolder extends FileFolderShared {\r\n    /**\r\n     * Shares this item with one or more users\r\n     *\r\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\r\n     * @param role The role (View | Edit) applied to the share\r\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\r\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\r\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\r\n     */\r\n    shareWith(loginNames, role = SharingRole.View, requireSignin = false, shareEverything = false, emailData) {\r\n        const dependency = this.addBatchDependency();\r\n        return this.getShareable().then(shareable => {\r\n            dependency();\r\n            return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=sharepointqueryableshareable.js.map","import * as tslib_1 from \"tslib\";\r\nimport { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\nexport class LimitedWebPartManager extends SharePointQueryable {\r\n    /**\r\n     * Gets the set of web part definitions contained by this web part manager\r\n     *\r\n     */\r\n    get webparts() {\r\n        return new WebPartDefinitions(this, \"webparts\");\r\n    }\r\n    /**\r\n     * Exports a webpart definition\r\n     *\r\n     * @param id the GUID id of the definition to export\r\n     */\r\n    export(id) {\r\n        return this.clone(LimitedWebPartManager, \"ExportWebPart\").postCore({\r\n            body: jsS({ webPartId: id }),\r\n        });\r\n    }\r\n    /**\r\n     * Imports a webpart\r\n     *\r\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\r\n     */\r\n    import(xml) {\r\n        return this.clone(LimitedWebPartManager, \"ImportWebPart\").postCore({\r\n            body: jsS({ webPartXml: xml }),\r\n        });\r\n    }\r\n}\r\nexport class WebPartDefinitions extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a web part definition from the collection by id\r\n     *\r\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\r\n     */\r\n    getById(id) {\r\n        return new WebPartDefinition(this, `getbyid('${id}')`);\r\n    }\r\n    /**\r\n     * Gets a web part definition from the collection by storage id\r\n     *\r\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\r\n     */\r\n    getByControlId(id) {\r\n        return new WebPartDefinition(this, `getByControlId('${id}')`);\r\n    }\r\n}\r\nexport class WebPartDefinition extends SharePointQueryableInstance {\r\n    /**\r\n     * Gets the webpart information associated with this definition\r\n     */\r\n    get webpart() {\r\n        return new WebPart(this);\r\n    }\r\n    /**\r\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\r\n     */\r\n    saveChanges() {\r\n        return this.clone(WebPartDefinition, \"SaveWebPartChanges\").postCore();\r\n    }\r\n    /**\r\n     * Moves the Web Part to a different location on a Web Part Page\r\n     *\r\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\r\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\r\n     */\r\n    moveTo(zoneId, zoneIndex) {\r\n        return this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`).postCore();\r\n    }\r\n    /**\r\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\r\n     */\r\n    close() {\r\n        return this.clone(WebPartDefinition, \"CloseWebPart\").postCore();\r\n    }\r\n    /**\r\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\r\n     */\r\n    open() {\r\n        return this.clone(WebPartDefinition, \"OpenWebPart\").postCore();\r\n    }\r\n    /**\r\n     * Removes a webpart from a page, all settings will be lost\r\n     */\r\n    delete() {\r\n        return this.clone(WebPartDefinition, \"DeleteWebPart\").postCore();\r\n    }\r\n}\r\nlet WebPart = class WebPart extends SharePointQueryableInstance {\r\n};\r\nWebPart = tslib_1.__decorate([\r\n    defaultPath(\"webpart\")\r\n], WebPart);\r\nexport { WebPart };\r\n//# sourceMappingURL=webparts.js.map","import * as tslib_1 from \"tslib\";\r\nvar Folders_1;\r\nimport { extend, jsS } from \"@pnp/common\";\r\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { SharePointQueryableShareableFolder } from \"./sharepointqueryableshareable\";\r\nimport { Files } from \"./files\";\r\nimport { odataUrlFrom } from \"./odata\";\r\nimport { Item } from \"./items\";\r\nimport { SPHttpClient } from \"./net/sphttpclient\";\r\n/**\r\n * Describes a collection of Folder objects\r\n *\r\n */\r\nlet Folders = Folders_1 = class Folders extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a folder by folder name\r\n     *\r\n     */\r\n    getByName(name) {\r\n        const f = new Folder(this);\r\n        f.concat(`('${name}')`);\r\n        return f;\r\n    }\r\n    /**\r\n     * Adds a new folder to the current folder (relative) or any folder (absolute)\r\n     *\r\n     * @param url The relative or absolute url where the new folder will be created. Urls starting with a forward slash are absolute.\r\n     * @returns The new Folder and the raw response.\r\n     */\r\n    add(url) {\r\n        return this.clone(Folders_1, `add('${url}')`).postCore().then((response) => {\r\n            return {\r\n                data: response,\r\n                folder: this.getByName(url),\r\n            };\r\n        });\r\n    }\r\n};\r\nFolders = Folders_1 = tslib_1.__decorate([\r\n    defaultPath(\"folders\")\r\n], Folders);\r\nexport { Folders };\r\n/**\r\n * Describes a single Folder instance\r\n *\r\n */\r\nexport class Folder extends SharePointQueryableShareableFolder {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.update = this._update(\"SP.Folder\", data => ({ data, folder: this }));\r\n    }\r\n    /**\r\n     * Specifies the sequence in which content types are displayed.\r\n     *\r\n     */\r\n    get contentTypeOrder() {\r\n        return new SharePointQueryableCollection(this, \"contentTypeOrder\");\r\n    }\r\n    /**\r\n     * Gets this folder's files\r\n     *\r\n     */\r\n    get files() {\r\n        return new Files(this);\r\n    }\r\n    /**\r\n     * Gets this folder's sub folders\r\n     *\r\n     */\r\n    get folders() {\r\n        return new Folders(this);\r\n    }\r\n    /**\r\n     * Gets this folder's list item field values\r\n     *\r\n     */\r\n    get listItemAllFields() {\r\n        return new SharePointQueryableInstance(this, \"listItemAllFields\");\r\n    }\r\n    /**\r\n     * Gets the parent folder, if available\r\n     *\r\n     */\r\n    get parentFolder() {\r\n        return new Folder(this, \"parentFolder\");\r\n    }\r\n    /**\r\n     * Gets this folder's properties\r\n     *\r\n     */\r\n    get properties() {\r\n        return new SharePointQueryableInstance(this, \"properties\");\r\n    }\r\n    /**\r\n     * Gets this folder's server relative url\r\n     *\r\n     */\r\n    get serverRelativeUrl() {\r\n        return new SharePointQueryable(this, \"serverRelativeUrl\");\r\n    }\r\n    /**\r\n     * Gets a value that specifies the content type order.\r\n     *\r\n     */\r\n    get uniqueContentTypeOrder() {\r\n        return new SharePointQueryableCollection(this, \"uniqueContentTypeOrder\");\r\n    }\r\n    /**\r\n    * Delete this folder\r\n    *\r\n    * @param eTag Value used in the IF-Match header, by default \"*\"\r\n    */\r\n    delete(eTag = \"*\") {\r\n        return this.clone(Folder, null).postCore({\r\n            headers: {\r\n                \"IF-Match\": eTag,\r\n                \"X-HTTP-Method\": \"DELETE\",\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n     */\r\n    recycle() {\r\n        return this.clone(Folder, \"recycle\").postCore();\r\n    }\r\n    /**\r\n     * Gets the associated list item for this folder, loading the default properties\r\n     */\r\n    getItem(...selects) {\r\n        const q = this.listItemAllFields;\r\n        return q.select.apply(q, selects).get().then((d) => {\r\n            return extend(new Item(odataUrlFrom(d)), d);\r\n        });\r\n    }\r\n    /**\r\n     * Moves a folder to destination path\r\n     *\r\n     * @param destUrl Absolute or relative URL of the destination path\r\n     */\r\n    moveTo(destUrl) {\r\n        return this.select(\"ServerRelativeUrl\").get().then(({ ServerRelativeUrl: srcUrl }) => {\r\n            const client = new SPHttpClient();\r\n            const webBaseUrl = this.toUrl().split(\"/_api\")[0];\r\n            const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\r\n            const methodUrl = `${webBaseUrl}/_api/SP.MoveCopyUtil.MoveFolder()`;\r\n            return client.post(methodUrl, {\r\n                body: jsS({\r\n                    destUrl: destUrl.indexOf(\"http\") === 0 ? destUrl : `${hostUrl}${destUrl}`,\r\n                    srcUrl: `${hostUrl}${srcUrl}`,\r\n                }),\r\n            }).then(r => r.json());\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=folders.js.map","import * as tslib_1 from \"tslib\";\r\nvar ContentTypes_1;\r\nimport { jsS } from \"@pnp/common\";\r\nimport { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Describes a collection of content types\r\n *\r\n */\r\nlet ContentTypes = ContentTypes_1 = class ContentTypes extends SharePointQueryableCollection {\r\n    /**\r\n     * Adds an existing contenttype to a content type collection\r\n     *\r\n     * @param contentTypeId in the following format, for example: 0x010102\r\n     */\r\n    addAvailableContentType(contentTypeId) {\r\n        const postBody = jsS({\r\n            \"contentTypeId\": contentTypeId,\r\n        });\r\n        return this.clone(ContentTypes_1, \"addAvailableContentType\").postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                contentType: this.getById(data.id),\r\n                data: data,\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Gets a ContentType by content type id\r\n     */\r\n    getById(id) {\r\n        const ct = new ContentType(this);\r\n        ct.concat(`('${id}')`);\r\n        return ct;\r\n    }\r\n    /**\r\n     * Adds a new content type to the collection\r\n     *\r\n     * @param id The desired content type id for the new content type (also determines the parent content type)\r\n     * @param name The name of the content type\r\n     * @param description The description of the content type\r\n     * @param group The group in which to add the content type\r\n     * @param additionalSettings Any additional settings to provide when creating the content type\r\n     *\r\n     */\r\n    add(id, name, description = \"\", group = \"Custom Content Types\", additionalSettings = {}) {\r\n        const postBody = jsS(Object.assign(metadata(\"SP.ContentType\"), {\r\n            \"Description\": description,\r\n            \"Group\": group,\r\n            \"Id\": { \"StringValue\": id },\r\n            \"Name\": name,\r\n        }, additionalSettings));\r\n        return this.postCore({ body: postBody }).then((data) => {\r\n            return { contentType: this.getById(data.id), data: data };\r\n        });\r\n    }\r\n};\r\nContentTypes = ContentTypes_1 = tslib_1.__decorate([\r\n    defaultPath(\"contenttypes\")\r\n], ContentTypes);\r\nexport { ContentTypes };\r\n/**\r\n * Describes a single ContentType instance\r\n *\r\n */\r\nexport class ContentType extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Delete this content type\r\n         */\r\n        this.delete = this._delete;\r\n    }\r\n    /**\r\n     * Gets the column (also known as field) references in the content type.\r\n    */\r\n    get fieldLinks() {\r\n        return new FieldLinks(this);\r\n    }\r\n    /**\r\n     * Gets a value that specifies the collection of fields for the content type.\r\n     */\r\n    get fields() {\r\n        return new SharePointQueryableCollection(this, \"fields\");\r\n    }\r\n    /**\r\n     * Gets the parent content type of the content type.\r\n     */\r\n    get parent() {\r\n        return new ContentType(this, \"parent\");\r\n    }\r\n    /**\r\n     * Gets a value that specifies the collection of workflow associations for the content type.\r\n     */\r\n    get workflowAssociations() {\r\n        return new SharePointQueryableCollection(this, \"workflowAssociations\");\r\n    }\r\n}\r\n/**\r\n * Represents a collection of field link instances\r\n */\r\nlet FieldLinks = class FieldLinks extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a FieldLink by GUID id\r\n     *\r\n     * @param id The GUID id of the field link\r\n     */\r\n    getById(id) {\r\n        const fl = new FieldLink(this);\r\n        fl.concat(`(guid'${id}')`);\r\n        return fl;\r\n    }\r\n};\r\nFieldLinks = tslib_1.__decorate([\r\n    defaultPath(\"fieldlinks\")\r\n], FieldLinks);\r\nexport { FieldLinks };\r\n/**\r\n * Represents a field link instance\r\n */\r\nexport class FieldLink extends SharePointQueryableInstance {\r\n}\r\n//# sourceMappingURL=contenttypes.js.map","import * as tslib_1 from \"tslib\";\r\nvar AttachmentFiles_1;\r\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { TextParser, BlobParser, JSONParser, BufferParser } from \"@pnp/odata\";\r\n/**\r\n * Describes a collection of Item objects\r\n *\r\n */\r\nlet AttachmentFiles = AttachmentFiles_1 = class AttachmentFiles extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a Attachment File by filename\r\n     *\r\n     * @param name The name of the file, including extension.\r\n     */\r\n    getByName(name) {\r\n        const f = new AttachmentFile(this);\r\n        f.concat(`('${name}')`);\r\n        return f;\r\n    }\r\n    /**\r\n     * Adds a new attachment to the collection. Not supported for batching.\r\n     *\r\n     * @param name The name of the file, including extension.\r\n     * @param content The Base64 file content.\r\n     */\r\n    add(name, content) {\r\n        return this.clone(AttachmentFiles_1, `add(FileName='${name}')`, false).postCore({\r\n            body: content,\r\n        }).then((response) => {\r\n            return {\r\n                data: response,\r\n                file: this.getByName(name),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Adds multiple new attachment to the collection. Not supported for batching.\r\n     *\r\n     * @files name The collection of files to add\r\n     */\r\n    addMultiple(files) {\r\n        // add the files in series so we don't get update conflicts\r\n        return files.reduce((chain, file) => chain.then(() => this.clone(AttachmentFiles_1, `add(FileName='${file.name}')`, false).postCore({\r\n            body: file.content,\r\n        })), Promise.resolve());\r\n    }\r\n    /**\r\n     * Delete multiple attachments from the collection. Not supported for batching.\r\n     *\r\n     * @files name The collection of files to delete\r\n     */\r\n    deleteMultiple(...files) {\r\n        return files.reduce((chain, file) => chain.then(() => this.getByName(file).delete()), Promise.resolve());\r\n    }\r\n};\r\nAttachmentFiles = AttachmentFiles_1 = tslib_1.__decorate([\r\n    defaultPath(\"AttachmentFiles\")\r\n], AttachmentFiles);\r\nexport { AttachmentFiles };\r\n/**\r\n * Describes a single attachment file instance\r\n *\r\n */\r\nexport class AttachmentFile extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.delete = this._deleteWithETag;\r\n    }\r\n    /**\r\n     * Gets the contents of the file as text\r\n     *\r\n     */\r\n    getText() {\r\n        return this.getParsed(new TextParser());\r\n    }\r\n    /**\r\n     * Gets the contents of the file as a blob, does not work in Node.js\r\n     *\r\n     */\r\n    getBlob() {\r\n        return this.getParsed(new BlobParser());\r\n    }\r\n    /**\r\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\r\n     */\r\n    getBuffer() {\r\n        return this.getParsed(new BufferParser());\r\n    }\r\n    /**\r\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\r\n     */\r\n    getJSON() {\r\n        return this.getParsed(new JSONParser());\r\n    }\r\n    /**\r\n     * Sets the content of a file. Not supported for batching\r\n     *\r\n     * @param content The value to set for the file contents\r\n     */\r\n    setContent(content) {\r\n        return this.clone(AttachmentFile, \"$value\", false).postCore({\r\n            body: content,\r\n            headers: {\r\n                \"X-HTTP-Method\": \"PUT\",\r\n            },\r\n        }).then(_ => new AttachmentFile(this));\r\n    }\r\n    // /**\r\n    //  * Delete this attachment file\r\n    //  *\r\n    //  * @param eTag Value used in the IF-Match header, by default \"*\"\r\n    //  */\r\n    // public delete(eTag = \"*\"): Promise<void> {\r\n    //     return this.postCore({\r\n    //         headers: {\r\n    //             \"IF-Match\": eTag,\r\n    //             \"X-HTTP-Method\": \"DELETE\",\r\n    //         },\r\n    //     });\r\n    // }\r\n    getParsed(parser) {\r\n        return this.clone(AttachmentFile, \"$value\", false).get(parser);\r\n    }\r\n}\r\n//# sourceMappingURL=attachmentfiles.js.map","import * as tslib_1 from \"tslib\";\r\nvar Views_1, ViewFields_1;\r\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Describes the views available in the current context\r\n *\r\n */\r\nlet Views = Views_1 = class Views extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a view by guid id\r\n     *\r\n     * @param id The GUID id of the view\r\n     */\r\n    getById(id) {\r\n        const v = new View(this);\r\n        v.concat(`('${id}')`);\r\n        return v;\r\n    }\r\n    /**\r\n     * Gets a view by title (case-sensitive)\r\n     *\r\n     * @param title The case-sensitive title of the view\r\n     */\r\n    getByTitle(title) {\r\n        return new View(this, `getByTitle('${title}')`);\r\n    }\r\n    /**\r\n     * Adds a new view to the collection\r\n     *\r\n     * @param title The new views's title\r\n     * @param personalView True if this is a personal view, otherwise false, default = false\r\n     * @param additionalSettings Will be passed as part of the view creation body\r\n     */\r\n    add(title, personalView = false, additionalSettings = {}) {\r\n        const postBody = jsS(Object.assign(metadata(\"SP.View\"), {\r\n            \"PersonalView\": personalView,\r\n            \"Title\": title,\r\n        }, additionalSettings));\r\n        return this.clone(Views_1, null).postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                view: this.getById(data.Id),\r\n            };\r\n        });\r\n    }\r\n};\r\nViews = Views_1 = tslib_1.__decorate([\r\n    defaultPath(\"views\")\r\n], Views);\r\nexport { Views };\r\n/**\r\n * Describes a single View instance\r\n *\r\n */\r\nexport class View extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Updates this view intance with the supplied properties\r\n         *\r\n         * @param properties A plain object hash of values to update for the view\r\n         */\r\n        this.update = this._update(\"SP.View\", data => ({ data, view: this }));\r\n        /**\r\n         * Delete this view\r\n         *\r\n         */\r\n        this.delete = this._delete;\r\n    }\r\n    get fields() {\r\n        return new ViewFields(this);\r\n    }\r\n    /**\r\n     * Returns the list view as HTML.\r\n     *\r\n     */\r\n    renderAsHtml() {\r\n        return this.clone(SharePointQueryable, \"renderashtml\").get();\r\n    }\r\n}\r\nlet ViewFields = ViewFields_1 = class ViewFields extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a value that specifies the XML schema that represents the collection.\r\n     */\r\n    getSchemaXml() {\r\n        return this.clone(SharePointQueryable, \"schemaxml\").get();\r\n    }\r\n    /**\r\n     * Adds the field with the specified field internal name or display name to the collection.\r\n     *\r\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\r\n     */\r\n    add(fieldTitleOrInternalName) {\r\n        return this.clone(ViewFields_1, `addviewfield('${fieldTitleOrInternalName}')`).postCore();\r\n    }\r\n    /**\r\n     * Moves the field with the specified field internal name to the specified position in the collection.\r\n     *\r\n     * @param fieldInternalName The case-sensitive internal name of the field to move.\r\n     * @param index The zero-based index of the new position for the field.\r\n     */\r\n    move(fieldInternalName, index) {\r\n        return this.clone(ViewFields_1, \"moveviewfieldto\").postCore({\r\n            body: jsS({ \"field\": fieldInternalName, \"index\": index }),\r\n        });\r\n    }\r\n    /**\r\n     * Removes all the fields from the collection.\r\n     */\r\n    removeAll() {\r\n        return this.clone(ViewFields_1, \"removeallviewfields\").postCore();\r\n    }\r\n    /**\r\n     * Removes the field with the specified field internal name from the collection.\r\n     *\r\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\r\n     */\r\n    remove(fieldInternalName) {\r\n        return this.clone(ViewFields_1, `removeviewfield('${fieldInternalName}')`).postCore();\r\n    }\r\n};\r\nViewFields = ViewFields_1 = tslib_1.__decorate([\r\n    defaultPath(\"viewfields\")\r\n], ViewFields);\r\nexport { ViewFields };\r\n//# sourceMappingURL=views.js.map","import * as tslib_1 from \"tslib\";\r\nvar Fields_1;\r\nimport { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { extend, jsS } from \"@pnp/common\";\r\nimport { DateTimeFieldFormatType, FieldTypes, CalendarType, UrlFieldFormatType, ChoiceFieldFormatType, } from \"./types\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Describes a collection of Field objects\r\n *\r\n */\r\nlet Fields = Fields_1 = class Fields extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a field from the collection by id\r\n     *\r\n     * @param id The Id of the list\r\n     */\r\n    getById(id) {\r\n        const f = new Field(this);\r\n        f.concat(`('${id}')`);\r\n        return f;\r\n    }\r\n    /**\r\n     * Gets a field from the collection by title\r\n     *\r\n     * @param title The case-sensitive title of the field\r\n     */\r\n    getByTitle(title) {\r\n        return new Field(this, `getByTitle('${title}')`);\r\n    }\r\n    /**\r\n     * Gets a field from the collection by using internal name or title\r\n     *\r\n     * @param name The case-sensitive internal name or title of the field\r\n     */\r\n    getByInternalNameOrTitle(name) {\r\n        return new Field(this, `getByInternalNameOrTitle('${name}')`);\r\n    }\r\n    /**\r\n     * Creates a field based on the specified schema\r\n     */\r\n    createFieldAsXml(xml) {\r\n        let info;\r\n        if (typeof xml === \"string\") {\r\n            info = { SchemaXml: xml };\r\n        }\r\n        else {\r\n            info = xml;\r\n        }\r\n        const postBody = jsS({\r\n            \"parameters\": extend(metadata(\"SP.XmlSchemaFieldCreationInformation\"), info),\r\n        });\r\n        return this.clone(Fields_1, \"createfieldasxml\").postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                field: this.getById(data.Id),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Adds a new field to the collection\r\n     *\r\n     * @param title The new field's title\r\n     * @param fieldType The new field's type (ex: SP.FieldText)\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    add(title, fieldType, properties) {\r\n        const postBody = jsS(Object.assign(metadata(fieldType), {\r\n            \"Title\": title,\r\n        }, properties));\r\n        return this.clone(Fields_1, null).postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                field: this.getById(data.Id),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldText to the collection\r\n     *\r\n     * @param title The field title\r\n     * @param maxLength The maximum number of characters allowed in the value of the field.\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    addText(title, maxLength = 255, properties) {\r\n        const props = {\r\n            FieldTypeKind: 2,\r\n            MaxLength: maxLength,\r\n        };\r\n        return this.add(title, \"SP.FieldText\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldCalculated to the collection\r\n     *\r\n     * @param title The field title.\r\n     * @param formula The formula for the field.\r\n     * @param dateFormat The date and time format that is displayed in the field.\r\n     * @param outputType Specifies the output format for the field. Represents a FieldType value.\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    addCalculated(title, formula, dateFormat, outputType = FieldTypes.Text, properties) {\r\n        const props = {\r\n            DateFormat: dateFormat,\r\n            FieldTypeKind: 17,\r\n            Formula: formula,\r\n            OutputType: outputType,\r\n        };\r\n        return this.add(title, \"SP.FieldCalculated\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldDateTime to the collection\r\n     *\r\n     * @param title The field title\r\n     * @param displayFormat The format of the date and time that is displayed in the field.\r\n     * @param calendarType Specifies the calendar type of the field.\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    addDateTime(title, displayFormat = DateTimeFieldFormatType.DateOnly, calendarType = CalendarType.Gregorian, friendlyDisplayFormat = 0, properties) {\r\n        const props = {\r\n            DateTimeCalendarType: calendarType,\r\n            DisplayFormat: displayFormat,\r\n            FieldTypeKind: 4,\r\n            FriendlyDisplayFormat: friendlyDisplayFormat,\r\n        };\r\n        return this.add(title, \"SP.FieldDateTime\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldNumber to the collection\r\n     *\r\n     * @param title The field title\r\n     * @param minValue The field's minimum value\r\n     * @param maxValue The field's maximum value\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    addNumber(title, minValue, maxValue, properties) {\r\n        let props = { FieldTypeKind: 9 };\r\n        if (minValue !== undefined) {\r\n            props = extend({ MinimumValue: minValue }, props);\r\n        }\r\n        if (maxValue !== undefined) {\r\n            props = extend({ MaximumValue: maxValue }, props);\r\n        }\r\n        return this.add(title, \"SP.FieldNumber\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldCurrency to the collection\r\n     *\r\n     * @param title The field title\r\n     * @param minValue The field's minimum value\r\n     * @param maxValue The field's maximum value\r\n     * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    addCurrency(title, minValue, maxValue, currencyLocalId = 1033, properties) {\r\n        let props = {\r\n            CurrencyLocaleId: currencyLocalId,\r\n            FieldTypeKind: 10,\r\n        };\r\n        if (minValue !== undefined) {\r\n            props = extend({ MinimumValue: minValue }, props);\r\n        }\r\n        if (maxValue !== undefined) {\r\n            props = extend({ MaximumValue: maxValue }, props);\r\n        }\r\n        return this.add(title, \"SP.FieldCurrency\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldMultiLineText to the collection\r\n     *\r\n     * @param title The field title\r\n     * @param numberOfLines Specifies the number of lines of text to display for the field.\r\n     * @param richText Specifies whether the field supports rich formatting.\r\n     * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\r\n     * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\r\n     * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     *\r\n     */\r\n    addMultilineText(title, numberOfLines = 6, richText = true, restrictedMode = false, appendOnly = false, allowHyperlink = true, properties) {\r\n        const props = {\r\n            AllowHyperlink: allowHyperlink,\r\n            AppendOnly: appendOnly,\r\n            FieldTypeKind: 3,\r\n            NumberOfLines: numberOfLines,\r\n            RestrictedMode: restrictedMode,\r\n            RichText: richText,\r\n        };\r\n        return this.add(title, \"SP.FieldMultiLineText\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldUrl to the collection\r\n     *\r\n     * @param title The field title\r\n     */\r\n    addUrl(title, displayFormat = UrlFieldFormatType.Hyperlink, properties) {\r\n        const props = {\r\n            DisplayFormat: displayFormat,\r\n            FieldTypeKind: 11,\r\n        };\r\n        return this.add(title, \"SP.FieldUrl\", extend(props, properties));\r\n    }\r\n    /** Adds a user field to the colleciton\r\n    *\r\n    * @param title The new field's title\r\n    * @param selectionMode The selection mode of the field\r\n    * @param selectionGroup Value that specifies the identifier of the SharePoint group whose members can be selected as values of the field\r\n    * @param properties\r\n    */\r\n    addUser(title, selectionMode, properties) {\r\n        const props = {\r\n            FieldTypeKind: 20,\r\n            SelectionMode: selectionMode,\r\n        };\r\n        return this.add(title, \"SP.FieldUser\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a SP.FieldLookup to the collection\r\n     *\r\n     * @param title The new field's title\r\n     * @param lookupListId The guid id of the list where the source of the lookup is found\r\n     * @param lookupFieldName The internal name of the field in the source list\r\n     * @param properties Set of additional properties to set on the new field\r\n     */\r\n    addLookup(title, lookupListId, lookupFieldName, properties) {\r\n        const props = extend({\r\n            FieldTypeKind: 7,\r\n            LookupFieldName: lookupFieldName,\r\n            LookupListId: lookupListId,\r\n            Title: title,\r\n        }, properties);\r\n        const postBody = jsS({\r\n            \"parameters\": extend(metadata(\"SP.FieldCreationInformation\"), props),\r\n        });\r\n        return this.clone(Fields_1, \"addfield\").postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                field: this.getById(data.Id),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldChoice to the collection\r\n     *\r\n     * @param title The field title.\r\n     * @param choices The choices for the field.\r\n     * @param format The display format of the available options for the field.\r\n     * @param fillIn Specifies whether the field allows fill-in values.\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    addChoice(title, choices, format = ChoiceFieldFormatType.Dropdown, fillIn, properties) {\r\n        const props = {\r\n            Choices: {\r\n                results: choices,\r\n            },\r\n            EditFormat: format,\r\n            FieldTypeKind: 6,\r\n            FillInChoice: fillIn,\r\n        };\r\n        return this.add(title, \"SP.FieldChoice\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldMultiChoice to the collection\r\n     *\r\n     * @param title The field title.\r\n     * @param choices The choices for the field.\r\n     * @param fillIn Specifies whether the field allows fill-in values.\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    addMultiChoice(title, choices, fillIn, properties) {\r\n        const props = {\r\n            Choices: {\r\n                results: choices,\r\n            },\r\n            FieldTypeKind: 15,\r\n            FillInChoice: fillIn,\r\n        };\r\n        return this.add(title, \"SP.FieldMultiChoice\", extend(props, properties));\r\n    }\r\n    /**\r\n     * Adds a new SP.FieldBoolean to the collection\r\n     *\r\n     * @param title The field title.\r\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n     */\r\n    addBoolean(title, properties) {\r\n        const props = {\r\n            FieldTypeKind: 8,\r\n        };\r\n        return this.add(title, \"SP.Field\", extend(props, properties));\r\n    }\r\n};\r\nFields = Fields_1 = tslib_1.__decorate([\r\n    defaultPath(\"fields\")\r\n], Fields);\r\nexport { Fields };\r\n/**\r\n * Describes a single of Field instance\r\n *\r\n */\r\nexport class Field extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Delete this fields\r\n         *\r\n         */\r\n        this.delete = this._delete;\r\n    }\r\n    /**\r\n     * Updates this field intance with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the list\r\n     * @param fieldType The type value, required to update child field type properties\r\n     */\r\n    update(properties, fieldType = \"SP.Field\") {\r\n        const postBody = jsS(extend(metadata(fieldType), properties));\r\n        return this.postCore({\r\n            body: postBody,\r\n            headers: {\r\n                \"X-HTTP-Method\": \"MERGE\",\r\n            },\r\n        }).then((data) => {\r\n            return {\r\n                data: data,\r\n                field: this,\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Sets the value of the ShowInDisplayForm property for this field.\r\n     */\r\n    setShowInDisplayForm(show) {\r\n        return this.clone(Field, `setshowindisplayform(${show})`).postCore();\r\n    }\r\n    /**\r\n     * Sets the value of the ShowInEditForm property for this field.\r\n     */\r\n    setShowInEditForm(show) {\r\n        return this.clone(Field, `setshowineditform(${show})`).postCore();\r\n    }\r\n    /**\r\n     * Sets the value of the ShowInNewForm property for this field.\r\n     */\r\n    setShowInNewForm(show) {\r\n        return this.clone(Field, `setshowinnewform(${show})`).postCore();\r\n    }\r\n}\r\n//# sourceMappingURL=fields.js.map","import * as tslib_1 from \"tslib\";\r\nimport { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\n/**\r\n * Describes a collection of Field objects\r\n *\r\n */\r\nlet Forms = class Forms extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a form by id\r\n     *\r\n     * @param id The guid id of the item to retrieve\r\n     */\r\n    getById(id) {\r\n        const i = new Form(this);\r\n        i.concat(`('${id}')`);\r\n        return i;\r\n    }\r\n};\r\nForms = tslib_1.__decorate([\r\n    defaultPath(\"forms\")\r\n], Forms);\r\nexport { Forms };\r\n/**\r\n * Describes a single of Form instance\r\n *\r\n */\r\nexport class Form extends SharePointQueryableInstance {\r\n}\r\n//# sourceMappingURL=forms.js.map","import * as tslib_1 from \"tslib\";\r\nimport { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\n/**\r\n * Describes a collection of webhook subscriptions\r\n *\r\n */\r\nlet Subscriptions = class Subscriptions extends SharePointQueryableCollection {\r\n    /**\r\n     * Returns all the webhook subscriptions or the specified webhook subscription\r\n     *\r\n     * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\r\n     */\r\n    getById(subscriptionId) {\r\n        const s = new Subscription(this);\r\n        s.concat(`('${subscriptionId}')`);\r\n        return s;\r\n    }\r\n    /**\r\n     * Creates a new webhook subscription\r\n     *\r\n     * @param notificationUrl The url to receive the notifications\r\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\r\n     * @param clientState A client specific string (defaults to pnp-js-core-subscription when omitted)\r\n     */\r\n    add(notificationUrl, expirationDate, clientState) {\r\n        const postBody = jsS({\r\n            \"clientState\": clientState || \"pnp-js-core-subscription\",\r\n            \"expirationDateTime\": expirationDate,\r\n            \"notificationUrl\": notificationUrl,\r\n            \"resource\": this.toUrl(),\r\n        });\r\n        return this.postCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(result => {\r\n            return { data: result, subscription: this.getById(result.id) };\r\n        });\r\n    }\r\n};\r\nSubscriptions = tslib_1.__decorate([\r\n    defaultPath(\"subscriptions\")\r\n], Subscriptions);\r\nexport { Subscriptions };\r\n/**\r\n * Describes a single webhook subscription instance\r\n *\r\n */\r\nexport class Subscription extends SharePointQueryableInstance {\r\n    /**\r\n     * Renews this webhook subscription\r\n     *\r\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\r\n     */\r\n    update(expirationDate) {\r\n        const postBody = jsS({\r\n            \"expirationDateTime\": expirationDate,\r\n        });\r\n        return this.patchCore({ body: postBody, headers: { \"Content-Type\": \"application/json\" } }).then(data => {\r\n            return { data: data, subscription: this };\r\n        });\r\n    }\r\n    /**\r\n     * Removes this webhook subscription\r\n     *\r\n     */\r\n    delete() {\r\n        return super.deleteCore();\r\n    }\r\n}\r\n//# sourceMappingURL=subscriptions.js.map","import * as tslib_1 from \"tslib\";\r\nvar UserCustomActions_1;\r\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { extend, jsS } from \"@pnp/common\";\r\n/**\r\n * Describes a collection of user custom actions\r\n *\r\n */\r\nlet UserCustomActions = UserCustomActions_1 = class UserCustomActions extends SharePointQueryableCollection {\r\n    /**\r\n     * Returns the user custom action with the specified id\r\n     *\r\n     * @param id The GUID id of the user custom action to retrieve\r\n     */\r\n    getById(id) {\r\n        const uca = new UserCustomAction(this);\r\n        uca.concat(`('${id}')`);\r\n        return uca;\r\n    }\r\n    /**\r\n     * Creates a user custom action\r\n     *\r\n     * @param properties The information object of property names and values which define the new user custom action\r\n     *\r\n     */\r\n    add(properties) {\r\n        const postBody = jsS(extend({ __metadata: { \"type\": \"SP.UserCustomAction\" } }, properties));\r\n        return this.postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                action: this.getById(data.Id),\r\n                data: data,\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Deletes all user custom actions in the collection\r\n     *\r\n     */\r\n    clear() {\r\n        return this.clone(UserCustomActions_1, \"clear\").postCore();\r\n    }\r\n};\r\nUserCustomActions = UserCustomActions_1 = tslib_1.__decorate([\r\n    defaultPath(\"usercustomactions\")\r\n], UserCustomActions);\r\nexport { UserCustomActions };\r\n/**\r\n * Describes a single user custom action\r\n *\r\n */\r\nexport class UserCustomAction extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * Updates this user custom action with the supplied properties\r\n        *\r\n        * @param properties An information object of property names and values to update for this user custom action\r\n        */\r\n        this.update = this._update(\"SP.UserCustomAction\", (data) => ({ data, action: this }));\r\n    }\r\n    /**\r\n    * Removes this user custom action\r\n    *\r\n    */\r\n    delete() {\r\n        return super.deleteCore();\r\n    }\r\n}\r\n//# sourceMappingURL=usercustomactions.js.map","import * as tslib_1 from \"tslib\";\r\nvar Lists_1;\r\nimport { Items } from \"./items\";\r\nimport { Views, View } from \"./views\";\r\nimport { ContentTypes } from \"./contenttypes\";\r\nimport { Fields } from \"./fields\";\r\nimport { Forms } from \"./forms\";\r\nimport { Subscriptions } from \"./subscriptions\";\r\nimport { SharePointQueryable, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\r\nimport { extend, hOP, jsS } from \"@pnp/common\";\r\nimport { UserCustomActions } from \"./usercustomactions\";\r\nimport { odataUrlFrom } from \"./odata\";\r\nimport { Folder } from \"./folders\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Describes a collection of List objects\r\n *\r\n */\r\nlet Lists = Lists_1 = class Lists extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a list from the collection by guid id\r\n     *\r\n     * @param id The Id of the list (GUID)\r\n     */\r\n    getById(id) {\r\n        const list = new List(this);\r\n        list.concat(`('${id}')`);\r\n        return list;\r\n    }\r\n    /**\r\n     * Gets a list from the collection by title\r\n     *\r\n     * @param title The title of the list\r\n     */\r\n    getByTitle(title) {\r\n        return new List(this, `getByTitle('${title}')`);\r\n    }\r\n    /**\r\n     * Adds a new list to the collection\r\n     *\r\n     * @param title The new list's title\r\n     * @param description The new list's description\r\n     * @param template The list template value\r\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\r\n     * @param additionalSettings Will be passed as part of the list creation body\r\n     */\r\n    add(title, description = \"\", template = 100, enableContentTypes = false, additionalSettings = {}) {\r\n        const addSettings = extend({\r\n            \"AllowContentTypes\": enableContentTypes,\r\n            \"BaseTemplate\": template,\r\n            \"ContentTypesEnabled\": enableContentTypes,\r\n            \"Description\": description,\r\n            \"Title\": title,\r\n            \"__metadata\": { \"type\": \"SP.List\" },\r\n        }, additionalSettings);\r\n        return this.postCore({ body: jsS(addSettings) }).then((data) => {\r\n            return { data: data, list: this.getByTitle(addSettings.Title) };\r\n        });\r\n    }\r\n    /**\r\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\r\n     *\r\n     * @param title The new list's title\r\n     * @param description The new list's description\r\n     * @param template The list template value\r\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\r\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\r\n     */\r\n    ensure(title, description = \"\", template = 100, enableContentTypes = false, additionalSettings = {}) {\r\n        if (this.hasBatch) {\r\n            throw Error(\"The ensure list method is not supported for use in a batch.\");\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const addOrUpdateSettings = extend(additionalSettings, { Title: title, Description: description, ContentTypesEnabled: enableContentTypes }, true);\r\n            const list = this.getByTitle(addOrUpdateSettings.Title);\r\n            list.get().then(_ => {\r\n                list.update(addOrUpdateSettings).then(d => {\r\n                    resolve({ created: false, data: d, list: this.getByTitle(addOrUpdateSettings.Title) });\r\n                }).catch(e => reject(e));\r\n            }).catch(_ => {\r\n                this.add(title, description, template, enableContentTypes, addOrUpdateSettings).then((r) => {\r\n                    resolve({ created: true, data: r.data, list: this.getByTitle(addOrUpdateSettings.Title) });\r\n                }).catch((e) => reject(e));\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\r\n     */\r\n    ensureSiteAssetsLibrary() {\r\n        return this.clone(Lists_1, \"ensuresiteassetslibrary\").postCore().then((json) => {\r\n            return new List(odataUrlFrom(json));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list that is the default location for wiki pages.\r\n     */\r\n    ensureSitePagesLibrary() {\r\n        return this.clone(Lists_1, \"ensuresitepageslibrary\").postCore().then((json) => {\r\n            return new List(odataUrlFrom(json));\r\n        });\r\n    }\r\n};\r\nLists = Lists_1 = tslib_1.__decorate([\r\n    defaultPath(\"lists\")\r\n], Lists);\r\nexport { Lists };\r\n/**\r\n * Describes a single List instance\r\n *\r\n */\r\nexport class List extends SharePointQueryableSecurable {\r\n    /**\r\n     * Gets the content types in this list\r\n     *\r\n     */\r\n    get contentTypes() {\r\n        return new ContentTypes(this);\r\n    }\r\n    /**\r\n     * Gets the items in this list\r\n     *\r\n     */\r\n    get items() {\r\n        return new Items(this);\r\n    }\r\n    /**\r\n     * Gets the views in this list\r\n     *\r\n     */\r\n    get views() {\r\n        return new Views(this);\r\n    }\r\n    /**\r\n     * Gets the fields in this list\r\n     *\r\n     */\r\n    get fields() {\r\n        return new Fields(this);\r\n    }\r\n    /**\r\n     * Gets the forms in this list\r\n     *\r\n     */\r\n    get forms() {\r\n        return new Forms(this);\r\n    }\r\n    /**\r\n     * Gets the default view of this list\r\n     *\r\n     */\r\n    get defaultView() {\r\n        return new View(this, \"DefaultView\");\r\n    }\r\n    /**\r\n     * Get all custom actions on a site collection\r\n     *\r\n     */\r\n    get userCustomActions() {\r\n        return new UserCustomActions(this);\r\n    }\r\n    /**\r\n     * Gets the effective base permissions of this list\r\n     *\r\n     */\r\n    get effectiveBasePermissions() {\r\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\r\n    }\r\n    /**\r\n     * Gets the event receivers attached to this list\r\n     *\r\n     */\r\n    get eventReceivers() {\r\n        return new SharePointQueryableCollection(this, \"EventReceivers\");\r\n    }\r\n    /**\r\n     * Gets the related fields of this list\r\n     *\r\n     */\r\n    get relatedFields() {\r\n        return new SharePointQueryable(this, \"getRelatedFields\");\r\n    }\r\n    /**\r\n     * Gets the IRM settings for this list\r\n     *\r\n     */\r\n    get informationRightsManagementSettings() {\r\n        return new SharePointQueryable(this, \"InformationRightsManagementSettings\");\r\n    }\r\n    /**\r\n     * Gets the webhook subscriptions of this list\r\n     *\r\n     */\r\n    get subscriptions() {\r\n        return new Subscriptions(this);\r\n    }\r\n    /**\r\n     * The root folder of the list\r\n     */\r\n    get rootFolder() {\r\n        return new Folder(this, \"rootFolder\");\r\n    }\r\n    /**\r\n     * Gets a view by view guid id\r\n     *\r\n     */\r\n    getView(viewId) {\r\n        return new View(this, `getView('${viewId}')`);\r\n    }\r\n    /**\r\n     * Updates this list intance with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the list\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     */\r\n    /* tslint:disable no-string-literal */\r\n    update(properties, eTag = \"*\") {\r\n        const postBody = jsS(extend({\r\n            \"__metadata\": { \"type\": \"SP.List\" },\r\n        }, properties));\r\n        return this.postCore({\r\n            body: postBody,\r\n            headers: {\r\n                \"IF-Match\": eTag,\r\n                \"X-HTTP-Method\": \"MERGE\",\r\n            },\r\n        }).then((data) => {\r\n            let retList = this;\r\n            if (hOP(properties, \"Title\")) {\r\n                retList = this.getParent(List, this.parentUrl, `getByTitle('${properties[\"Title\"]}')`);\r\n            }\r\n            return {\r\n                data: data,\r\n                list: retList,\r\n            };\r\n        });\r\n    }\r\n    /* tslint:enable */\r\n    /**\r\n     * Delete this list\r\n     *\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     */\r\n    delete(eTag = \"*\") {\r\n        return this.postCore({\r\n            headers: {\r\n                \"IF-Match\": eTag,\r\n                \"X-HTTP-Method\": \"DELETE\",\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\r\n     */\r\n    getChanges(query) {\r\n        return this.clone(List, \"getchanges\").postCore({\r\n            body: jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) }),\r\n        });\r\n    }\r\n    /**\r\n     * Returns a collection of items from the list based on the specified query.\r\n     *\r\n     * @param CamlQuery The Query schema of Collaborative Application Markup\r\n     * Language (CAML) is used in various ways within the context of Microsoft SharePoint Foundation\r\n     * to define queries against list data.\r\n     * see:\r\n     *\r\n     * https://msdn.microsoft.com/en-us/library/office/ms467521.aspx\r\n     *\r\n     * @param expands A URI with a $expand System Query Option indicates that Entries associated with\r\n     * the Entry or Collection of Entries identified by the Resource Path\r\n     * section of the URI must be represented inline (i.e. eagerly loaded).\r\n     * see:\r\n     *\r\n     * https://msdn.microsoft.com/en-us/library/office/fp142385.aspx\r\n     *\r\n     * http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#ExpandSystemQueryOption\r\n     */\r\n    getItemsByCAMLQuery(query, ...expands) {\r\n        const q = this.clone(List, \"getitems\");\r\n        return q.expand.apply(q, expands).postCore({\r\n            body: jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.CamlQuery\" } }, query) }),\r\n        });\r\n    }\r\n    /**\r\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\r\n     */\r\n    getListItemChangesSinceToken(query) {\r\n        return this.clone(List, \"getlistitemchangessincetoken\").postCore({\r\n            body: jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeLogItemQuery\" } }, query) }),\r\n        }, { parse(r) { return r.text(); } });\r\n    }\r\n    /**\r\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n     */\r\n    recycle() {\r\n        return this.clone(List, \"recycle\").postCore().then(data => {\r\n            if (hOP(data, \"Recycle\")) {\r\n                return data.Recycle;\r\n            }\r\n            else {\r\n                return data;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Renders list data based on the view xml provided\r\n     */\r\n    renderListData(viewXml) {\r\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\r\n        q.query.set(\"@viewXml\", `'${viewXml}'`);\r\n        return q.postCore().then(data => {\r\n            // data will be a string, so we parse it again\r\n            return JSON.parse(hOP(data, \"RenderListData\") ? data.RenderListData : data);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the data for the specified query view\r\n     *\r\n     * @param parameters The parameters to be used to render list data as JSON string.\r\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\r\n     */\r\n    renderListDataAsStream(parameters, overrideParameters = null) {\r\n        const postBody = {\r\n            overrideParameters: extend(metadata(\"SP.RenderListDataOverrideParameters\"), overrideParameters),\r\n            parameters: extend(metadata(\"SP.RenderListDataParameters\"), parameters),\r\n        };\r\n        return this.clone(List, \"RenderListDataAsStream\", true).postCore({\r\n            body: jsS(postBody),\r\n        });\r\n    }\r\n    /**\r\n     * Gets the field values and field schema attributes for a list item.\r\n     */\r\n    renderListFormData(itemId, formId, mode) {\r\n        return this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`).postCore().then(data => {\r\n            // data will be a string, so we parse it again\r\n            return JSON.parse(hOP(data, \"RenderListFormData\") ? data.RenderListFormData : data);\r\n        });\r\n    }\r\n    /**\r\n     * Reserves a list item ID for idempotent list item creation.\r\n     */\r\n    reserveListItemId() {\r\n        return this.clone(List, \"reservelistitemid\").postCore().then(data => {\r\n            if (hOP(data, \"ReserveListItemId\")) {\r\n                return data.ReserveListItemId;\r\n            }\r\n            else {\r\n                return data;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\r\n     *\r\n     */\r\n    getListItemEntityTypeFullName() {\r\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").get().then(o => o.ListItemEntityTypeFullName);\r\n    }\r\n    /**\r\n     * Creates an item using path (in a folder), validates and sets its field values.\r\n     *\r\n     * @param formValues The fields to change and their new values.\r\n     * @param decodedUrl Path decoded url; folder's server relative path.\r\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\r\n     * @param checkInComment Optional check in comment.\r\n     */\r\n    addValidateUpdateItemUsingPath(formValues, decodedUrl, bNewDocumentUpdate = false, checkInComment) {\r\n        return this.clone(List, \"AddValidateUpdateItemUsingPath()\").postCore({\r\n            body: jsS({\r\n                bNewDocumentUpdate,\r\n                checkInComment,\r\n                formValues,\r\n                listItemCreateInfo: {\r\n                    FolderPath: {\r\n                        DecodedUrl: decodedUrl,\r\n                        __metadata: { type: \"SP.ResourcePath\" },\r\n                    },\r\n                    __metadata: { type: \"SP.ListItemCreationInformationUsingPath\" },\r\n                },\r\n            }),\r\n        }).then(res => {\r\n            if (typeof res.AddValidateUpdateItemUsingPath !== \"undefined\") {\r\n                return res.AddValidateUpdateItemUsingPath.results;\r\n            }\r\n            return res;\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=lists.js.map","import * as tslib_1 from \"tslib\";\r\nvar Comments_1, Replies_1;\r\nimport { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { extend, jsS } from \"@pnp/common\";\r\nimport { odataUrlFrom } from \"./odata\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Represents a Collection of comments\r\n */\r\nlet Comments = Comments_1 = class Comments extends SharePointQueryableCollection {\r\n    /**\r\n     * Adds a new comment to this collection\r\n     *\r\n     * @param info Comment information to add\r\n     */\r\n    add(info) {\r\n        if (typeof info === \"string\") {\r\n            info = { text: info };\r\n        }\r\n        const postBody = jsS(extend(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\r\n        return this.clone(Comments_1, null).postCore({ body: postBody }).then(d => {\r\n            return extend(this.getById(d.id), d);\r\n        });\r\n    }\r\n    /**\r\n     * Gets a comment by id\r\n     *\r\n     * @param id Id of the comment to load\r\n     */\r\n    getById(id) {\r\n        const c = new Comment(this);\r\n        c.concat(`(${id})`);\r\n        return c;\r\n    }\r\n    /**\r\n     * Deletes all the comments in this collection\r\n     */\r\n    clear() {\r\n        return this.clone(Comments_1, \"DeleteAll\").postCore();\r\n    }\r\n};\r\nComments = Comments_1 = tslib_1.__decorate([\r\n    defaultPath(\"comments\")\r\n], Comments);\r\nexport { Comments };\r\n/**\r\n * Represents a comment\r\n */\r\nexport class Comment extends SharePointQueryableInstance {\r\n    get replies() {\r\n        return new Replies(this);\r\n    }\r\n    /**\r\n     * Likes the comment as the current user\r\n     */\r\n    like() {\r\n        return this.clone(Comment, \"Like\").postCore();\r\n    }\r\n    /**\r\n     * Unlikes the comment as the current user\r\n     */\r\n    unlike() {\r\n        return this.clone(Comment, \"Unlike\").postCore();\r\n    }\r\n    /**\r\n     * Deletes this comment\r\n     */\r\n    delete() {\r\n        return this.clone(Comment, \"DeleteComment\").postCore();\r\n    }\r\n}\r\n/**\r\n * Represents a Collection of comments\r\n */\r\nlet Replies = Replies_1 = class Replies extends SharePointQueryableCollection {\r\n    /**\r\n     * Adds a new reply to this collection\r\n     *\r\n     * @param info Comment information to add\r\n     */\r\n    add(info) {\r\n        if (typeof info === \"string\") {\r\n            info = { text: info };\r\n        }\r\n        const postBody = jsS(extend(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\r\n        return this.clone(Replies_1, null).postCore({ body: postBody }).then(d => {\r\n            return extend(new Comment(odataUrlFrom(d)), d);\r\n        });\r\n    }\r\n};\r\nReplies = Replies_1 = tslib_1.__decorate([\r\n    defaultPath(\"replies\")\r\n], Replies);\r\nexport { Replies };\r\n//# sourceMappingURL=comments.js.map","import * as tslib_1 from \"tslib\";\r\nvar Items_1;\r\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { SharePointQueryableShareableItem } from \"./sharepointqueryableshareable\";\r\nimport { Folder } from \"./folders\";\r\nimport { File } from \"./files\";\r\nimport { ContentType } from \"./contenttypes\";\r\nimport { extend, jsS, hOP } from \"@pnp/common\";\r\nimport { ODataParserBase } from \"@pnp/odata\";\r\nimport { AttachmentFiles } from \"./attachmentfiles\";\r\nimport { List } from \"./lists\";\r\nimport { Logger } from \"@pnp/logging\";\r\nimport { Comments } from \"./comments\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Describes a collection of Item objects\r\n *\r\n */\r\nlet Items = Items_1 = class Items extends SharePointQueryableCollection {\r\n    /**\r\n    * Gets an Item by id\r\n    *\r\n    * @param id The integer id of the item to retrieve\r\n    */\r\n    getById(id) {\r\n        const i = new Item(this);\r\n        i.concat(`(${id})`);\r\n        return i;\r\n    }\r\n    /**\r\n     * Gets BCS Item by string id\r\n     *\r\n     * @param stringId The string id of the BCS item to retrieve\r\n     */\r\n    getItemByStringId(stringId) {\r\n        // creates an item with the parent list path and append out method call\r\n        return new Item(this.parentUrl, `getItemByStringId('${stringId}')`);\r\n    }\r\n    /**\r\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\r\n     *\r\n     * @param skip The starting id where the page should start, use with top to specify pages\r\n     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection\r\n     */\r\n    skip(skip, reverse = false) {\r\n        if (reverse) {\r\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&PagedPrev=TRUE&p_ID=${skip}`));\r\n        }\r\n        else {\r\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets a collection designed to aid in paging through data\r\n     *\r\n     */\r\n    getPaged() {\r\n        return this.get(new PagedItemCollectionParser(this));\r\n    }\r\n    /**\r\n     * Gets all the items in a list, regardless of count. Does not support batching or caching\r\n     *\r\n     *  @param requestSize Number of items to return in each request (Default: 2000)\r\n     *  @param acceptHeader Allows for setting the value of the Accept header for SP 2013 support\r\n     */\r\n    getAll(requestSize = 2000, acceptHeader = \"application/json;odata=nometadata\") {\r\n        Logger.write(\"Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.\", 2 /* Warning */);\r\n        // this will be used for the actual query\r\n        // and we set no metadata here to try and reduce traffic\r\n        const items = new Items_1(this, \"\").top(requestSize).configure({\r\n            headers: {\r\n                \"Accept\": acceptHeader,\r\n            },\r\n        });\r\n        // let's copy over the odata query params that can be applied\r\n        // $top - allow setting the page size this way (override what we did above)\r\n        // $select - allow picking the return fields (good behavior)\r\n        // $filter - allow setting a filter, though this may fail due for large lists\r\n        this.query.forEach((v, k) => {\r\n            if (/^\\$select|filter|top|expand$/i.test(k)) {\r\n                items.query.set(k, v);\r\n            }\r\n        });\r\n        // give back the promise\r\n        return new Promise((resolve, reject) => {\r\n            // this will eventually hold the items we return\r\n            const itemsCollector = [];\r\n            // action that will gather up our results recursively\r\n            const gatherer = (last) => {\r\n                // collect that set of results\r\n                [].push.apply(itemsCollector, last.results);\r\n                // if we have more, repeat - otherwise resolve with the collected items\r\n                if (last.hasNext) {\r\n                    last.getNext().then(gatherer).catch(reject);\r\n                }\r\n                else {\r\n                    resolve(itemsCollector);\r\n                }\r\n            };\r\n            // start the cycle\r\n            items.getPaged().then(gatherer).catch(reject);\r\n        });\r\n    }\r\n    /**\r\n     * Adds a new item to the collection\r\n     *\r\n     * @param properties The new items's properties\r\n     * @param listItemEntityTypeFullName The type name of the list's entities\r\n     */\r\n    add(properties = {}, listItemEntityTypeFullName = null) {\r\n        const removeDependency = this.addBatchDependency();\r\n        return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\r\n            const postBody = jsS(extend(metadata(listItemEntityType), properties));\r\n            const promise = this.clone(Items_1, \"\").postCore({ body: postBody }).then((data) => {\r\n                return {\r\n                    data: data,\r\n                    item: this.getById(data.Id),\r\n                };\r\n            });\r\n            removeDependency();\r\n            return promise;\r\n        });\r\n    }\r\n    /**\r\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\r\n     *\r\n     * @param candidatelistItemEntityTypeFullName The potential type name\r\n     */\r\n    ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName) {\r\n        return candidatelistItemEntityTypeFullName ?\r\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\r\n            this.getParent(List).getListItemEntityTypeFullName();\r\n    }\r\n};\r\nItems = Items_1 = tslib_1.__decorate([\r\n    defaultPath(\"items\")\r\n], Items);\r\nexport { Items };\r\n/**\r\n * Descrines a single Item instance\r\n *\r\n */\r\nexport class Item extends SharePointQueryableShareableItem {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Delete this item\r\n         *\r\n         * @param eTag Value used in the IF-Match header, by default \"*\"\r\n         */\r\n        this.delete = this._deleteWithETag;\r\n    }\r\n    /**\r\n     * Gets the set of attachments for this item\r\n     *\r\n     */\r\n    get attachmentFiles() {\r\n        return new AttachmentFiles(this);\r\n    }\r\n    /**\r\n     * Gets the content type for this item\r\n     *\r\n     */\r\n    get contentType() {\r\n        return new ContentType(this, \"ContentType\");\r\n    }\r\n    /**\r\n     * Gets the collection of comments associated with this list item\r\n     */\r\n    get comments() {\r\n        return new Comments(this);\r\n    }\r\n    /**\r\n     * Gets the effective base permissions for the item\r\n     *\r\n     */\r\n    get effectiveBasePermissions() {\r\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\r\n    }\r\n    /**\r\n     * Gets the effective base permissions for the item in a UI context\r\n     *\r\n     */\r\n    get effectiveBasePermissionsForUI() {\r\n        return new SharePointQueryable(this, \"EffectiveBasePermissionsForUI\");\r\n    }\r\n    /**\r\n     * Gets the field values for this list item in their HTML representation\r\n     *\r\n     */\r\n    get fieldValuesAsHTML() {\r\n        return new SharePointQueryableInstance(this, \"FieldValuesAsHTML\");\r\n    }\r\n    /**\r\n     * Gets the field values for this list item in their text representation\r\n     *\r\n     */\r\n    get fieldValuesAsText() {\r\n        return new SharePointQueryableInstance(this, \"FieldValuesAsText\");\r\n    }\r\n    /**\r\n     * Gets the field values for this list item for use in editing controls\r\n     *\r\n     */\r\n    get fieldValuesForEdit() {\r\n        return new SharePointQueryableInstance(this, \"FieldValuesForEdit\");\r\n    }\r\n    /**\r\n     * Gets the folder associated with this list item (if this item represents a folder)\r\n     *\r\n     */\r\n    get folder() {\r\n        return new Folder(this, \"folder\");\r\n    }\r\n    /**\r\n     * Gets the folder associated with this list item (if this item represents a folder)\r\n     *\r\n     */\r\n    get file() {\r\n        return new File(this, \"file\");\r\n    }\r\n    /**\r\n     * Gets the collection of versions associated with this item\r\n     */\r\n    get versions() {\r\n        return new ItemVersions(this);\r\n    }\r\n    /**\r\n     * Updates this list intance with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the list\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     * @param listItemEntityTypeFullName The type name of the list's entities\r\n     */\r\n    update(properties, eTag = \"*\", listItemEntityTypeFullName = null) {\r\n        return new Promise((resolve, reject) => {\r\n            const removeDependency = this.addBatchDependency();\r\n            return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\r\n                const postBody = jsS(extend(metadata(listItemEntityType), properties));\r\n                removeDependency();\r\n                return this.postCore({\r\n                    body: postBody,\r\n                    headers: {\r\n                        \"IF-Match\": eTag,\r\n                        \"X-HTTP-Method\": \"MERGE\",\r\n                    },\r\n                }, new ItemUpdatedParser()).then((data) => {\r\n                    resolve({\r\n                        data: data,\r\n                        item: this,\r\n                    });\r\n                });\r\n            }).catch(e => reject(e));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the collection of people who have liked this item\r\n     */\r\n    getLikedBy() {\r\n        return this.clone(Item, \"likedBy\").postCore();\r\n    }\r\n    /**\r\n     * Likes this item as the current user\r\n     */\r\n    like() {\r\n        return this.clone(Item, \"like\").postCore();\r\n    }\r\n    /**\r\n     * Unlikes this item as the current user\r\n     */\r\n    unlike() {\r\n        return this.clone(Item, \"unlike\").postCore();\r\n    }\r\n    /**\r\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n     */\r\n    recycle() {\r\n        return this.clone(Item, \"recycle\").postCore();\r\n    }\r\n    /**\r\n     * Gets a string representation of the full URL to the WOPI frame.\r\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\r\n     *\r\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\r\n     */\r\n    getWopiFrameUrl(action = 0) {\r\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\r\n        i.query.set(\"@action\", action);\r\n        return i.postCore().then((data) => {\r\n            // handle verbose mode\r\n            if (hOP(data, \"GetWOPIFrameUrl\")) {\r\n                return data.GetWOPIFrameUrl;\r\n            }\r\n            return data;\r\n        });\r\n    }\r\n    /**\r\n     * Validates and sets the values of the specified collection of fields for the list item.\r\n     *\r\n     * @param formValues The fields to change and their new values.\r\n     * @param newDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\r\n     */\r\n    validateUpdateListItem(formValues, newDocumentUpdate = false) {\r\n        return this.clone(Item, \"validateupdatelistitem\").postCore({\r\n            body: jsS({ \"formValues\": formValues, bNewDocumentUpdate: newDocumentUpdate }),\r\n        });\r\n    }\r\n    /**\r\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\r\n     *\r\n     * @param candidatelistItemEntityTypeFullName The potential type name\r\n     */\r\n    ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName) {\r\n        return candidatelistItemEntityTypeFullName ?\r\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\r\n            this.getParent(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\"))).getListItemEntityTypeFullName();\r\n    }\r\n}\r\n/**\r\n * Describes a collection of Version objects\r\n *\r\n */\r\nlet ItemVersions = class ItemVersions extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a version by id\r\n     *\r\n     * @param versionId The id of the version to retrieve\r\n     */\r\n    getById(versionId) {\r\n        const v = new ItemVersion(this);\r\n        v.concat(`(${versionId})`);\r\n        return v;\r\n    }\r\n};\r\nItemVersions = tslib_1.__decorate([\r\n    defaultPath(\"versions\")\r\n], ItemVersions);\r\nexport { ItemVersions };\r\n/**\r\n * Describes a single Version instance\r\n *\r\n */\r\nexport class ItemVersion extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * Delete a specific version of a file.\r\n        *\r\n        * @param eTag Value used in the IF-Match header, by default \"*\"\r\n        */\r\n        this.delete = this._deleteWithETag;\r\n    }\r\n}\r\n/**\r\n * Provides paging functionality for list items\r\n */\r\nexport class PagedItemCollection {\r\n    constructor(parent, nextUrl, results) {\r\n        this.parent = parent;\r\n        this.nextUrl = nextUrl;\r\n        this.results = results;\r\n    }\r\n    /**\r\n     * If true there are more results available in the set, otherwise there are not\r\n     */\r\n    get hasNext() {\r\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\r\n    }\r\n    /**\r\n     * Gets the next set of results, or resolves to null if no results are available\r\n     */\r\n    getNext() {\r\n        if (this.hasNext) {\r\n            const items = new Items(this.nextUrl, null).configureFrom(this.parent);\r\n            return items.getPaged();\r\n        }\r\n        return new Promise(r => r(null));\r\n    }\r\n}\r\nclass PagedItemCollectionParser extends ODataParserBase {\r\n    constructor(_parent) {\r\n        super();\r\n        this._parent = _parent;\r\n    }\r\n    parse(r) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.handleError(r, reject)) {\r\n                r.json().then(json => {\r\n                    const nextUrl = hOP(json, \"d\") && hOP(json.d, \"__next\") ? json.d.__next : json[\"odata.nextLink\"];\r\n                    resolve(new PagedItemCollection(this._parent, nextUrl, this.parseODataJSON(json)));\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\nclass ItemUpdatedParser extends ODataParserBase {\r\n    parse(r) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.handleError(r, reject)) {\r\n                resolve({\r\n                    \"odata.etag\": r.headers.get(\"etag\"),\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=items.js.map","import * as tslib_1 from \"tslib\";\r\nvar Files_1, Versions_1;\r\nimport { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { TextParser, BlobParser, JSONParser, BufferParser } from \"@pnp/odata\";\r\nimport { extend, getGUID } from \"@pnp/common\";\r\nimport { LimitedWebPartManager } from \"./webparts\";\r\nimport { Item } from \"./items\";\r\nimport { SharePointQueryableShareableFile } from \"./sharepointqueryableshareable\";\r\nimport { odataUrlFrom } from \"./odata\";\r\n/**\r\n * Describes a collection of File objects\r\n *\r\n */\r\nlet Files = Files_1 = class Files extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a File by filename\r\n     *\r\n     * @param name The name of the file, including extension.\r\n     */\r\n    getByName(name) {\r\n        const f = new File(this);\r\n        f.concat(`('${name}')`);\r\n        return f;\r\n    }\r\n    /**\r\n     * Uploads a file. Not supported for batching\r\n     *\r\n     * @param url The folder-relative url of the file.\r\n     * @param content The file contents blob.\r\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\r\n     * @returns The new File and the raw response.\r\n     */\r\n    add(url, content, shouldOverWrite = true) {\r\n        return new Files_1(this, `add(overwrite=${shouldOverWrite},url='${url}')`)\r\n            .postCore({\r\n            body: content,\r\n        }).then((response) => {\r\n            return {\r\n                data: response,\r\n                file: this.getByName(url),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Uploads a file. Not supported for batching\r\n     *\r\n     * @param url The folder-relative url of the file.\r\n     * @param content The Blob file content to add\r\n     * @param progress A callback function which can be used to track the progress of the upload\r\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\r\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\r\n     * @returns The new File and the raw response.\r\n     */\r\n    addChunked(url, content, progress, shouldOverWrite = true, chunkSize = 10485760) {\r\n        const adder = this.clone(Files_1, `add(overwrite=${shouldOverWrite},url='${url}')`, false);\r\n        return adder.postCore()\r\n            .then(() => this.getByName(url))\r\n            .then(file => file.setContentChunked(content, progress, chunkSize));\r\n    }\r\n    /**\r\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\r\n     *\r\n     * @param fileUrl The server-relative url where you want to save the file.\r\n     * @param templateFileType The type of use to create the file.\r\n     * @returns The template file that was added and the raw response.\r\n     */\r\n    addTemplateFile(fileUrl, templateFileType) {\r\n        return this.clone(Files_1, `addTemplateFile(urloffile='${fileUrl}',templatefiletype=${templateFileType})`, false)\r\n            .postCore().then((response) => {\r\n            return {\r\n                data: response,\r\n                file: this.getByName(fileUrl),\r\n            };\r\n        });\r\n    }\r\n};\r\nFiles = Files_1 = tslib_1.__decorate([\r\n    defaultPath(\"files\")\r\n], Files);\r\nexport { Files };\r\n/**\r\n * Describes a single File instance\r\n *\r\n */\r\nexport class File extends SharePointQueryableShareableFile {\r\n    /**\r\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\r\n     *\r\n     */\r\n    get listItemAllFields() {\r\n        return new SharePointQueryableInstance(this, \"listItemAllFields\");\r\n    }\r\n    /**\r\n     * Gets a collection of versions\r\n     *\r\n     */\r\n    get versions() {\r\n        return new Versions(this);\r\n    }\r\n    /**\r\n     * Approves the file submitted for content approval with the specified comment.\r\n     * Only documents in lists that are enabled for content approval can be approved.\r\n     *\r\n     * @param comment The comment for the approval.\r\n     */\r\n    approve(comment = \"\") {\r\n        return this.clone(File, `approve(comment='${comment}')`).postCore();\r\n    }\r\n    /**\r\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\r\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\r\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\r\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n     * This method is currently available only on Office 365.\r\n     *\r\n     * @param uploadId The unique identifier of the upload session.\r\n     */\r\n    cancelUpload(uploadId) {\r\n        return this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false).postCore();\r\n    }\r\n    /**\r\n     * Checks the file in to a document library based on the check-in type.\r\n     *\r\n     * @param comment A comment for the check-in. Its length must be <= 1023.\r\n     * @param checkinType The check-in type for the file.\r\n     */\r\n    checkin(comment = \"\", checkinType = CheckinType.Major) {\r\n        if (comment.length > 1023) {\r\n            throw Error(\"The maximum comment length is 1023 characters.\");\r\n        }\r\n        return this.clone(File, `checkin(comment='${comment}',checkintype=${checkinType})`).postCore();\r\n    }\r\n    /**\r\n     * Checks out the file from a document library.\r\n     */\r\n    checkout() {\r\n        return this.clone(File, \"checkout\").postCore();\r\n    }\r\n    /**\r\n     * Copies the file to the destination url.\r\n     *\r\n     * @param url The absolute url or server relative url of the destination file path to copy to.\r\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\r\n     */\r\n    copyTo(url, shouldOverWrite = true) {\r\n        return this.clone(File, `copyTo(strnewurl='${url}',boverwrite=${shouldOverWrite})`).postCore();\r\n    }\r\n    /**\r\n     * Delete this file.\r\n     *\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     */\r\n    delete(eTag = \"*\") {\r\n        return this.clone(File, null).postCore({\r\n            headers: {\r\n                \"IF-Match\": eTag,\r\n                \"X-HTTP-Method\": \"DELETE\",\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Denies approval for a file that was submitted for content approval.\r\n     * Only documents in lists that are enabled for content approval can be denied.\r\n     *\r\n     * @param comment The comment for the denial.\r\n     */\r\n    deny(comment = \"\") {\r\n        if (comment.length > 1023) {\r\n            throw Error(\"The maximum comment length is 1023 characters.\");\r\n        }\r\n        return this.clone(File, `deny(comment='${comment}')`).postCore();\r\n    }\r\n    /**\r\n     * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\r\n     * An exception is thrown if the file is not an ASPX page.\r\n     *\r\n     * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\r\n     */\r\n    getLimitedWebPartManager(scope = WebPartsPersonalizationScope.Shared) {\r\n        return new LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\r\n    }\r\n    /**\r\n     * Moves the file to the specified destination url.\r\n     *\r\n     * @param url The absolute url or server relative url of the destination file path to move to.\r\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\r\n     */\r\n    moveTo(url, moveOperations = MoveOperations.Overwrite) {\r\n        return this.clone(File, `moveTo(newurl='${url}',flags=${moveOperations})`).postCore();\r\n    }\r\n    /**\r\n     * Submits the file for content approval with the specified comment.\r\n     *\r\n     * @param comment The comment for the published file. Its length must be <= 1023.\r\n     */\r\n    publish(comment = \"\") {\r\n        if (comment.length > 1023) {\r\n            throw Error(\"The maximum comment length is 1023 characters.\");\r\n        }\r\n        return this.clone(File, `publish(comment='${comment}')`).postCore();\r\n    }\r\n    /**\r\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n     *\r\n     * @returns The GUID of the recycled file.\r\n     */\r\n    recycle() {\r\n        return this.clone(File, \"recycle\").postCore();\r\n    }\r\n    /**\r\n     * Reverts an existing checkout for the file.\r\n     *\r\n     */\r\n    undoCheckout() {\r\n        return this.clone(File, \"undoCheckout\").postCore();\r\n    }\r\n    /**\r\n     * Removes the file from content approval or unpublish a major version.\r\n     *\r\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\r\n     */\r\n    unpublish(comment = \"\") {\r\n        if (comment.length > 1023) {\r\n            throw Error(\"The maximum comment length is 1023 characters.\");\r\n        }\r\n        return this.clone(File, `unpublish(comment='${comment}')`).postCore();\r\n    }\r\n    /**\r\n     * Gets the contents of the file as text. Not supported in batching.\r\n     *\r\n     */\r\n    getText() {\r\n        return this.clone(File, \"$value\", false).get(new TextParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\r\n    }\r\n    /**\r\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\r\n     *\r\n     */\r\n    getBlob() {\r\n        return this.clone(File, \"$value\", false).get(new BlobParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\r\n    }\r\n    /**\r\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\r\n     */\r\n    getBuffer() {\r\n        return this.clone(File, \"$value\", false).get(new BufferParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\r\n    }\r\n    /**\r\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\r\n     */\r\n    getJSON() {\r\n        return this.clone(File, \"$value\", false).get(new JSONParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\r\n    }\r\n    /**\r\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\r\n     *\r\n     * @param content The file content\r\n     *\r\n     */\r\n    setContent(content) {\r\n        return this.clone(File, \"$value\", false).postCore({\r\n            body: content,\r\n            headers: {\r\n                \"X-HTTP-Method\": \"PUT\",\r\n            },\r\n        }).then(_ => new File(this));\r\n    }\r\n    /**\r\n     * Gets the associated list item for this folder, loading the default properties\r\n     */\r\n    getItem(...selects) {\r\n        const q = this.listItemAllFields;\r\n        return q.select.apply(q, selects).get().then((d) => {\r\n            return extend(new Item(odataUrlFrom(d)), d);\r\n        });\r\n    }\r\n    /**\r\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\r\n     *\r\n     * @param file The file to upload\r\n     * @param progress A callback function which can be used to track the progress of the upload\r\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\r\n     */\r\n    setContentChunked(file, progress, chunkSize = 10485760) {\r\n        if (progress === undefined) {\r\n            progress = () => null;\r\n        }\r\n        const fileSize = file.size;\r\n        const blockCount = parseInt((file.size / chunkSize).toString(), 10) + ((file.size % chunkSize === 0) ? 1 : 0);\r\n        const uploadId = getGUID();\r\n        // start the chain with the first fragment\r\n        progress({ uploadId, blockNumber: 1, chunkSize, currentPointer: 0, fileSize, stage: \"starting\", totalBlocks: blockCount });\r\n        let chain = this.startUpload(uploadId, file.slice(0, chunkSize));\r\n        // skip the first and last blocks\r\n        for (let i = 2; i < blockCount; i++) {\r\n            chain = chain.then(pointer => {\r\n                progress({ uploadId, blockNumber: i, chunkSize, currentPointer: pointer, fileSize, stage: \"continue\", totalBlocks: blockCount });\r\n                return this.continueUpload(uploadId, pointer, file.slice(pointer, pointer + chunkSize));\r\n            });\r\n        }\r\n        return chain.then(pointer => {\r\n            progress({ uploadId, blockNumber: blockCount, chunkSize, currentPointer: pointer, fileSize, stage: \"finishing\", totalBlocks: blockCount });\r\n            return this.finishUpload(uploadId, pointer, file.slice(pointer));\r\n        });\r\n    }\r\n    /**\r\n     * Starts a new chunk upload session and uploads the first fragment.\r\n     * The current file content is not changed when this method completes.\r\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\r\n     * The upload session ends either when you use the CancelUpload method or when you successfully\r\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\r\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\r\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\r\n     * This method is currently available only on Office 365.\r\n     *\r\n     * @param uploadId The unique identifier of the upload session.\r\n     * @param fragment The file contents.\r\n     * @returns The size of the total uploaded data in bytes.\r\n     */\r\n    startUpload(uploadId, fragment) {\r\n        return this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false)\r\n            .postCore({ body: fragment })\r\n            .then(n => {\r\n            // When OData=verbose the payload has the following shape:\r\n            // { StartUpload: \"10485760\" }\r\n            if (typeof n === \"object\") {\r\n                n = n.StartUpload;\r\n            }\r\n            return parseFloat(n);\r\n        });\r\n    }\r\n    /**\r\n     * Continues the chunk upload session with an additional fragment.\r\n     * The current file content is not changed.\r\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n     * This method is currently available only on Office 365.\r\n     *\r\n     * @param uploadId The unique identifier of the upload session.\r\n     * @param fileOffset The size of the offset into the file where the fragment starts.\r\n     * @param fragment The file contents.\r\n     * @returns The size of the total uploaded data in bytes.\r\n     */\r\n    continueUpload(uploadId, fileOffset, fragment) {\r\n        return this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\r\n            .postCore({ body: fragment })\r\n            .then(n => {\r\n            // When OData=verbose the payload has the following shape:\r\n            // { ContinueUpload: \"20971520\" }\r\n            if (typeof n === \"object\") {\r\n                n = n.ContinueUpload;\r\n            }\r\n            return parseFloat(n);\r\n        });\r\n    }\r\n    /**\r\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\r\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n     * This method is currently available only on Office 365.\r\n     *\r\n     * @param uploadId The unique identifier of the upload session.\r\n     * @param fileOffset The size of the offset into the file where the fragment starts.\r\n     * @param fragment The file contents.\r\n     * @returns The newly uploaded file.\r\n     */\r\n    finishUpload(uploadId, fileOffset, fragment) {\r\n        return this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\r\n            .postCore({ body: fragment })\r\n            .then(response => {\r\n            return {\r\n                data: response,\r\n                file: new File(odataUrlFrom(response)),\r\n            };\r\n        });\r\n    }\r\n}\r\n/**\r\n * Describes a collection of Version objects\r\n *\r\n */\r\nlet Versions = Versions_1 = class Versions extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a version by id\r\n     *\r\n     * @param versionId The id of the version to retrieve\r\n     */\r\n    getById(versionId) {\r\n        const v = new Version(this);\r\n        v.concat(`(${versionId})`);\r\n        return v;\r\n    }\r\n    /**\r\n     * Deletes all the file version objects in the collection.\r\n     *\r\n     */\r\n    deleteAll() {\r\n        return new Versions_1(this, \"deleteAll\").postCore();\r\n    }\r\n    /**\r\n     * Deletes the specified version of the file.\r\n     *\r\n     * @param versionId The ID of the file version to delete.\r\n     */\r\n    deleteById(versionId) {\r\n        return this.clone(Versions_1, `deleteById(vid=${versionId})`).postCore();\r\n    }\r\n    /**\r\n     * Recycles the specified version of the file.\r\n     *\r\n     * @param versionId The ID of the file version to delete.\r\n     */\r\n    recycleByID(versionId) {\r\n        return this.clone(Versions_1, `recycleByID(vid=${versionId})`).postCore();\r\n    }\r\n    /**\r\n     * Deletes the file version object with the specified version label.\r\n     *\r\n     * @param label The version label of the file version to delete, for example: 1.2\r\n     */\r\n    deleteByLabel(label) {\r\n        return this.clone(Versions_1, `deleteByLabel(versionlabel='${label}')`).postCore();\r\n    }\r\n    /**\r\n     * Recycles the file version object with the specified version label.\r\n     *\r\n     * @param label The version label of the file version to delete, for example: 1.2\r\n     */\r\n    recycleByLabel(label) {\r\n        return this.clone(Versions_1, `recycleByLabel(versionlabel='${label}')`).postCore();\r\n    }\r\n    /**\r\n     * Creates a new file version from the file specified by the version label.\r\n     *\r\n     * @param label The version label of the file version to restore, for example: 1.2\r\n     */\r\n    restoreByLabel(label) {\r\n        return this.clone(Versions_1, `restoreByLabel(versionlabel='${label}')`).postCore();\r\n    }\r\n};\r\nVersions = Versions_1 = tslib_1.__decorate([\r\n    defaultPath(\"versions\")\r\n], Versions);\r\nexport { Versions };\r\n/**\r\n * Describes a single Version instance\r\n *\r\n */\r\nexport class Version extends SharePointQueryableInstance {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n        * Delete a specific version of a file.\r\n        *\r\n        * @param eTag Value used in the IF-Match header, by default \"*\"\r\n        */\r\n        this.delete = this._deleteWithETag;\r\n        // /**\r\n        // * Delete a specific version of a file.\r\n        // *\r\n        // * @param eTag Value used in the IF-Match header, by default \"*\"\r\n        // */\r\n        // public delete(eTag = \"*\"): Promise<void> {\r\n        //     return this.postCore({\r\n        //         headers: {\r\n        //             \"IF-Match\": eTag,\r\n        //             \"X-HTTP-Method\": \"DELETE\",\r\n        //         },\r\n        //     });\r\n        // }\r\n    }\r\n}\r\nexport var CheckinType;\r\n(function (CheckinType) {\r\n    CheckinType[CheckinType[\"Minor\"] = 0] = \"Minor\";\r\n    CheckinType[CheckinType[\"Major\"] = 1] = \"Major\";\r\n    CheckinType[CheckinType[\"Overwrite\"] = 2] = \"Overwrite\";\r\n})(CheckinType || (CheckinType = {}));\r\nexport var WebPartsPersonalizationScope;\r\n(function (WebPartsPersonalizationScope) {\r\n    WebPartsPersonalizationScope[WebPartsPersonalizationScope[\"User\"] = 0] = \"User\";\r\n    WebPartsPersonalizationScope[WebPartsPersonalizationScope[\"Shared\"] = 1] = \"Shared\";\r\n})(WebPartsPersonalizationScope || (WebPartsPersonalizationScope = {}));\r\nexport var MoveOperations;\r\n(function (MoveOperations) {\r\n    MoveOperations[MoveOperations[\"Overwrite\"] = 1] = \"Overwrite\";\r\n    MoveOperations[MoveOperations[\"AllowBrokenThickets\"] = 8] = \"AllowBrokenThickets\";\r\n})(MoveOperations || (MoveOperations = {}));\r\nexport var TemplateFileType;\r\n(function (TemplateFileType) {\r\n    TemplateFileType[TemplateFileType[\"StandardPage\"] = 0] = \"StandardPage\";\r\n    TemplateFileType[TemplateFileType[\"WikiPage\"] = 1] = \"WikiPage\";\r\n    TemplateFileType[TemplateFileType[\"FormPage\"] = 2] = \"FormPage\";\r\n    TemplateFileType[TemplateFileType[\"ClientSidePage\"] = 3] = \"ClientSidePage\";\r\n})(TemplateFileType || (TemplateFileType = {}));\r\n//# sourceMappingURL=files.js.map","import { TemplateFileType, File } from \"./files\";\r\nimport { Item } from \"./items\";\r\nimport { extend, combine, getGUID, getAttrValueFromString, jsS, hOP } from \"@pnp/common\";\r\n/**\r\n * Page promotion state\r\n */\r\nexport var PromotedState;\r\n(function (PromotedState) {\r\n    /**\r\n     * Regular client side page\r\n     */\r\n    PromotedState[PromotedState[\"NotPromoted\"] = 0] = \"NotPromoted\";\r\n    /**\r\n     * Page that will be promoted as news article after publishing\r\n     */\r\n    PromotedState[PromotedState[\"PromoteOnPublish\"] = 1] = \"PromoteOnPublish\";\r\n    /**\r\n     * Page that is promoted as news article\r\n     */\r\n    PromotedState[PromotedState[\"Promoted\"] = 2] = \"Promoted\";\r\n})(PromotedState || (PromotedState = {}));\r\n/**\r\n * Gets the next order value 1 based for the provided collection\r\n *\r\n * @param collection Collection of orderable things\r\n */\r\nfunction getNextOrder(collection) {\r\n    if (collection.length < 1) {\r\n        return 1;\r\n    }\r\n    return Math.max.apply(null, collection.map(i => i.order)) + 1;\r\n}\r\n/**\r\n * After https://stackoverflow.com/questions/273789/is-there-a-version-of-javascripts-string-indexof-that-allows-for-regular-expr/274094#274094\r\n *\r\n * @param this Types the called context this to a string in which the search will be conducted\r\n * @param regex A regex or string to match\r\n * @param startpos A starting position from which the search will begin\r\n */\r\nfunction regexIndexOf(regex, startpos = 0) {\r\n    const indexOf = this.substring(startpos).search(regex);\r\n    return (indexOf >= 0) ? (indexOf + (startpos)) : indexOf;\r\n}\r\n/**\r\n * Finds bounded blocks of markup bounded by divs, ensuring to match the ending div even with nested divs in the interstitial markup\r\n *\r\n * @param html HTML to search\r\n * @param boundaryStartPattern The starting pattern to find, typically a div with attribute\r\n * @param collector A func to take the found block and provide a way to form it into a useful return that is added into the return array\r\n */\r\nfunction getBoundedDivMarkup(html, boundaryStartPattern, collector) {\r\n    const blocks = [];\r\n    if (html === undefined || html === null) {\r\n        return blocks;\r\n    }\r\n    // remove some extra whitespace if present\r\n    const cleanedHtml = html.replace(/[\\t\\r\\n]/g, \"\");\r\n    // find the first div\r\n    let startIndex = regexIndexOf.call(cleanedHtml, boundaryStartPattern);\r\n    if (startIndex < 0) {\r\n        // we found no blocks in the supplied html\r\n        return blocks;\r\n    }\r\n    // this loop finds each of the blocks\r\n    while (startIndex > -1) {\r\n        // we have one open div counting from the one found above using boundaryStartPattern so we need to ensure we find it's close\r\n        let openCounter = 1;\r\n        let searchIndex = startIndex + 1;\r\n        let nextDivOpen = -1;\r\n        let nextCloseDiv = -1;\r\n        // this loop finds the </div> tag that matches the opening of the control\r\n        while (true) {\r\n            // find both the next opening and closing div tags from our current searching index\r\n            nextDivOpen = regexIndexOf.call(cleanedHtml, /<div[^>]*>/i, searchIndex);\r\n            nextCloseDiv = regexIndexOf.call(cleanedHtml, /<\\/div>/i, searchIndex);\r\n            if (nextDivOpen < 0) {\r\n                // we have no more opening divs, just set this to simplify checks below\r\n                nextDivOpen = cleanedHtml.length + 1;\r\n            }\r\n            // determine which we found first, then increment or decrement our counter\r\n            // and set the location to begin searching again\r\n            if (nextDivOpen < nextCloseDiv) {\r\n                openCounter++;\r\n                searchIndex = nextDivOpen + 1;\r\n            }\r\n            else if (nextCloseDiv < nextDivOpen) {\r\n                openCounter--;\r\n                searchIndex = nextCloseDiv + 1;\r\n            }\r\n            // once we have no open divs back to the level of the opening control div\r\n            // meaning we have all of the markup we intended to find\r\n            if (openCounter === 0) {\r\n                // get the bounded markup, +6 is the size of the ending </div> tag\r\n                const markup = cleanedHtml.substring(startIndex, nextCloseDiv + 6).trim();\r\n                // save the control data we found to the array\r\n                blocks.push(collector(markup));\r\n                // get out of our while loop\r\n                break;\r\n            }\r\n            if (openCounter > 1000 || openCounter < 0) {\r\n                // this is an arbitrary cut-off but likely we will not have 1000 nested divs\r\n                // something has gone wrong above and we are probably stuck in our while loop\r\n                // let's get out of our while loop and not hang everything\r\n                throw Error(\"getBoundedDivMarkup exceeded depth parameters.\");\r\n            }\r\n        }\r\n        // get the start of the next control\r\n        startIndex = regexIndexOf.call(cleanedHtml, boundaryStartPattern, nextCloseDiv);\r\n    }\r\n    return blocks;\r\n}\r\n/**\r\n * Normalizes the order value for all the sections, columns, and controls to be 1 based and stepped (1, 2, 3...)\r\n *\r\n * @param collection The collection to normalize\r\n */\r\nfunction reindex(collection) {\r\n    for (let i = 0; i < collection.length; i++) {\r\n        collection[i].order = i + 1;\r\n        if (hOP(collection[i], \"columns\")) {\r\n            reindex(collection[i].columns);\r\n        }\r\n        else if (hOP(collection[i], \"controls\")) {\r\n            reindex(collection[i].controls);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents the data and methods associated with client side \"modern\" pages\r\n */\r\nexport class ClientSidePage extends File {\r\n    /**\r\n     * Creates a new instance of the ClientSidePage class\r\n     *\r\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this web collection\r\n     * @param commentsDisabled Indicates if comments are disabled, not valid until load is called\r\n     */\r\n    constructor(file, sections = [], commentsDisabled = false) {\r\n        super(file);\r\n        this.sections = sections;\r\n        this.commentsDisabled = commentsDisabled;\r\n    }\r\n    /**\r\n     * Creates a new blank page within the supplied library\r\n     *\r\n     * @param library The library in which to create the page\r\n     * @param pageName Filename of the page, such as \"page.aspx\"\r\n     * @param title The display title of the page\r\n     * @param pageLayoutType Layout type of the page to use\r\n     */\r\n    static create(library, pageName, title, pageLayoutType = \"Article\") {\r\n        // see if file exists, if not create it\r\n        return library.rootFolder.files.select(\"Name\").filter(`Name eq '${pageName}'`).get().then((fs) => {\r\n            if (fs.length > 0) {\r\n                throw Error(`A file with the name '${pageName}' already exists in the library '${library.toUrl()}'.`);\r\n            }\r\n            // get our server relative path\r\n            return library.rootFolder.select(\"ServerRelativePath\").get().then(path => {\r\n                const pageServerRelPath = combine(\"/\", path.ServerRelativePath.DecodedUrl, pageName);\r\n                // add the template file\r\n                return library.rootFolder.files.addTemplateFile(pageServerRelPath, TemplateFileType.ClientSidePage).then((far) => {\r\n                    // get the item associated with the file\r\n                    return far.file.getItem().then((i) => {\r\n                        // update the item to have the correct values to create the client side page\r\n                        return i.update({\r\n                            BannerImageUrl: {\r\n                                Url: \"/_layouts/15/images/sitepagethumbnail.png\",\r\n                            },\r\n                            CanvasContent1: \"\",\r\n                            ClientSideApplicationId: \"b6917cb1-93a0-4b97-a84d-7cf49975d4ec\",\r\n                            ContentTypeId: \"0x0101009D1CB255DA76424F860D91F20E6C4118\",\r\n                            PageLayoutType: pageLayoutType,\r\n                            PromotedState: 0 /* NotPromoted */,\r\n                            Title: title,\r\n                        }).then((iar) => new ClientSidePage(iar.item.file, iar.item.CommentsDisabled));\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new ClientSidePage instance from the provided html content string\r\n     *\r\n     * @param html HTML markup representing the page\r\n     */\r\n    static fromFile(file) {\r\n        const page = new ClientSidePage(file);\r\n        return page.load().then(_ => page);\r\n    }\r\n    /**\r\n     * Converts a json object to an escaped string appropriate for use in attributes when storing client-side controls\r\n     *\r\n     * @param json The json object to encode into a string\r\n     */\r\n    static jsonToEscapedString(json) {\r\n        return jsS(json)\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/:/g, \"&#58;\")\r\n            .replace(/{/g, \"&#123;\")\r\n            .replace(/}/g, \"&#125;\")\r\n            .replace(/\\[/g, \"\\[\")\r\n            .replace(/\\]/g, \"\\]\")\r\n            .replace(/\\./g, \"\\.\");\r\n    }\r\n    /**\r\n     * Converts an escaped string from a client-side control attribute to a json object\r\n     *\r\n     * @param escapedString\r\n     */\r\n    static escapedStringToJson(escapedString) {\r\n        const unespace = (escaped) => {\r\n            const mapDict = [\r\n                [/&quot;/g, \"\\\"\"], [/&#58;/g, \":\"], [/&#123;/g, \"{\"], [/&#125;/g, \"}\"],\r\n                [/\\\\\\\\/g, \"\\\\\"], [/\\\\\\?/g, \"?\"], [/\\\\\\./g, \".\"], [/\\\\\\[/g, \"[\"], [/\\\\\\]/g, \"]\"],\r\n                [/\\\\\\(/g, \"(\"], [/\\\\\\)/g, \")\"], [/\\\\\\|/g, \"|\"], [/\\\\\\+/g, \"+\"],\r\n            ];\r\n            return mapDict.reduce((r, m) => r.replace(m[0], m[1]), escaped);\r\n        };\r\n        return JSON.parse(unespace(escapedString));\r\n    }\r\n    /**\r\n     * Add a section to this page\r\n     */\r\n    addSection() {\r\n        const section = new CanvasSection(this, getNextOrder(this.sections));\r\n        this.sections.push(section);\r\n        return section;\r\n    }\r\n    /**\r\n     * Converts this page's content to html markup\r\n     */\r\n    toHtml() {\r\n        // trigger reindex of the entire tree\r\n        reindex(this.sections);\r\n        const html = [];\r\n        html.push(\"<div>\");\r\n        for (let i = 0; i < this.sections.length; i++) {\r\n            html.push(this.sections[i].toHtml());\r\n        }\r\n        html.push(\"</div>\");\r\n        return html.join(\"\");\r\n    }\r\n    /**\r\n     * Loads this page instance's content from the supplied html\r\n     *\r\n     * @param html html string representing the page's content\r\n     */\r\n    fromHtml(html) {\r\n        // reset sections\r\n        this.sections = [];\r\n        // gather our controls from the supplied html\r\n        getBoundedDivMarkup(html, /<div\\b[^>]*data-sp-canvascontrol[^>]*?>/i, markup => {\r\n            // get the control type\r\n            const ct = /controlType&quot;&#58;(\\d*?),/i.exec(markup);\r\n            // if no control type is present this is a column which we give type 0 to let us process it\r\n            const controlType = ct == null || ct.length < 2 ? 0 : parseInt(ct[1], 10);\r\n            let control = null;\r\n            switch (controlType) {\r\n                case 0:\r\n                    // empty canvas column\r\n                    control = new CanvasColumn(null, 0);\r\n                    control.fromHtml(markup);\r\n                    this.mergeColumnToTree(control);\r\n                    break;\r\n                case 3:\r\n                    // client side webpart\r\n                    control = new ClientSideWebpart(\"\");\r\n                    control.fromHtml(markup);\r\n                    this.mergePartToTree(control);\r\n                    break;\r\n                case 4:\r\n                    // client side text\r\n                    control = new ClientSideText();\r\n                    control.fromHtml(markup);\r\n                    this.mergePartToTree(control);\r\n                    break;\r\n            }\r\n        });\r\n        // refresh all the orders within the tree\r\n        reindex(this.sections);\r\n        return this;\r\n    }\r\n    /**\r\n     * Loads this page's content from the server\r\n     */\r\n    load() {\r\n        return this.getItem(\"CanvasContent1\", \"CommentsDisabled\").then(item => {\r\n            this.fromHtml(item.CanvasContent1);\r\n            this.commentsDisabled = item.CommentsDisabled;\r\n        });\r\n    }\r\n    /**\r\n     * Persists the content changes (sections, columns, and controls)\r\n     */\r\n    save() {\r\n        return this.updateProperties({ CanvasContent1: this.toHtml() });\r\n    }\r\n    /**\r\n     * Enables comments on this page\r\n     */\r\n    enableComments() {\r\n        return this.setCommentsOn(true).then(r => {\r\n            this.commentsDisabled = false;\r\n            return r;\r\n        });\r\n    }\r\n    /**\r\n     * Disables comments on this page\r\n     */\r\n    disableComments() {\r\n        return this.setCommentsOn(false).then(r => {\r\n            this.commentsDisabled = true;\r\n            return r;\r\n        });\r\n    }\r\n    /**\r\n     * Finds a control by the specified instance id\r\n     *\r\n     * @param id Instance id of the control to find\r\n     */\r\n    findControlById(id) {\r\n        return this.findControl((c) => c.id === id);\r\n    }\r\n    /**\r\n     * Finds a control within this page's control tree using the supplied predicate\r\n     *\r\n     * @param predicate Takes a control and returns true or false, if true that control is returned by findControl\r\n     */\r\n    findControl(predicate) {\r\n        // check all sections\r\n        for (let i = 0; i < this.sections.length; i++) {\r\n            // check all columns\r\n            for (let j = 0; j < this.sections[i].columns.length; j++) {\r\n                // check all controls\r\n                for (let k = 0; k < this.sections[i].columns[j].controls.length; k++) {\r\n                    // check to see if the predicate likes this control\r\n                    if (predicate(this.sections[i].columns[j].controls[k])) {\r\n                        return this.sections[i].columns[j].controls[k];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // we found nothing so give nothing back\r\n        return null;\r\n    }\r\n    /**\r\n     * Sets the comments flag for a page\r\n     *\r\n     * @param on If true comments are enabled, false they are disabled\r\n     */\r\n    setCommentsOn(on) {\r\n        return this.getItem().then(i => {\r\n            const updater = new Item(i, `SetCommentsDisabled(${!on})`);\r\n            return updater.update({});\r\n        });\r\n    }\r\n    /**\r\n     * Merges the control into the tree of sections and columns for this page\r\n     *\r\n     * @param control The control to merge\r\n     */\r\n    mergePartToTree(control) {\r\n        let section = null;\r\n        let column = null;\r\n        const sections = this.sections.filter(s => s.order === control.controlData.position.zoneIndex);\r\n        if (sections.length < 1) {\r\n            section = new CanvasSection(this, control.controlData.position.zoneIndex);\r\n            this.sections.push(section);\r\n        }\r\n        else {\r\n            section = sections[0];\r\n        }\r\n        const columns = section.columns.filter(c => c.order === control.controlData.position.sectionIndex);\r\n        if (columns.length < 1) {\r\n            column = new CanvasColumn(section, control.controlData.position.sectionIndex, control.controlData.position.sectionFactor);\r\n            section.columns.push(column);\r\n        }\r\n        else {\r\n            column = columns[0];\r\n        }\r\n        control.column = column;\r\n        column.addControl(control);\r\n    }\r\n    /**\r\n     * Merges the supplied column into the tree\r\n     *\r\n     * @param column Column to merge\r\n     * @param position The position data for the column\r\n     */\r\n    mergeColumnToTree(column) {\r\n        let section = null;\r\n        const sections = this.sections.filter(s => s.order === column.controlData.position.zoneIndex);\r\n        if (sections.length < 1) {\r\n            section = new CanvasSection(this, column.controlData.position.zoneIndex);\r\n            this.sections.push(section);\r\n        }\r\n        else {\r\n            section = sections[0];\r\n        }\r\n        column.section = section;\r\n        section.columns.push(column);\r\n    }\r\n    /**\r\n     * Updates the properties of the underlying ListItem associated with this ClientSidePage\r\n     *\r\n     * @param properties Set of properties to update\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     */\r\n    updateProperties(properties, eTag = \"*\") {\r\n        return this.getItem().then(i => i.update(properties, eTag));\r\n    }\r\n}\r\nexport class CanvasSection {\r\n    constructor(page, order, columns = []) {\r\n        this.page = page;\r\n        this.order = order;\r\n        this.columns = columns;\r\n        this._memId = getGUID();\r\n    }\r\n    /**\r\n     * Default column (this.columns[0]) for this section\r\n     */\r\n    get defaultColumn() {\r\n        if (this.columns.length < 1) {\r\n            this.addColumn(12);\r\n        }\r\n        return this.columns[0];\r\n    }\r\n    /**\r\n     * Adds a new column to this section\r\n     */\r\n    addColumn(factor) {\r\n        const column = new CanvasColumn(this, getNextOrder(this.columns), factor);\r\n        this.columns.push(column);\r\n        return column;\r\n    }\r\n    /**\r\n     * Adds a control to the default column for this section\r\n     *\r\n     * @param control Control to add to the default column\r\n     */\r\n    addControl(control) {\r\n        this.defaultColumn.addControl(control);\r\n        return this;\r\n    }\r\n    toHtml() {\r\n        const html = [];\r\n        for (let i = 0; i < this.columns.length; i++) {\r\n            html.push(this.columns[i].toHtml());\r\n        }\r\n        return html.join(\"\");\r\n    }\r\n    /**\r\n     * Removes this section and all contained columns and controls from the collection\r\n     */\r\n    remove() {\r\n        this.page.sections = this.page.sections.filter(section => section._memId !== this._memId);\r\n        reindex(this.page.sections);\r\n    }\r\n}\r\nexport class CanvasControl {\r\n    constructor(controlType, dataVersion, column = null, order = 1, id = getGUID(), controlData = null) {\r\n        this.controlType = controlType;\r\n        this.dataVersion = dataVersion;\r\n        this.column = column;\r\n        this.order = order;\r\n        this.id = id;\r\n        this.controlData = controlData;\r\n    }\r\n    /**\r\n     * Value of the control's \"data-sp-controldata\" attribute\r\n     */\r\n    get jsonData() {\r\n        return ClientSidePage.jsonToEscapedString(this.getControlData());\r\n    }\r\n    fromHtml(html) {\r\n        this.controlData = ClientSidePage.escapedStringToJson(getAttrValueFromString(html, \"data-sp-controldata\"));\r\n        this.dataVersion = getAttrValueFromString(html, \"data-sp-canvasdataversion\");\r\n        this.controlType = this.controlData.controlType;\r\n        this.id = this.controlData.id;\r\n    }\r\n}\r\nexport class CanvasColumn extends CanvasControl {\r\n    constructor(section, order, factor = 12, controls = [], dataVersion = \"1.0\") {\r\n        super(0, dataVersion);\r\n        this.section = section;\r\n        this.order = order;\r\n        this.factor = factor;\r\n        this.controls = controls;\r\n    }\r\n    addControl(control) {\r\n        control.column = this;\r\n        this.controls.push(control);\r\n        return this;\r\n    }\r\n    getControl(index) {\r\n        return this.controls[index];\r\n    }\r\n    toHtml() {\r\n        const html = [];\r\n        if (this.controls.length < 1) {\r\n            html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.dataVersion}\" data-sp-controldata=\"${this.jsonData}\"></div>`);\r\n        }\r\n        else {\r\n            for (let i = 0; i < this.controls.length; i++) {\r\n                html.push(this.controls[i].toHtml(i + 1));\r\n            }\r\n        }\r\n        return html.join(\"\");\r\n    }\r\n    fromHtml(html) {\r\n        super.fromHtml(html);\r\n        this.controlData = ClientSidePage.escapedStringToJson(getAttrValueFromString(html, \"data-sp-controldata\"));\r\n        this.factor = this.controlData.position.sectionFactor;\r\n        this.order = this.controlData.position.sectionIndex;\r\n    }\r\n    getControlData() {\r\n        return {\r\n            displayMode: 2,\r\n            position: {\r\n                sectionFactor: this.factor,\r\n                sectionIndex: this.order,\r\n                zoneIndex: this.section.order,\r\n            },\r\n        };\r\n    }\r\n    /**\r\n     * Removes this column and all contained controls from the collection\r\n     */\r\n    remove() {\r\n        this.section.columns = this.section.columns.filter(column => column.id !== this.id);\r\n        reindex(this.column.controls);\r\n    }\r\n}\r\n/**\r\n * Abstract class with shared functionality for parts\r\n */\r\nexport class ClientSidePart extends CanvasControl {\r\n    /**\r\n     * Removes this column and all contained controls from the collection\r\n     */\r\n    remove() {\r\n        this.column.controls = this.column.controls.filter(control => control.id !== this.id);\r\n        reindex(this.column.controls);\r\n    }\r\n}\r\nexport class ClientSideText extends ClientSidePart {\r\n    constructor(text = \"\") {\r\n        super(4, \"1.0\");\r\n        this.text = text;\r\n    }\r\n    /**\r\n     * The text markup of this control\r\n     */\r\n    get text() {\r\n        return this._text;\r\n    }\r\n    set text(text) {\r\n        if (!text.startsWith(\"<p>\")) {\r\n            text = `<p>${text}</p>`;\r\n        }\r\n        this._text = text;\r\n    }\r\n    getControlData() {\r\n        return {\r\n            controlType: this.controlType,\r\n            editorType: \"CKEditor\",\r\n            id: this.id,\r\n            position: {\r\n                controlIndex: this.order,\r\n                sectionFactor: this.column.factor,\r\n                sectionIndex: this.column.order,\r\n                zoneIndex: this.column.section.order,\r\n            },\r\n        };\r\n    }\r\n    toHtml(index) {\r\n        // set our order to the value passed in\r\n        this.order = index;\r\n        const html = [];\r\n        html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.dataVersion}\" data-sp-controldata=\"${this.jsonData}\">`);\r\n        html.push(\"<div data-sp-rte=\\\"\\\">\");\r\n        html.push(`${this.text}`);\r\n        html.push(\"</div>\");\r\n        html.push(\"</div>\");\r\n        return html.join(\"\");\r\n    }\r\n    fromHtml(html) {\r\n        super.fromHtml(html);\r\n        this.text = \"\";\r\n        getBoundedDivMarkup(html, /<div[^>]*data-sp-rte[^>]*>/i, (s) => {\r\n            // now we need to grab the inner text between the divs\r\n            const match = /<div[^>]*data-sp-rte[^>]*>(.*?)<\\/div>$/i.exec(s);\r\n            this.text = match.length > 1 ? match[1] : \"\";\r\n        });\r\n    }\r\n}\r\nexport class ClientSideWebpart extends ClientSidePart {\r\n    constructor(title, description = \"\", propertieJson = {}, webPartId = \"\", htmlProperties = \"\", serverProcessedContent = null, canvasDataVersion = \"1.0\") {\r\n        super(3, \"1.0\");\r\n        this.title = title;\r\n        this.description = description;\r\n        this.propertieJson = propertieJson;\r\n        this.webPartId = webPartId;\r\n        this.htmlProperties = htmlProperties;\r\n        this.serverProcessedContent = serverProcessedContent;\r\n        this.canvasDataVersion = canvasDataVersion;\r\n    }\r\n    static fromComponentDef(definition) {\r\n        const part = new ClientSideWebpart(\"\");\r\n        part.import(definition);\r\n        return part;\r\n    }\r\n    import(component) {\r\n        this.webPartId = component.Id.replace(/^\\{|\\}$/g, \"\").toLowerCase();\r\n        const manifest = JSON.parse(component.Manifest);\r\n        this.title = manifest.preconfiguredEntries[0].title.default;\r\n        this.description = manifest.preconfiguredEntries[0].description.default;\r\n        this.dataVersion = \"1.0\";\r\n        this.propertieJson = this.parseJsonProperties(manifest.preconfiguredEntries[0].properties);\r\n    }\r\n    setProperties(properties) {\r\n        this.propertieJson = extend(this.propertieJson, properties);\r\n        return this;\r\n    }\r\n    getProperties() {\r\n        return this.propertieJson;\r\n    }\r\n    toHtml(index) {\r\n        // set our order to the value passed in\r\n        this.order = index;\r\n        // will form the value of the data-sp-webpartdata attribute\r\n        const data = {\r\n            dataVersion: this.dataVersion,\r\n            description: this.description,\r\n            id: this.webPartId,\r\n            instanceId: this.id,\r\n            properties: this.propertieJson,\r\n            serverProcessedContent: this.serverProcessedContent,\r\n            title: this.title,\r\n        };\r\n        const html = [];\r\n        html.push(`<div data-sp-canvascontrol=\"\" data-sp-canvasdataversion=\"${this.canvasDataVersion}\" data-sp-controldata=\"${this.jsonData}\">`);\r\n        html.push(`<div data-sp-webpart=\"\" data-sp-webpartdataversion=\"${this.dataVersion}\" data-sp-webpartdata=\"${ClientSidePage.jsonToEscapedString(data)}\">`);\r\n        html.push(`<div data-sp-componentid>`);\r\n        html.push(this.webPartId);\r\n        html.push(\"</div>\");\r\n        html.push(`<div data-sp-htmlproperties=\"\">`);\r\n        html.push(this.renderHtmlProperties());\r\n        html.push(\"</div>\");\r\n        html.push(\"</div>\");\r\n        html.push(\"</div>\");\r\n        return html.join(\"\");\r\n    }\r\n    fromHtml(html) {\r\n        super.fromHtml(html);\r\n        const webPartData = ClientSidePage.escapedStringToJson(getAttrValueFromString(html, \"data-sp-webpartdata\"));\r\n        this.title = webPartData.title;\r\n        this.description = webPartData.description;\r\n        this.webPartId = webPartData.id;\r\n        this.canvasDataVersion = getAttrValueFromString(html, \"data-sp-canvasdataversion\").replace(/\\\\\\./, \".\");\r\n        this.dataVersion = getAttrValueFromString(html, \"data-sp-webpartdataversion\").replace(/\\\\\\./, \".\");\r\n        this.setProperties(webPartData.properties);\r\n        if (webPartData.serverProcessedContent !== undefined) {\r\n            this.serverProcessedContent = webPartData.serverProcessedContent;\r\n        }\r\n        // get our html properties\r\n        const htmlProps = getBoundedDivMarkup(html, /<div\\b[^>]*data-sp-htmlproperties[^>]*?>/i, markup => {\r\n            return markup.replace(/^<div\\b[^>]*data-sp-htmlproperties[^>]*?>/i, \"\").replace(/<\\/div>$/i, \"\");\r\n        });\r\n        this.htmlProperties = htmlProps.length > 0 ? htmlProps[0] : \"\";\r\n    }\r\n    getControlData() {\r\n        return {\r\n            controlType: this.controlType,\r\n            id: this.id,\r\n            position: {\r\n                controlIndex: this.order,\r\n                sectionFactor: this.column.factor,\r\n                sectionIndex: this.column.order,\r\n                zoneIndex: this.column.section.order,\r\n            },\r\n            webPartId: this.webPartId,\r\n        };\r\n    }\r\n    renderHtmlProperties() {\r\n        const html = [];\r\n        if (this.serverProcessedContent === undefined || this.serverProcessedContent === null) {\r\n            html.push(this.htmlProperties);\r\n        }\r\n        else if (this.serverProcessedContent !== undefined) {\r\n            if (this.serverProcessedContent.searchablePlainTexts !== undefined) {\r\n                const keys = Object.keys(this.serverProcessedContent.searchablePlainTexts);\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    html.push(`<div data-sp-prop-name=\"${keys[i]}\" data-sp-searchableplaintext=\"true\">`);\r\n                    html.push(this.serverProcessedContent.searchablePlainTexts[keys[i]]);\r\n                    html.push(\"</div>\");\r\n                }\r\n            }\r\n            if (this.serverProcessedContent.imageSources !== undefined) {\r\n                const keys = Object.keys(this.serverProcessedContent.imageSources);\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    html.push(`<img data-sp-prop-name=\"${keys[i]}\" src=\"${this.serverProcessedContent.imageSources[keys[i]]}\" />`);\r\n                }\r\n            }\r\n            if (this.serverProcessedContent.links !== undefined) {\r\n                const keys = Object.keys(this.serverProcessedContent.links);\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    html.push(`<a data-sp-prop-name=\"${keys[i]}\" href=\"${this.serverProcessedContent.links[keys[i]]}\"></a>`);\r\n                }\r\n            }\r\n        }\r\n        return html.join(\"\");\r\n    }\r\n    parseJsonProperties(props) {\r\n        // If the web part has the serverProcessedContent property then keep this one as it might be needed as input to render the web part HTML later on\r\n        if (props.webPartData !== undefined && props.webPartData.serverProcessedContent !== undefined) {\r\n            this.serverProcessedContent = props.webPartData.serverProcessedContent;\r\n        }\r\n        else if (props.serverProcessedContent !== undefined) {\r\n            this.serverProcessedContent = props.serverProcessedContent;\r\n        }\r\n        else {\r\n            this.serverProcessedContent = null;\r\n        }\r\n        if (props.webPartData !== undefined && props.webPartData.properties !== undefined) {\r\n            return props.webPartData.properties;\r\n        }\r\n        else if (props.properties !== undefined) {\r\n            return props.properties;\r\n        }\r\n        else {\r\n            return props;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=clientsidepages.js.map","import { SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\r\nimport { File } from \"./files\";\r\nimport { odataUrlFrom } from \"./odata\";\r\nimport { extractWebUrl } from \"./utils/extractweburl\";\r\n/**\r\n * Represents an app catalog\r\n */\r\nexport class AppCatalog extends SharePointQueryableCollection {\r\n    constructor(baseUrl, path = \"_api/web/tenantappcatalog/AvailableApps\") {\r\n        super(extractWebUrl(typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl()), path);\r\n    }\r\n    /**\r\n     * Get details of specific app from the app catalog\r\n     * @param id - Specify the guid of the app\r\n     */\r\n    getAppById(id) {\r\n        return new App(this, `getById('${id}')`);\r\n    }\r\n    /**\r\n     * Uploads an app package. Not supported for batching\r\n     *\r\n     * @param filename Filename to create.\r\n     * @param content app package data (eg: the .app or .sppkg file).\r\n     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)\r\n     * @returns Promise<AppAddResult>\r\n     */\r\n    add(filename, content, shouldOverWrite = true) {\r\n        // you don't add to the availableapps collection\r\n        const adder = new AppCatalog(extractWebUrl(this.toUrl()), `_api/web/tenantappcatalog/add(overwrite=${shouldOverWrite},url='${filename}')`);\r\n        return adder.postCore({\r\n            body: content,\r\n        }).then(r => {\r\n            return {\r\n                data: r,\r\n                file: new File(odataUrlFrom(r)),\r\n            };\r\n        });\r\n    }\r\n}\r\n/**\r\n * Represents the actions you can preform on a given app within the catalog\r\n */\r\nexport class App extends SharePointQueryableInstance {\r\n    /**\r\n     * This method deploys an app on the app catalog.  It must be called in the context\r\n     * of the tenant app catalog web or it will fail.\r\n     */\r\n    deploy() {\r\n        return this.clone(App, \"Deploy\").postCore();\r\n    }\r\n    /**\r\n     * This method retracts a deployed app on the app catalog.  It must be called in the context\r\n     * of the tenant app catalog web or it will fail.\r\n     */\r\n    retract() {\r\n        return this.clone(App, \"Retract\").postCore();\r\n    }\r\n    /**\r\n     * This method allows an app which is already deployed to be installed on a web\r\n     */\r\n    install() {\r\n        return this.clone(App, \"Install\").postCore();\r\n    }\r\n    /**\r\n     * This method allows an app which is already insatlled to be uninstalled on a web\r\n     */\r\n    uninstall() {\r\n        return this.clone(App, \"Uninstall\").postCore();\r\n    }\r\n    /**\r\n     * This method allows an app which is already insatlled to be upgraded on a web\r\n     */\r\n    upgrade() {\r\n        return this.clone(App, \"Upgrade\").postCore();\r\n    }\r\n    /**\r\n     * This method removes an app from the app catalog.  It must be called in the context\r\n     * of the tenant app catalog web or it will fail.\r\n     */\r\n    remove() {\r\n        return this.clone(App, \"Remove\").postCore();\r\n    }\r\n}\r\n//# sourceMappingURL=appcatalog.js.map","import { ODataBatch } from \"@pnp/odata\";\r\nimport { getGUID, isUrlAbsolute, combine, mergeHeaders, hOP } from \"@pnp/common\";\r\nimport { Logger } from \"@pnp/logging\";\r\nimport { SPHttpClient } from \"./net/sphttpclient\";\r\nimport { SPRuntimeConfig } from \"./config/splibconfig\";\r\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\r\n/**\r\n * Manages a batch of OData operations\r\n */\r\nexport class SPBatch extends ODataBatch {\r\n    constructor(baseUrl) {\r\n        super();\r\n        this.baseUrl = baseUrl;\r\n    }\r\n    /**\r\n     * Parses the response from a batch request into an array of Response instances\r\n     *\r\n     * @param body Text body of the response from the batch request\r\n     */\r\n    static ParseResponse(body) {\r\n        return new Promise((resolve, reject) => {\r\n            const responses = [];\r\n            const header = \"--batchresponse_\";\r\n            // Ex. \"HTTP/1.1 500 Internal Server Error\"\r\n            const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\r\n            const lines = body.split(\"\\n\");\r\n            let state = \"batch\";\r\n            let status;\r\n            let statusText;\r\n            for (let i = 0; i < lines.length; ++i) {\r\n                const line = lines[i];\r\n                switch (state) {\r\n                    case \"batch\":\r\n                        if (line.substr(0, header.length) === header) {\r\n                            state = \"batchHeaders\";\r\n                        }\r\n                        else {\r\n                            if (line.trim() !== \"\") {\r\n                                throw Error(`Invalid response, line ${i}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"batchHeaders\":\r\n                        if (line.trim() === \"\") {\r\n                            state = \"status\";\r\n                        }\r\n                        break;\r\n                    case \"status\":\r\n                        const parts = statusRegExp.exec(line);\r\n                        if (parts.length !== 3) {\r\n                            throw Error(`Invalid status, line ${i}`);\r\n                        }\r\n                        status = parseInt(parts[1], 10);\r\n                        statusText = parts[2];\r\n                        state = \"statusHeaders\";\r\n                        break;\r\n                    case \"statusHeaders\":\r\n                        if (line.trim() === \"\") {\r\n                            state = \"body\";\r\n                        }\r\n                        break;\r\n                    case \"body\":\r\n                        responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\r\n                        state = \"batch\";\r\n                        break;\r\n                }\r\n            }\r\n            if (state !== \"status\") {\r\n                reject(Error(\"Unexpected end of input\"));\r\n            }\r\n            resolve(responses);\r\n        });\r\n    }\r\n    executeImpl() {\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, 1 /* Info */);\r\n        // if we don't have any requests, don't bother sending anything\r\n        // this could be due to caching further upstream, or just an empty batch\r\n        if (this.requests.length < 1) {\r\n            Logger.write(`Resolving empty batch.`, 1 /* Info */);\r\n            return Promise.resolve();\r\n        }\r\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\r\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\r\n        // below to be correct\r\n        const client = new SPHttpClient();\r\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\r\n        // and for sending the entire batch\r\n        return toAbsoluteUrl(this.baseUrl).then(absoluteRequestUrl => {\r\n            // build all the requests, send them, pipe results in order to parsers\r\n            const batchBody = [];\r\n            let currentChangeSetId = \"\";\r\n            for (let i = 0; i < this.requests.length; i++) {\r\n                const reqInfo = this.requests[i];\r\n                if (reqInfo.method === \"GET\") {\r\n                    if (currentChangeSetId.length > 0) {\r\n                        // end an existing change set\r\n                        batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\r\n                        currentChangeSetId = \"\";\r\n                    }\r\n                    batchBody.push(`--batch_${this.batchId}\\n`);\r\n                }\r\n                else {\r\n                    if (currentChangeSetId.length < 1) {\r\n                        // start new change set\r\n                        currentChangeSetId = getGUID();\r\n                        batchBody.push(`--batch_${this.batchId}\\n`);\r\n                        batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\r\n                    }\r\n                    batchBody.push(`--changeset_${currentChangeSetId}\\n`);\r\n                }\r\n                // common batch part prefix\r\n                batchBody.push(`Content-Type: application/http\\n`);\r\n                batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\r\n                const headers = new Headers();\r\n                // this is the url of the individual request within the batch\r\n                const url = isUrlAbsolute(reqInfo.url) ? reqInfo.url : combine(absoluteRequestUrl, reqInfo.url);\r\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, 0 /* Verbose */);\r\n                if (reqInfo.method !== \"GET\") {\r\n                    let method = reqInfo.method;\r\n                    const castHeaders = reqInfo.options.headers;\r\n                    if (hOP(reqInfo, \"options\") && hOP(reqInfo.options, \"headers\") && castHeaders[\"X-HTTP-Method\"] !== undefined) {\r\n                        method = castHeaders[\"X-HTTP-Method\"];\r\n                        delete castHeaders[\"X-HTTP-Method\"];\r\n                    }\r\n                    batchBody.push(`${method} ${url} HTTP/1.1\\n`);\r\n                    headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\r\n                }\r\n                else {\r\n                    batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\r\n                }\r\n                // merge global config headers\r\n                mergeHeaders(headers, SPRuntimeConfig.headers);\r\n                // merge per-request headers\r\n                if (reqInfo.options) {\r\n                    mergeHeaders(headers, reqInfo.options.headers);\r\n                }\r\n                // lastly we apply any default headers we need that may not exist\r\n                if (!headers.has(\"Accept\")) {\r\n                    headers.append(\"Accept\", \"application/json\");\r\n                }\r\n                if (!headers.has(\"Content-Type\")) {\r\n                    headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\r\n                }\r\n                if (!headers.has(\"X-ClientService-ClientTag\")) {\r\n                    headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-1.2.2\");\r\n                }\r\n                // write headers into batch body\r\n                headers.forEach((value, name) => {\r\n                    batchBody.push(`${name}: ${value}\\n`);\r\n                });\r\n                batchBody.push(\"\\n\");\r\n                if (reqInfo.options.body) {\r\n                    batchBody.push(`${reqInfo.options.body}\\n\\n`);\r\n                }\r\n            }\r\n            if (currentChangeSetId.length > 0) {\r\n                // Close the changeset\r\n                batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\r\n                currentChangeSetId = \"\";\r\n            }\r\n            batchBody.push(`--batch_${this.batchId}--\\n`);\r\n            const batchOptions = {\r\n                \"body\": batchBody.join(\"\"),\r\n                \"headers\": {\r\n                    \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\r\n                },\r\n                \"method\": \"POST\",\r\n            };\r\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, 1 /* Info */);\r\n            return client.fetch(combine(absoluteRequestUrl, \"/_api/$batch\"), batchOptions)\r\n                .then(r => r.text())\r\n                .then(SPBatch.ParseResponse)\r\n                .then((responses) => {\r\n                if (responses.length !== this.requests.length) {\r\n                    throw Error(\"Could not properly parse responses to match requests in batch.\");\r\n                }\r\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, 1 /* Info */);\r\n                return responses.reduce((chain, response, index) => {\r\n                    const request = this.requests[index];\r\n                    Logger.write(`[${request.id}] (${(new Date()).getTime()}) Resolving request in batch ${this.batchId}.`, 1 /* Info */);\r\n                    return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\r\n                }, Promise.resolve());\r\n            });\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=batch.js.map","import * as tslib_1 from \"tslib\";\r\nimport { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { jsS, extend } from \"@pnp/common\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Represents a collection of navigation nodes\r\n *\r\n */\r\nexport class NavigationNodes extends SharePointQueryableCollection {\r\n    /**\r\n     * Gets a navigation node by id\r\n     *\r\n     * @param id The id of the node\r\n     */\r\n    getById(id) {\r\n        const node = new NavigationNode(this);\r\n        node.concat(`(${id})`);\r\n        return node;\r\n    }\r\n    /**\r\n     * Adds a new node to the collection\r\n     *\r\n     * @param title Display name of the node\r\n     * @param url The url of the node\r\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\r\n     */\r\n    add(title, url, visible = true) {\r\n        const postBody = jsS(extend(metadata(\"SP.NavigationNode\"), {\r\n            IsVisible: visible,\r\n            Title: title,\r\n            Url: url,\r\n        }));\r\n        return this.clone(NavigationNodes, null).postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                node: this.getById(data.Id),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Moves a node to be after another node in the navigation\r\n     *\r\n     * @param nodeId Id of the node to move\r\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\r\n     */\r\n    moveAfter(nodeId, previousNodeId) {\r\n        const postBody = jsS({\r\n            nodeId: nodeId,\r\n            previousNodeId: previousNodeId,\r\n        });\r\n        return this.clone(NavigationNodes, \"MoveAfter\").postCore({ body: postBody });\r\n    }\r\n}\r\n/**\r\n * Represents an instance of a navigation node\r\n *\r\n */\r\nexport class NavigationNode extends SharePointQueryableInstance {\r\n    /**\r\n     * Represents the child nodes of this node\r\n     */\r\n    get children() {\r\n        return new NavigationNodes(this, \"Children\");\r\n    }\r\n    /**\r\n     * Deletes this node and any child nodes\r\n     */\r\n    delete() {\r\n        return super.deleteCore();\r\n    }\r\n}\r\n/**\r\n * Exposes the navigation components\r\n *\r\n */\r\nlet Navigation = class Navigation extends SharePointQueryable {\r\n    /**\r\n     * Gets the quicklaunch navigation nodes for the current context\r\n     *\r\n     */\r\n    get quicklaunch() {\r\n        return new NavigationNodes(this, \"quicklaunch\");\r\n    }\r\n    /**\r\n     * Gets the top bar navigation nodes for the current context\r\n     *\r\n     */\r\n    get topNavigationBar() {\r\n        return new NavigationNodes(this, \"topnavigationbar\");\r\n    }\r\n};\r\nNavigation = tslib_1.__decorate([\r\n    defaultPath(\"navigation\")\r\n], Navigation);\r\nexport { Navigation };\r\n/**\r\n * Represents the top level navigation service\r\n */\r\nexport class NavigationService extends SharePointQueryable {\r\n    constructor(path = null) {\r\n        super(\"_api/navigation\", path);\r\n    }\r\n    /**\r\n     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.\r\n     *\r\n     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.\r\n     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned\r\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\r\n     * @param customProperties comma seperated list of custom properties to be returned.\r\n     */\r\n    getMenuState(menuNodeKey = null, depth = 10, mapProviderName = null, customProperties = null) {\r\n        return (new NavigationService(\"MenuState\")).postCore({\r\n            body: jsS({\r\n                customProperties: customProperties,\r\n                depth: depth,\r\n                mapProviderName: mapProviderName,\r\n                menuNodeKey: menuNodeKey,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Tries to get a SiteMapNode.Key for a given URL within a site collection.\r\n     *\r\n     * @param currentUrl A url representing the SiteMapNode\r\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\r\n     */\r\n    getMenuNodeKey(currentUrl, mapProviderName = null) {\r\n        return (new NavigationService(\"MenuNodeKey\")).postCore({\r\n            body: jsS({\r\n                currentUrl: currentUrl,\r\n                mapProviderName: mapProviderName,\r\n            }),\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=navigation.js.map","import * as tslib_1 from \"tslib\";\r\nvar TimeZone_1, TimeZones_1;\r\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath, } from \"./sharepointqueryable\";\r\nimport { spODataEntity, } from \"./odata\";\r\nimport { dateAdd, hOP, } from \"@pnp/common\";\r\n/**\r\n * Describes regional settings ODada object\r\n */\r\nlet RegionalSettings = class RegionalSettings extends SharePointQueryableInstance {\r\n    /**\r\n     * Gets the collection of languages used in a server farm.\r\n     */\r\n    get installedLanguages() {\r\n        return new InstalledLanguages(this);\r\n    }\r\n    /**\r\n     * Gets the collection of language packs that are installed on the server.\r\n     */\r\n    get globalInstalledLanguages() {\r\n        return new InstalledLanguages(this, \"globalinstalledlanguages\");\r\n    }\r\n    /**\r\n     * Gets time zone\r\n     */\r\n    get timeZone() {\r\n        return new TimeZone(this);\r\n    }\r\n    /**\r\n     * Gets time zones\r\n     */\r\n    get timeZones() {\r\n        return new TimeZones(this);\r\n    }\r\n};\r\nRegionalSettings = tslib_1.__decorate([\r\n    defaultPath(\"regionalsettings\")\r\n], RegionalSettings);\r\nexport { RegionalSettings };\r\n/**\r\n * Describes installed languages ODada queriable collection\r\n */\r\nlet InstalledLanguages = class InstalledLanguages extends SharePointQueryableCollection {\r\n};\r\nInstalledLanguages = tslib_1.__decorate([\r\n    defaultPath(\"installedlanguages\")\r\n], InstalledLanguages);\r\nexport { InstalledLanguages };\r\n/**\r\n * Describes TimeZone ODada object\r\n */\r\nlet TimeZone = TimeZone_1 = class TimeZone extends SharePointQueryableInstance {\r\n    /**\r\n     * Gets an Local Time by UTC Time\r\n     *\r\n     * @param utcTime UTC Time as Date or ISO String\r\n     */\r\n    utcToLocalTime(utcTime) {\r\n        let dateIsoString;\r\n        if (typeof utcTime === \"string\") {\r\n            dateIsoString = utcTime;\r\n        }\r\n        else {\r\n            dateIsoString = utcTime.toISOString();\r\n        }\r\n        return this.clone(TimeZone_1, `utctolocaltime('${dateIsoString}')`)\r\n            .postCore()\r\n            .then(res => hOP(res, \"UTCToLocalTime\") ? res.UTCToLocalTime : res);\r\n    }\r\n    /**\r\n     * Gets an UTC Time by Local Time\r\n     *\r\n     * @param localTime Local Time as Date or ISO String\r\n     */\r\n    localTimeToUTC(localTime) {\r\n        let dateIsoString;\r\n        if (typeof localTime === \"string\") {\r\n            dateIsoString = localTime;\r\n        }\r\n        else {\r\n            dateIsoString = dateAdd(localTime, \"minute\", localTime.getTimezoneOffset() * -1).toISOString();\r\n        }\r\n        return this.clone(TimeZone_1, `localtimetoutc('${dateIsoString}')`)\r\n            .postCore()\r\n            .then(res => hOP(res, \"LocalTimeToUTC\") ? res.LocalTimeToUTC : res);\r\n    }\r\n};\r\nTimeZone = TimeZone_1 = tslib_1.__decorate([\r\n    defaultPath(\"timezone\")\r\n], TimeZone);\r\nexport { TimeZone };\r\n/**\r\n * Describes time zones queriable collection\r\n */\r\nlet TimeZones = TimeZones_1 = class TimeZones extends SharePointQueryableCollection {\r\n    // https://msdn.microsoft.com/en-us/library/office/jj247008.aspx - timezones ids\r\n    /**\r\n     * Gets an TimeZone by id\r\n     *\r\n     * @param id The integer id of the timezone to retrieve\r\n     */\r\n    getById(id) {\r\n        // do the post and merge the result into a TimeZone instance so the data and methods are available\r\n        return this.clone(TimeZones_1, `GetById(${id})`).postCore({}, spODataEntity(TimeZone));\r\n    }\r\n};\r\nTimeZones = TimeZones_1 = tslib_1.__decorate([\r\n    defaultPath(\"timezones\")\r\n], TimeZones);\r\nexport { TimeZones };\r\n//# sourceMappingURL=regionalsettings.js.map","import * as tslib_1 from \"tslib\";\r\nimport { SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { extend, jsS, hOP, getHashCode, objectDefinedNotNull, isArray } from \"@pnp/common\";\r\nimport { metadata } from \"./utils/metadata\";\r\nimport { CachingOptions } from \"@pnp/odata\";\r\nconst funcs = new Map([\r\n    [\"text\", \"Querytext\"],\r\n    [\"template\", \"QueryTemplate\"],\r\n    [\"sourceId\", \"SourceId\"],\r\n    [\"trimDuplicatesIncludeId\", \"\"],\r\n    [\"startRow\", \"\"],\r\n    [\"rowLimit\", \"\"],\r\n    [\"rankingModelId\", \"\"],\r\n    [\"rowsPerPage\", \"\"],\r\n    [\"selectProperties\", \"\"],\r\n    [\"culture\", \"\"],\r\n    [\"timeZoneId\", \"\"],\r\n    [\"refinementFilters\", \"\"],\r\n    [\"refiners\", \"\"],\r\n    [\"hiddenConstraints\", \"\"],\r\n    [\"sortList\", \"\"],\r\n    [\"timeout\", \"\"],\r\n    [\"hithighlightedProperties\", \"\"],\r\n    [\"clientType\", \"\"],\r\n    [\"personalizationData\", \"\"],\r\n    [\"resultsURL\", \"\"],\r\n    [\"queryTag\", \"\"],\r\n    [\"properties\", \"\"],\r\n    [\"queryTemplatePropertiesUrl\", \"\"],\r\n    [\"reorderingRules\", \"\"],\r\n    [\"hitHighlightedMultivaluePropertyLimit\", \"\"],\r\n    [\"collapseSpecification\", \"\"],\r\n    [\"uiLanguage\", \"\"],\r\n    [\"desiredSnippetLength\", \"\"],\r\n    [\"maxSnippetLength\", \"\"],\r\n    [\"summaryLength\", \"\"],\r\n]);\r\nconst props = new Map([]);\r\nfunction toPropCase(str) {\r\n    return str.replace(/^(.)/, ($1) => $1.toUpperCase());\r\n}\r\n/**\r\n * Creates a new instance of the SearchQueryBuilder\r\n *\r\n * @param queryText Initial query text\r\n * @param _query Any initial query configuration\r\n */\r\nexport function SearchQueryBuilder(queryText = \"\", _query = {}) {\r\n    return new Proxy({\r\n        query: Object.assign({\r\n            Querytext: queryText,\r\n        }, _query),\r\n    }, {\r\n        get(self, propertyKey, proxy) {\r\n            const pk = propertyKey.toString();\r\n            if (pk === \"toSearchQuery\") {\r\n                return () => self.query;\r\n            }\r\n            if (funcs.has(pk)) {\r\n                return (...value) => {\r\n                    const mappedPk = funcs.get(pk);\r\n                    self.query[mappedPk.length > 0 ? mappedPk : toPropCase(pk)] = value.length > 1 ? value : value[0];\r\n                    return proxy;\r\n                };\r\n            }\r\n            const propKey = props.has(pk) ? props.get(pk) : toPropCase(pk);\r\n            self.query[propKey] = true;\r\n            return proxy;\r\n        },\r\n    });\r\n}\r\n/**\r\n * Describes the search API\r\n *\r\n */\r\nlet Search = class Search extends SharePointQueryableInstance {\r\n    /**\r\n     * @returns Promise\r\n     */\r\n    execute(queryInit) {\r\n        const query = this.parseQuery(queryInit);\r\n        const postBody = jsS({\r\n            request: extend(metadata(\"Microsoft.Office.Server.Search.REST.SearchRequest\"), Object.assign({}, query, {\r\n                HitHighlightedProperties: this.fixArrProp(query.HitHighlightedProperties),\r\n                Properties: this.fixArrProp(query.Properties),\r\n                RefinementFilters: this.fixArrProp(query.RefinementFilters),\r\n                ReorderingRules: this.fixArrProp(query.ReorderingRules),\r\n                SelectProperties: this.fixArrProp(query.SelectProperties),\r\n                SortList: this.fixArrProp(query.SortList),\r\n            })),\r\n        });\r\n        // if we are using caching with this search request, then we need to handle some work upfront to enable that\r\n        if (this._useCaching) {\r\n            // force use of the cache for this request if .usingCaching was called\r\n            this._forceCaching = true;\r\n            // because all the requests use the same url they would collide in the cache we use a special key\r\n            const cacheKey = `PnPjs.SearchWithCaching(${getHashCode(postBody)})`;\r\n            if (objectDefinedNotNull(this._cachingOptions)) {\r\n                // if our key ends in the postquery url we overwrite it\r\n                if (/\\/_api\\/search\\/postquery$/i.test(this._cachingOptions.key)) {\r\n                    this._cachingOptions.key = cacheKey;\r\n                }\r\n            }\r\n            else {\r\n                this._cachingOptions = new CachingOptions(cacheKey);\r\n            }\r\n        }\r\n        return this.postCore({ body: postBody }).then((data) => new SearchResults(data, this.toUrl(), query));\r\n    }\r\n    /**\r\n     * Fix array property\r\n     *\r\n     * @param prop property to fix for container struct\r\n     */\r\n    fixArrProp(prop) {\r\n        if (typeof prop === \"undefined\") {\r\n            return ({ results: [] });\r\n        }\r\n        prop = isArray(prop) ? prop : [prop];\r\n        return hOP(prop, \"results\") ? prop : { results: prop };\r\n    }\r\n    /**\r\n     * Translates one of the query initializers into a SearchQuery instance\r\n     *\r\n     * @param query\r\n     */\r\n    parseQuery(query) {\r\n        let finalQuery;\r\n        if (typeof query === \"string\") {\r\n            finalQuery = { Querytext: query };\r\n        }\r\n        else if (query.toSearchQuery) {\r\n            finalQuery = query.toSearchQuery();\r\n        }\r\n        else {\r\n            finalQuery = query;\r\n        }\r\n        return finalQuery;\r\n    }\r\n};\r\nSearch = tslib_1.__decorate([\r\n    defaultPath(\"_api/search/postquery\")\r\n], Search);\r\nexport { Search };\r\n/**\r\n * Describes the SearchResults class, which returns the formatted and raw version of the query response\r\n */\r\nexport class SearchResults {\r\n    /**\r\n     * Creates a new instance of the SearchResult class\r\n     *\r\n     */\r\n    constructor(rawResponse, _url, _query, _raw = null, _primary = null) {\r\n        this._url = _url;\r\n        this._query = _query;\r\n        this._raw = _raw;\r\n        this._primary = _primary;\r\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\r\n    }\r\n    get ElapsedTime() {\r\n        return this.RawSearchResults.ElapsedTime;\r\n    }\r\n    get RowCount() {\r\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\r\n    }\r\n    get TotalRows() {\r\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\r\n    }\r\n    get TotalRowsIncludingDuplicates() {\r\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\r\n    }\r\n    get RawSearchResults() {\r\n        return this._raw;\r\n    }\r\n    get PrimarySearchResults() {\r\n        if (this._primary === null) {\r\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\r\n        }\r\n        return this._primary;\r\n    }\r\n    /**\r\n     * Gets a page of results\r\n     *\r\n     * @param pageNumber Index of the page to return. Used to determine StartRow\r\n     * @param pageSize Optional, items per page (default = 10)\r\n     */\r\n    getPage(pageNumber, pageSize) {\r\n        // if we got all the available rows we don't have another page\r\n        if (this.TotalRows < this.RowCount) {\r\n            return Promise.resolve(null);\r\n        }\r\n        // if pageSize is supplied, then we use that regardless of any previous values\r\n        // otherwise get the previous RowLimit or default to 10\r\n        const rows = pageSize !== undefined ? pageSize : hOP(this._query, \"RowLimit\") ? this._query.RowLimit : 10;\r\n        const query = extend(this._query, {\r\n            RowLimit: rows,\r\n            StartRow: rows * (pageNumber - 1),\r\n        });\r\n        // we have reached the end\r\n        if (query.StartRow > this.TotalRows) {\r\n            return Promise.resolve(null);\r\n        }\r\n        const search = new Search(this._url, null);\r\n        return search.execute(query);\r\n    }\r\n    /**\r\n     * Formats a search results array\r\n     *\r\n     * @param rawResults The array to process\r\n     */\r\n    formatSearchResults(rawResults) {\r\n        const results = new Array();\r\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\r\n        for (const tempResult of tempResults) {\r\n            const cells = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\r\n            results.push(cells.reduce((res, cell) => {\r\n                Object.defineProperty(res, cell.Key, {\r\n                    configurable: false,\r\n                    enumerable: true,\r\n                    value: cell.Value,\r\n                    writable: false,\r\n                });\r\n                return res;\r\n            }, {}));\r\n        }\r\n        return results;\r\n    }\r\n}\r\n/**\r\n * defines the SortDirection enum\r\n */\r\nexport var SortDirection;\r\n(function (SortDirection) {\r\n    SortDirection[SortDirection[\"Ascending\"] = 0] = \"Ascending\";\r\n    SortDirection[SortDirection[\"Descending\"] = 1] = \"Descending\";\r\n    SortDirection[SortDirection[\"FQLFormula\"] = 2] = \"FQLFormula\";\r\n})(SortDirection || (SortDirection = {}));\r\n/**\r\n * defines the ReorderingRuleMatchType  enum\r\n */\r\nexport var ReorderingRuleMatchType;\r\n(function (ReorderingRuleMatchType) {\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"ResultContainsKeyword\"] = 0] = \"ResultContainsKeyword\";\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"TitleContainsKeyword\"] = 1] = \"TitleContainsKeyword\";\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"TitleMatchesKeyword\"] = 2] = \"TitleMatchesKeyword\";\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"UrlStartsWith\"] = 3] = \"UrlStartsWith\";\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"UrlExactlyMatches\"] = 4] = \"UrlExactlyMatches\";\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"ContentTypeIs\"] = 5] = \"ContentTypeIs\";\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"FileExtensionMatches\"] = 6] = \"FileExtensionMatches\";\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"ResultHasTag\"] = 7] = \"ResultHasTag\";\r\n    ReorderingRuleMatchType[ReorderingRuleMatchType[\"ManualCondition\"] = 8] = \"ManualCondition\";\r\n})(ReorderingRuleMatchType || (ReorderingRuleMatchType = {}));\r\n/**\r\n * Specifies the type value for the property\r\n */\r\nexport var QueryPropertyValueType;\r\n(function (QueryPropertyValueType) {\r\n    QueryPropertyValueType[QueryPropertyValueType[\"None\"] = 0] = \"None\";\r\n    QueryPropertyValueType[QueryPropertyValueType[\"StringType\"] = 1] = \"StringType\";\r\n    QueryPropertyValueType[QueryPropertyValueType[\"Int32Type\"] = 2] = \"Int32Type\";\r\n    QueryPropertyValueType[QueryPropertyValueType[\"BooleanType\"] = 3] = \"BooleanType\";\r\n    QueryPropertyValueType[QueryPropertyValueType[\"StringArrayType\"] = 4] = \"StringArrayType\";\r\n    QueryPropertyValueType[QueryPropertyValueType[\"UnSupportedType\"] = 5] = \"UnSupportedType\";\r\n})(QueryPropertyValueType || (QueryPropertyValueType = {}));\r\nexport class SearchBuiltInSourceId {\r\n}\r\nSearchBuiltInSourceId.Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\r\nSearchBuiltInSourceId.ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\r\nSearchBuiltInSourceId.ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\r\nSearchBuiltInSourceId.ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\r\nSearchBuiltInSourceId.ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\r\nSearchBuiltInSourceId.LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\r\nSearchBuiltInSourceId.LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\r\nSearchBuiltInSourceId.LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\r\nSearchBuiltInSourceId.LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\r\nSearchBuiltInSourceId.Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\r\nSearchBuiltInSourceId.Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\r\nSearchBuiltInSourceId.Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\r\nSearchBuiltInSourceId.RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\r\nSearchBuiltInSourceId.RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\r\nSearchBuiltInSourceId.Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\r\n//# sourceMappingURL=search.js.map","import * as tslib_1 from \"tslib\";\r\nimport { SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { hOP } from \"@pnp/common\";\r\nlet SearchSuggest = class SearchSuggest extends SharePointQueryableInstance {\r\n    execute(query) {\r\n        this.mapQueryToQueryString(query);\r\n        return this.get().then(response => {\r\n            const mapper = hOP(response, \"suggest\") ? (s) => response.suggest[s].results : (s) => response[s];\r\n            return {\r\n                PeopleNames: mapper(\"PeopleNames\"),\r\n                PersonalResults: mapper(\"PersonalResults\"),\r\n                Queries: mapper(\"Queries\"),\r\n            };\r\n        });\r\n    }\r\n    mapQueryToQueryString(query) {\r\n        const setProp = (q) => (checkProp) => (sp) => {\r\n            if (hOP(q, checkProp)) {\r\n                this.query.set(sp, q[checkProp].toString());\r\n            }\r\n        };\r\n        this.query.set(\"querytext\", `'${query.querytext}'`);\r\n        const querySetter = setProp(query);\r\n        querySetter(\"count\")(\"inumberofquerysuggestions\");\r\n        querySetter(\"personalCount\")(\"inumberofresultsuggestions\");\r\n        querySetter(\"preQuery\")(\"fprequerysuggestions\");\r\n        querySetter(\"hitHighlighting\")(\"fhithighlighting\");\r\n        querySetter(\"capitalize\")(\"fcapitalizefirstletters\");\r\n        querySetter(\"culture\")(\"culture\");\r\n        querySetter(\"stemming\")(\"enablestemming\");\r\n        querySetter(\"includePeople\")(\"showpeoplenamesuggestions\");\r\n        querySetter(\"queryRules\")(\"enablequeryrules\");\r\n        querySetter(\"prefixMatch\")(\"fprefixmatchallterms\");\r\n    }\r\n};\r\nSearchSuggest = tslib_1.__decorate([\r\n    defaultPath(\"_api/search/suggest\")\r\n], SearchSuggest);\r\nexport { SearchSuggest };\r\n//# sourceMappingURL=searchsuggest.js.map","import * as tslib_1 from \"tslib\";\r\nvar Features_1;\r\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\n/**\r\n * Describes a collection of List objects\r\n *\r\n */\r\nlet Features = Features_1 = class Features extends SharePointQueryableCollection {\r\n    /**\r\n     * Adds a new list to the collection\r\n     *\r\n     * @param id The Id of the feature (GUID)\r\n     * @param force If true the feature activation will be forced\r\n     */\r\n    add(id, force = false) {\r\n        return this.clone(Features_1, \"add\").postCore({\r\n            body: jsS({\r\n                featdefScope: 0,\r\n                featureId: id,\r\n                force: force,\r\n            }),\r\n        }).then(data => {\r\n            return {\r\n                data: data,\r\n                feature: this.getById(id),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list from the collection by guid id\r\n     *\r\n     * @param id The Id of the feature (GUID)\r\n     */\r\n    getById(id) {\r\n        const feature = new Feature(this);\r\n        feature.concat(`('${id}')`);\r\n        return feature;\r\n    }\r\n    /**\r\n     * Removes (deactivates) a feature from the collection\r\n     *\r\n     * @param id The Id of the feature (GUID)\r\n     * @param force If true the feature deactivation will be forced\r\n     */\r\n    remove(id, force = false) {\r\n        return this.clone(Features_1, \"remove\").postCore({\r\n            body: jsS({\r\n                featureId: id,\r\n                force: force,\r\n            }),\r\n        });\r\n    }\r\n};\r\nFeatures = Features_1 = tslib_1.__decorate([\r\n    defaultPath(\"features\")\r\n], Features);\r\nexport { Features };\r\nexport class Feature extends SharePointQueryableInstance {\r\n    /**\r\n     * Removes (deactivates) a feature from the collection\r\n     *\r\n     * @param force If true the feature deactivation will be forced\r\n     */\r\n    deactivate(force = false) {\r\n        const removeDependency = this.addBatchDependency();\r\n        const idGet = new Feature(this).select(\"DefinitionId\");\r\n        return idGet.get().then(feature => {\r\n            const promise = this.getParent(Features, this.parentUrl, \"\", this.batch).remove(feature.DefinitionId, force);\r\n            removeDependency();\r\n            return promise;\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=features.js.map","import * as tslib_1 from \"tslib\";\r\nvar RelatedItemManagerImpl_1;\r\nimport { SharePointQueryable, defaultPath } from \"./sharepointqueryable\";\r\nimport { jsS } from \"@pnp/common\";\r\nlet RelatedItemManagerImpl = RelatedItemManagerImpl_1 = class RelatedItemManagerImpl extends SharePointQueryable {\r\n    static FromUrl(url) {\r\n        if (url === null) {\r\n            return new RelatedItemManagerImpl_1(\"\");\r\n        }\r\n        const index = url.indexOf(\"_api/\");\r\n        if (index > -1) {\r\n            return new RelatedItemManagerImpl_1(url.substr(0, index));\r\n        }\r\n        return new RelatedItemManagerImpl_1(url);\r\n    }\r\n    getRelatedItems(sourceListName, sourceItemId) {\r\n        const query = this.clone(RelatedItemManagerImpl_1, null);\r\n        query.concat(\".GetRelatedItems\");\r\n        return query.postCore({\r\n            body: jsS({\r\n                SourceItemID: sourceItemId,\r\n                SourceListName: sourceListName,\r\n            }),\r\n        });\r\n    }\r\n    getPageOneRelatedItems(sourceListName, sourceItemId) {\r\n        const query = this.clone(RelatedItemManagerImpl_1, null);\r\n        query.concat(\".GetPageOneRelatedItems\");\r\n        return query.postCore({\r\n            body: jsS({\r\n                SourceItemID: sourceItemId,\r\n                SourceListName: sourceListName,\r\n            }),\r\n        });\r\n    }\r\n    addSingleLink(sourceListName, sourceItemId, sourceWebUrl, targetListName, targetItemID, targetWebUrl, tryAddReverseLink = false) {\r\n        const query = this.clone(RelatedItemManagerImpl_1, null);\r\n        query.concat(\".AddSingleLink\");\r\n        return query.postCore({\r\n            body: jsS({\r\n                SourceItemID: sourceItemId,\r\n                SourceListName: sourceListName,\r\n                SourceWebUrl: sourceWebUrl,\r\n                TargetItemID: targetItemID,\r\n                TargetListName: targetListName,\r\n                TargetWebUrl: targetWebUrl,\r\n                TryAddReverseLink: tryAddReverseLink,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\r\n     *\r\n     * @param sourceListName The source list name or list id\r\n     * @param sourceItemId The source item id\r\n     * @param targetItemUrl The target item url\r\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\r\n     */\r\n    addSingleLinkToUrl(sourceListName, sourceItemId, targetItemUrl, tryAddReverseLink = false) {\r\n        const query = this.clone(RelatedItemManagerImpl_1, null);\r\n        query.concat(\".AddSingleLinkToUrl\");\r\n        return query.postCore({\r\n            body: jsS({\r\n                SourceItemID: sourceItemId,\r\n                SourceListName: sourceListName,\r\n                TargetItemUrl: targetItemUrl,\r\n                TryAddReverseLink: tryAddReverseLink,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\r\n     *\r\n     * @param sourceItemUrl The source item url\r\n     * @param targetListName The target list name or list id\r\n     * @param targetItemId The target item id\r\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\r\n     */\r\n    addSingleLinkFromUrl(sourceItemUrl, targetListName, targetItemId, tryAddReverseLink = false) {\r\n        const query = this.clone(RelatedItemManagerImpl_1, null);\r\n        query.concat(\".AddSingleLinkFromUrl\");\r\n        return query.postCore({\r\n            body: jsS({\r\n                SourceItemUrl: sourceItemUrl,\r\n                TargetItemID: targetItemId,\r\n                TargetListName: targetListName,\r\n                TryAddReverseLink: tryAddReverseLink,\r\n            }),\r\n        });\r\n    }\r\n    deleteSingleLink(sourceListName, sourceItemId, sourceWebUrl, targetListName, targetItemId, targetWebUrl, tryDeleteReverseLink = false) {\r\n        const query = this.clone(RelatedItemManagerImpl_1, null);\r\n        query.concat(\".DeleteSingleLink\");\r\n        return query.postCore({\r\n            body: jsS({\r\n                SourceItemID: sourceItemId,\r\n                SourceListName: sourceListName,\r\n                SourceWebUrl: sourceWebUrl,\r\n                TargetItemID: targetItemId,\r\n                TargetListName: targetListName,\r\n                TargetWebUrl: targetWebUrl,\r\n                TryDeleteReverseLink: tryDeleteReverseLink,\r\n            }),\r\n        });\r\n    }\r\n};\r\nRelatedItemManagerImpl = RelatedItemManagerImpl_1 = tslib_1.__decorate([\r\n    defaultPath(\"_api/SP.RelatedItemManager\")\r\n], RelatedItemManagerImpl);\r\nexport { RelatedItemManagerImpl };\r\n//# sourceMappingURL=relateditems.js.map","import * as tslib_1 from \"tslib\";\r\nvar Webs_1, Web_1;\r\nimport { extend, jsS } from \"@pnp/common\";\r\nimport { SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { SharePointQueryableShareableWeb } from \"./sharepointqueryableshareable\";\r\nimport { Folders, Folder } from \"./folders\";\r\nimport { Lists, List } from \"./lists\";\r\nimport { Fields } from \"./fields\";\r\nimport { Site } from \"./site\";\r\nimport { Navigation } from \"./navigation\";\r\nimport { SiteGroups, SiteGroup } from \"./sitegroups\";\r\nimport { ContentTypes } from \"./contenttypes\";\r\nimport { RoleDefinitions } from \"./roles\";\r\nimport { File } from \"./files\";\r\nimport { extractWebUrl } from \"./utils/extractweburl\";\r\nimport { SiteUsers, SiteUser, CurrentUser } from \"./siteusers\";\r\nimport { UserCustomActions } from \"./usercustomactions\";\r\nimport { odataUrlFrom } from \"./odata\";\r\nimport { SPBatch } from \"./batch\";\r\nimport { Features } from \"./features\";\r\nimport { RelatedItemManagerImpl } from \"./relateditems\";\r\nimport { AppCatalog } from \"./appcatalog\";\r\nimport { RegionalSettings } from \"./regionalsettings\";\r\nimport { ClientSidePage } from \"./clientsidepages\";\r\n/**\r\n * Describes a collection of webs\r\n *\r\n */\r\nlet Webs = Webs_1 = class Webs extends SharePointQueryableCollection {\r\n    /**\r\n     * Adds a new web to the collection\r\n     *\r\n     * @param title The new web's title\r\n     * @param url The new web's relative url\r\n     * @param description The new web's description\r\n     * @param template The new web's template internal name (default = STS)\r\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\r\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\r\n     */\r\n    add(title, url, description = \"\", template = \"STS\", language = 1033, inheritPermissions = true) {\r\n        const props = {\r\n            Description: description,\r\n            Language: language,\r\n            Title: title,\r\n            Url: url,\r\n            UseSamePermissionsAsParentSite: inheritPermissions,\r\n            WebTemplate: template,\r\n        };\r\n        const postBody = jsS({\r\n            \"parameters\": extend({\r\n                \"__metadata\": { \"type\": \"SP.WebCreationInformation\" },\r\n            }, props),\r\n        });\r\n        return this.clone(Webs_1, \"add\").postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                web: new Web(odataUrlFrom(data).replace(/_api\\/web\\/?/i, \"\")),\r\n            };\r\n        });\r\n    }\r\n};\r\nWebs = Webs_1 = tslib_1.__decorate([\r\n    defaultPath(\"webs\")\r\n], Webs);\r\nexport { Webs };\r\n/**\r\n * Describes a collection of web infos\r\n *\r\n */\r\nlet WebInfos = class WebInfos extends SharePointQueryableCollection {\r\n};\r\nWebInfos = tslib_1.__decorate([\r\n    defaultPath(\"webinfos\")\r\n], WebInfos);\r\nexport { WebInfos };\r\n/**\r\n * Describes a web\r\n *\r\n */\r\nlet Web = Web_1 = class Web extends SharePointQueryableShareableWeb {\r\n    /**\r\n     * Creates a new web instance from the given url by indexing the location of the /_api/\r\n     * segment. If this is not found the method creates a new web with the entire string as\r\n     * supplied.\r\n     *\r\n     * @param url\r\n     */\r\n    static fromUrl(url, path) {\r\n        return new Web_1(extractWebUrl(url), path);\r\n    }\r\n    /**\r\n     * Gets this web's subwebs\r\n     *\r\n     */\r\n    get webs() {\r\n        return new Webs(this);\r\n    }\r\n    /**\r\n     * Gets this web's parent web and data\r\n     *\r\n     */\r\n    getParentWeb() {\r\n        return this.select(\"ParentWeb/Id\").expand(\"ParentWeb\").get()\r\n            .then(({ ParentWeb }) => new Site(this.toUrlAndQuery().split(\"/_api\")[0]).openWebById(ParentWeb.Id));\r\n    }\r\n    /**\r\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\r\n    *\r\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\r\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\r\n    */\r\n    getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1) {\r\n        return this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\r\n    }\r\n    /**\r\n     * Allows access to the web's all properties collection\r\n     */\r\n    get allProperties() {\r\n        return this.clone(SharePointQueryableCollection, \"allproperties\");\r\n    }\r\n    /**\r\n     * Gets a collection of WebInfos for this web's subwebs\r\n     *\r\n     */\r\n    get webinfos() {\r\n        return new WebInfos(this);\r\n    }\r\n    /**\r\n     * Gets the content types available in this web\r\n     *\r\n     */\r\n    get contentTypes() {\r\n        return new ContentTypes(this);\r\n    }\r\n    /**\r\n     * Gets the lists in this web\r\n     *\r\n     */\r\n    get lists() {\r\n        return new Lists(this);\r\n    }\r\n    /**\r\n     * Gets the fields in this web\r\n     *\r\n     */\r\n    get fields() {\r\n        return new Fields(this);\r\n    }\r\n    /**\r\n     * Gets the active features for this web\r\n     *\r\n     */\r\n    get features() {\r\n        return new Features(this);\r\n    }\r\n    /**\r\n     * Gets the available fields in this web\r\n     *\r\n     */\r\n    get availablefields() {\r\n        return new Fields(this, \"availablefields\");\r\n    }\r\n    /**\r\n     * Gets the navigation options in this web\r\n     *\r\n     */\r\n    get navigation() {\r\n        return new Navigation(this);\r\n    }\r\n    /**\r\n     * Gets the site users\r\n     *\r\n     */\r\n    get siteUsers() {\r\n        return new SiteUsers(this);\r\n    }\r\n    /**\r\n     * Gets the site groups\r\n     *\r\n     */\r\n    get siteGroups() {\r\n        return new SiteGroups(this);\r\n    }\r\n    /**\r\n     * Gets site user info list\r\n     *\r\n     */\r\n    get siteUserInfoList() {\r\n        return new List(this, \"siteuserinfolist\");\r\n    }\r\n    /**\r\n     * Gets regional settings\r\n     *\r\n     */\r\n    get regionalSettings() {\r\n        return new RegionalSettings(this);\r\n    }\r\n    /**\r\n     * Gets the current user\r\n     */\r\n    get currentUser() {\r\n        return new CurrentUser(this);\r\n    }\r\n    /**\r\n     * Gets the top-level folders in this web\r\n     *\r\n     */\r\n    get folders() {\r\n        return new Folders(this);\r\n    }\r\n    /**\r\n     * Gets all user custom actions for this web\r\n     *\r\n     */\r\n    get userCustomActions() {\r\n        return new UserCustomActions(this);\r\n    }\r\n    /**\r\n     * Gets the collection of RoleDefinition resources\r\n     *\r\n     */\r\n    get roleDefinitions() {\r\n        return new RoleDefinitions(this);\r\n    }\r\n    /**\r\n     * Provides an interface to manage related items\r\n     *\r\n     */\r\n    get relatedItems() {\r\n        return RelatedItemManagerImpl.FromUrl(this.toUrl());\r\n    }\r\n    /**\r\n     * Creates a new batch for requests within the context of this web\r\n     *\r\n     */\r\n    createBatch() {\r\n        return new SPBatch(this.parentUrl);\r\n    }\r\n    /**\r\n     * Gets the root folder of this web\r\n     *\r\n     */\r\n    get rootFolder() {\r\n        return new Folder(this, \"rootFolder\");\r\n    }\r\n    /**\r\n     * Gets the associated owner group for this web\r\n     *\r\n     */\r\n    get associatedOwnerGroup() {\r\n        return new SiteGroup(this, \"associatedownergroup\");\r\n    }\r\n    /**\r\n     * Gets the associated member group for this web\r\n     *\r\n     */\r\n    get associatedMemberGroup() {\r\n        return new SiteGroup(this, \"associatedmembergroup\");\r\n    }\r\n    /**\r\n     * Gets the associated visitor group for this web\r\n     *\r\n     */\r\n    get associatedVisitorGroup() {\r\n        return new SiteGroup(this, \"associatedvisitorgroup\");\r\n    }\r\n    /**\r\n     * Gets the default document library for this web\r\n     *\r\n     */\r\n    get defaultDocumentLibrary() {\r\n        return new List(this, \"DefaultDocumentLibrary\");\r\n    }\r\n    /**\r\n     * Gets a folder by server relative url\r\n     *\r\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\r\n     */\r\n    getFolderByServerRelativeUrl(folderRelativeUrl) {\r\n        return new Folder(this, `getFolderByServerRelativeUrl('${folderRelativeUrl}')`);\r\n    }\r\n    /**\r\n     * Gets a folder by server relative relative path if your folder name contains # and % characters\r\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\r\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123\");\r\n     * This works only in SharePoint online.\r\n     *\r\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\r\n     */\r\n    getFolderByServerRelativePath(folderRelativeUrl) {\r\n        return new Folder(this, `getFolderByServerRelativePath(decodedUrl='${folderRelativeUrl}')`);\r\n    }\r\n    /**\r\n     * Gets a file by server relative url\r\n     *\r\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\r\n     */\r\n    getFileByServerRelativeUrl(fileRelativeUrl) {\r\n        return new File(this, `getFileByServerRelativeUrl('${fileRelativeUrl}')`);\r\n    }\r\n    /**\r\n     * Gets a file by server relative url if your file name contains # and % characters\r\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\r\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123.docx\");\r\n     *\r\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\r\n     */\r\n    getFileByServerRelativePath(fileRelativeUrl) {\r\n        return new File(this, `getFileByServerRelativePath(decodedUrl='${fileRelativeUrl}')`);\r\n    }\r\n    /**\r\n     * Gets a list by server relative url (list's root folder)\r\n     *\r\n     * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\r\n     */\r\n    getList(listRelativeUrl) {\r\n        return new List(this, `getList('${listRelativeUrl}')`);\r\n    }\r\n    /**\r\n     * Updates this web instance with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the web\r\n     */\r\n    update(properties) {\r\n        const postBody = jsS(extend({\r\n            \"__metadata\": { \"type\": \"SP.Web\" },\r\n        }, properties));\r\n        return this.postCore({\r\n            body: postBody,\r\n            headers: {\r\n                \"X-HTTP-Method\": \"MERGE\",\r\n            },\r\n        }).then((data) => {\r\n            return {\r\n                data: data,\r\n                web: this,\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Deletes this web\r\n     *\r\n     */\r\n    delete() {\r\n        return super.deleteCore();\r\n    }\r\n    /**\r\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\r\n     *\r\n     * @param colorPaletteUrl The server-relative URL of the color palette file\r\n     * @param fontSchemeUrl The server-relative URL of the font scheme\r\n     * @param backgroundImageUrl The server-relative URL of the background image\r\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\r\n     */\r\n    applyTheme(colorPaletteUrl, fontSchemeUrl, backgroundImageUrl, shareGenerated) {\r\n        const postBody = jsS({\r\n            backgroundImageUrl: backgroundImageUrl,\r\n            colorPaletteUrl: colorPaletteUrl,\r\n            fontSchemeUrl: fontSchemeUrl,\r\n            shareGenerated: shareGenerated,\r\n        });\r\n        return this.clone(Web_1, \"applytheme\").postCore({ body: postBody });\r\n    }\r\n    /**\r\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\r\n     *\r\n     * @param template Name of the site definition or the name of the site template\r\n     */\r\n    applyWebTemplate(template) {\r\n        const q = this.clone(Web_1, \"applywebtemplate\");\r\n        q.concat(`(@t)`);\r\n        q.query.set(\"@t\", template);\r\n        return q.postCore();\r\n    }\r\n    /**\r\n     * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\r\n     *\r\n     * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\r\n     */\r\n    ensureUser(loginName) {\r\n        const postBody = jsS({\r\n            logonName: loginName,\r\n        });\r\n        return this.clone(Web_1, \"ensureuser\").postCore({ body: postBody }).then((data) => {\r\n            return {\r\n                data: data,\r\n                user: new SiteUser(odataUrlFrom(data)),\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Returns a collection of site templates available for the site\r\n     *\r\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\r\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\r\n     */\r\n    availableWebTemplates(language = 1033, includeCrossLanugage = true) {\r\n        return new SharePointQueryableCollection(this, `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`);\r\n    }\r\n    /**\r\n     * Returns the list gallery on the site\r\n     *\r\n     * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\r\n     * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\r\n     */\r\n    getCatalog(type) {\r\n        return this.clone(Web_1, `getcatalog(${type})`).select(\"Id\").get().then((data) => {\r\n            return new List(odataUrlFrom(data));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\r\n     *\r\n     * @param query The change query\r\n     */\r\n    getChanges(query) {\r\n        const postBody = jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) });\r\n        return this.clone(Web_1, \"getchanges\").postCore({ body: postBody });\r\n    }\r\n    /**\r\n     * Gets the custom list templates for the site\r\n     *\r\n     */\r\n    get customListTemplate() {\r\n        return new SharePointQueryableCollection(this, \"getcustomlisttemplates\");\r\n    }\r\n    /**\r\n     * Returns the user corresponding to the specified member identifier for the current site\r\n     *\r\n     * @param id The id of the user\r\n     */\r\n    getUserById(id) {\r\n        return new SiteUser(this, `getUserById(${id})`);\r\n    }\r\n    /**\r\n     * Returns the name of the image file for the icon that is used to represent the specified file\r\n     *\r\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\r\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\r\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\r\n     */\r\n    mapToIcon(filename, size = 0, progId = \"\") {\r\n        return this.clone(Web_1, `maptoicon(filename='${filename}', progid='${progId}', size=${size})`).get();\r\n    }\r\n    /**\r\n     * Returns the tenant property corresponding to the specified key in the app catalog site\r\n     *\r\n     * @param key Id of storage entity to be set\r\n     */\r\n    getStorageEntity(key) {\r\n        return this.clone(Web_1, `getStorageEntity('${key}')`).get();\r\n    }\r\n    /**\r\n     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)\r\n     *\r\n     * @param key Id of storage entity to be set\r\n     * @param value Value of storage entity to be set\r\n     * @param description Description of storage entity to be set\r\n     * @param comments Comments of storage entity to be set\r\n     */\r\n    setStorageEntity(key, value, description = \"\", comments = \"\") {\r\n        return this.clone(Web_1, `setStorageEntity`).postCore({\r\n            body: jsS({\r\n                comments,\r\n                description,\r\n                key,\r\n                value,\r\n            }),\r\n        });\r\n    }\r\n    /**\r\n     * This will remove the storage entity identified by the given key\r\n     *\r\n     * @param key Id of storage entity to be removed\r\n     */\r\n    removeStorageEntity(key) {\r\n        return this.clone(Web_1, `removeStorageEntity('${key}')`).postCore();\r\n    }\r\n    /**\r\n     * Gets the app catalog for this web\r\n     *\r\n     * @param url Optional url or web containing the app catalog (default: current web)\r\n     */\r\n    getAppCatalog(url) {\r\n        return new AppCatalog(url || this);\r\n    }\r\n    /**\r\n     * Gets the collection of available client side web parts for this web instance\r\n     */\r\n    getClientSideWebParts() {\r\n        return this.clone(SharePointQueryableCollection, \"GetClientSideWebParts\").get();\r\n    }\r\n    /**\r\n     * Creates a new client side page\r\n     *\r\n     * @param pageName Name of the new page\r\n     * @param title Display title of the new page\r\n     * @param libraryTitle Title of the library in which to create the new page. Default: \"Site Pages\"\r\n     */\r\n    addClientSidePage(pageName, title = pageName.replace(/\\.[^/.]+$/, \"\"), libraryTitle = \"Site Pages\") {\r\n        return ClientSidePage.create(this.lists.getByTitle(libraryTitle), pageName, title);\r\n    }\r\n    /**\r\n     * Creates a new client side page using the library path\r\n     *\r\n     * @param pageName Name of the new page\r\n     * @param listRelativePath The server relative path to the list's root folder (including /sites/ if applicable)\r\n     * @param title Display title of the new page\r\n     */\r\n    addClientSidePageByPath(pageName, listRelativePath, title = pageName.replace(/\\.[^/.]+$/, \"\")) {\r\n        return ClientSidePage.create(this.getList(listRelativePath), pageName, title);\r\n    }\r\n};\r\nWeb = Web_1 = tslib_1.__decorate([\r\n    defaultPath(\"_api/web\")\r\n], Web);\r\nexport { Web };\r\n//# sourceMappingURL=webs.js.map","import * as tslib_1 from \"tslib\";\r\nvar Site_1;\r\nimport { SharePointQueryable, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\r\nimport { Web } from \"./webs\";\r\nimport { UserCustomActions } from \"./usercustomactions\";\r\nimport { SPBatch } from \"./batch\";\r\nimport { Features } from \"./features\";\r\nimport { hOP } from \"@pnp/common\";\r\n/**\r\n * Describes a site collection\r\n *\r\n */\r\nlet Site = Site_1 = class Site extends SharePointQueryableInstance {\r\n    /**\r\n     * Gets the root web of the site collection\r\n     *\r\n     */\r\n    get rootWeb() {\r\n        return new Web(this, \"rootweb\");\r\n    }\r\n    /**\r\n     * Gets the active features for this site collection\r\n     *\r\n     */\r\n    get features() {\r\n        return new Features(this);\r\n    }\r\n    /**\r\n     * Gets all custom actions for this site collection\r\n     *\r\n     */\r\n    get userCustomActions() {\r\n        return new UserCustomActions(this);\r\n    }\r\n    /**\r\n     * Gets a Web instance representing the root web of the site collection\r\n     * correctly setup for chaining within the library\r\n     */\r\n    getRootWeb() {\r\n        return this.rootWeb.select(\"Url\").get().then(web => new Web(web.Url));\r\n    }\r\n    /**\r\n     * Gets the context information for this site collection\r\n     */\r\n    getContextInfo() {\r\n        const q = new Site_1(this.parentUrl, \"_api/contextinfo\");\r\n        return q.postCore().then(data => {\r\n            if (hOP(data, \"GetContextWebInformation\")) {\r\n                const info = data.GetContextWebInformation;\r\n                info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\r\n                return info;\r\n            }\r\n            else {\r\n                return data;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\r\n     *\r\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\r\n     */\r\n    getDocumentLibraries(absoluteWebUrl) {\r\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\");\r\n        q.query.set(\"@v\", \"'\" + absoluteWebUrl + \"'\");\r\n        return q.get().then(data => {\r\n            if (hOP(data, \"GetDocumentLibraries\")) {\r\n                return data.GetDocumentLibraries;\r\n            }\r\n            else {\r\n                return data;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the site url from a page url\r\n     *\r\n     * @param absolutePageUrl The absolute url of the page\r\n     */\r\n    getWebUrlFromPageUrl(absolutePageUrl) {\r\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\");\r\n        q.query.set(\"@v\", `'${absolutePageUrl}'`);\r\n        return q.get().then(data => {\r\n            if (hOP(data, \"GetWebUrlFromPageUrl\")) {\r\n                return data.GetWebUrlFromPageUrl;\r\n            }\r\n            else {\r\n                return data;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new batch for requests within the context of this site collection\r\n     *\r\n     */\r\n    createBatch() {\r\n        return new SPBatch(this.parentUrl);\r\n    }\r\n    /**\r\n     * Opens a web by id (using POST)\r\n     *\r\n     * @param webId The GUID id of the web to open\r\n     */\r\n    openWebById(webId) {\r\n        return this.clone(Site_1, `openWebById('${webId}')`).postCore().then(d => ({\r\n            data: d,\r\n            web: Web.fromUrl(d[\"odata.id\"] || d.__metadata.uri),\r\n        }));\r\n    }\r\n};\r\nSite = Site_1 = tslib_1.__decorate([\r\n    defaultPath(\"_api/site\")\r\n], Site);\r\nexport { Site };\r\n//# sourceMappingURL=site.js.map","import * as tslib_1 from \"tslib\";\r\nvar ProfileLoader_1, ClientPeoplePickerQuery_1;\r\nimport { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\r\nimport { extend, jsS } from \"@pnp/common\";\r\nimport { metadata } from \"./utils/metadata\";\r\nexport class UserProfileQuery extends SharePointQueryableInstance {\r\n    /**\r\n     * Creates a new instance of the UserProfileQuery class\r\n     *\r\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\r\n     */\r\n    constructor(baseUrl, path = \"_api/sp.userprofiles.peoplemanager\") {\r\n        super(baseUrl, path);\r\n        this.clientPeoplePickerQuery = (new ClientPeoplePickerQuery(baseUrl)).configureFrom(this);\r\n        this.profileLoader = (new ProfileLoader(baseUrl)).configureFrom(this);\r\n    }\r\n    /**\r\n     * The url of the edit profile page for the current user\r\n     */\r\n    get editProfileLink() {\r\n        return this.clone(UserProfileQuery, \"EditProfileLink\").get();\r\n    }\r\n    /**\r\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\r\n     */\r\n    get isMyPeopleListPublic() {\r\n        return this.clone(UserProfileQuery, \"IsMyPeopleListPublic\").get();\r\n    }\r\n    /**\r\n     * A boolean value that indicates whether the current user is being followed by the specified user\r\n     *\r\n     * @param loginName The account name of the user\r\n     */\r\n    amIFollowedBy(loginName) {\r\n        const q = this.clone(UserProfileQuery, \"amifollowedby(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n    /**\r\n     * A boolean value that indicates whether the current user is following the specified user\r\n     *\r\n     * @param loginName The account name of the user\r\n     */\r\n    amIFollowing(loginName) {\r\n        const q = this.clone(UserProfileQuery, \"amifollowing(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n    /**\r\n     * Gets tags that the current user is following\r\n     *\r\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\r\n     */\r\n    getFollowedTags(maxCount = 20) {\r\n        return this.clone(UserProfileQuery, `getfollowedtags(${maxCount})`).get();\r\n    }\r\n    /**\r\n     * Gets the people who are following the specified user\r\n     *\r\n     * @param loginName The account name of the user\r\n     */\r\n    getFollowersFor(loginName) {\r\n        const q = this.clone(UserProfileQuery, \"getfollowersfor(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n    /**\r\n     * Gets the people who are following the current user\r\n     *\r\n     */\r\n    get myFollowers() {\r\n        return new SharePointQueryableCollection(this, \"getmyfollowers\");\r\n    }\r\n    /**\r\n     * Gets user properties for the current user\r\n     *\r\n     */\r\n    get myProperties() {\r\n        return new UserProfileQuery(this, \"getmyproperties\");\r\n    }\r\n    /**\r\n     * Gets the people who the specified user is following\r\n     *\r\n     * @param loginName The account name of the user.\r\n     */\r\n    getPeopleFollowedBy(loginName) {\r\n        const q = this.clone(UserProfileQuery, \"getpeoplefollowedby(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n    /**\r\n     * Gets user properties for the specified user.\r\n     *\r\n     * @param loginName The account name of the user.\r\n     */\r\n    getPropertiesFor(loginName) {\r\n        const q = this.clone(UserProfileQuery, \"getpropertiesfor(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n    /**\r\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\r\n     *\r\n     */\r\n    get trendingTags() {\r\n        const q = this.clone(UserProfileQuery, null);\r\n        q.concat(\".gettrendingtags\");\r\n        return q.get();\r\n    }\r\n    /**\r\n     * Gets the specified user profile property for the specified user\r\n     *\r\n     * @param loginName The account name of the user\r\n     * @param propertyName The case-sensitive name of the property to get\r\n     */\r\n    getUserProfilePropertyFor(loginName, propertyName) {\r\n        const q = this.clone(UserProfileQuery, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n    /**\r\n     * Removes the specified user from the user's list of suggested people to follow\r\n     *\r\n     * @param loginName The account name of the user\r\n     */\r\n    hideSuggestion(loginName) {\r\n        const q = this.clone(UserProfileQuery, \"hidesuggestion(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.postCore();\r\n    }\r\n    /**\r\n     * A boolean values that indicates whether the first user is following the second user\r\n     *\r\n     * @param follower The account name of the user who might be following the followee\r\n     * @param followee The account name of the user who might be followed by the follower\r\n     */\r\n    isFollowing(follower, followee) {\r\n        const q = this.clone(UserProfileQuery, null);\r\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\r\n        q.query.set(\"@v\", `'${encodeURIComponent(follower)}'`);\r\n        q.query.set(\"@y\", `'${encodeURIComponent(followee)}'`);\r\n        return q.get();\r\n    }\r\n    /**\r\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\r\n     *\r\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\r\n     */\r\n    setMyProfilePic(profilePicSource) {\r\n        return new Promise((resolve, reject) => {\r\n            let buffer = null;\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => buffer = e.target.result;\r\n            reader.readAsArrayBuffer(profilePicSource);\r\n            const request = new UserProfileQuery(this, \"setmyprofilepicture\");\r\n            request.postCore({\r\n                body: String.fromCharCode.apply(null, new Uint16Array(buffer)),\r\n            }).then(_ => resolve()).catch(e => reject(e));\r\n        });\r\n    }\r\n    /**\r\n     * Sets single value User Profile property\r\n     *\r\n     * @param accountName The account name of the user\r\n     * @param propertyName Property name\r\n     * @param propertyValue Property value\r\n     */\r\n    setSingleValueProfileProperty(accountName, propertyName, propertyValue) {\r\n        const postBody = jsS({\r\n            accountName: accountName,\r\n            propertyName: propertyName,\r\n            propertyValue: propertyValue,\r\n        });\r\n        return this.clone(UserProfileQuery, \"SetSingleValueProfileProperty\")\r\n            .postCore({ body: postBody });\r\n    }\r\n    /**\r\n     * Sets multi valued User Profile property\r\n     *\r\n     * @param accountName The account name of the user\r\n     * @param propertyName Property name\r\n     * @param propertyValues Property values\r\n     */\r\n    setMultiValuedProfileProperty(accountName, propertyName, propertyValues) {\r\n        const postBody = jsS({\r\n            accountName: accountName,\r\n            propertyName: propertyName,\r\n            propertyValues: propertyValues,\r\n        });\r\n        return this.clone(UserProfileQuery, \"SetMultiValuedProfileProperty\")\r\n            .postCore({ body: postBody });\r\n    }\r\n    /**\r\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\r\n     *\r\n     * @param emails The email addresses of the users to provision sites for\r\n     */\r\n    createPersonalSiteEnqueueBulk(...emails) {\r\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\r\n    }\r\n    /**\r\n     * Gets the user profile of the site owner\r\n     *\r\n     */\r\n    get ownerUserProfile() {\r\n        return this.profileLoader.ownerUserProfile;\r\n    }\r\n    /**\r\n     * Gets the user profile for the current user\r\n     */\r\n    get userProfile() {\r\n        return this.profileLoader.userProfile;\r\n    }\r\n    /**\r\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\r\n     *\r\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\r\n     */\r\n    createPersonalSite(interactiveRequest = false) {\r\n        return this.profileLoader.createPersonalSite(interactiveRequest);\r\n    }\r\n    /**\r\n     * Sets the privacy settings for this profile\r\n     *\r\n     * @param share true to make all social data public; false to make all social data private\r\n     */\r\n    shareAllSocialData(share) {\r\n        return this.profileLoader.shareAllSocialData(share);\r\n    }\r\n    /**\r\n     * Resolves user or group using specified query parameters\r\n     *\r\n     * @param queryParams The query parameters used to perform resolve\r\n     */\r\n    clientPeoplePickerResolveUser(queryParams) {\r\n        return this.clientPeoplePickerQuery.clientPeoplePickerResolveUser(queryParams);\r\n    }\r\n    /**\r\n     * Searches for users or groups using specified query parameters\r\n     *\r\n     * @param queryParams The query parameters used to perform search\r\n     */\r\n    clientPeoplePickerSearchUser(queryParams) {\r\n        return this.clientPeoplePickerQuery.clientPeoplePickerSearchUser(queryParams);\r\n    }\r\n}\r\nlet ProfileLoader = ProfileLoader_1 = class ProfileLoader extends SharePointQueryable {\r\n    /**\r\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\r\n     *\r\n     * @param emails The email addresses of the users to provision sites for\r\n     */\r\n    createPersonalSiteEnqueueBulk(emails) {\r\n        return this.clone(ProfileLoader_1, \"createpersonalsiteenqueuebulk\", false).postCore({\r\n            body: jsS({ \"emailIDs\": emails }),\r\n        });\r\n    }\r\n    /**\r\n     * Gets the user profile of the site owner.\r\n     *\r\n     */\r\n    get ownerUserProfile() {\r\n        let q = this.getParent(ProfileLoader_1, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\r\n        if (this.hasBatch) {\r\n            q = q.inBatch(this.batch);\r\n        }\r\n        return q.postCore();\r\n    }\r\n    /**\r\n     * Gets the user profile of the current user.\r\n     *\r\n     */\r\n    get userProfile() {\r\n        return this.clone(ProfileLoader_1, \"getuserprofile\").postCore();\r\n    }\r\n    /**\r\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\r\n     *\r\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\r\n     */\r\n    createPersonalSite(interactiveRequest = false) {\r\n        return this.clone(ProfileLoader_1, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`).postCore();\r\n    }\r\n    /**\r\n     * Sets the privacy settings for this profile\r\n     *\r\n     * @param share true to make all social data public; false to make all social data private.\r\n     */\r\n    shareAllSocialData(share) {\r\n        return this.clone(ProfileLoader_1, `getuserprofile/shareallsocialdata(${share})`).postCore();\r\n    }\r\n};\r\nProfileLoader = ProfileLoader_1 = tslib_1.__decorate([\r\n    defaultPath(\"_api/sp.userprofiles.profileloader.getprofileloader\")\r\n], ProfileLoader);\r\nlet ClientPeoplePickerQuery = ClientPeoplePickerQuery_1 = class ClientPeoplePickerQuery extends SharePointQueryable {\r\n    /**\r\n     * Resolves user or group using specified query parameters\r\n     *\r\n     * @param queryParams The query parameters used to perform resolve\r\n     */\r\n    clientPeoplePickerResolveUser(queryParams) {\r\n        const q = this.clone(ClientPeoplePickerQuery_1, null);\r\n        q.concat(\".clientpeoplepickerresolveuser\");\r\n        return q.postCore({\r\n            body: this.createClientPeoplePickerQueryParametersRequestBody(queryParams),\r\n        })\r\n            .then(res => {\r\n            if (typeof res === \"object\") {\r\n                return res.ClientPeoplePickerResolveUser;\r\n            }\r\n            return res;\r\n        })\r\n            .then(JSON.parse);\r\n    }\r\n    /**\r\n     * Searches for users or groups using specified query parameters\r\n     *\r\n     * @param queryParams The query parameters used to perform search\r\n     */\r\n    clientPeoplePickerSearchUser(queryParams) {\r\n        const q = this.clone(ClientPeoplePickerQuery_1, null);\r\n        q.concat(\".clientpeoplepickersearchuser\");\r\n        return q.postCore({\r\n            body: this.createClientPeoplePickerQueryParametersRequestBody(queryParams),\r\n        })\r\n            .then(res => {\r\n            if (typeof res === \"object\") {\r\n                return res.ClientPeoplePickerSearchUser;\r\n            }\r\n            return res;\r\n        })\r\n            .then(JSON.parse);\r\n    }\r\n    /**\r\n     * Creates ClientPeoplePickerQueryParameters request body\r\n     *\r\n     * @param queryParams The query parameters to create request body\r\n     */\r\n    createClientPeoplePickerQueryParametersRequestBody(queryParams) {\r\n        return jsS({\r\n            \"queryParams\": extend(metadata(\"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\"), queryParams),\r\n        });\r\n    }\r\n};\r\nClientPeoplePickerQuery = ClientPeoplePickerQuery_1 = tslib_1.__decorate([\r\n    defaultPath(\"_api/sp.ui.applicationpages.clientpeoplepickerwebserviceinterface\")\r\n], ClientPeoplePickerQuery);\r\n//# sourceMappingURL=userprofiles.js.map","import * as tslib_1 from \"tslib\";\r\nvar SocialQuery_1, MySocialQuery_1;\r\nimport { SharePointQueryableInstance, defaultPath, } from \"./sharepointqueryable\";\r\nimport { jsS, hOP } from \"@pnp/common\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Exposes social following methods\r\n */\r\nlet SocialQuery = SocialQuery_1 = class SocialQuery extends SharePointQueryableInstance {\r\n    get my() {\r\n        return new MySocialQuery(this);\r\n    }\r\n    /**\r\n     * Gets a URI to a site that lists the current user's followed sites.\r\n     */\r\n    getFollowedSitesUri() {\r\n        return this.clone(SocialQuery_1, \"FollowedSitesUri\").get().then(r => {\r\n            return r.FollowedSitesUri || r;\r\n        });\r\n    }\r\n    /**\r\n     * Gets a URI to a site that lists the current user's followed documents.\r\n     */\r\n    getFollowedDocumentsUri() {\r\n        return this.clone(SocialQuery_1, \"FollowedDocumentsUri\").get().then(r => {\r\n            return r.FollowedDocumentsUri || r;\r\n        });\r\n    }\r\n    /**\r\n     * Makes the current user start following a user, document, site, or tag\r\n     *\r\n     * @param actorInfo The actor to start following\r\n     */\r\n    follow(actorInfo) {\r\n        return this.clone(SocialQuery_1, \"follow\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\r\n    }\r\n    /**\r\n     * Indicates whether the current user is following a specified user, document, site, or tag\r\n     *\r\n     * @param actorInfo The actor to find the following status for\r\n     */\r\n    isFollowed(actorInfo) {\r\n        return this.clone(SocialQuery_1, \"isfollowed\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\r\n    }\r\n    /**\r\n     * Makes the current user stop following a user, document, site, or tag\r\n     *\r\n     * @param actorInfo The actor to stop following\r\n     */\r\n    stopFollowing(actorInfo) {\r\n        return this.clone(SocialQuery_1, \"stopfollowing\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\r\n    }\r\n    /**\r\n     * Creates SocialActorInfo request body\r\n     *\r\n     * @param actorInfo The actor to create request body\r\n     */\r\n    createSocialActorInfoRequestBody(actorInfo) {\r\n        return jsS({\r\n            \"actor\": Object.assign(metadata(\"SP.Social.SocialActorInfo\"), {\r\n                Id: null,\r\n            }, actorInfo),\r\n        });\r\n    }\r\n};\r\nSocialQuery = SocialQuery_1 = tslib_1.__decorate([\r\n    defaultPath(\"_api/social.following\")\r\n], SocialQuery);\r\nexport { SocialQuery };\r\nlet MySocialQuery = MySocialQuery_1 = class MySocialQuery extends SharePointQueryableInstance {\r\n    /**\r\n     * Gets users, documents, sites, and tags that the current user is following.\r\n     *\r\n     * @param types Bitwise set of SocialActorTypes to retrieve\r\n     */\r\n    followed(types) {\r\n        return this.clone(MySocialQuery_1, `followed(types=${types})`).get().then(r => {\r\n            return hOP(r, \"Followed\") ? r.Followed.results : r;\r\n        });\r\n    }\r\n    /**\r\n     * Gets the count of users, documents, sites, and tags that the current user is following.\r\n     *\r\n     * @param types Bitwise set of SocialActorTypes to retrieve\r\n     */\r\n    followedCount(types) {\r\n        return this.clone(MySocialQuery_1, `followedcount(types=${types})`).get().then(r => {\r\n            return r.FollowedCount || r;\r\n        });\r\n    }\r\n    /**\r\n     * Gets the users who are following the current user.\r\n     */\r\n    followers() {\r\n        return this.clone(MySocialQuery_1, \"followers\").get().then(r => {\r\n            return hOP(r, \"Followers\") ? r.Followers.results : r;\r\n        });\r\n    }\r\n    /**\r\n     * Gets users who the current user might want to follow.\r\n     */\r\n    suggestions() {\r\n        return this.clone(MySocialQuery_1, \"suggestions\").get().then(r => {\r\n            return hOP(r, \"Suggestions\") ? r.Suggestions.results : r;\r\n        });\r\n    }\r\n};\r\nMySocialQuery = MySocialQuery_1 = tslib_1.__decorate([\r\n    defaultPath(\"my\")\r\n], MySocialQuery);\r\nexport { MySocialQuery };\r\n/**\r\n * Social actor type\r\n *\r\n */\r\nexport var SocialActorType;\r\n(function (SocialActorType) {\r\n    SocialActorType[SocialActorType[\"User\"] = 0] = \"User\";\r\n    SocialActorType[SocialActorType[\"Document\"] = 1] = \"Document\";\r\n    SocialActorType[SocialActorType[\"Site\"] = 2] = \"Site\";\r\n    SocialActorType[SocialActorType[\"Tag\"] = 3] = \"Tag\";\r\n})(SocialActorType || (SocialActorType = {}));\r\n/**\r\n * Social actor type\r\n *\r\n */\r\n/* tslint:disable:no-bitwise */\r\nexport var SocialActorTypes;\r\n(function (SocialActorTypes) {\r\n    SocialActorTypes[SocialActorTypes[\"None\"] = 0] = \"None\";\r\n    SocialActorTypes[SocialActorTypes[\"User\"] = 1] = \"User\";\r\n    SocialActorTypes[SocialActorTypes[\"Document\"] = 2] = \"Document\";\r\n    SocialActorTypes[SocialActorTypes[\"Site\"] = 4] = \"Site\";\r\n    SocialActorTypes[SocialActorTypes[\"Tag\"] = 8] = \"Tag\";\r\n    /**\r\n     * The set excludes documents and sites that do not have feeds.\r\n     */\r\n    SocialActorTypes[SocialActorTypes[\"ExcludeContentWithoutFeeds\"] = 268435456] = \"ExcludeContentWithoutFeeds\";\r\n    /**\r\n     * The set includes group sites\r\n     */\r\n    SocialActorTypes[SocialActorTypes[\"IncludeGroupsSites\"] = 536870912] = \"IncludeGroupsSites\";\r\n    /**\r\n     * The set includes only items created within the last 24 hours\r\n     */\r\n    SocialActorTypes[SocialActorTypes[\"WithinLast24Hours\"] = 1073741824] = \"WithinLast24Hours\";\r\n})(SocialActorTypes || (SocialActorTypes = {}));\r\n/* tslint:enable */\r\n/**\r\n * Result from following\r\n *\r\n */\r\nexport var SocialFollowResult;\r\n(function (SocialFollowResult) {\r\n    SocialFollowResult[SocialFollowResult[\"Ok\"] = 0] = \"Ok\";\r\n    SocialFollowResult[SocialFollowResult[\"AlreadyFollowing\"] = 1] = \"AlreadyFollowing\";\r\n    SocialFollowResult[SocialFollowResult[\"LimitReached\"] = 2] = \"LimitReached\";\r\n    SocialFollowResult[SocialFollowResult[\"InternalError\"] = 3] = \"InternalError\";\r\n})(SocialFollowResult || (SocialFollowResult = {}));\r\n/**\r\n * Specifies an exception or status code.\r\n */\r\nexport var SocialStatusCode;\r\n(function (SocialStatusCode) {\r\n    /**\r\n     * The operation completed successfully\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"OK\"] = 0] = \"OK\";\r\n    /**\r\n     * The request is invalid.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"InvalidRequest\"] = 1] = \"InvalidRequest\";\r\n    /**\r\n     *  The current user is not authorized to perform the operation.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"AccessDenied\"] = 2] = \"AccessDenied\";\r\n    /**\r\n     * The target of the operation was not found.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"ItemNotFound\"] = 3] = \"ItemNotFound\";\r\n    /**\r\n     * The operation is invalid for the target's current state.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"InvalidOperation\"] = 4] = \"InvalidOperation\";\r\n    /**\r\n     * The operation completed without modifying the target.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"ItemNotModified\"] = 5] = \"ItemNotModified\";\r\n    /**\r\n     * The operation failed because an internal error occurred.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"InternalError\"] = 6] = \"InternalError\";\r\n    /**\r\n     * The operation failed because the server could not access the distributed cache.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"CacheReadError\"] = 7] = \"CacheReadError\";\r\n    /**\r\n     * The operation succeeded but the server could not update the distributed cache.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"CacheUpdateError\"] = 8] = \"CacheUpdateError\";\r\n    /**\r\n     * No personal site exists for the current user, and no further information is available.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"PersonalSiteNotFound\"] = 9] = \"PersonalSiteNotFound\";\r\n    /**\r\n     * No personal site exists for the current user, and a previous attempt to create one failed.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"FailedToCreatePersonalSite\"] = 10] = \"FailedToCreatePersonalSite\";\r\n    /**\r\n     * No personal site exists for the current user, and a previous attempt to create one was not authorized.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"NotAuthorizedToCreatePersonalSite\"] = 11] = \"NotAuthorizedToCreatePersonalSite\";\r\n    /**\r\n     * No personal site exists for the current user, and no attempt should be made to create one.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"CannotCreatePersonalSite\"] = 12] = \"CannotCreatePersonalSite\";\r\n    /**\r\n     * The operation was rejected because an internal limit had been reached.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"LimitReached\"] = 13] = \"LimitReached\";\r\n    /**\r\n     * The operation failed because an error occurred during the processing of the specified attachment.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"AttachmentError\"] = 14] = \"AttachmentError\";\r\n    /**\r\n     * The operation succeeded with recoverable errors; the returned data is incomplete.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"PartialData\"] = 15] = \"PartialData\";\r\n    /**\r\n     * A required SharePoint feature is not enabled.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"FeatureDisabled\"] = 16] = \"FeatureDisabled\";\r\n    /**\r\n     * The site's storage quota has been exceeded.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"StorageQuotaExceeded\"] = 17] = \"StorageQuotaExceeded\";\r\n    /**\r\n     * The operation failed because the server could not access the database.\r\n     */\r\n    SocialStatusCode[SocialStatusCode[\"DatabaseError\"] = 18] = \"DatabaseError\";\r\n})(SocialStatusCode || (SocialStatusCode = {}));\r\n//# sourceMappingURL=social.js.map","import { SharePointQueryable } from \"./sharepointqueryable\";\r\nimport { extend, jsS } from \"@pnp/common\";\r\nimport { File } from \"./files\";\r\nimport { odataUrlFrom } from \"./odata\";\r\nimport { metadata } from \"./utils/metadata\";\r\n/**\r\n * Allows for calling of the static SP.Utilities.Utility methods by supplying the method name\r\n */\r\nexport class UtilityMethod extends SharePointQueryable {\r\n    /**\r\n     * Creates a new instance of the Utility method class\r\n     *\r\n     * @param baseUrl The parent url provider\r\n     * @param methodName The static method name to call on the utility class\r\n     */\r\n    constructor(baseUrl, methodName) {\r\n        super(UtilityMethod.getBaseUrl(baseUrl), `_api/SP.Utilities.Utility.${methodName}`);\r\n    }\r\n    static getBaseUrl(candidate) {\r\n        if (typeof candidate === \"string\") {\r\n            return candidate;\r\n        }\r\n        const c = candidate;\r\n        const url = c.toUrl();\r\n        const index = url.indexOf(\"_api/\");\r\n        if (index < 0) {\r\n            return url;\r\n        }\r\n        return url.substr(0, index);\r\n    }\r\n    excute(props) {\r\n        return this.postCore({\r\n            body: jsS(props),\r\n        });\r\n    }\r\n    /**\r\n     * Sends an email based on the supplied properties\r\n     *\r\n     * @param props The properties of the email to send\r\n     */\r\n    sendEmail(props) {\r\n        const params = {\r\n            properties: extend(metadata(\"SP.Utilities.EmailProperties\"), {\r\n                Body: props.Body,\r\n                From: props.From,\r\n                Subject: props.Subject,\r\n            }),\r\n        };\r\n        if (props.To && props.To.length > 0) {\r\n            params.properties = extend(params.properties, {\r\n                To: { results: props.To },\r\n            });\r\n        }\r\n        if (props.CC && props.CC.length > 0) {\r\n            params.properties = extend(params.properties, {\r\n                CC: { results: props.CC },\r\n            });\r\n        }\r\n        if (props.BCC && props.BCC.length > 0) {\r\n            params.properties = extend(params.properties, {\r\n                BCC: { results: props.BCC },\r\n            });\r\n        }\r\n        if (props.AdditionalHeaders) {\r\n            params.properties = extend(params.properties, {\r\n                AdditionalHeaders: props.AdditionalHeaders,\r\n            });\r\n        }\r\n        return this.clone(UtilityMethod, \"SendEmail\", true).excute(params);\r\n    }\r\n    getCurrentUserEmailAddresses() {\r\n        return this.clone(UtilityMethod, \"GetCurrentUserEmailAddresses\", true).excute({});\r\n    }\r\n    resolvePrincipal(input, scopes, sources, inputIsEmailOnly, addToUserInfoList, matchUserInfoList = false) {\r\n        const params = {\r\n            addToUserInfoList: addToUserInfoList,\r\n            input: input,\r\n            inputIsEmailOnly: inputIsEmailOnly,\r\n            matchUserInfoList: matchUserInfoList,\r\n            scopes: scopes,\r\n            sources: sources,\r\n        };\r\n        return this.clone(UtilityMethod, \"ResolvePrincipalInCurrentContext\", true).excute(params);\r\n    }\r\n    searchPrincipals(input, scopes, sources, groupName, maxCount) {\r\n        const params = {\r\n            groupName: groupName,\r\n            input: input,\r\n            maxCount: maxCount,\r\n            scopes: scopes,\r\n            sources: sources,\r\n        };\r\n        return this.clone(UtilityMethod, \"SearchPrincipalsUsingContextWeb\", true).excute(params);\r\n    }\r\n    createEmailBodyForInvitation(pageAddress) {\r\n        const params = {\r\n            pageAddress: pageAddress,\r\n        };\r\n        return this.clone(UtilityMethod, \"CreateEmailBodyForInvitation\", true).excute(params);\r\n    }\r\n    expandGroupsToPrincipals(inputs, maxCount = 30) {\r\n        const params = {\r\n            inputs: inputs,\r\n            maxCount: maxCount,\r\n        };\r\n        return this.clone(UtilityMethod, \"ExpandGroupsToPrincipals\", true).excute(params);\r\n    }\r\n    createWikiPage(info) {\r\n        return this.clone(UtilityMethod, \"CreateWikiPageInContextWeb\", true).excute({\r\n            parameters: info,\r\n        }).then(r => {\r\n            return {\r\n                data: r,\r\n                file: new File(odataUrlFrom(r)),\r\n            };\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=utilities.js.map","import { Search } from \"./search\";\r\nimport { SearchSuggest } from \"./searchsuggest\";\r\nimport { Site } from \"./site\";\r\nimport { Web } from \"./webs\";\r\nimport { UserProfileQuery } from \"./userprofiles\";\r\nimport { NavigationService } from \"./navigation\";\r\nimport { SocialQuery } from \"./social\";\r\nimport { UtilityMethod } from \"./utilities\";\r\nimport { setup as _setup, } from \"./config/splibconfig\";\r\n/**\r\n * Root of the SharePoint REST module\r\n */\r\nexport class SPRest {\r\n    /**\r\n     * Creates a new instance of the SPRest class\r\n     *\r\n     * @param options Additional options\r\n     * @param baseUrl A string that should form the base part of the url\r\n     */\r\n    constructor(_options = {}, _baseUrl = \"\") {\r\n        this._options = _options;\r\n        this._baseUrl = _baseUrl;\r\n    }\r\n    /**\r\n     * Configures instance with additional options and baseUrl.\r\n     * Provided configuration used by other objects in a chain\r\n     *\r\n     * @param options Additional options\r\n     * @param baseUrl A string that should form the base part of the url\r\n     */\r\n    configure(options, baseUrl = \"\") {\r\n        return new SPRest(options, baseUrl);\r\n    }\r\n    /**\r\n     * Global SharePoint configuration options\r\n     *\r\n     * @param config The SharePoint configuration to apply\r\n     */\r\n    setup(config) {\r\n        _setup(config);\r\n    }\r\n    /**\r\n     * Executes a search against this web context\r\n     *\r\n     * @param query The SearchQuery definition\r\n     */\r\n    searchSuggest(query) {\r\n        let finalQuery;\r\n        if (typeof query === \"string\") {\r\n            finalQuery = { querytext: query };\r\n        }\r\n        else {\r\n            finalQuery = query;\r\n        }\r\n        return this.create(SearchSuggest).execute(finalQuery);\r\n    }\r\n    /**\r\n     * Executes a search against this web context\r\n     *\r\n     * @param query The SearchQuery definition\r\n     */\r\n    search(query) {\r\n        return this.create(Search).execute(query);\r\n    }\r\n    /**\r\n     * Executes the provided search query, caching the results\r\n     *\r\n     * @param query The SearchQuery definition\r\n     * @param options The set of caching options used to store the results\r\n     */\r\n    searchWithCaching(query, options) {\r\n        return this.create(Search).usingCaching(options).execute(query);\r\n    }\r\n    /**\r\n     * Begins a site collection scoped REST request\r\n     *\r\n     */\r\n    get site() {\r\n        return this.create(Site);\r\n    }\r\n    /**\r\n     * Begins a web scoped REST request\r\n     *\r\n     */\r\n    get web() {\r\n        return this.create(Web);\r\n    }\r\n    /**\r\n     * Access to user profile methods\r\n     *\r\n     */\r\n    get profiles() {\r\n        return this.create(UserProfileQuery);\r\n    }\r\n    /**\r\n     * Access to social methods\r\n     */\r\n    get social() {\r\n        return this.create(SocialQuery);\r\n    }\r\n    /**\r\n     * Access to the site collection level navigation service\r\n     */\r\n    get navigation() {\r\n        return new NavigationService();\r\n    }\r\n    /**\r\n     * Creates a new batch object for use with the SharePointQueryable.addToBatch method\r\n     *\r\n     */\r\n    createBatch() {\r\n        return this.web.createBatch();\r\n    }\r\n    /**\r\n     * Static utilities methods from SP.Utilities.Utility\r\n     */\r\n    get utility() {\r\n        return this.create(UtilityMethod, \"\");\r\n    }\r\n    /**\r\n     * Handles creating and configuring the objects returned from this class\r\n     *\r\n     * @param fm The factory method used to create the instance\r\n     * @param path Optional additional path information to pass to the factory method\r\n     */\r\n    create(fm, path) {\r\n        return new fm(this._baseUrl, path).configure(this._options);\r\n    }\r\n}\r\nexport const sp = new SPRest();\r\n//# sourceMappingURL=rest.js.map","import { SPRest, Web, Site, } from \"@pnp/sp\";\r\nimport { isUrlAbsolute, combine, } from \"@pnp/common\";\r\nexport class SPRestAddIn extends SPRest {\r\n    /**\r\n     * Begins a cross-domain, host site scoped REST request, for use in add-in webs\r\n     *\r\n     * @param addInWebUrl The absolute url of the add-in web\r\n     * @param hostWebUrl The absolute url of the host web\r\n     */\r\n    crossDomainSite(addInWebUrl, hostWebUrl) {\r\n        return this._cdImpl(Site, addInWebUrl, hostWebUrl, \"site\");\r\n    }\r\n    /**\r\n     * Begins a cross-domain, host web scoped REST request, for use in add-in webs\r\n     *\r\n     * @param addInWebUrl The absolute url of the add-in web\r\n     * @param hostWebUrl The absolute url of the host web\r\n     */\r\n    crossDomainWeb(addInWebUrl, hostWebUrl) {\r\n        return this._cdImpl(Web, addInWebUrl, hostWebUrl, \"web\");\r\n    }\r\n    /**\r\n     * Implements the creation of cross domain REST urls\r\n     *\r\n     * @param factory The constructor of the object to create Site | Web\r\n     * @param addInWebUrl The absolute url of the add-in web\r\n     * @param hostWebUrl The absolute url of the host web\r\n     * @param urlPart String part to append to the url \"site\" | \"web\"\r\n     */\r\n    _cdImpl(factory, addInWebUrl, hostWebUrl, urlPart) {\r\n        if (!isUrlAbsolute(addInWebUrl)) {\r\n            throw Error(\"The addInWebUrl parameter must be an absolute url.\");\r\n        }\r\n        if (!isUrlAbsolute(hostWebUrl)) {\r\n            throw Error(\"The hostWebUrl parameter must be an absolute url.\");\r\n        }\r\n        const url = combine(addInWebUrl, \"_api/SP.AppContextSite(@target)\");\r\n        const instance = new factory(url, urlPart);\r\n        instance.query.set(\"@target\", \"'\" + encodeURIComponent(hostWebUrl) + \"'\");\r\n        return instance.configure(this._options);\r\n    }\r\n}\r\nexport const sp = new SPRestAddIn();\r\n//# sourceMappingURL=sprestaddin.js.map","import { Logger } from \"@pnp/logging\";\r\nimport { PnPClientStorage, dateAdd, combine, getCtxCallback, getRandomString, getGUID, isFunc, objectDefinedNotNull, isArray, extend, isUrlAbsolute, stringIsNullOrEmpty, getAttrValueFromString, sanitizeGuid, } from \"@pnp/common\";\r\nimport { Settings } from \"@pnp/config-store\";\r\nimport { graph as _graph } from \"@pnp/graph\";\r\nimport { sp as _sp } from \"@pnp/sp-addinhelpers\";\r\nimport { setup as _setup } from \"./config/pnplibconfig\";\r\n/**\r\n * Root class of the Patterns and Practices namespace, provides an entry point to the library\r\n */\r\n/**\r\n * Re-export everything from the dependencies to match the previous pattern\r\n */\r\nexport * from \"@pnp/sp\";\r\nexport * from \"@pnp/graph\";\r\nexport * from \"@pnp/common\";\r\nexport * from \"@pnp/logging\";\r\nexport * from \"@pnp/config-store\";\r\nexport * from \"@pnp/odata\";\r\n/**\r\n * Utility methods\r\n */\r\nexport var util = {\r\n    combine: combine,\r\n    dateAdd: dateAdd,\r\n    extend: extend,\r\n    getAttrValueFromString: getAttrValueFromString,\r\n    getCtxCallback: getCtxCallback,\r\n    getGUID: getGUID,\r\n    getRandomString: getRandomString,\r\n    isArray: isArray,\r\n    isFunc: isFunc,\r\n    isUrlAbsolute: isUrlAbsolute,\r\n    objectDefinedNotNull: objectDefinedNotNull,\r\n    sanitizeGuid: sanitizeGuid,\r\n    stringIsNullOrEmpty: stringIsNullOrEmpty,\r\n};\r\n/**\r\n * Provides access to the SharePoint REST interface\r\n */\r\nexport var sp = _sp;\r\n/**\r\n * Provides access to the Microsoft Graph REST interface\r\n */\r\nexport var graph = _graph;\r\n/**\r\n * Provides access to local and session storage\r\n */\r\nexport var storage = new PnPClientStorage();\r\n/**\r\n * Global configuration instance to which providers can be added\r\n */\r\nexport var config = new Settings();\r\n/**\r\n * Global logging instance to which subscribers can be registered and messages written\r\n */\r\nexport var log = Logger;\r\n/**\r\n * Allows for the configuration of the library\r\n */\r\nexport var setup = _setup;\r\n// /**\r\n//  * Expose a subset of classes from the library for public consumption\r\n//  */\r\n// creating this class instead of directly assigning to default fixes issue #116\r\nvar Def = {\r\n    /**\r\n     * Global configuration instance to which providers can be added\r\n     */\r\n    config: config,\r\n    /**\r\n     * Provides access to the Microsoft Graph REST interface\r\n     */\r\n    graph: graph,\r\n    /**\r\n     * Global logging instance to which subscribers can be registered and messages written\r\n     */\r\n    log: log,\r\n    /**\r\n     * Provides access to local and session storage\r\n     */\r\n    setup: setup,\r\n    /**\r\n     * Provides access to the REST interface\r\n     */\r\n    sp: sp,\r\n    /**\r\n     * Provides access to local and session storage\r\n     */\r\n    storage: storage,\r\n    /**\r\n     * Utility methods\r\n     */\r\n    util: util,\r\n};\r\n/**\r\n * Enables use of the import pnp from syntax\r\n */\r\nexport default Def;\r\n//# sourceMappingURL=pnpjs.js.map","import { RuntimeConfig } from \"@pnp/common\";\r\nexport function setup(config) {\r\n    RuntimeConfig.extend(config);\r\n}\r\n//# sourceMappingURL=pnplibconfig.js.map","export * from \"./src/pnpjs\";\r\nimport pnp from \"./src/pnpjs\";\r\nexport default pnp;\r\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}