{"version":3,"file":"stackblur.min.js","sources":["../src/stackblur.js"],"sourcesContent":["/**\n* StackBlur - a fast almost Gaussian Blur For Canvas\n*\n* In case you find this class useful - especially in commercial projects -\n* I am not totally unhappy for a small donation to my PayPal account\n* mario@quasimondo.de\n*\n* Or support me on flattr:\n* {@link https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript}\n* @module StackBlur\n* @version 0.5\n* @author Mario Klingemann\n* Contact: mario@quasimondo.com\n* Website: {@link http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html}\n* Twitter: @quasimondo\n*\n* @copyright (c) 2010 Mario Klingemann\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst mulTable = [\n    512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512,\n    454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512,\n    482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456,\n    437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512,\n    497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328,\n    320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456,\n    446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335,\n    329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512,\n    505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405,\n    399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328,\n    324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271,\n    268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456,\n    451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388,\n    385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335,\n    332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292,\n    289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\n\nconst shgTable = [\n    9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n    17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n\n/**\n * @param {string|HTMLImageElement} img\n * @param {string|HTMLCanvasElement} canvas\n * @param {Float} radius\n * @param {boolean} blurAlphaChannel\n * @returns {undefined}\n */\nfunction processImage (img, canvas, radius, blurAlphaChannel) {\n    if (typeof img === 'string') {\n        img = document.getElementById(img);\n    }\n    if (!img || !('naturalWidth' in img)) {\n        return;\n    }\n    const w = img.naturalWidth;\n    const h = img.naturalHeight;\n\n    if (typeof canvas === 'string') {\n        canvas = document.getElementById(canvas);\n    }\n    if (!canvas || !('getContext' in canvas)) {\n        return;\n    }\n\n    canvas.style.width = w + 'px';\n    canvas.style.height = h + 'px';\n    canvas.width = w;\n    canvas.height = h;\n\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, w, h);\n    context.drawImage(img, 0, 0);\n\n    if (isNaN(radius) || radius < 1) { return; }\n\n    if (blurAlphaChannel) {\n        processCanvasRGBA(canvas, 0, 0, w, h, radius);\n    } else {\n        processCanvasRGB(canvas, 0, 0, w, h, radius);\n    }\n}\n\n/**\n * @param {string|HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @throws {Error|TypeError}\n * @returns {ImageData} See {@link https://html.spec.whatwg.org/multipage/canvas.html#imagedata}\n */\nfunction getImageDataFromCanvas (canvas, topX, topY, width, height) {\n    if (typeof canvas === 'string') {\n        canvas = document.getElementById(canvas);\n    }\n    if (!canvas || typeof canvas !== 'object' || !('getContext' in canvas)) {\n        throw new TypeError('Expecting canvas with `getContext` method in processCanvasRGB(A) calls!');\n    }\n\n    const context = canvas.getContext('2d');\n\n    try {\n        return context.getImageData(topX, topY, width, height);\n    } catch (e) {\n        throw new Error('unable to access image data: ' + e);\n    }\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {undefined}\n */\nfunction processCanvasRGBA (canvas, topX, topY, width, height, radius) {\n    if (isNaN(radius) || radius < 1) { return; }\n    radius |= 0;\n\n    let imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);\n\n    imageData = processImageDataRGBA(imageData, topX, topY, width, height, radius);\n\n    canvas.getContext('2d').putImageData(imageData, topX, topY);\n}\n\n/**\n * @param {ImageData} imageData\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {ImageData}\n */\nfunction processImageDataRGBA (imageData, topX, topY, width, height, radius) {\n    const pixels = imageData.data;\n\n    let x, y, i, p, yp, yi, yw, rSum, gSum, bSum, aSum,\n        rOutSum, gOutSum, bOutSum, aOutSum,\n        rInSum, gInSum, bInSum, aInSum,\n        pr, pg, pb, pa, rbs;\n\n    const div = radius + radius + 1;\n    // const w4 = width << 2;\n    const widthMinus1 = width - 1;\n    const heightMinus1 = height - 1;\n    const radiusPlus1 = radius + 1;\n    const sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n    const stackStart = new BlurStack();\n    let stack = stackStart;\n    let stackEnd;\n    for (i = 1; i < div; i++) {\n        stack = stack.next = new BlurStack();\n        if (i === radiusPlus1) {\n            stackEnd = stack;\n        }\n    }\n    stack.next = stackStart;\n    let stackIn = null;\n    let stackOut = null;\n\n    yw = yi = 0;\n\n    const mulSum = mulTable[radius];\n    const shgSum = shgTable[radius];\n\n    for (y = 0; y < height; y++) {\n        rInSum = gInSum = bInSum = aInSum = rSum = gSum = bSum = aSum = 0;\n\n        rOutSum = radiusPlus1 * (pr = pixels[yi]);\n        gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n        bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n        aOutSum = radiusPlus1 * (pa = pixels[yi + 3]);\n\n        rSum += sumFactor * pr;\n        gSum += sumFactor * pg;\n        bSum += sumFactor * pb;\n        aSum += sumFactor * pa;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++) {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n\n        for (i = 1; i < radiusPlus1; i++) {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            rSum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n            gSum += (stack.g = (pg = pixels[p + 1])) * rbs;\n            bSum += (stack.b = (pb = pixels[p + 2])) * rbs;\n            aSum += (stack.a = (pa = pixels[p + 3])) * rbs;\n\n            rInSum += pr;\n            gInSum += pg;\n            bInSum += pb;\n            aInSum += pa;\n\n            stack = stack.next;\n        }\n\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++) {\n            pixels[yi + 3] = pa = (aSum * mulSum) >> shgSum;\n            if (pa !== 0) {\n                pa = 255 / pa;\n                pixels[yi] = ((rSum * mulSum) >> shgSum) * pa;\n                pixels[yi + 1] = ((gSum * mulSum) >> shgSum) * pa;\n                pixels[yi + 2] = ((bSum * mulSum) >> shgSum) * pa;\n            } else {\n                pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n            }\n\n            rSum -= rOutSum;\n            gSum -= gOutSum;\n            bSum -= bOutSum;\n            aSum -= aOutSum;\n\n            rOutSum -= stackIn.r;\n            gOutSum -= stackIn.g;\n            bOutSum -= stackIn.b;\n            aOutSum -= stackIn.a;\n\n            p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n            rInSum += (stackIn.r = pixels[p]);\n            gInSum += (stackIn.g = pixels[p + 1]);\n            bInSum += (stackIn.b = pixels[p + 2]);\n            aInSum += (stackIn.a = pixels[p + 3]);\n\n            rSum += rInSum;\n            gSum += gInSum;\n            bSum += bInSum;\n            aSum += aInSum;\n\n            stackIn = stackIn.next;\n\n            rOutSum += (pr = stackOut.r);\n            gOutSum += (pg = stackOut.g);\n            bOutSum += (pb = stackOut.b);\n            aOutSum += (pa = stackOut.a);\n\n            rInSum -= pr;\n            gInSum -= pg;\n            bInSum -= pb;\n            aInSum -= pa;\n\n            stackOut = stackOut.next;\n\n            yi += 4;\n        }\n        yw += width;\n    }\n\n    for (x = 0; x < width; x++) {\n        gInSum = bInSum = aInSum = rInSum = gSum = bSum = aSum = rSum = 0;\n\n        yi = x << 2;\n        rOutSum = radiusPlus1 * (pr = pixels[yi]);\n        gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n        bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n        aOutSum = radiusPlus1 * (pa = pixels[yi + 3]);\n\n        rSum += sumFactor * pr;\n        gSum += sumFactor * pg;\n        bSum += sumFactor * pb;\n        aSum += sumFactor * pa;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++) {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n\n        yp = width;\n\n        for (i = 1; i <= radius; i++) {\n            yi = (yp + x) << 2;\n\n            rSum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n            gSum += (stack.g = (pg = pixels[yi + 1])) * rbs;\n            bSum += (stack.b = (pb = pixels[yi + 2])) * rbs;\n            aSum += (stack.a = (pa = pixels[yi + 3])) * rbs;\n\n            rInSum += pr;\n            gInSum += pg;\n            bInSum += pb;\n            aInSum += pa;\n\n            stack = stack.next;\n\n            if (i < heightMinus1) {\n                yp += width;\n            }\n        }\n\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++) {\n            p = yi << 2;\n            pixels[p + 3] = pa = (aSum * mulSum) >> shgSum;\n            if (pa > 0) {\n                pa = 255 / pa;\n                pixels[p] = ((rSum * mulSum) >> shgSum) * pa;\n                pixels[p + 1] = ((gSum * mulSum) >> shgSum) * pa;\n                pixels[p + 2] = ((bSum * mulSum) >> shgSum) * pa;\n            } else {\n                pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n            }\n\n            rSum -= rOutSum;\n            gSum -= gOutSum;\n            bSum -= bOutSum;\n            aSum -= aOutSum;\n\n            rOutSum -= stackIn.r;\n            gOutSum -= stackIn.g;\n            bOutSum -= stackIn.b;\n            aOutSum -= stackIn.a;\n\n            p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n\n            rSum += (rInSum += (stackIn.r = pixels[p]));\n            gSum += (gInSum += (stackIn.g = pixels[p + 1]));\n            bSum += (bInSum += (stackIn.b = pixels[p + 2]));\n            aSum += (aInSum += (stackIn.a = pixels[p + 3]));\n\n            stackIn = stackIn.next;\n\n            rOutSum += (pr = stackOut.r);\n            gOutSum += (pg = stackOut.g);\n            bOutSum += (pb = stackOut.b);\n            aOutSum += (pa = stackOut.a);\n\n            rInSum -= pr;\n            gInSum -= pg;\n            bInSum -= pb;\n            aInSum -= pa;\n\n            stackOut = stackOut.next;\n\n            yi += width;\n        }\n    }\n    return imageData;\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {undefined}\n */\nfunction processCanvasRGB (canvas, topX, topY, width, height, radius) {\n    if (isNaN(radius) || radius < 1) { return; }\n    radius |= 0;\n\n    let imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);\n    imageData = processImageDataRGB(imageData, topX, topY, width, height, radius);\n\n    canvas.getContext('2d').putImageData(imageData, topX, topY);\n}\n\n/**\n * @param {ImageData} imageData\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {ImageData}\n */\nfunction processImageDataRGB (imageData, topX, topY, width, height, radius) {\n    const pixels = imageData.data;\n\n    let x, y, i, p, yp, yi, yw, rSum, gSum, bSum,\n        rOutSum, gOutSum, bOutSum,\n        rInSum, gInSum, bInSum,\n        pr, pg, pb, rbs;\n\n    const div = radius + radius + 1;\n    // const w4 = width << 2;\n    const widthMinus1 = width - 1;\n    const heightMinus1 = height - 1;\n    const radiusPlus1 = radius + 1;\n    const sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n    const stackStart = new BlurStack();\n    let stack = stackStart;\n    let stackEnd;\n    for (i = 1; i < div; i++) {\n        stack = stack.next = new BlurStack();\n        if (i === radiusPlus1) {\n            stackEnd = stack;\n        }\n    }\n    stack.next = stackStart;\n    let stackIn = null;\n    let stackOut = null;\n\n    yw = yi = 0;\n\n    const mulSum = mulTable[radius];\n    const shgSum = shgTable[radius];\n\n    for (y = 0; y < height; y++) {\n        rInSum = gInSum = bInSum = rSum = gSum = bSum = 0;\n\n        rOutSum = radiusPlus1 * (pr = pixels[yi]);\n        gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n        bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n\n        rSum += sumFactor * pr;\n        gSum += sumFactor * pg;\n        bSum += sumFactor * pb;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++) {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack = stack.next;\n        }\n\n        for (i = 1; i < radiusPlus1; i++) {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            rSum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n            gSum += (stack.g = (pg = pixels[p + 1])) * rbs;\n            bSum += (stack.b = (pb = pixels[p + 2])) * rbs;\n\n            rInSum += pr;\n            gInSum += pg;\n            bInSum += pb;\n\n            stack = stack.next;\n        }\n\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++) {\n            pixels[yi] = (rSum * mulSum) >> shgSum;\n            pixels[yi + 1] = (gSum * mulSum) >> shgSum;\n            pixels[yi + 2] = (bSum * mulSum) >> shgSum;\n\n            rSum -= rOutSum;\n            gSum -= gOutSum;\n            bSum -= bOutSum;\n\n            rOutSum -= stackIn.r;\n            gOutSum -= stackIn.g;\n            bOutSum -= stackIn.b;\n\n            p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n            rInSum += (stackIn.r = pixels[p]);\n            gInSum += (stackIn.g = pixels[p + 1]);\n            bInSum += (stackIn.b = pixels[p + 2]);\n\n            rSum += rInSum;\n            gSum += gInSum;\n            bSum += bInSum;\n\n            stackIn = stackIn.next;\n\n            rOutSum += (pr = stackOut.r);\n            gOutSum += (pg = stackOut.g);\n            bOutSum += (pb = stackOut.b);\n\n            rInSum -= pr;\n            gInSum -= pg;\n            bInSum -= pb;\n\n            stackOut = stackOut.next;\n\n            yi += 4;\n        }\n        yw += width;\n    }\n\n    for (x = 0; x < width; x++) {\n        gInSum = bInSum = rInSum = gSum = bSum = rSum = 0;\n\n        yi = x << 2;\n        rOutSum = radiusPlus1 * (pr = pixels[yi]);\n        gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n        bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n\n        rSum += sumFactor * pr;\n        gSum += sumFactor * pg;\n        bSum += sumFactor * pb;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++) {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack = stack.next;\n        }\n\n        yp = width;\n\n        for (i = 1; i <= radius; i++) {\n            yi = (yp + x) << 2;\n\n            rSum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n            gSum += (stack.g = (pg = pixels[yi + 1])) * rbs;\n            bSum += (stack.b = (pb = pixels[yi + 2])) * rbs;\n\n            rInSum += pr;\n            gInSum += pg;\n            bInSum += pb;\n\n            stack = stack.next;\n\n            if (i < heightMinus1) {\n                yp += width;\n            }\n        }\n\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++) {\n            p = yi << 2;\n            pixels[p] = (rSum * mulSum) >> shgSum;\n            pixels[p + 1] = (gSum * mulSum) >> shgSum;\n            pixels[p + 2] = (bSum * mulSum) >> shgSum;\n\n            rSum -= rOutSum;\n            gSum -= gOutSum;\n            bSum -= bOutSum;\n\n            rOutSum -= stackIn.r;\n            gOutSum -= stackIn.g;\n            bOutSum -= stackIn.b;\n\n            p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n\n            rSum += (rInSum += (stackIn.r = pixels[p]));\n            gSum += (gInSum += (stackIn.g = pixels[p + 1]));\n            bSum += (bInSum += (stackIn.b = pixels[p + 2]));\n\n            stackIn = stackIn.next;\n\n            rOutSum += (pr = stackOut.r);\n            gOutSum += (pg = stackOut.g);\n            bOutSum += (pb = stackOut.b);\n\n            rInSum -= pr;\n            gInSum -= pg;\n            bInSum -= pb;\n\n            stackOut = stackOut.next;\n\n            yi += width;\n        }\n    }\n\n    return imageData;\n}\n\n/**\n *\n */\nexport class BlurStack {\n    constructor () {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n        this.next = null;\n    }\n}\n\nexport {\n    /**\n    * @function module:StackBlur.image\n    * @see module:StackBlur~processImage\n    */\n    processImage as image,\n    /**\n    * @function module:StackBlur.canvasRGBA\n    * @see module:StackBlur~processCanvasRGBA\n    */\n    processCanvasRGBA as canvasRGBA,\n    /**\n    * @function module:StackBlur.canvasRGB\n    * @see module:StackBlur~processCanvasRGB\n    */\n    processCanvasRGB as canvasRGB,\n    /**\n    * @function module:StackBlur.imageDataRGBA\n    * @see module:StackBlur~processImageDataRGBA\n    */\n    processImageDataRGBA as imageDataRGBA,\n    /**\n    * @function module:StackBlur.imageDataRGB\n    * @see module:StackBlur~processImageDataRGB\n    */\n    processImageDataRGB as imageDataRGB\n};\n"],"names":["mulTable","shgTable","getImageDataFromCanvas","canvas","topX","topY","width","height","document","getElementById","TypeError","context","getContext","getImageData","e","Error","processCanvasRGBA","radius","isNaN","imageData","processImageDataRGBA","putImageData","pixels","data","x","y","i","p","yp","yi","yw","rSum","gSum","bSum","aSum","rOutSum","gOutSum","bOutSum","aOutSum","rInSum","gInSum","bInSum","aInSum","pr","pg","pb","pa","rbs","div","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","BlurStack","stackEnd","stack","next","stackIn","stackOut","mulSum","shgSum","r","g","b","a","processCanvasRGB","processImageDataRGB","constructor","img","blurAlphaChannel","w","naturalWidth","h","naturalHeight","style","clearRect","drawImage"],"mappings":"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"}