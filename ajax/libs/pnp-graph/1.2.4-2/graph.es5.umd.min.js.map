{"version":3,"file":"graph.es5.umd.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/types.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/planner.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/teams.ts","../../../../packages/graph/src/onenote.ts","../../../../packages/graph/src/contacts.ts","../../../../packages/graph/src/onedrive.ts","../../../../packages/graph/src/me.ts","../../../../packages/graph/src/users.ts","../../../../packages/graph/src/rest.ts","../../../../packages/graph/src/batch.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { LibraryConfiguration, TypedHash, RuntimeConfig, HttpClientImpl, AdalClient } from \"@pnp/common\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (RuntimeConfig.spfxContext !== undefined) {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    extend,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n    HttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: HttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        const opts = extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface TeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n","import {\n    combine,\n    extend,\n    isUrlAbsolute,\n    FetchOptions,\n    getGUID,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\nimport { GraphEndpoints } from \"./types\";\n\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable<GetType = any> extends ODataQueryable<GraphBatch, GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = combine(urlStr, path);\n        } else {\n            this.extend(baseUrl as GraphQueryable, path);\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combine(\"https://graph.microsoft.com\", url);\n        }\n\n        if (this.query.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        let clone = new factory(this, additionalPath);\n        clone.configure(this._options);\n\n        // TODO:: include batching info in clone\n        if (includeBatch) {\n            clone = clone.inBatch(this._batch);\n        }\n\n        return clone;\n    }\n\n    protected setEndpoint(endpoint: string): this {\n\n        this._url = GraphEndpoints.ensure(this._url, endpoint);\n        return this;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        // TODO:: add batch support\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: () => void (0),\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: /^get$/i.test(verb) && this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection<GetType = any[]> extends GraphQueryable<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this.query.set(\"$top\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this.query.set(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this.query.set(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this.query.set(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance<GetType = any> extends GraphQueryable<GetType> {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n\n/**\n * Decorator used to specify the default path for Queryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"members\")\nexport class Members extends GraphQueryableCollection {\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance { }\n\n@defaultPath(\"owners\")\nexport class Owners extends Members { }\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./planner\";\nimport { Photo } from \"./photos\";\nimport { Team } from \"./teams\";\nimport { GraphEndpoints, TeamProperties } from \"./types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"groups\")\nexport class Groups extends GraphQueryableCollection {\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<any> = {}): Promise<GroupAddResult> {\n\n        let postBody = extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = extend(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get calendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this, \"planner/plans\");\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Gets the team associated with this group, if it exists\n     */\n    public get team(): Team {\n        return new Team(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Creates a Microsoft Team associated with this group\n     * \n     * @param properties Initial properties for the new Team\n     */\n    public createTeam(properties: TeamProperties): Promise<any> {\n\n        return this.clone(Group, \"team\").setEndpoint(GraphEndpoints.Beta).putCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.set(\"startDateTime\", start.toISOString());\n        view.query.set(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\n@defaultPath(\"calendars\")\nexport class Calendars extends GraphQueryableCollection {}\n\nexport class Calendar extends GraphQueryableInstance {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\n@defaultPath(\"events\")\nexport class Events extends GraphQueryableCollection {\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: jsS(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"attachments\")\nexport class Attachments extends GraphQueryableCollection {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: jsS({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\nimport { ConversationThread as IConversationThread, Post as IPost, Recipient as IRecipient } from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\n@defaultPath(\"conversations\")\nexport class Conversations extends GraphQueryableCollection {\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\n@defaultPath(\"threads\")\nexport class Threads extends GraphQueryableCollection {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"posts\")\nexport class Posts extends GraphQueryableCollection {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: jsS(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.set(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport { PlannerPlan as IPlannerPlan, PlannerTask as IPlannerTask, PlannerBucket as IPlannerBucket } from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the planner.get()\nexport interface IPlannerMethods {\n    plans: IPlansMethods;\n    tasks: ITasksMethods;\n    buckets: IBucketsMethods;\n}\n\nexport interface IPlansMethods {\n    getById(id: string): Plan;\n    add(owner: string, title: string): Promise<PlanAddResult>;\n}\n\nexport interface ITasksMethods {\n    getById(id: string): Task;\n    add(planId: string, title: string, assignments?: TypedHash<any>, bucketId?: string): Promise<TaskAddResult>;\n}\n\nexport interface IBucketsMethods {\n    getById(id: string): Bucket;\n    add(name: string, planId: string, orderHint?: string): Promise<BucketAddResult>;\n}\n\n@defaultPath(\"planner\")\nexport class Planner extends GraphQueryableCollection implements IPlannerMethods {\n\n    // Should Only be able to get by id, or else error occur\n    public get plans(): IPlansMethods {\n        return new PlansNoGet(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get tasks(): ITasksMethods {\n        return new TasksNoGet(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get buckets(): IBucketsMethods {\n        return new BucketsNoGet(this);\n    }\n}\n\n@defaultPath(\"plans\")\nexport class Plans extends GraphQueryableCollection { }\n\n@defaultPath(\"plans\")\nexport class PlansNoGet extends Plans implements IPlansMethods {\n\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n\n    /**\n     * Create a new Planner Plan.\n     * \n     * @param owner Id of Group object.\n     * @param title The Title of the Plan.\n     */\n    public add(owner: string, title: string): Promise<PlanAddResult> {\n\n        const postBody = {\n            owner: owner,\n            title: title,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                plan: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\n/**\n * Should not be able to get by Id\n */\n\nexport class Plan extends GraphQueryableInstance {\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n\n    /**\n     * Deletes this Plan\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Plan\n     * \n     * @param properties Set of properties of this Plan to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"tasks\")\nexport class Tasks extends GraphQueryableCollection { }\n\nexport class TasksNoGet extends Tasks implements ITasksMethods {\n    public getById(id: string): Task {\n        return new Task(this, id);\n    }\n\n    /**\n     * Create a new Planner Task.\n     * \n     * @param planId Id of Plan.\n     * @param title The Title of the Task.\n     * @param assignments Assign the task\n     * @param bucketId Id of Bucket\n     */\n    public add(planId: string, title: string, assignments?: TypedHash<any>, bucketId?: string): Promise<TaskAddResult> {\n\n        let postBody = extend({\n            planId: planId,\n            title: title,\n        }, assignments);\n\n        if (bucketId) {\n            postBody = extend(postBody, {\n                bucketId: bucketId,\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                task: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport class Task extends GraphQueryableInstance {\n    /**\n     * Deletes this Task\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Task\n     * \n     * @param properties Set of properties of this Task to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n}\n\n@defaultPath(\"buckets\")\nexport class Buckets extends GraphQueryableCollection { }\n\nexport class BucketsNoGet extends Buckets implements IBucketsMethods {\n\n    /**\n     * Create a new Bucket.\n     * \n     * @param name Name of Bucket object.\n     * @param planId The Id of the Plan.\n     * @param oderHint Hint used to order items of this type in a list view.\n     */\n    public add(name: string, planId: string, orderHint?: string): Promise<BucketAddResult> {\n\n        const postBody = {\n            name: name,\n            orderHint: orderHint ? orderHint : \"\",\n            planId: planId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                bucket: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Bucket {\n        return new Bucket(this, id);\n    }\n}\n\nexport class Bucket extends GraphQueryableInstance {\n    /**\n     * Deletes this Bucket\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Bucket\n     * \n     * @param properties Set of properties of this Bucket to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n}\n\n@defaultPath(\"details\")\nexport class Details extends GraphQueryableCollection {\n    /**\n     * Update the Details of a Task\n     * \n     * @param properties Set of properties of this Details to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport interface BucketAddResult {\n    data: IPlannerBucket;\n    bucket: Bucket;\n}\n\nexport interface PlanAddResult {\n    data: IPlannerPlan;\n    plan: Plan;\n}\n\nexport interface TaskAddResult {\n    data: IPlannerTask;\n    task: Task;\n}\n","import { GraphQueryableInstance, defaultPath } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\n\n@defaultPath(\"photo\")\nexport class Photo extends GraphQueryableInstance {\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { graph } from \"./rest\";\nimport { Group, GroupType, GroupAddResult } from \"./groups\";\nimport { GraphQueryableInstance, defaultPath } from \"./graphqueryable\";\nimport { GraphEndpoints, TeamProperties } from \"./types\";\nimport { ODataParser, ODataDefaultParser } from \"@pnp/odata\";\nimport { FetchOptions, jsS } from \"@pnp/common\";\n\nexport class Teams {\n\n    /**\n     * Creates a new team and associated Group with the given information\n     */\n    public create(name: string, description = \"\", teamProperties: TeamProperties = {}): Promise<TeamCreateResult> {\n\n        const groupProps = description && description.length > 0 ? { description: description } : {};\n\n        return graph.groups.add(name, name, GroupType.Office365, groupProps).then((gar: GroupAddResult) => {\n            return gar.group.createTeam(teamProperties).then(data => {\n                return {\n                    data: data,\n                    group: gar.group,\n                    team: new Team(gar.group),\n                };\n            });\n        });\n    }\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"team\")\nexport class Team extends GraphQueryableInstance<TeamProperties> {\n    /**\n     * Updates this team instance's properties\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TeamProperties): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"\").setEndpoint(GraphEndpoints.Beta).patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = TeamProperties>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.clone(Team, \"\").setEndpoint(GraphEndpoints.Beta).getCore(parser, options);\n    }\n}\n\nexport interface TeamUpdateResult {\n    data: any;\n    team: Team;\n}\n\nexport interface TeamCreateResult {\n    data: any;\n    group: Group;\n    team: Team;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\n\nexport interface OneNoteMethods {\n    notebooks: Notebooks;\n    sections: Sections;\n    pages: Pages;\n}\n\n/**\n * Represents a onenote entity\n */\n@defaultPath(\"onenote\")\nexport class OneNote extends GraphQueryableInstance implements OneNoteMethods {\n\n    public get notebooks(): Notebooks {\n        return new Notebooks(this);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n\n    public get pages(): Pages {\n        return new Pages(this);\n    }\n}\n\n/**\n * Describes a collection of Notebook objects\n *\n */\n@defaultPath(\"notebooks\")\nexport class Notebooks extends GraphQueryableCollection {\n\n    /**\n     * Gets a notebook instance by id\n     * \n     * @param id Notebook id\n     */\n    public getById(id: string): Notebook {\n        return new Notebook(this, id);\n    }\n\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public add(displayName: string): Promise<NotebookAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                notebook: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a notebook instance\n *\n */\nexport class Notebook extends GraphQueryableInstance {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n}\n\n/**\n * Describes a collection of Sections objects\n *\n */\n@defaultPath(\"sections\")\nexport class Sections extends GraphQueryableCollection {\n\n    /**\n     * Gets a section instance by id\n     * \n     * @param id Section id\n     */\n    public getById(id: string): Section {\n        return new Section(this, id);\n    }\n\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public add(displayName: string): Promise<SectionAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                section: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a sections instance\n *\n */\nexport class Section extends GraphQueryableInstance {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes a collection of Pages objects\n *\n */\n@defaultPath(\"pages\")\nexport class Pages extends GraphQueryableCollection { }\n\nexport interface NotebookAddResult {\n    data: any;\n    notebook: Notebook;\n}\n\nexport interface SectionAddResult {\n    data: any;\n    section: Section;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport { Contact as IContact, ContactFolder as IContactFolder, EmailAddress } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"contacts\")\nexport class Contacts extends GraphQueryableCollection {\n\n    public getById(id: string): Contact {\n        return new Contact(this, id);\n    }\n\n     /**\n     * Create a new Contact for the user.\n     * \n     * @param givenName The contact's given name.\n     * @param surName The contact's surname.\n     * @param emailAddresses The contact's email addresses.\n     * @param businessPhones The contact's business phone numbers.\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\n     */\n    public add(givenName: string, surName: string, emailAddresses: EmailAddress[], businessPhones: string[], additionalProperties: TypedHash<any> = {}): Promise<ContactAddResult> {\n\n        const postBody = extend({\n            businessPhones: businessPhones,\n            emailAddresses: emailAddresses,\n            givenName: givenName,\n            surName: surName,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contact: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class Contact extends GraphQueryableInstance {\n    /**\n     * Deletes this contact\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact object\n     * \n     * @param properties Set of properties of this contact to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"contactFolders\")\nexport class ContactFolders extends GraphQueryableCollection {\n\n    public getById(id: string): ContactFolder {\n        return new ContactFolder(this, id);\n    }\n\n    /**\n     * Create a new Contact Folder for the user.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public add(displayName: string, parentFolderId?: string): Promise<ContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contactFolder: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class ContactFolder extends GraphQueryableInstance {\n    /**\n     * Gets the contacts in this contact folder\n     */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n     /**\n     * Gets the contacts in this contact folder\n     */\n    public get childFolders(): ChildFolders {\n        return new ChildFolders(this);\n    }\n\n    /**\n     * Deletes this contact folder\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact folder\n     * \n     * @param properties Set of properties of this contact folder to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"childFolders\")\nexport class ChildFolders extends GraphQueryableInstance {\n\n    public getById(id: string): ContactFolder {\n        return new ContactFolder(this, id);\n    }\n\n    /**\n     * Create a new Child Folder in Contact folder.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public add(displayName: string, parentFolderId?: string): Promise<ContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contactFolder: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport interface ContactFolderAddResult {\n    data: IContactFolder;\n    contactFolder: ContactFolder;\n}\n\nexport interface ContactAddResult {\n    data: IContact;\n    contact: Contact;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { DriveItem as IDriveItem } from \"@microsoft/microsoft-graph-types\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\n\nexport interface IDriveItemsMethods {\n    getById(id: string): DriveItem;\n}\n\n/**\n * Describes a collection of Drive objects\n *\n */\n@defaultPath(\"drives\")\nexport class Drives extends GraphQueryableCollection {\n\n    /**\n     * Gets a Drive instance by id\n     * \n     * @param id Drive id\n     */\n    public getById(id: string): Drive {\n        return new Drive(this, id);\n    }\n}\n\n/**\n * Describes a Drive instance\n *\n */\n@defaultPath(\"drive\")\nexport class Drive extends GraphQueryableInstance {\n\n    public get root(): Root {\n        return new Root(this);\n    }\n\n    public get items(): IDriveItemsMethods {\n        return new DriveItems(this);\n    }\n\n    public get list(): DriveList {\n        return new DriveList(this);\n    }\n\n    public get recent(): Recent {\n        return new Recent(this);\n    }\n\n    public get sharedWithMe(): SharedWithMe {\n        return new SharedWithMe(this);\n    }\n\n}\n\n/**\n * Describes a Root instance\n *\n */\n@defaultPath(\"root\")\nexport class Root extends GraphQueryableInstance {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public search(query: string): DriveSearch {\n        return new DriveSearch(this, `search(q='${query}')`);\n    }\n\n}\n\n/**\n * Describes a collection of Drive Item objects\n *\n */\n@defaultPath(\"items\")\nexport class DriveItems extends GraphQueryableInstance implements IDriveItemsMethods {\n    /**\n     * Gets a Drive Item instance by id\n     * \n     * @param id Drive Item id\n     */\n    public getById(id: string): DriveItem {\n        return new DriveItem(this, id);\n    }\n\n}\n\n/**\n * Describes a Drive Item instance\n *\n */\nexport class DriveItem extends GraphQueryableInstance {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public get thumbnails(): Thumbnails {\n        return new Thumbnails(this);\n    }\n\n    /**\n     * Deletes this Drive Item\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Drive item\n     * \n     * @param properties Set of properties of this Drive Item to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Move the Drive item and optionally update the properties\n     * \n     * @param parentReference Should contain Id of new parent folder\n     * @param properties Optional set of properties of this Drive Item to update\n     */\n    public move(parentReference: TypedHash<any>, properties?: TypedHash<string | number | boolean | string[]>): Promise<void> {\n        let patchBody = extend({\n        }, parentReference);\n\n        if (properties) {\n            patchBody = extend({\n            }, properties);\n        }\n\n        return this.patchCore({\n            body: jsS(patchBody),\n        });\n    }\n}\n\n/**\n * Return a collection of DriveItems in the children relationship of a DriveItem\n *\n */\n@defaultPath(\"children\")\nexport class Children extends GraphQueryableCollection {\n    /**\n    * Create a new folder or DriveItem in a Drive with a specified parent item or path\n    * Currently only Folder or File works\n    * @param name The name of the Drive Item.\n    * @param properties Type of Drive Item to create.\n    * */\n    public add(name: string, driveItemType: IDriveItem): Promise<IDriveItemAddResult> {\n\n        const postBody = extend({\n            name: name,\n        }, driveItemType);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                driveItem: new DriveItem(this, r.id),\n            };\n        });\n    }\n}\n\n@defaultPath(\"list\")\nexport class DriveList extends GraphQueryable { }\n\n@defaultPath(\"recent\")\nexport class Recent extends GraphQueryableInstance { }\n\n@defaultPath(\"sharedWithMe\")\nexport class SharedWithMe extends GraphQueryableInstance { }\n\n@defaultPath(\"search\")\nexport class DriveSearch extends GraphQueryableInstance { }\n\n@defaultPath(\"thumbnails\")\nexport class Thumbnails extends GraphQueryableInstance { }\n\nexport interface IDriveItemAddResult {\n    data: IDriveItem;\n    driveItem: DriveItem;\n}\n","import { GraphQueryableInstance, defaultPath } from \"./graphqueryable\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\nimport { Contacts, ContactFolders } from \"./contacts\";\nimport { Drive, Drives } from \"./onedrive\";\nimport { Tasks } from \"./planner\";\n\n@defaultPath(\"me\")\nexport class Me extends GraphQueryableInstance {\n\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n\n    /**\n    * The Contacts associated with the user\n    */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n    /**\n     * The Contact Folders associated with the user\n     */\n    public get contactFolders(): ContactFolders {\n        return new ContactFolders(this);\n    }\n\n    /**\n  * The default Drive associated with the user\n  */\n    public get drive(): Drive {\n        return new Drive(this);\n    }\n\n    /**\n    * The Drives the user has available\n    */\n    public get drives(): Drives {\n        return new Drives(this);\n    }\n\n    /**\n    * The Tasks the user has available\n    */\n    public get tasks(): Tasks {\n        return new Tasks(this, \"planner/tasks\");\n    }\n\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Contacts, ContactFolders } from \"./contacts\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\nimport { Drive, Drives } from \"./onedrive\";\nimport { Tasks } from \"./planner\";\n\n/**\n * Describes a collection of Users objects\n *\n */\n@defaultPath(\"users\")\nexport class Users extends GraphQueryableCollection {\n    /**\n     * Gets a user from the collection using the specified id\n     * \n     * @param id Id of the user to get from this collection\n     */\n    public getById(id: string): User {\n        return new User(this, id);\n    }\n}\n\n/**\n * Represents a user entity\n */\nexport class User extends GraphQueryableInstance {\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n\n    /**\n    * The Contacts associated with the user\n    */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n    /**\n    * The Contact Folders associated with the user\n    */\n    public get contactFolders(): ContactFolders {\n        return new ContactFolders(this);\n    }\n\n    /**\n    * The default Drive associated with the user\n    */\n    public get drive(): Drive {\n        return new Drive(this);\n    }\n\n    /**\n    * The Drives the user has available\n    */\n    public get drives(): Drives {\n        return new Drives(this);\n    }\n\n    /**\n    * The Tasks the user has available\n    */\n    public get tasks(): Tasks {\n        return new Tasks(this, \"planner/tasks\");\n    }\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nimport { Groups } from \"./groups\";\nimport { Me } from \"./me\";\nimport { Teams } from \"./teams\";\nimport { Users } from \"./users\";\nimport { Planner, IPlannerMethods } from \"./planner\";\n\nexport class GraphRest extends GraphQueryable {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    public get teams(): Teams {\n        return new Teams();\n    }\n\n    public get me(): Me {\n        return new Me(this);\n    }\n\n    public get planner(): IPlannerMethods {\n        return new Planner(this);\n    }\n\n    public get users(): Users {\n        return new Users(this);\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n","import { ODataBatch } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { objectDefinedNotNull, extend, jsS } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/beta/$batch\") {\n        super();\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        const client = new GraphHttpClient();\n\n        const batchRequest: GraphBatchRequest = {\n            requests: this.formatRequests(),\n        };\n\n        const batchOptions = {\n            body: jsS(batchRequest),\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            method: \"POST\",\n        };\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n        // let nextLinkFlag = false;\n\n        return client.fetch(this.batchUrl, batchOptions)\n            .then(r => r.json())\n            .then(this._parseResponse)\n            .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                return parsedResponse.responses.reduce((chain, response, index) => {\n\n                    const request = this.requests[index];\n\n                    if (objectDefinedNotNull(request)) {\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    } else {\n\n                        // do we have a next url? if no this is an error\n                        if (parsedResponse.nextLink) {\n                            throw Error(\"Could not properly parse responses to match requests in batch.\");\n                        }\n\n                        // nextLinkFlag = true;\n                        // keep the chain moving, but don't add anything for this request yet\n                        // here we need to process the next link - so what do we do?\n                        // need to append a .then()\n                        // TODO::\n                        return chain;\n                    }\n\n                }, Promise.resolve());\n            });\n    }\n\n    private formatRequests(): GraphBatchRequestFragment[] {\n\n        return this.requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: reqInfo.url,\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\n\n                headers = extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (reqInfo.options !== undefined) {\n\n                // merge per request headers\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\n                    headers = extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\n\n                    requestFragment = extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private _parseResponse(graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(this.requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(null, {\n                        headers: response.headers,\n                        status: response.status,\n                    });\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n}\n\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","GraphRuntimeConfig","GraphRuntimeConfigImpl","graphPart","RuntimeConfig","get","undefined","headers","fetchClientFactory","spfxContext","AdalClient","fromSPFxContext","Error","_impl","GraphHttpClient","url","options","Headers","mergeHeaders","has","append","opts","extend","fetchRaw","rawHeaders","retry","ctx","_this","fetch","then","response","resolve","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","Promise","retryContext","call","method","GraphEndpoints","endpoint","all","Beta","V1","regex","RegExp","replaces","filter","s","test","map","replace","join","baseUrl","path","_super","urlStr","_parentUrl","_url","combine","tslib_1.__extends","GraphQueryable","factory","o","toUrl","isUrlAbsolute","query","size","char","indexOf","from","v","parentUrl","additionalPath","includeBatch","clone","configure","_options","inBatch","_batch","ensure","verb","parser","pipeline","batch","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","hasBatch","isCached","_useCaching","requestAbsoluteUrl","toUrlAndQuery","requestId","getGUID","ODataQueryable","GraphQueryableCollection","set","_i","selects","expands","orderBy","ascending","split","push","top","toString","num","token","GraphQueryableSearchableCollection","GraphQueryableInstance","defaultPath","args","GroupType","Members","id","Members_1","postCore","body","jsS","@odata.id","Member","Owners","Calendars","Calendar","Events","Event","properties","data","event","getById","patchCore","deleteCore","Attachments","Attachment","name","bytes","@odata.type","contentBytes","Conversations","Conversation","Threads","Thread","Posts","Post","post","info","Senders","remover","Planner","PlansNoGet","TasksNoGet","BucketsNoGet","Plans","Plan","owner","title","postBody","plan","Tasks","Buckets","Details","Task","planId","assignments","bucketId","task","orderHint","bucket","Bucket","Photo","Photo_1","BlobParser","BufferParser","content","Teams","description","teamProperties","groupProps","graph","groups","add","Office365","gar","group","createTeam","team","Team","Team_1","setEndpoint","ODataDefaultParser","getCore","Groups","Group","mailNickname","groupType","additionalProperties","displayName","mailEnabled","securityEnabled","Security","groupTypes","putCore","securityEnabledOnly","start","end","view","toISOString","OneNote","Notebooks","Sections","Pages","Notebook","notebook","Section","section","Contacts","Contact","givenName","surName","emailAddresses","businessPhones","contact","ContactFolders","ContactFolder","parentFolderId","contactFolder","ChildFolders","Drives","Drive","Root","DriveItems","DriveList","Recent","SharedWithMe","Children","DriveSearch","DriveItem","Thumbnails","parentReference","patchBody","driveItemType","driveItem","Me","Users","User","GraphRest","config","batchUrl","GraphBatch","Logger","write","batchId","Date","getTime","requests","client","batchRequest","formatRequests","batchOptions","Accept","Content-Type","json","_parseResponse","parsedResponse","responses","reduce","chain","index","request","objectDefinedNotNull","_","parse","nextLink","reqInfo","requestFragment","graphResponse","parsedResponses","fill","responseId","parseInt","Response","ODataBatch"],"mappings":"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"}