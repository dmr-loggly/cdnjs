{"version":3,"file":"graph.es5.umd.js","sources":["../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/types.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/plans.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/teams.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/onenote.ts","../../../../packages/graph/src/contacts.ts","../../../../packages/graph/src/me.ts","../../../../packages/graph/src/users.ts","../../../../packages/graph/src/rest.ts","../../../../packages/graph/src/batch.ts"],"sourcesContent":["import { LibraryConfiguration, TypedHash, RuntimeConfig, HttpClientImpl, AdalClient } from \"@pnp/common\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (RuntimeConfig.spfxContext !== undefined) {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    extend,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n    HttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: HttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        const opts = extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface TeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n","import {\n    combine,\n    extend,\n    isUrlAbsolute,\n    FetchOptions,\n    getGUID,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\nimport { GraphEndpoints } from \"./types\";\n\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable<GetType = any> extends ODataQueryable<GraphBatch, GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = combine(urlStr, path);\n        } else {\n            this.extend(baseUrl as GraphQueryable, path);\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combine(\"https://graph.microsoft.com\", url);\n        }\n\n        if (this.query.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        let clone = new factory(this, additionalPath);\n        clone.configure(this._options);\n\n        // TODO:: include batching info in clone\n        if (includeBatch) {\n            clone = clone.inBatch(this._batch);\n        }\n\n        return clone;\n    }\n\n    protected setEndpoint(endpoint: string): this {\n\n        this._url = GraphEndpoints.ensure(this._url, endpoint);\n        return this;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        // TODO:: add batch support\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: () => void (0),\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: /^get$/i.test(verb) && this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection<GetType = any[]> extends GraphQueryable<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this.query.set(\"$top\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this.query.set(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this.query.set(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this.query.set(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance<GetType = any> extends GraphQueryable<GetType> {\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\n\nexport class Members extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"members\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance {\n\n}\n\nexport class Owners extends Members {\n    constructor(baseUrl: string | GraphQueryable, path = \"owners\") {\n        super(baseUrl, path);\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\nexport class Calendars extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"calendars\") {\n        super(baseUrl, path);\n    }\n}\n\nexport class Calendar extends GraphQueryableInstance {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\nexport class Events extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"events\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: jsS(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\nexport class Attachments extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"attachments\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: jsS({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\n\nimport { ConversationThread as IConversationThread, Post as IPost, Recipient as IRecipient } from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\nexport class Conversations extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"conversations\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\nexport class Threads extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"threads\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class Posts extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"posts\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: jsS(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.set(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\n\nexport class Plans extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"planner/plans\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a plan from this collection by id\n     * \n     * @param id Plan's id\n     */\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n}\n\nexport class Plan extends GraphQueryableInstance {\n\n\n}\n","import { GraphQueryable, GraphQueryableInstance } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\n\nexport class Photo extends GraphQueryableInstance {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"photo\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import {\n    graph,\n} from \"./rest\";\n\nimport {\n    Group,\n    GroupType,\n    GroupAddResult,\n} from \"./groups\";\n\nimport {\n    GraphQueryable,\n    GraphQueryableInstance,\n} from \"./graphqueryable\";\n\nimport {\n    GraphEndpoints,\n    TeamProperties,\n} from \"./types\";\n\nimport {\n    ODataParser,\n    ODataDefaultParser,\n} from \"@pnp/odata\";\n\nimport {\n    FetchOptions, jsS,\n} from \"@pnp/common\";\n\nexport class Teams {\n\n    /**\n     * Creates a new team and associated Group with the given information\n     */\n    public create(name: string, description = \"\", teamProperties: TeamProperties = {}): Promise<TeamCreateResult> {\n\n        const groupProps = description && description.length > 0 ? { description: description } : {};\n\n        return graph.groups.add(name, name, GroupType.Office365, groupProps).then((gar: GroupAddResult) => {\n            return gar.group.createTeam(teamProperties).then(data => {\n                return {\n                    data: data,\n                    group: gar.group,\n                    team: new Team(gar.group),\n                };\n            });\n        });\n    }\n}\n\n/**\n * Represents a Microsoft Team\n */\nexport class Team extends GraphQueryableInstance<TeamProperties> {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"team\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Updates this team instance's properties\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TeamProperties): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"\").setEndpoint(GraphEndpoints.Beta).patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = TeamProperties>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.clone(Team, \"\").setEndpoint(GraphEndpoints.Beta).getCore(parser, options);\n    }\n}\n\nexport interface TeamUpdateResult {\n    data: any;\n    team: Team;\n}\n\nexport interface TeamCreateResult {\n    data: any;\n    group: Group;\n    team: Team;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./plans\";\nimport { Photo } from \"./photos\";\nimport { Team } from \"./teams\";\nimport { GraphEndpoints, TeamProperties } from \"./types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\nexport class Groups extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"groups\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<any> = {}): Promise<GroupAddResult> {\n\n        let postBody = extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = extend(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get calendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Gets the team associated with this group, if it exists\n     */\n    public get team(): Team {\n        return new Team(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Creates a Microsoft Team associated with this group\n     * \n     * @param properties Initial properties for the new Team\n     */\n    public createTeam(properties: TeamProperties): Promise<any> {\n\n        return this.clone(Group, \"team\").setEndpoint(GraphEndpoints.Beta).putCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.set(\"startDateTime\", start.toISOString());\n        view.query.set(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\n\nexport interface OneNoteMethods {\n    notebooks: Notebooks;\n    sections: Sections;\n    pages: Pages;\n}\n\n/**\n * Represents a onenote entity\n */\nexport class OneNote extends GraphQueryableInstance implements OneNoteMethods {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"onenote\") {\n        super(baseUrl, path);\n    }\n\n    public get notebooks(): Notebooks {\n        return new Notebooks(this);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n\n    public get pages(): Pages {\n        return new Pages(this);\n    }\n}\n\n/**\n * Describes a collection of Notebook objects\n *\n */\nexport class Notebooks extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"notebooks\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a notebook instance by id\n     * \n     * @param id Notebook id\n     */\n    public getById(id: string): Notebook {\n        return new Notebook(this, id);\n    }\n\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public add(displayName: string): Promise<NotebookAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                notebook: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a notebook instance\n *\n */\nexport class Notebook extends GraphQueryableInstance {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n}\n\n/**\n * Describes a collection of Sections objects\n *\n */\nexport class Sections extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"sections\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a section instance by id\n     * \n     * @param id Section id\n     */\n    public getById(id: string): Section {\n        return new Section(this, id);\n    }\n\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public add(displayName: string): Promise<SectionAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                section: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a sections instance\n *\n */\nexport class Section extends GraphQueryableInstance {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes a collection of Pages objects\n *\n */\nexport class Pages extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"pages\") {\n        super(baseUrl, path);\n    }\n}\n\nexport interface NotebookAddResult {\n    data: any;\n    notebook: Notebook;\n}\n\nexport interface SectionAddResult {\n    data: any;\n    section: Section;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport { Contact as IContact, ContactFolder as IContactFolder, EmailAddress } from \"@microsoft/microsoft-graph-types\";\n\nexport class Contacts extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"contacts\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): Contact {\n        return new Contact(this, id);\n    }\n\n     /**\n     * Create a new Contact for the user.\n     * \n     * @param givenName The contact's given name.\n     * @param surName The contact's surname.\n     * @param emailAddresses The contact's email addresses.\n     * @param businessPhones The contact's business phone numbers.\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\n     */\n    public add(givenName: string, surName: string, emailAddresses: EmailAddress[], businessPhones: string[], additionalProperties: TypedHash<any> = {}): Promise<ContactAddResult> {\n\n        const postBody = extend({\n            businessPhones: businessPhones,\n            emailAddresses: emailAddresses,\n            givenName: givenName,\n            surName: surName,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contact: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class Contact extends GraphQueryableInstance {\n    /**\n     * Deletes this contact\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact object\n     * \n     * @param properties Set of properties of this contact to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class ContactFolders extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"contactFolders\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): ContactFolder {\n        return new ContactFolder(this, id);\n    }\n\n    /**\n     * Create a new Contact Folder for the user.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public add(displayName: string, parentFolderId?: string): Promise<ContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contactFolder: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class ContactFolder extends GraphQueryableInstance {\n    /**\n     * Gets the contacts in this contact folder\n     */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n     /**\n     * Gets the contacts in this contact folder\n     */\n    public get childFolders(): ChildFolders {\n        return new ChildFolders(this);\n    }\n\n    /**\n     * Deletes this contact folder\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact folder\n     * \n     * @param properties Set of properties of this contact folder to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class ChildFolders extends GraphQueryableInstance {\n    constructor(baseUrl: string | GraphQueryable, path = \"childFolders\") {\n        super(baseUrl, path);\n    }\n\n    public getById(id: string): ContactFolder {\n        return new ContactFolder(this, id);\n    }\n\n    /**\n     * Create a new Child Folder in Contact folder.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public add(displayName: string, parentFolderId?: string): Promise<ContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contactFolder: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport interface ContactFolderAddResult {\n    data: IContactFolder;\n    contactFolder: ContactFolder;\n}\n\nexport interface ContactAddResult {\n    data: IContact;\n    contact: Contact;\n}\n","import { GraphQueryable, GraphQueryableInstance } from \"./graphqueryable\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\nimport { Contacts, ContactFolders } from \"./contacts\";\n\nexport class Me extends GraphQueryableInstance {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"me\") {\n        super(baseUrl, path);\n    }\n\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n\n    /**\n    * The Contacts associated with the user\n    */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n    /**\n     * The Contact Folders associated with the user\n     */\n    public get contactFolders(): ContactFolders {\n        return new ContactFolders(this);\n    }\n\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection } from \"./graphqueryable\";\nimport { Contacts, ContactFolders } from \"./contacts\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\n\n/**\n * Describes a collection of Users objects\n *\n */\nexport class Users extends GraphQueryableCollection {\n\n    constructor(baseUrl: string | GraphQueryable, path = \"users\") {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Gets a user from the collection using the specified id\n     * \n     * @param id Id of the user to get from this collection\n     */\n    public getById(id: string): User {\n        return new User(this, id);\n    }\n}\n\n/**\n * Represents a user entity\n */\nexport class User extends GraphQueryableInstance {\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n\n    /**\n    * The Contacts associated with the user\n    */\n    public get contacts(): Contacts {\n       return new Contacts(this);\n    }\n\n    /**\n    * The Contact Folders associated with the user\n    */\n    public get contactFolders(): ContactFolders {\n        return new ContactFolders(this);\n    }\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nimport { Groups } from \"./groups\";\nimport { Me } from \"./me\";\nimport { Teams } from \"./teams\";\nimport { Users } from \"./users\";\n\nexport class GraphRest extends GraphQueryable {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    public get teams(): Teams {\n        return new Teams();\n    }\n\n    public get me(): Me {\n        return new Me(this);\n    }\n\n    public get users(): Users {\n        return new Users(this);\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n","import { ODataBatch } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { objectDefinedNotNull, extend, jsS } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/beta/$batch\") {\n        super();\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        const client = new GraphHttpClient();\n\n        const batchRequest: GraphBatchRequest = {\n            requests: this.formatRequests(),\n        };\n\n        const batchOptions = {\n            body: jsS(batchRequest),\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            method: \"POST\",\n        };\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n        // let nextLinkFlag = false;\n\n        return client.fetch(this.batchUrl, batchOptions)\n            .then(r => r.json())\n            .then(this._parseResponse)\n            .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                return parsedResponse.responses.reduce((chain, response, index) => {\n\n                    const request = this.requests[index];\n\n                    if (objectDefinedNotNull(request)) {\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    } else {\n\n                        // do we have a next url? if no this is an error\n                        if (parsedResponse.nextLink) {\n                            throw Error(\"Could not properly parse responses to match requests in batch.\");\n                        }\n\n                        // nextLinkFlag = true;\n                        // keep the chain moving, but don't add anything for this request yet\n                        // here we need to process the next link - so what do we do?\n                        // need to append a .then()\n                        // TODO::\n                        return chain;\n                    }\n\n                }, Promise.resolve());\n            });\n    }\n\n    private formatRequests(): GraphBatchRequestFragment[] {\n\n        return this.requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: reqInfo.url,\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\n\n                headers = extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (reqInfo.options !== undefined) {\n\n                // merge per request headers\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\n                    headers = extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\n\n                    requestFragment = extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private _parseResponse(graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(this.requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(null, {\n                        headers: response.headers,\n                        status: response.status,\n                    });\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n}\n\n"],"names":["RuntimeConfig","AdalClient","mergeHeaders","extend","getCtxCallback","tslib_1.__extends","combine","isUrlAbsolute","getGUID","ODataQueryable","jsS","BlobParser","BufferParser","GroupType","ODataDefaultParser","_setup","Logger","objectDefinedNotNull","ODataBatch"],"mappings":"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"}