{"version":3,"sources":["../node_modules/grunt-browserify/node_modules/browser-pack/_prelude.js","core/FactoryMaker.js","core/events/EventsBase.js","streaming/constants/Constants.js","streaming/metrics/MetricsReporting.js","streaming/metrics/MetricsReportingEvents.js","streaming/metrics/controllers/MetricsCollectionController.js","streaming/metrics/controllers/MetricsController.js","streaming/metrics/controllers/MetricsHandlersController.js","streaming/metrics/controllers/RangeController.js","streaming/metrics/controllers/ReportingController.js","streaming/metrics/metrics/MetricsHandlerFactory.js","streaming/metrics/metrics/handlers/BufferLevelHandler.js","streaming/metrics/metrics/handlers/DVBErrorsHandler.js","streaming/metrics/metrics/handlers/GenericMetricHandler.js","streaming/metrics/metrics/handlers/HttpListHandler.js","streaming/metrics/reporting/ReportingFactory.js","streaming/metrics/reporting/reporters/DVBReporting.js","streaming/metrics/utils/DVBErrorsTranslator.js","streaming/metrics/utils/HandlerHelpers.js","streaming/metrics/utils/ManifestParsing.js","streaming/metrics/utils/MetricSerialiser.js","streaming/metrics/utils/RNG.js","streaming/metrics/vo/DVBErrors.js","streaming/metrics/vo/Metrics.js","streaming/metrics/vo/Range.js","streaming/metrics/vo/Reporting.js","streaming/utils/CustomTimeRanges.js","streaming/utils/SupervisorTools.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","MetricsReporting","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","FactoryMaker","extend","name","childInstance","override","context","instance","getSingletonInstance","className","singletonContexts","obj","setSingletonInstance","push","getFactoryByName","factoriesArray","updateFactory","factory","updateClassFactory","classFactories","getClassFactoryByName","getClassFactory","classConstructor","__dashjs_factory_name","undefined","create","merge","arguments","updateSingletonFactory","singletonFactories","getSingletonFactoryByName","getSingletonFactory","getInstance","args","classInstance","extensionObject","extension","apply","parent","prop","hasOwnProperty","getClassName","EventsBase","events","config","publicOnly","evt","indexOf","Constants","init","STREAM","VIDEO","AUDIO","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","MUXED","IMAGE","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","STPP","TTML","VTT","WVTT","UTF8","SUGGESTED_PRESENTATION_DELAY","SCHEME_ID_URI","START_TIME","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_THROUGHPUT","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","BAD_ARGUMENT_ERROR","MISSING_CONFIG_ERROR","constants","createMetricsReporting","dvbErrorsTranslator","_utilsDVBErrorsTranslator2","eventBus","metricsModel","metricsConstants","_controllersMetricsCollectionController2","getReportingFactory","_reportingReportingFactory2","getMetricsHandlerFactory","_metricsMetricsHandlerFactory2","_MetricsReportingEvents2","MetricsReportingEvents","_EventsBase","_get","Object","getPrototypeOf","prototype","METRICS_INITIALISATION_COMPLETE","BECAME_REPORTING_PLAYER","metricsReportingEvents","MetricsCollectionController","update","error","controllersToRemove","keys","metricsControllers","_utilsManifestParsing2","dashManifestModel","getMetrics","manifest","forEach","m","key","JSON","stringify","splice","controller","_MetricsController2","initialize","c","reset","trigger","resetMetricsControllers","setup","on","MANIFEST_UPDATED","STREAM_TEARDOWN_COMPLETE","off","MetricsController","metricsEntry","rangeController","_RangeController2","mediaElement","Range","reportingController","_ReportingController2","debug","Reporting","metricsHandlersController","_MetricsHandlersController2","metrics","MetricsHandlersController","handle","handlers","handler","handleNewMetric","metric","value","mediaType","split","midx","ms","nextm","metricsHandlerFactory","Events","METRIC_ADDED","METRIC_UPDATED","RangeController","rs","start","starttime","end","duration","ranges","add","useWallClockTime","_useWallClockTime","clear","_utilsCustomTimeRanges2","isEnabled","numRanges","time","Date","getTime","currentTime","ReportingController","reporting","some","reporter","reportingFactory","reporters","report","type","vos","MetricsHandlerFactory","listType","matches","match","keyRegex","knownFactoryProducts","message","register","unregister","BufferLevel","_handlersBufferLevelHandler2","DVBErrors","_handlersDVBErrorsHandler2","HttpList","_handlersHttpListHandler2","PlayList","_handlersGenericMetricHandler2","RepSwitchList","TcpList","BufferLevelHandler","getLowestBufferLevelVO","storedVOs","map","reduce","b","level","intervalCallback","vo","lastReportedTime","basename","rc","n_ms","handlerHelpers","validateN","reconstructFullMetricName","interval","setInterval","clearInterval","BUFFER_LEVEL","_utilsHandlerHelpers2","DVBErrorsHandler","onInitialisationComplete","unused","DVB_ERRORS","GenericMetricHandler","metricName","HttpListHandler","storedVos","requestType","HTTP_REQUEST","ReportingFactory","entry","knownReportingSchemeIdUris","schemeIdUri","moduleName","urn:dvb:dash:reporting:2014","_reportersDVBReporting2","DVBReporting","doGetRequest","url","successCB","failureCB","req","XMLHttpRequest","oncomplete","reqIndex","pendingRequests","status","open","onloadend","onerror","send","Array","isArray","isReportingPlayer","metricSerialiser","serialise","USE_DRAFT_DVB_SPEC","reportingUrl","probability","reportingPlayerStatusDecided","randomNumberGenerator","random","allowPendingRequestsToCompleteOnReset","abort","_utilsMetricSerialiser2","_utilsRNG2","DVBErrorsTranslator","_voDVBErrors2","mpd","mpdurl","originalUrl","terror","metricModel","addDVBErrors","onManifestUpdate","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","onBecameReporter","BECAME_REPORTER","handleHttpMetric","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onMetricEvent","onPlaybackError","reason","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","SERVICE_LOCATION_BLACKLIST_CHANGED","PLAYBACK_ERROR","HandlerHelpers","mn","isNaN","ManifestParsing","getMetricsRangeStartTime","dynamic","range","voPeriods","reportingStartTime","getMpd","presentationStartTime","availabilityStartTime","getRegularPeriods","Metrics_asArray","metricEntry","_voMetrics2","isDynamic","getIsDynamic","Range_asArray","rangeEntry","_voRange2","getDuration","Reporting_asArray","reportingEntry","_voReporting2","MetricSerialiser","pairs","v","isBuiltIn","toString","slice","encodeURIComponent","join","toISOString","Math","round","RNG","crypto","randomNumbers","ArrayType","NUM_RANDOM_NUMBERS","getRandomValues","index","rand","min","max","MAX_VALUE","msCrypto","Uint32Array","pow","BYTES_PER_ELEMENT","ipaddress","SSL_CONNECTION_FAILED_PREFIX","DNS_RESOLUTION_FAILED","HOST_UNREACHABLE","CONNECTION_REFUSED","CORRUPT_MEDIA_ISOBMFF","Metrics","Infinity","CustomTimeRanges","customTimeRangeArray","mergeRanges","remove","rangeIndex1","rangeIndex2","range1","range2","_utilsSupervisorTools","checkInteger","NaN","_coreFactoryMaker2","checkParameterType","parameter","_constantsConstants2","checkRange","checkIsVideoOrAudioType"],"mappings":"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","file":"dash.reporting.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nconst FactoryMaker = (function () {\n\n    let instance;\n    const singletonContexts = [];\n    const singletonFactories = {};\n    const classFactories = {};\n\n    function extend(name, childInstance, override, context) {\n        if (!context[name] && childInstance) {\n            context[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function getFactoryByName(name, factoriesArray) {\n        return factoriesArray[name];\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        if (name in factoriesArray) {\n            factoriesArray[name] = factory;\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor, context, arguments);\n                    }\n                };\n            };\n\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor, context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(classConstructor, context, args) {\n\n        let classInstance;\n        const className = classConstructor.__dashjs_factory_name;\n        const extensionObject = context[className];\n\n        if (extensionObject) {\n\n            let extension = extensionObject.instance;\n\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n\n                classInstance = classConstructor.apply({context}, args);\n                extension = extension.apply({\n                    context,\n                    factory: instance,\n                    parent: classInstance\n                }, args);\n\n                for (const prop in extension) {\n                    if (classInstance.hasOwnProperty(prop)) {\n                        classInstance[prop] = extension[prop];\n                    }\n                }\n\n            } else { //replace parent object completely with new object. Same as dijon.\n\n                return extension.apply({\n                    context,\n                    factory: instance\n                }, args);\n\n            }\n        } else {\n            // Create new instance of the class\n            classInstance = classConstructor.apply({context}, args);\n        }\n\n        // Add getClassName function to class instance prototype (used by Debug)\n        classInstance.getClassName = function () {return className;};\n\n        return classInstance;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Constants declaration\n * @class\n * @ignore\n */\nclass Constants {\n\n    init () {\n        this.STREAM = 'stream';\n        this.VIDEO = 'video';\n        this.AUDIO = 'audio';\n        this.TEXT = 'text';\n        this.FRAGMENTED_TEXT = 'fragmentedText';\n        this.EMBEDDED_TEXT = 'embeddedText';\n        this.MUXED = 'muxed';\n        this.IMAGE = 'image';\n        this.LOCATION = 'Location';\n        this.INITIALIZE = 'initialize';\n        this.TEXT_SHOWING = 'showing';\n        this.TEXT_HIDDEN = 'hidden';\n        this.CC1 = 'CC1';\n        this.CC3 = 'CC3';\n        this.STPP = 'stpp';\n        this.TTML = 'ttml';\n        this.VTT = 'vtt';\n        this.WVTT = 'wvtt';\n        this.UTF8 = 'utf-8';\n        this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';\n        this.SCHEME_ID_URI = 'schemeIdUri';\n        this.START_TIME = 'starttime';\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\n        this.ABR_STRATEGY_BOLA = 'abrBola';\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\n        this.MOVING_AVERAGE_EWMA = 'ewma';\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new Constants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\nimport MetricsReportingEvents from './MetricsReportingEvents';\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\nimport ReportingFactory from './reporting/ReportingFactory';\n\nfunction MetricsReporting() {\n\n    let context = this.context;\n    let instance;\n\n    let dvbErrorsTranslator;\n\n    /**\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\n     * @param {Object} config - dependancies from owner\n     * @return {MetricsCollectionController} Metrics Collection Controller\n     */\n    function createMetricsReporting(config) {\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\n            eventBus: config.eventBus,\n            metricsModel: config.metricsModel,\n            metricsConstants: config.metricsConstants,\n            events: config.events\n        });\n\n        return MetricsCollectionController(context).create(config);\n    }\n\n    /**\n     * Get the ReportingFactory to allow new reporters to be registered\n     * @return {ReportingFactory} Reporting Factory\n     */\n    function getReportingFactory() {\n        return ReportingFactory(context).getInstance();\n    }\n\n    /**\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\n     */\n    function getMetricsHandlerFactory() {\n        return MetricsHandlerFactory(context).getInstance();\n    }\n\n    instance = {\n        createMetricsReporting:     createMetricsReporting,\n        getReportingFactory:        getReportingFactory,\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\n    };\n\n    return instance;\n}\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nconst factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */\nfactory.events = MetricsReportingEvents;\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n\nclass MetricsReportingEvents extends EventsBase {\n    constructor () {\n        super();\n\n        this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';\n        this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';\n    }\n}\n\nlet metricsReportingEvents = new MetricsReportingEvents();\nexport default metricsReportingEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction MetricsCollectionController(config) {\n\n    config = config || {};\n    let metricsControllers = {};\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            dashManifestModel: config.dashManifestModel,\n            constants: config.constants\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    let controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\n        );\n    }\n\n    function resetMetricsControllers() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n        eventBus.on(events.MANIFEST_UPDATED, update);\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    function reset() {\n        eventBus.off(events.MANIFEST_UPDATED, update);\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    setup();\n\n    return {\n        reset: reset\n    };\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport RangeController from './RangeController';\nimport ReportingController from './ReportingController';\nimport MetricsHandlersController from './MetricsHandlersController';\n\nfunction MetricsController(config) {\n\n    config = config || {};\n    let metricsHandlersController,\n        reportingController,\n        rangeController,\n        instance;\n\n    let context = this.context;\n\n    function initialize(metricsEntry) {\n        try {\n            rangeController = RangeController(context).create({\n                mediaElement: config.mediaElement\n            });\n\n            rangeController.initialize(metricsEntry.Range);\n\n            reportingController = ReportingController(context).create({\n                debug: config.debug,\n                metricsConstants: config.metricsConstants\n            });\n\n            reportingController.initialize(metricsEntry.Reporting, rangeController);\n\n            metricsHandlersController = MetricsHandlersController(context).create({\n                debug: config.debug,\n                eventBus: config.eventBus,\n                metricsConstants: config.metricsConstants,\n                events: config.events\n            });\n\n            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\n        } catch (e) {\n            reset();\n            throw e;\n        }\n    }\n\n    function reset() {\n        if (metricsHandlersController) {\n            metricsHandlersController.reset();\n        }\n\n        if (reportingController) {\n            reportingController.reset();\n        }\n\n        if (rangeController) {\n            rangeController.reset();\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsController.__dashjs_factory_name = 'MetricsController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\n\nfunction MetricsHandlersController(config) {\n\n    config = config || {};\n    let handlers = [];\n\n    let instance;\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const Events = config.events;\n\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\n        debug: config.debug,\n        eventBus: config.eventBus,\n        metricsConstants: config.metricsConstants\n    });\n\n    function handle(e) {\n        handlers.forEach(handler => {\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\n        });\n    }\n\n    function initialize(metrics, reportingController) {\n        metrics.split(',').forEach(\n            (m, midx, ms) => {\n                let handler;\n\n                // there is a bug in ISO23009-1 where the metrics attribute\n                // is a comma-separated list but HttpList key can contain a\n                // comma enclosed by ().\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\n                    let nextm = ms[midx + 1];\n\n                    if (nextm &&\n                            (nextm.indexOf('(') === -1) &&\n                            (nextm.indexOf(')') !== -1)) {\n                        m += ',' + nextm;\n\n                        // delete the next metric so forEach does not visit.\n                        delete ms[midx + 1];\n                    }\n                }\n\n                handler = metricsHandlerFactory.create(\n                    m,\n                    reportingController\n                );\n\n                if (handler) {\n                    handlers.push(handler);\n                }\n            }\n        );\n\n        eventBus.on(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.on(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.off(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n\n        handlers.forEach(handler => handler.reset());\n\n        handlers = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\n\nfunction RangeController(config) {\n\n    config = config || {};\n    let useWallClockTime = false;\n    let context = this.context;\n    let instance,\n        ranges;\n\n    let mediaElement = config.mediaElement;\n\n    function initialize(rs) {\n        if (rs && rs.length) {\n            rs.forEach(r => {\n                let start = r.starttime;\n                let end = start + r.duration;\n\n                ranges.add(start, end);\n            });\n\n            useWallClockTime = !!rs[0]._useWallClockTime;\n        }\n    }\n\n    function reset() {\n        ranges.clear();\n    }\n\n    function setup() {\n        ranges = CustomTimeRanges(context).create();\n    }\n\n    function isEnabled() {\n        let numRanges = ranges.length;\n        let time;\n\n        if (!numRanges) {\n            return true;\n        }\n\n        // When not present, DASH Metrics reporting is requested\n        // for the whole duration of the content.\n        time = useWallClockTime ?\n                (new Date().getTime() / 1000) :\n                mediaElement.currentTime;\n\n        for (let i = 0; i < numRanges; i += 1) {\n            let start = ranges.start(i);\n            let end = ranges.end(i);\n\n            if ((start <= time) && (time < end)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        isEnabled:  isEnabled\n    };\n\n    setup();\n\n    return instance;\n}\n\nRangeController.__dashjs_factory_name = 'RangeController';\nexport default dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport ReportingFactory from '../reporting/ReportingFactory';\n\nfunction ReportingController(config) {\n\n    let reporters = [];\n    let instance;\n\n    const reportingFactory = ReportingFactory(this.context).getInstance(config);\n\n    function initialize(reporting, rangeController) {\n        // \"if multiple Reporting elements are present, it is expected that\n        // the client processes one of the recognized reporting schemes.\"\n        // to ignore this, and support multiple Reporting per Metric,\n        // simply change the 'some' below to 'forEach'\n        reporting.some(r => {\n            let reporter = reportingFactory.create(r, rangeController);\n\n            if (reporter) {\n                reporters.push(reporter);\n                return true;\n            }\n        });\n    }\n\n    function reset() {\n        reporters.forEach(r => r.reset());\n        reporters = [];\n    }\n\n    function report(type, vos) {\n        reporters.forEach(r => r.report(type, vos));\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        report:     report\n    };\n\n    return instance;\n}\n\nReportingController.__dashjs_factory_name = 'ReportingController';\nexport default dashjs.FactoryMaker.getClassFactory(ReportingController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BufferLevel from './handlers/BufferLevelHandler';\nimport DVBErrors from './handlers/DVBErrorsHandler';\nimport HttpList from './handlers/HttpListHandler';\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\n\nfunction MetricsHandlerFactory(config) {\n\n    config = config || {};\n    let instance;\n    const debug = config.debug;\n\n    // group 1: key, [group 3: n [, group 5: type]]\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\n\n    const context = this.context;\n    let knownFactoryProducts = {\n        BufferLevel:    BufferLevel,\n        DVBErrors:      DVBErrors,\n        HttpList:       HttpList,\n        PlayList:       GenericMetricHandler,\n        RepSwitchList:  GenericMetricHandler,\n        TcpList:        GenericMetricHandler\n    };\n\n    function create(listType, reportingController) {\n        var matches = listType.match(keyRegex);\n        var handler;\n\n        if (!matches) {\n            return;\n        }\n\n        try {\n            handler = knownFactoryProducts[matches[1]](context).create({\n                eventBus: config.eventBus,\n                metricsConstants: config.metricsConstants\n            });\n\n            handler.initialize(\n                matches[1],\n                reportingController,\n                matches[3],\n                matches[5]\n            );\n        } catch (e) {\n            handler = null;\n            debug.error(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\n        }\n\n        return handler;\n    }\n\n    function register(key, handler) {\n        knownFactoryProducts[key] = handler;\n    }\n\n    function unregister(key) {\n        delete knownFactoryProducts[key];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        let vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === metricsConstants.BUFFER_LEVEL) {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\n\nfunction DVBErrorsHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController;\n\n    let eventBus = config.eventBus;\n    const metricsConstants = config.metricsConstants;\n\n    function onInitialisationComplete() {\n        // we only want to report this once per call to initialize\n        eventBus.off(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n            onInitialisationComplete,\n            this\n        );\n\n        // Note: A Player becoming a reporting Player is itself\n        // something which is recorded by the DVBErrors metric.\n        eventBus.trigger(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER\n        );\n    }\n\n    function initialize(unused, rc) {\n        if (rc) {\n            reportingController = rc;\n\n            eventBus.on(\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n                onInitialisationComplete,\n                this\n            );\n        }\n    }\n\n    function reset() {\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricsConstants.DVB_ERRORS) {\n            if (reportingController) {\n                reportingController.report(metric, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction GenericMetricHandler() {\n\n    let instance,\n        metricName,\n        reportingController;\n\n    function initialize(name, rc) {\n        metricName = name;\n        reportingController = rc;\n    }\n\n    function reset() {\n        reportingController = null;\n        metricName = undefined;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricName) {\n            if (reportingController) {\n                reportingController.report(metricName, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nGenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';\nexport default dashjs.FactoryMaker.getClassFactory(GenericMetricHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction HttpListHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        type,\n        name,\n        interval;\n\n    let storedVos = [];\n\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\n\n    const metricsConstants = config.metricsConstants;\n\n    function intervalCallback() {\n        var vos = storedVos;\n\n        if (vos.length) {\n            if (reportingController) {\n                reportingController.report(name, vos);\n            }\n        }\n\n        storedVos = [];\n    }\n\n    function initialize(basename, rc, n_ms, requestType) {\n        if (rc) {\n\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n\n            reportingController = rc;\n\n            if (requestType && requestType.length) {\n                type = requestType;\n            }\n\n            name = handlerHelpers.reconstructFullMetricName(\n                basename,\n                n_ms,\n                requestType\n            );\n\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = null;\n        type = null;\n        storedVos = [];\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        if (metric === metricsConstants.HTTP_REQUEST) {\n            if (!type || (type === vo.type)) {\n                storedVos.push(vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\nexport default dashjs.FactoryMaker.getClassFactory(HttpListHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBReporting from './reporters/DVBReporting';\n\nfunction ReportingFactory(config) {\n    config = config || {};\n\n    const knownReportingSchemeIdUris = {\n        'urn:dvb:dash:reporting:2014': DVBReporting\n    };\n\n    const context = this.context;\n    const debug = config.debug;\n    const metricsConstants = config.metricsConstants;\n\n    let instance;\n\n    function create(entry, rangeController) {\n        let reporting;\n\n        try {\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({\n                metricsConstants: metricsConstants\n            });\n\n            reporting.initialize(entry, rangeController);\n        } catch (e) {\n            reporting = null;\n            debug.error(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\n        }\n\n        return reporting;\n    }\n\n    function register(schemeIdUri, moduleName) {\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\n    }\n\n    function unregister(schemeIdUri) {\n        delete knownReportingSchemeIdUris[schemeIdUri];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\nexport default dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricSerialiser from '../../utils/MetricSerialiser';\nimport RNG from '../../utils/RNG';\n\nfunction DVBReporting(config) {\n    config = config || {};\n    let instance;\n\n    let context = this.context;\n    let metricSerialiser = MetricSerialiser(context).getInstance();\n    let randomNumberGenerator = RNG(context).getInstance();\n\n    let USE_DRAFT_DVB_SPEC = true;\n    let isReportingPlayer = false;\n    let reportingPlayerStatusDecided = false;\n    let reportingUrl = null;\n    let rangeController = null;\n    let allowPendingRequestsToCompleteOnReset = true;\n    let pendingRequests = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function doGetRequest(url, successCB, failureCB) {\n        let req = new XMLHttpRequest();\n        const oncomplete = function () {\n            let reqIndex = pendingRequests.indexOf(req);\n\n            if (reqIndex === -1) {\n                return;\n            } else {\n                pendingRequests.splice(reqIndex, 1);\n            }\n\n            if ((req.status >= 200) && (req.status < 300)) {\n                if (successCB) {\n                    successCB();\n                }\n            } else {\n                if (failureCB) {\n                    failureCB();\n                }\n            }\n        };\n\n        pendingRequests.push(req);\n\n        try {\n            req.open('GET', url);\n            req.onloadend = oncomplete;\n            req.onerror = oncomplete;\n            req.send();\n        } catch (e) {\n            req.onerror();\n        }\n    }\n\n    function report(type, vos) {\n        if (!Array.isArray(vos)) {\n            vos = [vos];\n        }\n\n        // If the Player is not a reporting Player, then the Player shall\n        // not report any errors.\n        // ... In addition to any time restrictions specified by a Range\n        // element within the Metrics element.\n        if (isReportingPlayer && rangeController.isEnabled()) {\n\n            // This reporting mechanism operates by creating one HTTP GET\n            // request for every entry in the top level list of the metric.\n            vos.forEach(function (vo) {\n                let url = metricSerialiser.serialise(vo);\n\n                // this has been proposed for errata\n                if (USE_DRAFT_DVB_SPEC && (type !== metricsConstants.DVB_ERRORS)) {\n                    url = `metricname=${type}&${url}`;\n                }\n\n                // Take the value of the @reportingUrl attribute, append a\n                // question mark ('?') character and then append the string\n                // created in the previous step.\n                url = `${reportingUrl}?${url}`;\n\n                // Make an HTTP GET request to the URL contained within the\n                // string created in the previous step.\n                doGetRequest(url, null, function () {\n                    // If the Player is unable to make the report, for\n                    // example because the @reportingUrl is invalid, the\n                    // host cannot be reached, or an HTTP status code other\n                    // than one in the 200 series is received, the Player\n                    // shall cease being a reporting Player for the\n                    // duration of the MPD.\n                    isReportingPlayer = false;\n                });\n            });\n        }\n    }\n\n    function initialize(entry, rc) {\n        let probability;\n\n        rangeController = rc;\n\n        reportingUrl = entry['dvb:reportingUrl'];\n\n        // If a required attribute is missing, the Reporting descriptor may\n        // be ignored by the Player\n        if (!reportingUrl) {\n            throw new Error(\n                'required parameter missing (dvb:reportingUrl)'\n            );\n        }\n\n        // A Player's status, as a reporting Player or not, shall remain\n        // static for the duration of the MPD, regardless of MPD updates.\n        // (i.e. only calling reset (or failure) changes this state)\n        if (!reportingPlayerStatusDecided) {\n            // NOTE: DVB spec has a typo where it incorrectly references the\n            // priority attribute, which should be probability\n            probability = entry['dvb:probability'] || entry['dvb:priority'] || 0;\n            // If the @priority attribute is set to 1000, it shall be a reporting Player.\n            // If the @priority attribute is missing, the Player shall not be a reporting Player.\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\n            // reporting Player, such that the probability of being one is @probability/1000.\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\n                isReportingPlayer = true;\n            }\n\n            reportingPlayerStatusDecided = true;\n        }\n    }\n\n    function reset() {\n        if (!allowPendingRequestsToCompleteOnReset) {\n            pendingRequests.forEach(req => req.abort());\n            pendingRequests = [];\n        }\n\n        reportingPlayerStatusDecided = false;\n        isReportingPlayer = false;\n        reportingUrl = null;\n        rangeController = null;\n    }\n\n    instance = {\n        report:     report,\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\nexport default dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrors from '../vo/DVBErrors';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction DVBErrorsTranslator(config) {\n\n    config = config || {};\n    let instance;\n    let eventBus = config.eventBus;\n    let metricModel = config.metricsModel;\n    let mpd;\n\n    const metricsConstants = config.metricsConstants;\n    //MediaPlayerEvents have been added to Events in MediaPlayer class\n    const Events = config.events;\n\n    function report(vo) {\n        let o = new DVBErrors();\n\n        if (!mpd) {\n            return;\n        }\n\n        for (const key in vo) {\n            if (vo.hasOwnProperty(key)) {\n                o[key] = vo[key];\n            }\n        }\n\n        if (!o.mpdurl) {\n            o.mpdurl = mpd.originalUrl || mpd.url;\n        }\n\n        if (!o.terror) {\n            o.terror = new Date();\n        }\n\n        metricModel.addDVBErrors(o);\n    }\n\n    function onManifestUpdate(e) {\n        if (e.error) {\n            return;\n        }\n\n        mpd = e.manifest;\n    }\n\n    function onServiceLocationChanged(e) {\n        report({\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\n            servicelocation:    e.entry\n        });\n    }\n\n    function onBecameReporter() {\n        report({\n            errorcode: DVBErrors.BECAME_REPORTER\n        });\n    }\n\n    function handleHttpMetric(vo) {\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\n                (vo.responsecode >= 400) || // HTTP error status code\n                (vo.responsecode < 100) ||  // unknown status codes\n                (vo.responsecode >= 600)) { // unknown status codes\n            report({\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\n                url:                vo.url,\n                terror:             vo.tresponse,\n                servicelocation:    vo._serviceLocation\n            });\n        }\n    }\n\n    function onMetricEvent(e) {\n        switch (e.metric) {\n        case metricsConstants.HTTP_REQUEST:\n            handleHttpMetric(e.value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    function onPlaybackError(e) {\n        let reason = e.error ? e.error.code : 0;\n        let errorcode;\n\n        switch (reason) {\n            case MediaError.MEDIA_ERR_NETWORK:\n                errorcode = DVBErrors.CONNECTION_ERROR;\n                break;\n            case MediaError.MEDIA_ERR_DECODE:\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\n                break;\n            default:\n                return;\n        }\n\n        report({\n            errorcode: errorcode\n        });\n    }\n\n    function initialise() {\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.on(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.on(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.off(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.off(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    instance = {\n        initialise: initialise,\n        reset:      reset\n    };\n\n    initialise();\n\n    return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexport default dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction HandlerHelpers() {\n    return {\n        reconstructFullMetricName: function (key, n, type) {\n            let mn = key;\n\n            if (n) {\n                mn += '(' + n;\n\n                if (type && type.length) {\n                    mn += ',' + type;\n                }\n\n                mn += ')';\n            }\n\n            return mn;\n        },\n\n        validateN: function (n_ms) {\n            if (!n_ms) {\n                throw new Error('missing n');\n            }\n\n            if (isNaN(n_ms)) {\n                throw new Error('n is NaN');\n            }\n\n            // n is a positive integer is defined to refer to the metric\n            // in which the buffer level is recorded every n ms.\n            if (n_ms < 0) {\n                throw new Error('n must be positive');\n            }\n\n            return n_ms;\n        }\n    };\n}\n\nHandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';\nexport default dashjs.FactoryMaker.getSingletonFactory(HandlerHelpers); /* jshint ignore:line */\n","import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\n\nfunction ManifestParsing (config) {\n    config = config || {};\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n    const constants = config.constants;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        var mpd = dashManifestModel.getMpd(manifest);\n        var voPeriods;\n        var presentationStartTime = 0;\n        var reportingStartTime;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = this.getRegularPeriods(mpd);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        var metrics = [];\n\n        if (manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = dashManifestModel.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = dashManifestModel.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        for (const prop in reporting) {\n                            if (reporting.hasOwnProperty(prop)) {\n                                reportingEntry[prop] = reporting[prop];\n                            }\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction MetricSerialiser() {\n\n    // For each entry in the top level list within the metric (in the case\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\n    // described in clause 10.8.4) the Player shall:\n    function serialise(metric) {\n        let pairs = [];\n        let obj = [];\n        let key,\n            value;\n\n        // Take each (key, value) pair from the metric entry and create a\n        // string consisting of the name of the key, followed by an equals\n        // ('=') character, followed by the string representation of the\n        // value. The string representation of the value is created based\n        // on the type of the value following the instructions in Table 22.\n        for (key in metric) {\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\n                value = metric[key];\n\n                // we want to ensure that keys still end up in the report\n                // even if there is no value\n                if ((value === undefined) || (value === null)) {\n                    value = '';\n                }\n\n                // DVB A168 10.12.4 Table 22\n                if (Array.isArray(value)) {\n                    // if trace or similar is null, do not include in output\n                    if (!value.length) {\n                        continue;\n                    }\n\n                    obj = [];\n\n                    value.forEach(function (v) {\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\n\n                        obj.push(isBuiltIn ? v : serialise(v));\n                    });\n\n                    value = obj.map(encodeURIComponent).join(',');\n                } else if (typeof value === 'string') {\n                    value = encodeURIComponent(value);\n                } else if (value instanceof Date) {\n                    value = value.toISOString();\n                } else if (typeof value === 'number') {\n                    value = Math.round(value);\n                }\n\n                pairs.push(key + '=' + value);\n            }\n        }\n\n        // Concatenate the strings created in the previous step with an\n        // ampersand ('&') character between each one.\n        return pairs.join('&');\n    }\n\n    return {\n        serialise: serialise\n    };\n}\n\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction RNG() {\n\n    // check whether secure random numbers are available. if not, revert to\n    // using Math.random\n    let crypto = window.crypto || window.msCrypto;\n\n    // could just as easily use any other array type by changing line below\n    let ArrayType = Uint32Array;\n    let MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;\n\n    // currently there is only one client for this code, and that only uses\n    // a single random number per initialisation. may want to increase this\n    // number if more consumers in the future\n    let NUM_RANDOM_NUMBERS = 10;\n\n    let randomNumbers,\n        index,\n        instance;\n\n    function initialise() {\n        if (crypto) {\n            if (!randomNumbers) {\n                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\n            }\n            crypto.getRandomValues(randomNumbers);\n            index = 0;\n        }\n    }\n\n    function rand(min, max) {\n        let r;\n\n        if (!min) {\n            min = 0;\n        }\n\n        if (!max) {\n            max = 1;\n        }\n\n        if (crypto) {\n            if (index === randomNumbers.length) {\n                initialise();\n            }\n\n            r = randomNumbers[index] / MAX_VALUE;\n            index += 1;\n        } else {\n            r = Math.random();\n        }\n\n        return (r * (max - min)) + min;\n    }\n\n    instance = {\n        random: rand\n    };\n\n    initialise();\n\n    return instance;\n}\n\nRNG.__dashjs_factory_name = 'RNG';\nexport default dashjs.FactoryMaker.getSingletonFactory(RNG); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DVBErrors {\n    constructor() {\n        this.mpdurl = null;\n        // String - Absolute URL from which the MPD was originally\n        // retrieved (MPD updates will not change this value).\n\n        this.errorcode = null;\n        // String - The value of errorcode depends upon the type\n        // of error being reported. For an error listed in the\n        // ErrorType column below the value is as described in the\n        // Value column.\n        //\n        // ErrorType                                            Value\n        // ---------                                            -----\n        // HTTP error status code                               HTTP status code\n        // Unknown HTTP status code                             HTTP status code\n        // SSL connection failed                                \"SSL\" followed by SSL alert value\n        // DNS resolution failed                                \"C00\"\n        // Host unreachable                                     \"C01\"\n        // Connection refused                                   \"C02\"\n        // Connection error – Not otherwise specified           \"C03\"\n        // Corrupt media – ISO BMFF container cannot be parsed  \"M00\"\n        // Corrupt media – Not otherwise specified              \"M01\"\n        // Changing Base URL in use due to errors               \"F00\"\n        // Becoming an error reporting Player                   \"S00\"\n\n        this.terror = null;\n        // Real-Time - Date and time at which error occurred in UTC,\n        // formatted as a combined date and time according to ISO 8601.\n\n        this.url = null;\n        // String - Absolute URL from which data was being requested\n        // when this error occurred. If the error report is in relation\n        // to corrupt media or changing BaseURL, this may be a null\n        // string if the URL from which the media was obtained or\n        // which led to the change of BaseURL is no longer known.\n\n        this.ipaddress = null;\n        // String - IP Address which the host name in \"url\" resolved to.\n        // If the error report is in relation to corrupt media or\n        // changing BaseURL, this may be a null string if the URL\n        // from which the media was obtained or which led to the\n        // change of BaseURL is no longer known.\n\n        this.servicelocation = null;\n        // String - The value of the serviceLocation field in the\n        // BaseURL being used. In the event of this report indicating\n        // a change of BaseURL this is the value from the BaseURL\n        // being moved from.\n    }\n}\n\nDVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';\nDVBErrors.DNS_RESOLUTION_FAILED =        'C00';\nDVBErrors.HOST_UNREACHABLE =             'C01';\nDVBErrors.CONNECTION_REFUSED =           'C02';\nDVBErrors.CONNECTION_ERROR =             'C03';\nDVBErrors.CORRUPT_MEDIA_ISOBMFF =        'M00';\nDVBErrors.CORRUPT_MEDIA_OTHER =          'M01';\nDVBErrors.BASE_URL_CHANGED =             'F00';\nDVBErrors.BECAME_REPORTER =              'S00';\n\nexport default DVBErrors;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Metrics {\n    constructor() {\n\n        this.metrics = '';\n        this.Range = [];\n        this.Reporting = [];\n    }\n}\n\nexport default Metrics;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Range {\n    constructor() {\n\n        // as defined in ISO23009-1\n        this.starttime = 0;\n        this.duration = Infinity;\n\n        // for internal use\n        this._useWallClockTime = false;\n    }\n}\n\nexport default Range;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Reporting {\n    constructor() {\n        // Reporting is a DescriptorType and doesn't have any additional fields\n        this.schemeIdUri = '';\n        this.value = '';\n    }\n}\n\nexport default Reporting;\n","/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\nimport FactoryMaker from '../../core/FactoryMaker';\nimport { checkInteger } from '../utils/SupervisorTools';\n\nfunction CustomTimeRanges(/*config*/) {\n    let customTimeRangeArray = [];\n    let length = 0;\n\n    function add(start, end) {\n        let i = 0;\n\n        for (i = 0; (i < this.customTimeRangeArray.length) && (start > this.customTimeRangeArray[i].start); i++);\n\n        this.customTimeRangeArray.splice(i, 0, {start: start,end: end});\n\n        for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {\n            if (this.mergeRanges(i,i + 1)) {\n                i--;\n            }\n        }\n        this.length = this.customTimeRangeArray.length;\n    }\n\n    function clear() {\n        this.customTimeRangeArray = [];\n        this.length = 0;\n    }\n\n    function remove(start, end) {\n        for (let i = 0; i < this.customTimeRangeArray.length; i++) {\n            if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {\n                //      |--------------Range i-------|\n                //|---------------Range to remove ---------------|\n                //    or\n                //|--------------Range i-------|\n                //|--------------Range to remove ---------------|\n                //    or\n                //                 |--------------Range i-------|\n                //|--------------Range to remove ---------------|\n                this.customTimeRangeArray.splice(i,1);\n                i--;\n\n            } else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\n                //|-----------------Range i----------------|\n                //        |-------Range to remove -----|\n                this.customTimeRangeArray.splice(i + 1, 0, {start: end,end: this.customTimeRangeArray[i].end});\n                this.customTimeRangeArray[i].end = start;\n                break;\n            } else if ( start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {\n                //|-----------Range i----------|\n                //                    |---------Range to remove --------|\n                //    or\n                //|-----------------Range i----------------|\n                //            |-------Range to remove -----|\n                this.customTimeRangeArray[i].end = start;\n            } else if ( end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\n                //                     |-----------Range i----------|\n                //|---------Range to remove --------|\n                //            or\n                //|-----------------Range i----------------|\n                //|-------Range to remove -----|\n                this.customTimeRangeArray[i].start = end;\n            }\n        }\n\n        this.length = this.customTimeRangeArray.length;\n    }\n\n    function mergeRanges(rangeIndex1, rangeIndex2) {\n        let range1 = this.customTimeRangeArray[rangeIndex1];\n        let range2 = this.customTimeRangeArray[rangeIndex2];\n\n        if (range1.start <=  range2.start && range2.start <= range1.end && range1.end <= range2.end) {\n            //|-----------Range1----------|\n            //                    |-----------Range2----------|\n            range1.end = range2.end;\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {\n            //                |-----------Range1----------|\n            //|-----------Range2----------|\n            range1.start = range2.start;\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {\n            //      |--------Range1-------|\n            //|---------------Range2--------------|\n            this.customTimeRangeArray.splice(rangeIndex1,1);\n            return true;\n        } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {\n            //|-----------------Range1--------------|\n            //        |-----------Range2----------|\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n        }\n        return false;\n    }\n\n    function start(index) {\n        checkInteger(index);\n\n        if (index >= this.customTimeRangeArray.length || index < 0) {\n            return NaN;\n        }\n\n        return this.customTimeRangeArray[index].start;\n    }\n\n    function end(index) {\n        checkInteger(index);\n\n        if (index >= this.customTimeRangeArray.length || index < 0) {\n            return NaN;\n        }\n\n        return this.customTimeRangeArray[index].end;\n    }\n\n    return {\n        customTimeRangeArray: customTimeRangeArray,\n        length: length,\n        add: add,\n        clear: clear,\n        remove: remove,\n        mergeRanges: mergeRanges,\n        start: start,\n        end: end\n    };\n}\nCustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';\nexport default FactoryMaker.getClassFactory(CustomTimeRanges);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\n\nexport function checkParameterType(parameter, type) {\n    if (typeof parameter !== type) {\n        throw Constants.BAD_ARGUMENT_ERROR;\n    }\n}\n\nexport function checkInteger(parameter) {\n    const isInt = parameter !== null && !isNaN(parameter) && (parameter % 1 === 0);\n\n    if (!isInt) {\n        throw Constants.BAD_ARGUMENT_ERROR + ' : argument is not an integer';\n    }\n}\n\nexport function checkRange(parameter, min, max) {\n    if (parameter < min || parameter > max) {\n        throw Constants.BAD_ARGUMENT_ERROR + ' : argument out of range';\n    }\n}\n\nexport function checkIsVideoOrAudioType(type) {\n    if (typeof type !== 'string' || (type !== Constants.AUDIO && type !== Constants.VIDEO)) {\n        throw Constants.BAD_ARGUMENT_ERROR;\n    }\n}"]}