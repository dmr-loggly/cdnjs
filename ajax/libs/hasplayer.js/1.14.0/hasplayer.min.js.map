{"version":3,"sources":["lib/objectiron.js","lib/xml2json.js","lib/fingerprint/fp_browser.js","lib/fingerprint/fp_os.js","js/streaming/MediaPlayer.js","js/streaming/AbrController.js","js/streaming/BufferController.js","js/streaming/BufferExtensions.js","js/streaming/Capabilities.js","js/streaming/Config.js","js/streaming/Context.js","js/streaming/ContextManager.js","js/streaming/Debug.js","js/streaming/DebugController.js","js/streaming/ErrorHandler.js","js/streaming/EventBus.js","js/streaming/EventController.js","js/streaming/FragmentController.js","js/streaming/FragmentLoader.js","js/streaming/FragmentModel.js","js/streaming/ManifestLoader.js","js/streaming/ManifestUpdater.js","js/streaming/ManifestModel.js","js/streaming/MediaSourceExtensions.js","js/streaming/MetricsExtensions.js","js/streaming/MetricsModel.js","js/streaming/Mp4Processor.js","js/streaming/Notifier.js","js/streaming/Parser.js","js/streaming/SourceBufferExtensions.js","js/streaming/Stream.js","js/streaming/StreamController.js","js/streaming/TokenAuthentication.js","js/streaming/URIQueryAndFragmentModel.js","js/streaming/VideoModel.js","js/streaming/VideoModelExtensions.js","js/streaming/XHRLoader.js","js/streaming/captioning/TextController.js","js/streaming/captioning/TextSourceBuffer.js","js/streaming/captioning/TextTrackExtensions.js","js/streaming/captioning/TextTTMLXMLMP4SourceBuffer.js","js/streaming/captioning/TTMLParser.js","js/streaming/captioning/TTMLRenderer.js","js/streaming/captioning/VTTParser.js","js/streaming/rules/AbandonRequestsRule.js","js/streaming/rules/BaseRulesCollection.js","js/streaming/rules/DownloadRatioRule.js","js/streaming/rules/DroppedFramesRule.js","js/streaming/rules/InsufficientBufferRule.js","js/streaming/rules/LimitSwitchesRule.js","js/streaming/rules/SwitchRequest.js","js/streaming/protection/ProtectionModel.js","js/streaming/vo/Error.js","js/streaming/vo/Event.js","js/streaming/vo/MetricsList.js","js/streaming/vo/Mp4Track.js","js/streaming/vo/SegmentRequest.js","js/streaming/vo/URIFragmentData.js","js/streaming/vo/metrics/BufferedSwitch.js","js/streaming/vo/metrics/BufferLevel.js","js/streaming/vo/metrics/Condition.js","js/streaming/vo/metrics/DroppedFrames.js","js/streaming/vo/metrics/DVRInfo.js","js/streaming/vo/metrics/HTTPRequest.js","js/streaming/vo/metrics/ManifestUpdate.js","js/streaming/vo/metrics/PlaybackQuality.js","js/streaming/vo/metrics/PlayList.js","js/streaming/vo/metrics/RepresentationSwitch.js","js/streaming/vo/metrics/Session.js","js/streaming/vo/metrics/State.js","js/streaming/vo/metrics/TCPConnection.js","js/streaming/vo/metrics/VideoResolution.js","js/dash/Dash.js","js/dash/BaseURLExtensions.js","js/dash/DashContext.js","js/dash/DashHandler.js","js/dash/DashManifestExtensions.js","js/dash/DashMetricsExtensions.js","js/dash/DashParser.js","js/dash/FragmentExtensions.js","js/dash/TimelineConverter.js","js/dash/vo/AdaptationSet.js","js/dash/vo/Event.js","js/dash/vo/EventStream.js","js/dash/vo/Mpd.js","js/dash/vo/Period.js","js/dash/vo/Representation.js","js/dash/vo/Segment.js","js/hls/Hls.js","js/hls/HlsStream.js","js/mss/Mss.js","js/utils/CopyMethods.js","js/utils/DOMParser.js","js/utils/Encoding.js","js/utils/ObjectIron.js","js/streaming/protection/CommonEncryption.js","js/streaming/protection/ProtectionController.js","js/streaming/protection/ProtectionExtensions.js","js/streaming/protection/ProtectionModel_01b.js","js/streaming/protection/ProtectionModel_3Feb2014.js","js/streaming/protection/ProtectionModel_21Jan2015.js","js/streaming/protection/drm/KeySystem.js","js/streaming/protection/drm/KeySystem_Access.js","js/streaming/protection/drm/KeySystem_ClearKey.js","js/streaming/protection/drm/KeySystem_PlayReady.js","js/streaming/protection/drm/KeySystem_Widevine.js","js/streaming/protection/servers/ClearKey.js","js/streaming/protection/servers/DRMToday.js","js/streaming/protection/servers/LicenseServer.js","js/streaming/protection/servers/PlayReady.js","js/streaming/protection/servers/Widevine.js","js/streaming/protection/vo/ClearKeyKeySet.js","js/streaming/protection/vo/KeyError.js","js/streaming/protection/vo/KeyMessage.js","js/streaming/protection/vo/KeyPair.js","js/streaming/protection/vo/KeySystemAccess.js","js/streaming/protection/vo/KeySystemConfiguration.js","js/streaming/protection/vo/LicenseRequestComplete.js","js/streaming/protection/vo/MediaCapability.js","js/streaming/protection/vo/NeedKey.js","js/streaming/protection/vo/ProtectionData.js","js/streaming/protection/vo/SessionToken.js","js/hls/AES128Decrypter.js","js/hls/HlsDemux.js","js/hls/HlsFragmentController.js","js/hls/HlsHandler.js","js/hls/HlsParser.js","js/mss/MssParser.js","js/mss/MssHandler.js","js/mss/MssFragmentController.js","js/mss/MssFragmentInfoController.js","lib/base64.js","lib/Math.js","lib/dijon.js","lib/long.js","lib/q.js","lib/mp4lib/mp4lib.js","lib/mp4lib/mp4lib-fields.js","lib/mp4lib/mp4lib-boxes.js","lib/mpegts/mpegts.js","lib/mpegts/psi.js","lib/mpegts/aac.js","lib/mpegts/adaptationField.js","lib/mpegts/binary.js","lib/mpegts/h264.js","lib/mpegts/pat.js","lib/mpegts/pes.js","lib/mpegts/pmt.js","lib/mpegts/pts.js","lib/mpegts/ts.js"],"names":["ObjectIron","map","lookup","i","len","length","isRoot","push","name","mergeValues","parentItem","childItem","hasOwnProperty","mapProperties","properties","parent","child","property","parentValue","childValue","merge","mergeFunction","mapItem","obj","node","v","len2","array","childNode","item","children","isArray","performMapping","source","pi","pp","indexOf","run","X2JS","matchers","attrPrefix","ignoreRoot","getNodeLocalName","nodeLocalName","localName","baseName","nodeName","getNodePrefix","prefix","escapeXmlChars","str","replace","unescapeXmlChars","parseDOMChildren","nodeType","DOMNodeTypes","DOCUMENT_NODE","result","firstChild","childNodes","COMMENT_NODE","childName","ELEMENT_NODE","Object","__cnt","nodeChildren","cidx","Array","tmpObj","aridx","aidx","attributes","attr","value2","value","m","ml","matchobj","test","call","this","converter","nodePrefix","__prefix","__text","escapeMode","__cdata","toString","TEXT_NODE","CDATA_SECTION_NODE","nodeValue","startTag","jsonObj","element","attrList","closed","resultStr","attrName","attrVal","substr","endTag","elementName","endsWith","suffix","jsonXmlSpecialElem","jsonObjField","Function","jsonXmlElemCount","elementsCnt","it","parseJSONAttributes","ait","parseJSONTextAttrs","jsonTxtObj","parseJSONTextObject","parseJSONArray","jsonArrRoot","jsonArrObj","arIdx","parseJSONObject","subObj","undefined","subObjElementsCnt","parseXmlString","xmlDocStr","xmlDoc","window","DOMParser","parseFromString","getElementsByTagName","Error","e","xml2json","xml_str2json","json2xml_str","json2xml","getVersion","enabled","fingerprint_browser","userAgent","version","navigator","toLowerCase","Number","RegExp","$1","err","fingerprint_os","platform","bits","MediaPlayer","videoModel","GIT_TAG","BUILD_DATE","context","di","Context","system","dijon","System","initialized","debugController","videoBitrates","audioBitrates","videoQualityChanged","audioQualityChanged","error","warning","defaultAudioLang","defaultSubtitleLang","subtitlesEnabled","initialQuality","video","audio","streamController","resetting","playing","autoPlay","scheduleWhilePaused","isSafari","plugins","_isPlayerInitialized","_isVideoModelInitialized","getElement","_isSourceInitialized","_play","plugin","pluginsInitDefer","pluginsLoadDefer","protocol","hasMediaSourceExtension","errHandler","sendError","dependencies","ErrorHandler","prototype","CAPABILITY_ERR_MEDIASOURCE","deferInit","promise","Q","all","then","deferLoad","defer","load","resolve","bind","metricsModel","addSession","url","loop","debug","log","getVersionFull","getBuildDate","JSON","stringify","getObject","setVideoModel","setAutoPlay","setDefaultAudioLang","setDefaultSubtitleLang","enableSubtitles","mapValue","mapOutlet","_isReady","_doAutoPlay","_dispatchBitrateEvent","type","event","document","createEvent","initCustomEvent","streamType","bitrate","switchedQuality","representationId","time","getCurrentTime","width","height","dispatchEvent","_metricAdded","data","metric","metricsExt","getBitratesForType","stream","lto","to","getVideoWidthForRepresentation","getVideoHeightForRepresentation","mediaStartTime","mt","level","state","current","_onError","reset","_onWarning","_cleanStreamTab","streamTab","idToRemove","splice","_detectPlayBitrateChange","currentTime","currentSwitch","getPlaybackRate","_onTimeupdate","_connectEvents","addEventListener","_handleKeyPressedEvent","altKey","ctrlKey","shiftKey","keyCode","console","getName","_resetAndPlay","reason","teardownComplete","StreamController","eventList","ENAME_TEARDOWN_COMPLETE","subscribe","_toMediaPlayerTrack","track","_track","id","lang","subType","_getTracksFromType","_type","TRACKS_TYPE","AUDIO","getAudioTracks","TEXT","getSubtitleTracks","_getSelectedTrackFromType","getSelectedAudioTrack","getSelectedSubtitleTrack","_selectTrackFromType","setAudioTrack","setSubtitleTrack","_isEqual","prop1","prop2","_isSameTrack","track1","track2","_parseLoadArguments","arguments","params","protData","_getDVRInfoMetric","metrics","getReadOnlyMetricsFor","getCurrentDVRInfo","injectInto","notifier","eventBus","abrController","config","VERSION","getVersionDashJS","init","setElement","listener","useCapture","PUBLIC_EVENTS","listen","removeEventListener","unlisten","getVideoModel","getDebug","getMetricsExt","setConfig","setParams","setDebug","setLevel","getAutoPlay","setInitialQualityFor","getQualityFor","setQualityFor","getAutoSwitchQuality","getAutoSwitchBitrate","setAutoSwitchQuality","setAutoSwitchBitrate","getScheduleWhilePaused","setScheduleWhilePaused","language","getDefaultAudioLang","getDefaultSubtitleLang","ABR.keepBandwidthCondition","warn","apply","play","seek","range","liveDelay","isLive","getDVRWindowRange","getLiveDelay","start","end","getDuration","setCurrentTime","pause","stop","refreshManifest","POSITIVE_INFINITY","getPosition","dvrInfo","getDVRWindowSize","getDVRSeekOffset","val","getVideoBitrates","slice","getMetricsFor","getTrickModeSpeed","setTrickModeSpeed","speed","getError","getWarning","getTracks","_tracks","tracks","selectTrack","selectedTrack","getSelectedTrack","isSubtitlesEnabled","enableSubtitleExternDisplay","TextTrackExtensions.displayModeExtern","getTTMLRenderingDiv","attachTTMLRenderingDiv","div","setTTMLRenderingDiv","getMute","setMute","getVolume","setVolume","getTerminalId","browser","os","addPlugin","destroy","removePlugin","constructor","protection","servers","utils","models","modules","vo","rules","o","manifestUrlUpdate","metricAdded","metricChanged","cueEnter","cueExit","play_bitrate","download_bitrate","bufferLevel_updated","state_changed","Capabilities","supportsMediaSource","hasMediaKeysExtension","supportsMediaKeys","AbrController","autoSwitchBitrate","autoSwitchDic","qualityDict","qualityMaxDict","confidenceDict","playerState","getInternalAutoSwitch","setInternalAutoSwitch","getInternalQuality","setInternalQuality","getInternalConfidence","setInternalConfidence","getRulesRequestQuality","req","max","self","autoSwitch","quality","confidence","newQuality","SwitchRequest","NO_CHANGE","newConfidence","qualityMax","results","values","abrRulesCollection","getRules","BaseRulesCollection","QUALITY_SWITCH_RULES","checkIndex","STRONG","WEAK","DEFAULT","priority","Math","min","manifestExt","getRepresentationCount","info","getQualityBoundaries","bitrates","qualityMin","getParamFor","bandwidthMin","bandwidthMax","count","isVideo","isAudio","getIsVideo","getIsAudio","getPlaybackQuality","previousQuality","switchUpIncrementally","qualityBoundaries","getAutoSwitchFor","setAutoSwitchFor","isMinQuality","setPlayerState","BANDWIDTH_SAFETY","BufferController","availableRepresentations","_currentRepresentation","mediaSource","minBufferTime","minBufferTimeAtStartup","bufferToKeep","bufferTimeout","bufferStateTimeout","ready","started","waitingForBuffer","initialPlayback","initializationData","seeking","seekTarget","dataChanged","trackChanged","overrideBuffer","currentBufferedQuality","currentDownloadQuality","stalled","isDynamic","isBufferingCompleted","deferredRejectedDataAppend","periodInfo","fragmentsToLoad","fragmentModel","bufferLevel","isQuotaExceeded","rejectedBytes","appendingRejectedData","buffer","trickModeEnabled","trickModePreviousQuality","trickModePreviousAutoSwitch","trickModeForward","playListMetrics","playListTraceMetrics","playListTraceMetricsClosed","inbandEventFound","htmlVideoState","htmlVideoTime","deferredFragmentBuffered","segmentDownloadErrorCount","segmentRequestOnError","currentSequenceNumber","playlistRefreshTimeout","segmentDuration","NaN","isWebKit","isFirefox","sendRequest","isRunning","fragmentController","onBufferControllerStateChange","clearPlayListTraceMetrics","endTime","stopreason","duration","startTime","getTime","setStalled","stallStream","startPlayback","checkIfSufficientBuffer","doStart","Date","PlayList","Trace","USER_REQUEST_STOP_REASON","addPlayList","INITIAL_PLAY_START_REASON","mimeType","addState","clearExecutedRequests","doSeek","doStop","when","doSeeked","clearTimeout","abortRequestsForModel","getRepresentationForQuality","onBytesLoadingStart","request","onBytesLoaded","response","sequenceNumber","isInitializationRequest","onInitializationLoaded","onMediaLoaded","initData","process","appendToBuffer","loadNextFragment","signalSegmentBuffered","message","INTERNAL_ERROR","events","eventStreamAdaption","getEventStreamForAdaptationSet","getData","eventStreamRepresentation","getEventStreamForRepresentation","chunkAborted","chunkMissingCount","handleInbandEvents","eventController","addInbandEvents","deleteInbandEvents","removeBuffer","timestampOffset","getSegmentTimestampOffset","addBufferedSwitch","deferred","currentVideoTime","appendPlayListTrace","hasData","hasEnoughSpaceToAppend","sourceBufferExt","append","getWorkingTime","debugBufferRange","notify","MEDIA_ERR_APPEND_SOURCEBUFFER","code","DOM_ERR_QUOTA_EXCEEDED","ranges","getLevel","INFO","getAllRanges","ctsOffset","timescale","fragment","mp4lib","deserialize","moov","getBoxByType","moof","traf","trun","samples_table","sample_composition_time_offset","adaptionSetInbandEvents","representationInbandEvents","identifier","size","inbandEvents","expTwo","pow","expThree","segmentStarttime","isNaN","eventStreams","concat","schemeIdUri","String","fromCharCode","eventBox","arrIndex","j","presentationTimeDelta","messageData","presentationTime","Dash","Event","eventStream","l","modData","Uint8Array","subarray","fragmentDuration","startClearing","removedTime","removeEnd","getExecutedRequestForTime","floor","removedTimeValue","setTimeout","removeStart","buffered","abort","remove","removeExecutedRequestsBeforeTime","cancelPendingRequestsForModel","ex","sendWarning","MEDIA_ERR_REMOVE_SOURCEBUFFER","onBytesError","aborted","bufferFragment","DOWNLOAD_ERR_CONTENT","status","signalSegmentLoadingFailed","signalStreamComplete","END_OF_CONTENT_STOP_REASON","loadInitialization","indexHandler","getInitRequest","segmentTime","getBufferRange","getSegmentRequestForTime","onFragmentRequest","getNextSegmentRequestFromSN","manifest","manifestModel","getValue","action","ACTION_COMPLETE","getIFrameRequest","isFragmentLoadedOrPending","getNextSegmentRequest","prepareFragmentForLoading","updateCheckBufferTimeout","getTimeToEnd","videoTime","getLiveEdgeTime","liveEdgeTime","segmentAvailabilityRange","liveEdge","updateBufferLevel","sendMetric","workingTime","getBufferLength","toFixed","addBufferLevel","updateBufferState","timeToEnd","delay","now","loadInit","playlistUpdated","doUpdateData","REPRESENTATION_SWITCH_STOP_REASON","addRepresentationSwitch","updatePlayListForRepresentation","MEDIA_ERR_CODEC_UNSUPPORTED","representation","idx","segmentInfoType","getDataIndex","index","Period_asArray","AdaptationSet_asArray","Representation_asArray","parser","hlsParser","updatePlaylist","updateRepresentations","segments","SegmentList","SegmentURL_asArray","reject","adaptations","getAdaptationsForPeriod","getRepresentationsForAdaptation","bufferExt","updateData","UpdateLang","onFragmentLoadProgress","evt","currentQuality","ABANDON_FRAGMENT_RULES","callback","switchRequest","execute","fragmentExt","initialize","newPeriodInfo","newData","FragmentLoader","ENAME_LOADING_PROGRESS","getIsDynamic","setMediaSource","setType","setBuffer","setFragmentController","setEventController","BufferExtensions","BUFFER_TIME_AT_STARTUP","DEFAULT_BUFFER_TO_KEEP","setIsDynamic","decideBufferLength","updateSegmentList","getIndexHandler","getType","getPeriodInfo","getFragmentController","attachBufferController","fragmentLoader","getHtmlVideoState","getAvailableRepresentations","getCurrentRepresentation","getBuffer","getMinBufferTime","setMinBufferTime","isReady","updateManifest","previousTime","progress","isPaused","isStalled","isSeeking","updateStalledState","errored","cancel","d","unsubscribe","detachBufferController","removeSourceBuffer","getSegmentDuration","setTrickMode","forward","seeked","minBufferTarget","currentBufferTarget","topAudioQualityIndex","topVideoQualityIndex","audioData","videoData","getCurrentHttpRequestLatency","httpRequest","getCurrentHttpRequest","tresponse","trequest","isPlayingAtTopQuality","audioQuality","videoQuality","bufferMax","topIndex","getTopQualityIndex","topQualityIndex","Infinity","DEFAULT_MIN_BUFFER_TIME","getLeastBufferLevel","videoMetrics","videoBufferLevel","getCurrentBufferLevel","audioMetrics","audioBufferLevel","getRequiredBufferLength","requiredBufferLength","vmetrics","ametrics","isLongFormContent","LONG_FORM_CONTENT_DURATION_THRESHOLD","isAtTop","BUFFER_SIZE_MIN","BUFFER_SIZE_INFINITY","BUFFER_SIZE_REQUIRED","BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM","BUFFER_TIME_AT_TOP_QUALITY","getBufferTarget","DEFAULT_LIVE_DELAY","hasWebKit","hasMediaSource","hasMs","supportsEncryptedMedia","hasMapping","supportsCodec","codec","HTMLMediaElement","canPlay","canPlayType","Config","paramsType","BufferController.minBufferTimeForPlaying","BufferController.minBufferTime","BufferController.bufferToKeep","BufferController.liveDelay","ABR.minBandwidth","ABR.maxBandwidth","ABR.minQuality","ABR.maxQuality","ABR.switchUpIncrementally","ABR.switchUpRatioSafetyFactor","ABR.latencyInBandwidth","ABR.switchDownBufferTime","ABR.switchDownBufferRatio","ABR.switchLowerBufferTime","ABR.switchLowerBufferRatio","ABR.switchUpBufferTime","ABR.switchUpBufferRatio","ABR.droppedFramesMinRatio","ABR.droppedFramesMaxRatio","ManifestLoader.RetryAttempts","ManifestLoader.RetryInterval","FragmentLoader.RetryAttempts","FragmentLoader.RetryInterval","Protection.licensePersistence","backoffSeekToEnd","doSetParams","newParams","typeParams","typeItem","getParam","def","doGetParam","doGetParamFor","key","setup","mapProtectionModel","videoElement","createElement","ProtectionModel_21Jan2015","detect","mapSingleton","ProtectionModel_3Feb2014","mapClass","ProtectionModel_01b","autoMapOutlets","Debug","DebugController","EventBus","TextTrackExtensions","TokenAuthentication","VTTParser","TTMLParser","TTMLRenderer","ManifestModel","MetricsList","MetricsModel","URIQueryAndFragmentModel","VideoModel","EventController","FragmentController","FragmentModel","ManifestLoader","ManifestUpdater","MediaSourceExtensions","Notifier","Parser","SourceBufferExtensions","Stream","TextController","TextSourceBuffer","TextTTMLXMLMP4SourceBuffer","VideoModelExtensions","ProtectionController","ProtectionExtensions","KeySystem_ClearKey","KeySystem_PlayReady","KeySystem_Widevine","ClearKey","DRMToday","PlayReady","Widevine","AbandonRequestsRule","DownloadRatioRule","DroppedFramesRule","InsufficientBufferRule","LimitSwitchesRule","BaseURLExtensions","FragmentExtensions","DashHandler","DashManifestExtensions","MetricsExtensions","TimelineConverter","DashParser","Mss","MssParser","Hls","HlsParser","HlsDemux","HlsStream","ContextManager","mapHandler","setContext","ctx","Mp4Processor","MssHandler","MssFragmentController","MssFragmentInfoController","HlsFragmentController","HlsHandler","HHMMSSmmm","h","getHours","getMinutes","s","getSeconds","ms","getMilliseconds","MMSSmmm","MemoryLogger","logArray","showLevel","getLogs","_logger","_log","logLevel","args","_prepareLog","logTime","_getStringLevel","forEach","NONE","ERROR","WARN","DEBUG","ALL","getLogger","setLogger","appender","log4javascript","PopUpAppender","layout","PatternLayout","setLayout","addAppender","Level","debugData","isInDebug","loggerType","_downloadDebug","blob","Blob","msSaveBlob","a","download","href","URL","createObjectURL","dataset","downloadurl","join","initMouseEvent","ver","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED","CAPABILITY_ERR_MEDIAKEYS","MEDIA_ERR_CREATE_MEDIASOURCE","MEDIA_ERR_CREATE_SOURCEBUFFER","MANIFEST_ERR_PARSE","MANIFEST_ERR_NO_STREAM","MANIFEST_ERR_NO_VIDEO","MANIFEST_ERR_NO_AUDIO","MANIFEST_ERR_NO_TEXT","DOWNLOAD_ERR_MANIFEST","DOWNLOAD_ERR_SIDX","DOWNLOAD_ERR_INIT","MSS_NO_TFRF","HLS_INVALID_PACKET_ERROR","HLS_DEMUX_ERROR","HLS_INVALID_KEY_ERROR","MEDIA_KEYERR","MEDIA_KEYERR_UNKNOWN","MEDIA_KEYERR_CLIENT","MEDIA_KEYERR_SERVICE","MEDIA_KEYERR_OUTPUT","MEDIA_KEYERR_HARDWARECHANGE","MEDIA_KEYERR_DOMAIN","MEDIA_KEYERR_EXPIRED","MEDIA_KEYSYSERR_ACCESS_DENIED","MEDIA_KEYMESSERR_URL_LICENSER_UNKNOWN","MEDIA_KEYMESSERR_NO_CHALLENGE","MEDIA_KEYMESSERR_LICENSER_ERROR","MEDIA_KEYMESSERR_NO_SESSION","MEDIA_KEYERR_SERVER_CERTIFICATE","DOM_ERR_INDEX_SIZE","DOM_ERR_HIERARCHY_REQUEST","DOM_ERR_WRONG_DOCUMENT","DOM_ERR_INVALID_CHARACTER","DOM_ERR_NO_MODIFICATION_ALLOWED","DOM_ERR_NOT_FOUND","DOM_ERR_NOT_SUPPORTED","DOM_ERR_INVALID_STATE","DOM_ERR_SYNTAX","DOM_ERR_INVALID_MODIFICATION","DOM_ERR_NAMESPACE","DOM_ERR_INVALID_ACCESS","DOM_ERR_SECURITY","DOM_ERR_NETWORK","DOM_ERR_ABORT","DOM_ERR_URL_MISMATCH","DOM_ERR_TIMEOUT","DOM_ERR_INVALID_NODE_TYPE","DOM_ERR_DATA_CLONE","registrations","getListeners","captype","listeners","defaultPrevented","inlineEvents","activeEvents","eventInterval","clearInterval","clear","setInterval","onEventTimer","addInlineEvents","triggerEvents","removeEvents","curr","refreshDelay","mpdUrl","Location","manifestLoader","manifestResult","setValue","fragmentModels","findModel","bufferController","ln","getContext","isReadyToLoadNextFragment","executeRequests","executeCurrentRequest","bytes","byteLength","model","getPendingRequests","getLoadingRequests","getLoadingTime","removeExecutedRequest","cancelPendingRequests","abortRequests","startLoadingCallback","successLoadingCallback","errorLoadingCallback","streamEndCallback","addRequest","setCallbacks","retryAttempts","retryInterval","retryCount","xhrs","_checkForExistence","XMLHttpRequest","isSuccessful","open","onload","onloadend","onerror","send","_loadRequest","httpRequestMetrics","firstProgress","needFailureReport","lastTraceTime","requestStartDate","addHttpRequest","appendHttpTrace","tokenAuthentication","addTokenAsQueryArg","responseType","setTokenInRequestHeader","setRequestHeader","onprogress","lengthComputable","total","loaded","firstByteDate","bytesLoaded","bytesTotal","latency","bytesLength","requestEndDate","tfinish","responsecode","onabort","lastTrace","trace","b","_load","reqerror","responseURL","checkForExistence","executedRequests","pendingRequests","loadingRequests","loadCurrentFragment","onSuccess","onError","sortRequestsByProperty","requestsArray","sortProp","compare","req1","req2","sort","onLoadingStart","onLoadingSuccess","onLoadingError","onStreamEnd","isLoaded","loadingTime","lastIdx","getExecutedRequestForQualityAndIndex","currentRequest","shift","_retryAttempts","_retryInterval","_xhrLoader","_getDecodedResponseText","text","charCode","fixedCharCodes","charCodeAt","_parseBaseUrl","base","substring","lastIndexOf","_abort","baseUrl","XHRLoader","checkRequestHeaderForToken","startDate","endDate","parse","responseText","mpdLoadedTime","addManifestUpdate","availabilityStartTime","deferredUpdate","refreshTimer","isStopped","onRefreshTimer","update","timeSinceLastUpdate","t","getRefreshDelay","onStreamsComposed","createMediaSource","MediaSource","WebKitMediaSource","attachMediaSource","setSource","detachMediaSource","setDuration","updating","readyState","sourceBuffers","signalEndOfStream","buffers","endOfStream","h264ProfileMap","42","4D","58","64","findRepresentionInPeriodArray","periodArray","period","adaptationSet","adaptationSetArray","representationArray","periodArrayIndex","adaptationSetArrayIndex","representationArrayIndex","adaptationIsType","adaptation","bufferType","found","getIsText","rslt","copyMethods","DashMetricsExtensions","Period","getFormatForType","AdaptationSet","getCodecForType","contentType","codecs","getCodecsForRepresentation","getH264ProfileLevel","parseInt","bitrateArray","processAdaptation","bandwidth","getBitratesWithResolutionForType","reso","streamMetrics","metricsChanged","metricUpdated","metricType","clearAllCurrentMetrics","keepBW","prop","addTcpConnection","tcpid","dest","topen","tclose","tconnect","TCPConnection","TcpList","actualurl","interval","mediaduration","HTTPRequest","HttpList","RepresentationSwitch","RepSwitchList","BufferedSwitch","BufferedSwitchList","currentState","position","State","playerType","Session","uri","loopMode","addCondition","isFullScreen","videoWidth","videoHeight","droppedFrames","fps","Condition","windowSize","addMetaData","BufferLevel","addDVRInfo","DVRInfo","addDroppedFrames","DroppedFrames","list","creationTime","droppedVideoFrames","decodedFrameCount","totalVideoFrames","addPlaybackQuality","mediaTime","PlaybackQuality","addVideoResolution","VideoResolution","requestTime","fetchTime","presentationStartTime","clientTimeOffset","ManifestUpdate","updateManifestUpdateInfo","manifestUpdate","updatedFields","field","addManifestUpdatePeriodInfo","PeriodInfo","addManifestUpdateRepresentationInfo","periodIndex","presentationTimeOffset","startNumber","RepresentationInfo","representationInfo","mstart","starttype","playList","representationid","subreplevel","playbackspeed","createMovieHeaderBox","mvhd","boxes","MovieHeaderBox","creation_time","modification_time","round","rate","volume","reserved","reserved_2","matrix","pre_defined","next_track_ID","trackId","flags","createTrackBox","trak","tkhd","mdia","TrackBox","TrackHeaderBox","track_id","layer","alternate_group","reserved_3","MediaBox","createMediaHeaderBox","createHandlerReferenceBox","createMediaInformationBox","getLanguageCode","firstLetterCode","secondLetterCode","thirdLetterCode","mdhd","MediaHeaderBox","pad","stringToCharCode","hdlr","HandlerBox","handler_type","HANDLERTYPEVIDEO","HANDLERVIDEONAME","HANDLERTYPEAUDIO","HANDLERAUDIONAME","HANDLERTYPETEXT","HANDLERTEXTNAME","minf","MediaInformationBox","createVideoMediaHeaderBox","createSoundMediaHeaderBox","createDataInformationBox","createSampleTableBox","dinf","dref","DataInformationBox","DataReferenceBox","entry_count","DataEntryUrlBox","location","createDecodingTimeToSampleBox","stts","TimeToSampleBox","entry","createSampleToChunkBox","stsc","SampleToChunkBox","createChunkOffsetBox","stco","ChunkOffsetBox","chunk_offset","createSampleSizeBox","stsz","SampleSizeBox","sample_count","sample_size","_hexstringtoBuffer","res","_mergeArrays","oldBuffer","newPart","set","createAVCConfigurationBox","avcC","NALDatabuffer","codecPrivateData","NALArray","SPS_index","PPS_index","NALBuffer","tempBuffer","regexpSPS","regexpPPS","AVCConfigurationBox","configurationVersion","lengthSizeMinusOne","SPS_NAL","PPS_NAL","split","match","NAL_length","NAL","AVCProfileIndication","profile_compatibility","AVCLevelIndication","numOfSequenceParameterSets","numOfPictureParameterSets","createAVCVisualSampleEntry","avc1","contentProtection","EncryptedVideoBox","AVC1VisualSampleEntryBox","data_reference_index","compressorname","depth","pre_defined_2","pre_defined_3","frame_count","horizresolution","vertresolution","createProtectionSchemeInfoBox","createOriginalFormatBox","frma","OriginalFormatBox","data_format","createSchemeTypeBox","schm","SchemeTypeBox","scheme_type","scheme_version","createSchemeInformationBox","schi","SchemeInformationBox","createTrackEncryptionBox","tenc","TrackEncryptionBox","default_IsEncrypted","default_IV_size","default_KID","sinf","ProtectionSchemeInformationBox","createVisualSampleEntry","parseHexString","createMPEG4AACESDescriptor","audioSpecificConfig","dsiLength","decoderSpecificInfo","dcdLength","decoderConfigDescriptor","esdLength","esDescriptor","createMP4AudioSampleEntry","esdBox","ES_Descriptor","mp4a","EncryptedAudioBox","MP4AudioSampleEntryBox","channelcount","channels","samplesize","samplerate","samplingRate","ESDBox","ES_tag","ES_length","ES_data","createAudioSampleEntry","createSampleDescriptionBox","stsd","SampleDescriptionBox","stbl","SampleTableBox","vmhd","VideoMediaHeaderBox","graphicsmode","opcolor","smhd","SoundMediaHeaderBox","balance","createFileTypeBox","ftyp","FileTypeBox","major_brand","minor_brand","compatible_brands","createMovieExtendsBox","mvex","trex","MovieExtendsBox","TrackExtendsBox","track_ID","default_sample_description_index","default_sample_duration","default_sample_flags","default_sample_size","createProtectionSystemSpecificHeaderBox","keySystems","pssh_bytes","pssh","psshs","ProtectionSystemSpecificHeaderBox","read","generateMoov","supportedKS","MovieBox","protectionExt","getSupportedKeySystemsFromContentProtection","createMovieFragmentHeaderBox","mfhd","MovieFragmentHeaderBox","sequence_number","createTrackFragmentBox","TrackFragmentBox","createTrackFragmentHeaderBox","createTrackFragmentBaseMediaDecodeTimeBox","createTrackFragmentRunBox","createSampleDependencyTableBox","tfhd","TrackFragmentHeaderBox","tfdt","TrackFragmentBaseMediaDecodeTimeBox","baseMediaDecodeTime","samples","dts","sample_duration_present_flag","sample","TrackFragmentRunBox","cts","data_offset","sample_duration","sample_flags","sdtp","SampleDependencyTableBox","sample_dependency_table","createMediaDataBox","mdat","MediaDataBox","generateMoof","trafs","mdatLength","trackglobal","mdatTracksTab","offset","MovieFragmentBox","computeLength","getBoxesByType","generateInitSegment","file","File","serialize","generateMediaSegment","generateInitMediaSegment","getId","eventId","sender","timestamp","eventName","observer","handler","oneShot","unmapHandler","_parser","dashParser","mssParser","createSourceBuffer","addSourceBuffer","getIsTextTrack","tolerance","firstStart","lastEnd","gap","toler","abs","waitForUpdateEnd","intervalId","checkIsUpdateEnded","updateEndHandler","appendBuffer","sign","endedListener","loadedListener","playListener","pauseListener","errorListener","seekingListener","seekedListener","waitingListener","timeupdateListener","durationchangeListener","progressListener","ratechangeListener","canplayListener","playingListener","loadstartListener","seekTime","tmPreviousSpeed","tmStartTime","tmVideoStartTime","tmMinSeekStep","tmSeekStep","tmSeekTime","tmSeekTimeout","tmSeekValue","protectionController","visibilitychangeListener","videoController","videoTrackIndex","audioController","audioTrackIndex","textController","dvrStarted","fragmentInfoVideoController","fragmentInfoAudioController","fragmentInfoTextController","textTrackIndex","initialStartTime","playStartTime","tmState","tmSpeed","tmEndDetected","muteState","initializeMediaSourceFinished","reloadTimeout","isReloading","startClockTime","startStreamTime","onProtectionError","autoplay","startFragmentInfoControllers","onBufferUpdated","startBuffering","setUpMediaSource","mediaSourceArg","onMediaSourceOpen","mediaSourceExt","tearDownMediaSource","funcs","executeReset","createBufferController","capabilities","createFragmentInfoController","getIsStartOver","fragmentInfoController","initializeProtectionController","ksSelected","audioCodec","videoCodec","getVideoData","getCodec","getContentProtectionData","getSpecificAudioData","ENAME_KEY_SYSTEM_SELECTED","initializeMediaSource","textMimeType","filterCodecs","getSpecificTextData","getMimeType","getEventsForPeriod","initializePlayback","stopFragmentInfoControllers","onLoaded","onCanPlay","onPlaying","onLoadStart","onPlay","setVideoModelCurrentTime","onEnded","onPause","suspend","target","onSeeking","getStartTime","SEEK_START_REASON","onSeeked","elapsedTime","elapsedSeekTime","elapsedVideoTime","seekValue","videoEndedEvent","_seek","initEvent","seekedBuffers","speedRatio","onProgress","updateBuffer","onTimeupdate","onWaiting","onDurationchange","onRatechange","onReload","stopBuffering","checkStartTimeIntervalId","doLoad","mediaSourceResult","onBufferingCompleted","onStartTimeFound","videoRange","audioRange","onSourceDurationChanged","mediaPresentationDuration","controller","currentIndex","getCodecForRepresentation","updatedPeriodInfo","getDataForId","getDataForIndex","streamsComposed","onSegmentLoadingFailed","segmentRequest","onVisibilitychange","hidden","clockTime","streamTime","elapsedClockTime","elapsedStreamTime","timelineConverter","textTrackExtensions","ENAME_PROTECTION_ERROR","periodInfoValue","setInitialStartTime","parseFloat","getAudioDatas","audioTrack","getTextDatas","subtitleTrack","initProtection","protectionCtrl","getManifestExt","getPeriodIndex","getMinbufferTime","startEventController","resetEventController","getCurrentTextTrack","cleanSubtitles","kind","mode","enableTrickMode","restoreMute","activeStream","protectionData","running","streams","ownProtectionController","isPeriodSwitchingInProgress","reloadStream","deferredLoading","switchVideoModel","fromVideoModel","toVideoModel","activeVideoElement","newVideoElement","parentNode","insertBefore","style","copyVideoProperties","detachVideoEvents","attachVideoEvents","fromVideoElement","toVideoElement","lastRange","bufferEndTime","onStreamBufferingEnd","switchStream","from","seekTo","streamEndTime","playBackQuality","videoExt","getNextStream","seekingTime","seekingStream","getStreamForTime","manifestUpdater","nextStream","nextIndex","createVideoModel","removeVideoElement","removeChild","composeStreams","periods","pLen","sLen","pIdx","sIdx","mpd","manifestUpdateInfo","getCurrentManifestUpdate","startOver","setMediaElement","setProtectionData","getMpd","isClientServerTimeSyncCompleted","clientServerTimeShift","getRegularPeriods","reload","manifestHasUpdated","loadNativeHlsStream","newSource","manifestUrl","ProtectionModel","protectionModel","teardown","ENAME_STREAMS_COMPOSED","TYPE_QUERY","getTokenAuthentication","setTokenAuthentication","object","getResponseHeader","token","TYPE_HEADER","URIFragmentDataVO","URIFragmentData","URIQueryData","parseURI","reduceArray","previousValue","currentValue","arr","mapArray","isQuery","isFragment","testQuery","testFragment","reduce","getURIFragmentData","getURIQueryData","stalledStreams","TTMLRenderingDiv","addStalledStream","setPlaybackRate","removeStalledStream","playbackRate","paused","muted","listenOnParent","parentElement","unlistenOnParent","src","removeAttribute","display","overflow","pointerEvents","top","left","hasQuality","getVideoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","_xhr","_url","_responseType","_range","_onprogress","_retryCount","_retryTimeout","_deferred","setState","setPeriodInfo","setData","dataValue","decodeUtf8","arrayBuffer","c","c2","c3","addRange","rangesUpdated","removeRange","deleteCues","ccContent","cues","getParser","textTracks","addTextTrack","addCues","Cue","currentLanguage","ttmlRenderer","VTTCue","TextTrackCue","subtitle_style","subtitle_text","subtitle_type","label","captionData","scrlang","isDefaultTrack","currentItem","subtitleDisplayMode","renderingDiv","default","addCue","onCueEnter","currentTarget","onCueExit","newCue","onenter","onexit","snapToLines","line","disabled","currentTrackMode","removeCue","currentLang","currentId","ttmlParser","subtitleData","getTextTrackExtensions","subs","fragmentStart","ttmlData","encoding","isUTF16","convertUTFToString","subsample_count","subSampleEntries","subsample_size","buf","f","FileReader","readAsText","globalPrefTTNameSpace","globalPrefStyleNameSpace","globalPrefParameterNameSpace","globalPrefSMPTENameSpace","timingRegexClockTime","timingRegexOffsetTime","nodeTt","nodeHead","nodeLayout","nodeStyling","nodeBody","frameRate","tabStyles","tabRegions","tabImages","parseTimings","timingStr","timeParts","parsedTime","passStructuralConstraints","passed","domParser","getChildNode","findStyleElement","nodeTab","styleElementName","defaultTTMLValue","styleName","regionName","resu","findParameterElement","searchInTab","tab","elementNameReference","returnValue","getNamedItem","getNamedItemNS","nameSpaceTab","parameterElementName","parameterValue","k","getAttributeValue","computeCellResolution","cellResolution","computedCellResolution","getStyle","nodeElementsTab","rootExtent","cssStyle","backgroundColor","color","fontSize","fontFamily","fontStyle","textOutline","with","textAlign","displayAlign","origin","extent","showBackground","errorMsg","regions","region","caption","divBody","textDatas","textNodes","imageRef","lastCaption","captionArray","previousStartTime","previousEndTime","textValue","ttmlRenderingType","createXmlTree","getChildNodes","getAllSpecificNodes","imagetype","getTextNodesIn","r","textContent","pop","ttmlDiv","subtitleDivTab","onFullScreenChange","applySubtitlesCSSStyle","ttmlStyle","createSubtitleDiv","subtitleDiv","flexDirection","appendChild","removeSubtitleDiv","hasChildNodes","computeFontSize","cellUnit","computedFontSize","cellsSize","computeTextOutline","defaultColor","computedTextOutline","textOutlineWidthIndex","hex2rgba_convert","hex","rgbaTTMLToCss","rgbaTTML","rgba","alpha","clientWidth","clientHeight","temp","webkitTextStrokeWidth","webkitTextStroke","justifyContent","alignItems","newDiv","p","innerText","marginTop","img","Image","REGEXP_TIMESTAMPMAP","REGEXP_ATTRIBUTES","REGEXP_CUE","REGEXP_LINEBREAK","parseTimestamp","stime","timeArray","parseTimestampMap","attrs","local","mpegts","exec","getTimestampOffset","timestampMap","streamTimestampMap","mpegtsOffset","cueInfo","cue","lines","trim","measuredBandwidth","adandonFragmentRules","downloadRatioRule","insufficientBufferRule","droppedFramesRule","abandonRequestRule","downloadTime","totalTime","calculatedBandwidth","currentBandwidth","latencyInBandwidth","switchUpRatioSafetyFactor","currentRepresentation","requests","getHttpRequests","lastRequest","bandwidths","q","totalBytesLength","_totalTime","_downloadTime","getRepresentationFor","getBandwidth","getRepresentationBandwidth","lastPlaybackQuality","currentDroppedFrames","currentTotalVideoFrames","getDroppedFrames","playbackQuality","ratio","droppedFramesMaxRatio","droppedFramesMinRatio","getCurrentPlaybackQuality","isStartBuffering","switchLowerBufferRatio","switchLowerBufferTime","switchDownBufferRatio","switchDownBufferTime","switchUpBufferRatio","OInsufficientBufferRule","waiting","rs","panic","numSwitches","ENAME_NEED_KEY","ENAME_KEY_SYSTEM_ACCESS_COMPLETE","ENAME_VIDEO_ELEMENT_SELECTED","ENAME_SERVER_CERTIFICATE_UPDATED","ENAME_KEY_MESSAGE","ENAME_KEY_ADDED","ENAME_KEY_ERROR","ENAME_KEY_SESSION_CREATED","ENAME_KEY_SESSION_REMOVED","ENAME_KEY_SESSION_CLOSED","ENAME_KEY_STATUSES_CHANGED","Mp4Track","Sample","SegmentRequest","availabilityEndTime","wallStartTime","ACTION_DOWNLOAD","xywh","REBUFFERING_REASON","parseSIDX","ab","ab_first_byte_offset","sidxEnd","ref_type","ref_size","ref_dur","DataView","sidx","pos","getUint32","getInt8","getUint8","earliest_presentation_time","first_offset","to64BitNumber","reference_count","getUint16","references","parseSegments","media","parsed","ref","segment","Segment","mediaRange","findInit","irange","bytesToLoad","searching","findSIDX","bytesAvailable","sidxBytes","sidxSlice","sidxOut","loadMultiSidx","ArrayBuffer","ss","se","segs","loadSegments","httprequest","theRange","parts","DashContext","requestedTime","zeroPadToLength","numStr","minStrLength","replaceTokenForTemplate","formatTagPos","specifier","paddedValue","startPos","endPos","tokenLen","formatTagLen","charAt","toUpperCase","unescapeDollarsInTemplate","replaceIDForTemplate","getNumberForSegment","segmentIndex","getRequestUrl","destination","baseURL","BaseURL","generateInitRequest","initialization","calcAvailabilityStartTimeFromPresentationTime","calcAvailabilityEndTimeFromPresentationTime","getInit","baseURLExt","isMediaFinished","sDuration","seg","fTime","isFinished","availableSegmentsNumber","segmentStartIndex","getSegmentByIndex","getIndexBasedSegment","presentationEndTime","calcMediaTimeFromPresentationTime","calcWallTimeForSegment","replacementNumber","availabilityIdx","getSegmentsFromTimeline","fragments","frag","repeat","repeatEndTime","nextFrag","calculatedRange","requiredMediaTime","startIdx","endIdx","fTimescale","template","SegmentTemplate","timeline","SegmentTimeline","isAvailableSegmentNumberCalculated","hasEnoughSegments","createSegment","getTimeBasedSegment","tManifest","S_asArray","decideSegmentListRangeForTimeline","ceil","calcPresentationTimeFromMediaTime","getSegmentsFromTemplate","segmentRange","periodStartIdx","waitForAvailabilityWindow","availabilityWindow","decideSegmentListRangeForTemplate","replacementTime","periodStart","originAvailabilityTime","originSegment","currentSegmentList","availabilityLowerLimit","availabilityUpperLimit","calcSegmentAvailabilityRange","originAvailabilityIdx","waitingTime","getRange","scaledTime","scaledDuration","maxSegmentDuration","getSegmentsFromList","indexRange","decryptionInfo","getSegmentsFromSource","getSegments","segmentPromise","isSegmentListUpdateRequired","getIndexForSegments","ft","fd","segmentLastIdx","EPSILON","getNextSegmentBySequenceNumber","sn","upperIdx","lowerIdx","upperTime","lowerTime","updateRequired","getRequestForSegment","getForTime","newIndex","finished","requestForSegment","getNext","segmentsPromise","getNextFromSN","getSegmentCountForDuration","requiredDuration","bufferedDuration","remainingDuration","segmentCount","bufferedIndex","calcPresentationStartTime","getFragmentInfoRequest","isInteger","isFinite","getIsType","mimeTypes","ContentComponent_asArray","getIsMain","getIndex","strData","datas","getKID","ContentProtection_asArray","getIsDVR","containsDVR","timeShiftBufferDepth","getIsOnDemand","isOnDemand","profiles","isStartOver","minimumUpdatePeriod","segmentInfo","representations","Representation","SegmentBase","useCalculatedLiveEdgeTime","Initialization","sourceURL","MSETimeOffset","calcMSETimeOffset","p1","vo1","checkTime","getCheckTime","getEndTimeForLastPeriod","Mpd","suggestedPresentationDelay","getFetchTime","calcPresentationTimeFromWallTime","periodEnd","EventStream_asArray","EventStream","Event_asArray","inbandStreams","InbandEventStream_asArray","findRepresentationIndexInPeriodArray","findMaxBufferIndex","getBandwidthForRepresentation","getIndexForRepresentation","getMaxIndexForBufferType","getCurrentRepresentationSwitch","repSwitchLength","repSwitchLastIndex","repSwitch","bufferLevelLength","bufferLevelLastIndex","httpListLength","httpListLastIndex","httpList","currentHttpList","getCurrentDroppedFrames","droppedFramesLength","droppedFramesLastIndex","dvrInfoLastIndex","durationRegex","datetimeRegex","numericRegex","utcDate","UTC","timezoneOffset","getCommonValuesMap","subRepresentation","common","getSegmentValuesMap","getBaseUrlValuesMap","getDashMap","iron","json","ironed","BaseURL_asArray","parseTFDT","base_media_decode_time","earliestPresentationTime","loadFragment","errorStr","calcAvailabilityTimeFromPresentationTime","calculateEnd","startTimeOffset","uriQueryFragModel","wallTime","displayStartTime","calcActualPresentationTime","adaptionSet","loadedmetadataListener","loadeddataListener","needKeyListener","keyMessageListener","keyAddedListener","keyErrorListener","REQUEST_PARAMS","licenseRequest","onLoadedMetadata","onLoadedData","setAudioLang","getKsProtectionData","ks","stringToArray","string","Uint16Array","extractContentId","contentId","getCertificate","serverCertificate","BASE64","decodeArray","concatInitDataIdAndCertificate","cert","dataView","initDataArray","setUint32","idArray","processLicenseMessage","session","encodeASCII","encodeURIComponent","sendLicenseRequest","body","processLicenseResponse","getKeyError","msg","errorCode","systemCode","KeyError","onNeedKey","certificate","mediaKeys","WebKitMediaKeys","webkitSetMediaKeys","webkitKeys","createSession","onKeyMessage","laURL","requestType","onKeyAdded","onKeyError","audioTracks","clazz","att","_xmlDoc","mainNode","querySelectorResult","returnTab","querySelectorAll","getAttributeName","attrValue","domAttribute","attribList","nodeParent","nodes","namespace","getAttribute","getAttributeNS","b1","b2","next","prev","transformFunc","itemMapped","CommonEncryption","findCencContentProtection","cpArray","cp","retVal","getPSSHData","view","getPSSHForKeySystem","keySystem","psshList","parsePSSHList","uuid","parseInitDataFromContentProtection","cpData","readBytes","nbBytes","dv","byteCursor","nextBox","systemID","boxStart","getKeySystemConfigurations","sessionType","audioCapabilities","videoCapabilities","MediaCapability","KeySystemConfiguration","isView","begin","targetArray","protDataSet","pendingNeedKeyData","xhrLicense","getProtData","keySystemString","systemString","selectKeySystem","fromManifest","ksIdx","ksAccess","keySystemAccess","requestedKeySystems","keySystemsInfo","configs","schemeIdURI","KEY_SYSTEM_SELECTED","createKeySession","cdmData","requestKeySystemAccess","keyMessage","messageType","licenseMessage","KEY_MESSAGE","sessionToken","licenseServerData","getLicenseServer","getSessionID","isClearKey","clearkeys","processClearKeyLicenseRequest","updateKeySession","serverURL","getLicenseServerURLFromInitData","defaultURL","getServerURLFromMessage","getHTTPMethod","getResponseType","getLicenseMessage","getErrorResponse","updateHeaders","headers","withCredentials","httpRequestHeaders","getRequestHeadersFromMessage","getLicenseRequestFromMessage","abInitData","initDataType","initDataForKS","currentInitData","getAllInitData","initDataEquals","getSupportedKeySystems","onServerCertificateUpdated","onKeySessionCreated","onKeySessionClosed","onKeySessionRemoved","onKeyStatusesChanged","getKeySystems","aCodec","vCodec","loadKeySession","sessionID","removeKeySession","closeKeySession","setServerCertificate","setSessionType","keysystem","SERVER_CERTIFICATE_UPDATED","KEY_ADDED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_SESSION_CLOSED","KEY_STATUSES_CHANGED","LICENSE_REQUEST_COMPLETE","clearkeyKeySystem","protectionDataSet","getKeySystemBySystemString","initData1","initData2","data1","data2","cps","cpIdx","getInitData","getCDMData","getClearKeysFromProtectionData","autoSelectKeySystem","ksConfig","protCtrl","cbObj","moreSessionsAllowed","api","pendingSessions","sessions","createEventHandler","handleEvent","needkey","NeedKey","keyerror","findSessionByID","sessionId","keyadded","keymessage","mediaKeyMessageError","KeyMessage","eventHandler","sessionArray","removeEventListeners","tmpVideoElement","ksConfigurations","ve","supportedVideo","configIdx","videos","videoIdx","KeySystemAccess","mediaElement","newSession","getExpirationTime","getSessionType","generateKeyRequest","keyPairs","addKey","keyID","cancelKeyRequest","checkIfEncrypted","APIs","apis","boundDoSetKeys","setMediaKeys","doSetKeys","createSessionToken","keySession","destinationURL","close","supportedAudio","audios","audioIdx","MediaKeys","isTypeSupported","ksConfiguration","toJWK","release","arrayToHexString","requestKeySystemAccessInternal","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","mksa","catch","closeKeySessionInternal","usable","removeSession","setSessionUsable","keyStatuses","keyId","expiration","getKeyStatuses","nbSessions","done","createMediaKeys","mkeys","getServerCertificate","generateRequest","success","onencrypted","MSMediaKeys","KeySystem","KeySystem_Access","clearkeySet","jsonMsg","kids","clearkeyID","clearkey","KeyPair","ClearKeyKeySet","PRCDMData","getRequestHeaders","headerNameList","headerValueList","dataview","Content","getLicenseRequest","Challenge","decode","getLicenseServerURL","recordType","recordLength","recordData","record","laurl","luiurl","numRecords","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","pro","prheader","doGetCDMData","customData","cdmDataBytes","encode","doGetInitData","doGetKeySystemConfigurations","audioRobustness","robustness","videoRobustness","doGetServerCertificate","serverResponse","keypair","keyid","keys","kid","com.widevine.alpha","license","com.microsoft.playready","keySystemStr","LicenseServer","parseServerResponse","stringResponse","enveloppe","parseErrorResponse","fault","detail","exception","faultstring","statusCode","idStart","idEnd","numKeys","jwk","kty","alg","jwkString","bView","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","LicenseRequestComplete","requestData","ProtectionData","bearerToken","SessionToken","AES","_tables","_precompute","tmp","encKey","decKey","sbox","decTable","keyLen","rcon","_key","x","xInv","x2","x4","x8","tEnc","tDec","encTable","sboxInv","th","decrypt","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","nInnerRounds","kIndex","table","table0","table1","table2","table3","AES128Decrypter","iv","ntoh","word","doDecrypt","encrypted","initVector","init0","init1","init2","init3","wordIx","encrypted32","Int32Array","byteOffset","decipher","decrypted","decrypted32","localDecrypt","Uint32Array","_appendArray","array1","array2","H264_NALU_TYPES","trackIdCounter","pidToTrack","baseDts","dtsOffset","getTsPacket","pid","pusi","tsPacket","ts","TsPacket","TS_PACKET_SIZE","getPid","getPusi","packet","checkTsPacket","checkSyncWord","getPAT","PAT_PID","pat","si","PAT","getPayload","getPMT","pmt","PMT","demuxTsPacket","pesPacket","sampleData","hasAdaptationFieldOnly","pes","PesPacket","getPts","getDts","subSamples","mpegTimestamp","search","h264","isIDR","postProcess","subSamplesLength","dataCTS","convertH264Frames","demuxADTS","previousCts","previousDuration","nalu","totalLength","n","nalus","parseNALUs","aacFrames","aacSamples","aac","parseADTS","doReset","getTrackCodecInfo","esBytes","sequenceHeader","nalHeader","objectType","samplingFrequencyIndex","getSequenceHeader","getAudioSpecificConfig","SAMPLING_FREQUENCY","doGetTracks","es","streamTypeDesc","getPmtPid","m_listOfComponents","m_elementary_PID","Pts","SYSTEM_CLOCK_FREQUENCY","gStreamTypes","m_stream_type","demux","firstDts","decryptionInfos","hlsDemux","mp4Processor","createInitializationVector","segmentNumber","uint8View","decrypter","loadDecryptionKey","xhr","decryptSegment","method","xhrLoader","REGEXP_EXTXSTREAMINF","REGEXP_EXTXMEDIA","REGEXP_PLAYLIST","getTagAttributes","getAbsoluteURI","getVariantStreams","resolution","programId","audioId","subtitlesId","getMedias","medias","groupId","autoSelect","removeSegments","parsePlaylist","segmentList","programDateTime","filter","programStart","programEnd","manifestDuration","maxSequenceNumber","repIndex","parseBaseUrl","processManifest","adaptationsSets","playlistDefers","maxWidth","maxHeight","internalParse","MAX_SAFE_INTEGER","SUPPORTED_CODECS","96000","88200","64000","48000","44100","32000","24000","22050","16000","12000","11025","8000","7350","mimeTypeMap","mapPeriod","smoothNode","mapAdaptationSet","streamIndex","segmentTemplate","qualityLevels","mapSegmentTemplate","Id","mapRepresentation","qualityLevel","fourCCValue","getH264Codec","getAACCodec","audioSamplingRate","audioChannels","codecPrivateDataHex","arr16","indexFreq","extensionSamplingFrequencyIndex","Channels","setAttribute","mediaUrl","mapSegmentTimeline","prevSegment","segmentTimeline","chunks","goog","math","Long","fromString","greaterThan","fromNumber","subtract","toNumber","add","S","getKIDFromProtectionHeader","protectionHeader","prHeader","wrmHeader","xmlReader","KID","getWRMHeaderFromPRHeader","querySelector","convertUuidEndianness","recordValue","swapBytes","pos1","pos2","createPRContentProtection","pro_asArray","createWidevineContentProtection","wvCencHeader","manifestLoadedTime","contentProtections","ContentProtection","prevManifest","xml","mss2dash","getAudioChannels","getAudioSamplingRate","realAdaptation","realRepresentation","processTfrf","tfrf","entries","fragment_absolute_time","fragment_absolute_timeManifest","fragment_duration","dvrInfos","updateSegmentsList","getBoxIndexByType","duplicateSample","trunEntries","trunDuration","mdatData","sepiff","saiz","default_sample_info_size","sample_info_size","convertFragment","sampleDuration","saio","fragment_size","moofPosInFragment","trafPosInMoof","sencPosInTraf","removeBoxByType","boxtype","extended_type","SampleAuxiliaryInformationOffsetsBox","SampleAuxiliaryInformationSizesBox","NumberOfEntries","getLength","getBoxOffsetByType","_bufferController","_loadTimeout","_ready","_started","_fragmentController","_fragmentModel","_startTime","_startFragmentTime","delayLoadNextFragmentInfo","loadNextFragmentInfo","getSegmentRequest","requestFragment","deltaTime","deltaTimestamp","UTF8","u","T","encodeArray","R","ASCII","decodeASCII","btoa","atob","scope","_mappings","_outlets","_handlers","strictInjections","postInjectionHook","_createAndSetupInstance","Clazz","instance","_retrieveFromCacheOrCreate","overrideRules","output","isSingleton","sourceKey","targetKey","outletName","useValue","instantiate","outlet","unmap","unmapOutlet","passEvent","handlers","argsWithEvent","argsClean","toBeDeleted","unshift","low","high","low_","high_","IntCache_","fromInt","cachedObj","ZERO","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","lowBits","highBits","opt_radix","radix","radixToPower","power","multiply","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","ONE","NEG_ONE","TWO_PWR_24_","toInt","getLowBitsUnsigned","isZero","isNegative","equals","radixLong","rem","remDiv","intval","digits","getHighBits","getLowBits","getNumBitsAbs","bit","isOdd","other","notEquals","lessThan","lessThanOrEqual","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","halfThis","shiftRight","approx","shiftLeft","log2","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","highNum","lowNum","expected","definition","uncurryThis","isStopIteration","object_toString","QReturnValue","makeStackTraceLong","stack","STACK_JUMP_SEPARATOR","filterStackString","stackString","desiredLines","isInternalFrame","isNodeFrame","stackLine","pieces","fileName","lineNumber","qFileName","qStartingLine","qEndingLine","captureLine","captureStackTrace","oldPrepareStackTrace","prepareStackTrace","frames","getFileName","getLineNumber","become","resolvedValue","pending","array_reduce","nextTick","promiseDispatch","progressListeners","object_create","makePromise","op","operands","array_slice","valueOf","longStackJumpLimit","fulfill","fcall","fail","descriptor","fallback","isException","isPromise","isPromiseAlike","isPending","isFulfilled","isRejected","rejection","rejected","at","array_indexOf","rejections","errors","get","delete","post","thisP","object_keys","coerce","master","isDef","dispatch","fulfilled","progressed","_fulfilled","_rejected","newException","_progressed","newValue","threw","spread","valuesOrPromises","async","makeGenerator","continuer","verb","arg","generator","errback","_return","promised","dispatcher","fapply","fbind","allArgs","promises","countDown","allResolved","array_map","noop","fin","onUnhandledError","promiseToHandle","domain","timeout","timeoutId","nfapply","nodeArgs","makeNodeResolver","nfcall","nfbind","baseArgs","nbind","bound","thisArg","npost","nsend","nodeify","nodeback","setImmediate","onTick","pendingTicks","usedTicks","maxPendingTicks","expectedTicks","queuedTasks","requestTick","head","task","tail","MessageChannel","channel","port1","onmessage","port2","postMessage","basis","TypeError","thisp","collect","create","Type","object_hasOwnProperty","ReturnValue","thenResolve","toSource","nearer","on","del","invoke","denodeify","ninvoke","fields","warningHandler","boxTypeArray","registerTypeBoxes","MovieFragmentRandomAccessBox","UserDataBox","EditBox","MetaBox","FreeSpaceBox","SegmentIndexBox","MovieExtendsHeaderBox","DataEntryUrnBox","PixelAspectRatioBox","SampleEncryptionBox","EditListBox","HintMediaHeaderBox","NullMediaHeaderBox","CompositionOffsetBox","CompositionToDecodeBox","SyncSampleBox","TrackReferenceBox","SubSampleInformationBox","TfxdBox","TfrfBox","PiffProtectionSystemSpecificHeaderBox","PiffTrackEncryptionBox","PiffSampleEncryptionBox","constructorTypeBox","searchBox","boxType","UnknownBox","createBox","uint8array","file_size","write","ParseException","DataIntegrityException","module","exports","writeBytes","readString","NumberField","signed","LongNumberField","longNumber","FixedLenStringField","BoxTypeField","StringField","ArrayField","innerField","innerFieldLength","FIELD_INT8","FIELD_INT16","FIELD_INT32","FIELD_INT64","FIELD_UINT8","FIELD_UINT16","FIELD_UINT32","FIELD_UINT64","FIELD_BIT8","FIELD_BIT16","FIELD_BIT24","FIELD_BIT32","FIELD_ID","FIELD_STRING","box","uuidFieldPos","__sourceBuffer","Box","largesize","localPos","localEnd","_writeData","_readData","dataType","dataField","_writeBuffer","_writeArrayData","dataArrayType","_readArrayData","dataArrayTypeLength","_readArrayFieldData","arraySize","ContainerBox","FullBox","getFullBoxAttributesLength","ContainerFullBox","isEntryCount","unrecognized_data","struct","reference_ID","reference_info","SAP","sample_delta","first_chunk","samples_per_chunk","samples_description_index","base_data_offset","sample_description_index","first_sample_flags","SampleEntryBox","VisualSampleEntryBox","VisualSampleEntryContainerBox","_getNALLength","nbElements","nalArray","size_NAL","numOfSequenceParameterSets_tmp","_readNAL","_writeNAL","hSpacing","vSpacing","AudioSampleEntryBox","AudioSampleEntryContainerBox","DataSize","SystemID","Data","IV_size","InitializationVector","clearAndCryptedData","BytesOfClearData","BytesOfEncryptedData","clearAndCryptedStruct","aux_info_type","aux_info_type_parameter","scheme_uri","segment_duration","media_time","media_rate_integer","media_rate_fraction","maxPDUsize","avgPDUsize","maxbitrate","avgbitrate","sample_offset","compositionToDTSShift","leastDecodeToDisplayDelta","greatestDecodeToDisplayDelta","compositionStartTime","compositionEndTime","sample_number","track_IDs","fragment_count","subSampleStruct","subsample_priority","discardable","binary","PSISection","table_id","m_table_id","m_section_syntax_indicator","m_section_length","SECTION_LENGTH","m_transport_stream_id","m_version_number","m_current_next_indicator","m_section_number","m_last_section_number","m_bValid","pointerField","getBitFromByte","getValueFrom2Bytes","getValueFromByte","getSectionLength","HEADER_LENGTH","profile","sampling_frequency_index","channel_configuration","aacFrame","adtsFrameIndex","adtsHeader","syncword","protection_absent","aac_frame_length","number_of_raw_data_blocks_in_frame","AdaptationField","m_cAFLength","m_bDiscontinuityInd","m_bRAI","m_bESPriority","m_bPCRFlag","m_bOPCRFlag","m_bSplicingPointFlag","m_bPrivateDataFlag","m_bAdaptationFieldExtFlag","bitIndex","cMask","getValueFrom3Bytes","pBytes","msbIndex","nbBits","nbBits2","nbLsbShift","nbBits1","bShift","lsbIndex","cValue","naluType","NALUTYPE_SPS","NALUTYPE_PPS","sps","parseSPS","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","NALUTYPE_IDR","NALUTYPE_NONIDR","read_ue","numZeros","_bit","_byte","_bitPos","_bytePos","read_flag","profile_idc","constraint_set0_flag","constraint_set1_flag","constraint_set2_flag","constraint_set3_flag","level_idc","seq_parameter_set_id","chroma_format_idc","separate_colour_plane_flag","bit_depth_luma_minus8","bit_depth_chroma_minus8","qpprime_y_zero_transform_bypass_flag","seq_scaling_matrix_present_flag","log2_max_frame_num_minus4","pic_order_cnt_type","log2_max_pic_order_cnt_lsb_minus4","num_ref_frames","gaps_in_frame_num_value_allowed_flag","numZeroBytes","bytestreamToMp4","startCodeIndex","naluSize","NALUTYPE_SEI","NALUTYPE_AU_DELIMITER","TABLE_ID","m_listOfProgramAssociation","m_network_pid","remainingBytes","prog","ProgramAssociation","getProgramNumber","getProgramMapPid","UNDEFINED_PID","PID","m_program_number","m_program_map_pid","m_cStreamID","m_nPESPacketLength","m_cPESScramblingCtrl","m_bPESpriority","m_bDataAlignement","m_bCopyright","m_bOriginalOrCopy","m_cPES_header_data_length","m_cPTS_DTS_flags","m_bESCR_flag","m_bES_rate_flag","m_bDSM_trick_mode_flag","m_bAdditional_copy_info_flag","m_bPES_CRC_flag","m_bPES_extension_flag","m_pPTS","m_pDTS","m_pESCR","m_ES_rate","m_DSM_trick_mode","m_Additional_copy_info","m_PES_CRC","m_cNbStuffingBytes","m_pPESExtension","m_pPrivateData","m_payloadArray","m_nPayloadLength","m_bDirty","m_nLength","START_CODE_PREFIX","STREAM_ID_PADDING_STREAM","hasOptionalPESHeader","FIXED_HEADER_LENGTH","FLAG_PTS","FLAG_DTS","uiHeaderLength","FIXED_OPTIONAL_HEADER_LENGTH","STREAM_ID_PROGRAM_STREAM_MAP","STREAM_ID_PRIVATE_STREAM_2","STREAM_ID_ECM_STREAM","STREAM_ID_EMM_STREAM","STREAM_ID_PROGRAM_STREAM_DIRECTORY","STREAM_ID_DSMCC_STREAM","STREAM_ID_H2221_TYPE_E_STREAM","getHeaderLength","m_PCR_PID","m_program_info_length","pESDescription","ESDescription","desc","MPEG2_VIDEO_STREAM_TYPE","AVC_VIDEO_STREAM_TYPE","MPEG1_AUDIO_STREAM_TYPE","MPEG2_AUDIO_STREAM_TYPE","AAC_AUDIO_STREAM_TYPE","AC3_AUDIO_STREAM_TYPE","SUB_STREAM_TYPE","STREAM_TYPE_MP1V","STREAM_TYPE_MP2V","STREAM_TYPE_MP1A","STREAM_TYPE_MP2A","STREAM_TYPE_PRIVATE","STREAM_TYPE_TELETEXT","STREAM_TYPE_DVBSUBTITLE","STREAM_TYPE_AC3","STREAM_TYPE_MP2AAC_ADTS","STREAM_TYPE_MP4AAC_LATM","STREAM_TYPE_H264","STREAM_TYPE_MP4AAC","STREAM_TYPE_AUX_23002_3","STREAM_TYPE_SVC","STREAM_TYPE_MVC","STREAM_TYPE_HEVC","m_ES_info_length","getStreamType","getPID","bits3230","m_lPTS","m_fPTS","getValueInSeconds","m_cSync","m_bTransportError","m_bPUSI","m_bTransportPriority","m_nPID","m_cTransportScramblingCtrl","m_cAdaptationFieldCtrl","m_cContinuityCounter","m_pAdaptationField","m_cPayloadLength","m_time","m_arrivalTime","m_bIgnored","byteId","SYNC_WORD","getPayloadLength"],"mappings":"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","file":"hasplayer.min.js","sourcesContent":["/*\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * author Digital Primates\n * copyright dash-if 2012\n */\n\n/*\n * var parent,\n *     child,\n *     properties = [\n                    {\n                        name: 'profiles',\n                        merge: false\n                    }\n                ];\n *\n * parent = {};\n * parent.name = \"ParentNode\";\n * parent.isRoor = false;\n * parent.isArray = false;\n * parent.parent = null;\n * parent.children = [];\n * parent.properties = properties;\n *\n * child = {};\n * child.name = \"ChildNode\";\n * child.isRoor = false;\n * child.isArray = true;\n * child.parent = parent;\n * child.children = null;\n * child.properties = properties;\n * parent.children.push(child);\n *\n */\n\nfunction ObjectIron(map) {\n\n    var lookup;\n\n    // create a list of top level items to search for\n    lookup = [];\n    for (i = 0, len = map.length; i < len; i += 1) {\n        if (map[i].isRoot) {\n            lookup.push(\"root\");\n        } else {\n            lookup.push(map[i].name);\n        }\n    }\n\n    var mergeValues = function (parentItem, childItem) {\n            var name,\n                parentValue,\n                childValue;\n\n            if (parentItem === null || childItem === null) {\n                return;\n            }\n\n            for (name in parentItem) {\n                if (parentItem.hasOwnProperty(name)) {\n                    if (!childItem.hasOwnProperty(name)) {\n                        childItem[name] = parentItem[name];\n                    }\n                }\n            }\n        },\n\n        mapProperties = function (properties, parent, child) {\n            var i,\n                len,\n                property,\n                parentValue,\n                childValue;\n\n            if (properties === null || properties.length === 0) {\n                return;\n            }\n\n            for (i = 0, len = properties.length; i < len; i += 1) {\n                property = properties[i];\n\n                if (parent.hasOwnProperty(property.name)) {\n                    if (child.hasOwnProperty(property.name)) {\n                        // check to see if we should merge\n                        if (property.merge) {\n                           parentValue = parent[property.name];\n                           childValue = child[property.name];\n\n                            // complex objects; merge properties\n                            if (typeof parentValue === 'object' && typeof childValue === 'object') {\n                                mergeValues(parentValue, childValue);\n                            }\n                            // simple objects; merge them together\n                            else {\n                                if (property.mergeFunction != null) {\n                                    child[property.name] = property.mergeFunction(parentValue, childValue);\n                                } else {\n                                    child[property.name] = parentValue + childValue;\n                                }\n                            }\n                        }\n                    } else {\n                        // just add the property\n                        child[property.name] = parent[property.name];\n                    }\n                }\n            }\n        },\n\n        mapItem = function (obj, node) {\n            var item = obj,\n                i,\n                len,\n                v,\n                len2,\n                array,\n                childItem,\n                childNode,\n                property;\n\n            if (item.children === null || item.children.length === 0) {\n                return;\n            }\n\n            for (i = 0, len = item.children.length; i < len; i += 1) {\n                childItem = item.children[i];\n\n                if (node.hasOwnProperty(childItem.name)) {\n                    if (childItem.isArray) {\n                        array = node[childItem.name + \"_asArray\"];\n                        for (v = 0, len2 = array.length; v < len2; v += 1) {\n                            childNode = array[v];\n                            mapProperties(item.properties, node, childNode);\n                            mapItem(childItem, childNode);\n                        }\n                    } else {\n                        childNode = node[childItem.name];\n                        mapProperties(item.properties, node, childNode);\n                        mapItem(childItem, childNode);\n                    }\n                }\n            }\n        },\n\n        performMapping = function (source) {\n            var i,\n                len,\n                pi,\n                pp,\n                item,\n                node,\n                array;\n\n            if (source === null) {\n                return source;\n            }\n\n            if (typeof source !== 'object') {\n                return source;\n            }\n\n            // first look to see if anything cares about the root node\n            for (i = 0, len = lookup.length; i < len; i += 1) {\n                if (lookup[i] === \"root\") {\n                    item = map[i];\n                    node = source;\n                    mapItem(item, node);\n                }\n            }\n\n            // iterate over the objects and look for any of the items we care about\n            for (pp in source) {\n                if (source.hasOwnProperty(pp)) {\n                    pi = lookup.indexOf(pp);\n                    if (pi !== -1) {\n                        item = map[pi];\n\n                        if (item.isArray) {\n                            array = source[pp + \"_asArray\"];\n                            for (i = 0, len = array.length; i < len; i += 1) {\n                                node = array[i];\n                                mapItem(item, node);\n                            }\n                        } else {\n                            node = source[pp];\n                            mapItem(item, node);\n                        }\n                    }\n                    // now check this to see if he has any of the properties we care about\n                    performMapping(source[pp]);\n                }\n            }\n\n            return source;\n        };\n\n    return {\n        run: performMapping\n    };\n}","/*\n Copyright 2011 Abdulla Abdurakhmanov\n Original sources are available at https://code.google.com/p/x2js/\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nfunction X2JS(matchers, attrPrefix, ignoreRoot) {\n    if (attrPrefix === null || attrPrefix === undefined) {\n        attrPrefix = \"_\";\n    }\n    \n    if (ignoreRoot === null || ignoreRoot === undefined) {\n        ignoreRoot = false;\n    }\n    \n\tvar VERSION = \"1.0.11\";\n\tvar escapeMode = false;\n\n\tvar DOMNodeTypes = {\n\t\tELEMENT_NODE \t   : 1,\n\t\tTEXT_NODE    \t   : 3,\n\t\tCDATA_SECTION_NODE : 4,\n\t\tCOMMENT_NODE       : 8,\n\t\tDOCUMENT_NODE \t   : 9\n\t};\n\t\n\tfunction getNodeLocalName( node ) {\n\t\tvar nodeLocalName = node.localName;\t\t\t\n\t\tif(nodeLocalName == null) // Yeah, this is IE!! \n\t\t\tnodeLocalName = node.baseName;\n\t\tif(nodeLocalName == null || nodeLocalName==\"\") // ==\"\" is IE too\n\t\t\tnodeLocalName = node.nodeName;\n\t\treturn nodeLocalName;\n\t}\n\t\n\tfunction getNodePrefix(node) {\n\t\treturn node.prefix;\n\t}\n\t\t\n\tfunction escapeXmlChars(str) {\n\t\tif(typeof(str) == \"string\")\n\t\t\treturn str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\\//g, '&#x2F;');\n\t\telse\n\t\t\treturn str;\n\t}\n\n\tfunction unescapeXmlChars(str) {\n\t\treturn str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&#x27;/g, \"'\").replace(/&#x2F;/g, '\\/')\n\t}\t\n\n\tfunction parseDOMChildren( node ) {\n\t\tif(node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {\n\t\t\tvar result,\n\t\t\t    child = node.firstChild,\n\t\t\t    i,\n\t\t\t    len; \n\t\t\t\n\t\t\t// get the first node that isn't a comment\n\t\t\tfor(i = 0, len = node.childNodes.length; i < len; i += 1) {\n\t\t\t   if (node.childNodes[i].nodeType !== DOMNodeTypes.COMMENT_NODE) {\n\t\t\t       child = node.childNodes[i];\n\t\t\t       break;\n\t\t\t   } \n\t\t\t}\n\t\t\t\n\t\t\tif ( ignoreRoot ) {\n\t\t\t    result = parseDOMChildren(child);\n\t\t\t} else {\n\t\t\t    result = {};\n\t\t\t    var childName = getNodeLocalName(child);\n                result[childName] = parseDOMChildren(child);\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t\telse\n\t\tif(node.nodeType == DOMNodeTypes.ELEMENT_NODE) {\n\t\t\tvar result = new Object;\n\t\t\tresult.__cnt=0;\n\t\t\t\n\t\t\tvar nodeChildren = node.childNodes;\n\t\t\t\n\t\t\t// Children nodes\n\t\t\tfor(var cidx=0; cidx <nodeChildren.length; cidx++) {\n\t\t\t\tvar child = nodeChildren.item(cidx); // nodeChildren[cidx];\n\t\t\t\tvar childName = getNodeLocalName(child);\n\t\t\t\t\n\t\t\t\tresult.__cnt++;\n\t\t\t\tif(result[childName] == null) {\n\t\t\t\t\tresult[childName] = parseDOMChildren(child);\n\t\t\t\t\tresult[childName+\"_asArray\"] = new Array(1);\n\t\t\t\t\tresult[childName+\"_asArray\"][0] = result[childName];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(result[childName] != null) {\n\t\t\t\t\t\tif( !(result[childName] instanceof Array)) {\n\t\t\t\t\t\t\tvar tmpObj = result[childName];\n\t\t\t\t\t\t\tresult[childName] = new Array();\n\t\t\t\t\t\t\tresult[childName][0] = tmpObj;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult[childName+\"_asArray\"] = result[childName];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar aridx = 0;\n\t\t\t\t\twhile(result[childName][aridx]!=null) aridx++;\n\t\t\t\t\t(result[childName])[aridx] = parseDOMChildren(child);\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t// Attributes\n\t\t\tfor(var aidx=0; aidx <node.attributes.length; aidx++) {\n\t\t\t\tvar attr = node.attributes.item(aidx); // [aidx];\n\t\t\t\tresult.__cnt++;\n\t\t\t\t\n\t\t\t\tvar value2 = attr.value;\n\t\t\t\tfor(var m=0, ml=matchers.length; m < ml; m++) {\n\t\t\t\t    var matchobj = matchers[m];\n\t\t\t\t    if (matchobj.test.call(this, attr.value))\n\t\t\t\t        value2 = matchobj.converter.call(this, attr.value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult[attrPrefix+attr.name]=value2;\n\t\t\t}\n\t\t\t\n\t\t\t// Node namespace prefix\n\t\t\tvar nodePrefix = getNodePrefix(node);\n\t\t\tif(nodePrefix!=null && nodePrefix!=\"\") {\n\t\t\t\tresult.__cnt++;\n\t\t\t\tresult.__prefix=nodePrefix;\n\t\t\t}\n\t\t\t\n\t\t\tif( result.__cnt == 1 && result[\"#text\"]!=null  ) {\n\t\t\t\tresult = result[\"#text\"];\n\t\t\t} \n\t\t\t\n\t\t\tif(result[\"#text\"]!=null) {\n\t\t\t\tresult.__text = result[\"#text\"];\n\t\t\t\tif(escapeMode)\n\t\t\t\t\tresult.__text = unescapeXmlChars(result.__text)\n\t\t\t\tdelete result[\"#text\"];\n\t\t\t\tdelete result[\"#text_asArray\"];\n\t\t\t}\n\t\t\tif(result[\"#cdata-section\"]!=null) {\n\t\t\t\tresult.__cdata = result[\"#cdata-section\"];\n\t\t\t\tdelete result[\"#cdata-section\"];\n\t\t\t\tdelete result[\"#cdata-section_asArray\"];\n\t\t\t}\n\t\t\t\n\t\t\tif(result.__text!=null || result.__cdata!=null) {\n\t\t\t\tresult.toString = function() {\n\t\t\t\t\treturn (this.__text!=null? this.__text:'')+( this.__cdata!=null ? this.__cdata:'');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse\n\t\tif(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {\n\t\t\treturn node.nodeValue;\n\t\t}\t\n\t\telse\n\t\tif(node.nodeType == DOMNodeTypes.COMMENT_NODE) {\n\t\t    return null;\n\t\t}\n\t}\n\t\n\tfunction startTag(jsonObj, element, attrList, closed) {\n\t\tvar resultStr = \"<\"+ ( (jsonObj!=null && jsonObj.__prefix!=null)? (jsonObj.__prefix+\":\"):\"\") + element;\n\t\tif(attrList!=null) {\n\t\t\tfor(var aidx = 0; aidx < attrList.length; aidx++) {\n\t\t\t\tvar attrName = attrList[aidx];\n\t\t\t\tvar attrVal = jsonObj[attrName];\n\t\t\t\tresultStr+=\" \"+attrName.substr(1)+\"='\"+attrVal+\"'\";\n\t\t\t}\n\t\t}\n\t\tif(!closed)\n\t\t\tresultStr+=\">\";\n\t\telse\n\t\t\tresultStr+=\"/>\";\n\t\treturn resultStr;\n\t}\n\t\n\tfunction endTag(jsonObj,elementName) {\n\t\treturn \"</\"+ (jsonObj.__prefix!=null? (jsonObj.__prefix+\":\"):\"\")+elementName+\">\";\n\t}\n\t\n\tfunction endsWith(str, suffix) {\n\t    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n\t}\n\t\n\tfunction jsonXmlSpecialElem ( jsonObj, jsonObjField ) {\n\t\tif(endsWith(jsonObjField.toString(),(\"_asArray\")) \n\t\t\t\t|| jsonObjField.toString().indexOf(\"_\")==0 \n\t\t\t\t|| (jsonObj[jsonObjField] instanceof Function) )\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\tfunction jsonXmlElemCount ( jsonObj ) {\n\t\tvar elementsCnt = 0;\n\t\tif(jsonObj instanceof Object ) {\n\t\t\tfor( var it in jsonObj  ) {\n\t\t\t\tif(jsonXmlSpecialElem ( jsonObj, it) )\n\t\t\t\t\tcontinue;\t\t\t\n\t\t\t\telementsCnt++;\n\t\t\t}\n\t\t}\n\t\treturn elementsCnt;\n\t}\n\t\n\tfunction parseJSONAttributes ( jsonObj ) {\n\t\tvar attrList = [];\n\t\tif(jsonObj instanceof Object ) {\n\t\t\tfor( var ait in jsonObj  ) {\n\t\t\t\tif(ait.toString().indexOf(\"__\")== -1 && ait.toString().indexOf(\"_\")==0) {\n\t\t\t\t\tattrList.push(ait);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn attrList;\n\t}\n\t\n\tfunction parseJSONTextAttrs ( jsonTxtObj ) {\n\t\tvar result =\"\";\n\t\t\n\t\tif(jsonTxtObj.__cdata!=null) {\t\t\t\t\t\t\t\t\t\t\n\t\t\tresult+=\"<![CDATA[\"+jsonTxtObj.__cdata+\"]]>\";\t\t\t\t\t\n\t\t}\n\t\t\n\t\tif(jsonTxtObj.__text!=null) {\t\t\t\n\t\t\tif(escapeMode)\n\t\t\t\tresult+=escapeXmlChars(jsonTxtObj.__text);\n\t\t\telse\n\t\t\t\tresult+=jsonTxtObj.__text;\n\t\t}\n\t\treturn result\n\t}\n\t\n\tfunction parseJSONTextObject ( jsonTxtObj ) {\n\t\tvar result =\"\";\n\n\t\tif( jsonTxtObj instanceof Object ) {\n\t\t\tresult+=parseJSONTextAttrs ( jsonTxtObj )\n\t\t}\n\t\telse\n\t\t\tif(jsonTxtObj!=null) {\n\t\t\t\tif(escapeMode)\n\t\t\t\t\tresult+=escapeXmlChars(jsonTxtObj);\n\t\t\t\telse\n\t\t\t\t\tresult+=jsonTxtObj;\n\t\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\tfunction parseJSONArray ( jsonArrRoot, jsonArrObj, attrList ) {\n\t\tvar result = \"\"; \n\t\tif(jsonArrRoot.length == 0) {\n\t\t\tresult+=startTag(jsonArrRoot, jsonArrObj, attrList, true);\n\t\t}\n\t\telse {\n\t\t\tfor(var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {\n\t\t\t\tresult+=startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);\n\t\t\t\tresult+=parseJSONObject(jsonArrRoot[arIdx]);\n\t\t\t\tresult+=endTag(jsonArrRoot[arIdx],jsonArrObj);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tfunction parseJSONObject ( jsonObj ) {\n\t\tvar result = \"\";\t\n\n\t\tvar elementsCnt = jsonXmlElemCount ( jsonObj );\n\t\t\n\t\tif(elementsCnt > 0) {\n\t\t\tfor( var it in jsonObj ) {\n\t\t\t\t\n\t\t\t\tif(jsonXmlSpecialElem ( jsonObj, it) )\n\t\t\t\t\tcontinue;\t\t\t\n\t\t\t\t\n\t\t\t\tvar subObj = jsonObj[it];\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tvar attrList = parseJSONAttributes( subObj )\n\t\t\t\t\n\t\t\t\tif(subObj == null || subObj == undefined) {\n\t\t\t\t\tresult+=startTag(subObj, it, attrList, true)\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\tif(subObj instanceof Object) {\n\t\t\t\t\t\n\t\t\t\t\tif(subObj instanceof Array) {\t\t\t\t\t\n\t\t\t\t\t\tresult+=parseJSONArray( subObj, it, attrList )\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar subObjElementsCnt = jsonXmlElemCount ( subObj );\n\t\t\t\t\t\tif(subObjElementsCnt > 0 || subObj.__text!=null || subObj.__cdata!=null) {\n\t\t\t\t\t\t\tresult+=startTag(subObj, it, attrList, false);\n\t\t\t\t\t\t\tresult+=parseJSONObject(subObj);\n\t\t\t\t\t\t\tresult+=endTag(subObj,it);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tresult+=startTag(subObj, it, attrList, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult+=startTag(subObj, it, attrList, false);\n\t\t\t\t\tresult+=parseJSONTextObject(subObj);\n\t\t\t\t\tresult+=endTag(subObj,it);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresult+=parseJSONTextObject(jsonObj);\n\t\t\n\t\treturn result;\n\t}\n\t\n\tthis.parseXmlString = function(xmlDocStr) {\n\t\tvar xmlDoc;\n\t\tif (window.DOMParser) {\n\t\t\t// ORANGE: XML parsing management\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar parser=new window.DOMParser();\n\t\t\t\txmlDoc = parser.parseFromString( xmlDocStr, \"text/xml\" );\n\t\t\t\tif(xmlDoc.getElementsByTagName('parsererror').length > 0) {\n\t\t\t\t\t  throw new Error('Error parsing XML');\n\t\t\t\t}\n\t\t\t\t//var parsererrorNS = parser.parseFromString('INVALID', 'text/xml').childNodes[0].namespaceURI;\n\t\t\t    //if(xmlDoc.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0) {\n\t\t\t    //    throw new Error('Error parsing XML');\n\t\t\t    //}\t\t\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn xmlDoc;\n\t}\n\n\tthis.xml2json = function (xmlDoc) {\n\t\treturn parseDOMChildren ( xmlDoc );\n\t}\n\t\n\tthis.xml_str2json = function (xmlDocStr) {\n\t\tvar xmlDoc = this.parseXmlString(xmlDocStr);\t\n\t\treturn xmlDoc === null ? xmlDoc : this.xml2json(xmlDoc);\n\t}\n\n\tthis.json2xml_str = function (jsonObj) {\n\t\treturn parseJSONObject ( jsonObj );\n\t}\n\n\tthis.json2xml = function (jsonObj) {\n\t\tvar xmlDocStr = this.json2xml_str (jsonObj);\n\t\treturn this.parseXmlString(xmlDocStr);\n\t}\n\t\n\tthis.getVersion = function () {\n\t\treturn VERSION;\n\t}\t\t\n\t\n\tthis.escapeMode = function(enabled) {\n\t\tescapeMode = enabled;\n\t}\n}","/*   Copyright (C) 2011,2012,2013,2014 John Kula */\n\n/*\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n    All trademarks and service marks contained within this document are\n    property of their respective owners.\n\n    Version 2014.07.23\n\n    Updates may be found at: http:\\\\www.darkwavetech.com\n\n*/\n\n/*jslint browser:true */\n\n/* This function returns the browser and version number by using the navigator.useragent object */\n\nfunction fingerprint_browser() {\n    \"use strict\";\n    var userAgent,\n        name,\n        version;\n\n    try {\n\n        userAgent = navigator.userAgent.toLowerCase();\n\n        if (/msie (\\d+\\.\\d+);/.test(userAgent)) { //test for MSIE x.x;\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            if (userAgent.indexOf(\"trident/6\") > -1) {\n                version = 10;\n            }\n            if (userAgent.indexOf(\"trident/5\") > -1) {\n                version = 9;\n            }\n            if (userAgent.indexOf(\"trident/4\") > -1) {\n                version = 8;\n            }\n            name = \"Internet Explorer\";\n        } else if (userAgent.indexOf(\"trident/7\") > -1) { //IE 11+ gets rid of the legacy 'MSIE' in the user-agent string;\n            version = 11;\n            name = \"Internet Explorer\";\n        }  else if (/edge[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Firefox/x.x or Firefox x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Edge\";\n        }  else if (/firefox[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Firefox/x.x or Firefox x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Firefox\";\n        } else if (/opera[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Opera/x.x or Opera x.x (ignoring remaining decimal places);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Opera\";\n        } else if (/chrome[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Chrome/x.x or Chrome x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Chrome\";\n        } else if (/version[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Version/x.x or Version x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Safari\";\n        } else if (/rv[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for rv/x.x or rv x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Mozilla\";\n        } else if (/mozilla[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Mozilla/x.x or Mozilla x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Mozilla\";\n        } else if (/binget[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for BinGet/x.x or BinGet x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (BinGet)\";\n        } else if (/curl[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Curl/x.x or Curl x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (cURL)\";\n        } else if (/java[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Java/x.x or Java x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (Java)\";\n        } else if (/libwww-perl[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for libwww-perl/x.x or libwww-perl x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (libwww-perl)\";\n        } else if (/microsoft url control -[\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Microsoft URL Control - x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (Microsoft URL Control)\";\n        } else if (/peach[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for Peach/x.x or Peach x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (Peach)\";\n        } else if (/php[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for PHP/x.x or PHP x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (PHP)\";\n        } else if (/pxyscand[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for pxyscand/x.x or pxyscand x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (pxyscand)\";\n        } else if (/pycurl[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for pycurl/x.x or pycurl x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (PycURL)\";\n        } else if (/python-urllib[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for python-urllib/x.x or python-urllib x.x (ignoring remaining digits);\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Library (Python URLlib)\";\n        } else if (/appengine-google/.test(userAgent)) { //test for AppEngine-Google;\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Cloud (Google AppEngine)\";\n        } else if (/trident/.test(userAgent)) { //test for Trident;\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Trident\";\n        } else if (/adventurer/.test(userAgent)) { //test for Orange Adventurer;\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"Adventurer\";\n        } else if (/webkit[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) { //test for generic webkit port;\n            version = Number(RegExp.$1); // capture x.x portion and store as a number\n            name = \"WebKit\";\n        } else {\n            version = \"unknown\";\n            name = \"unknown\";\n        }\n    } catch (err) {\n        name = \"error\";\n        version = \"error\";\n    }\n\n    return {\n        name: name.replace(/\\s+/g, ''),\n        version: version\n    };\n}\n","/*   Copyright (C) 2011,2012,2013,2014 John Kula */\n\n/*\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n    All trademarks and service marks contained within this document are\n    property of their respective owners.\n\n    Version 2014.07.23\n\n    Updates may be found at: http:\\\\www.darkwavetech.com\n\n*/\n\n/*jslint browser:true */\n\n/* This function returns the operating system and number of bits by looking at the navigator.useragent and navigator.platform objects */\n\nfunction fingerprint_os() {\n    \"use strict\";\n\n    var userAgent,\n        platform,\n        name,\n        bits,\n        os = {\n            name: \"\",\n            bits: \"\"\n        };\n\n    try {\n        /* navigator.userAgent is supported by all major browsers */\n        userAgent = navigator.userAgent.toLowerCase();\n\n        if (userAgent.indexOf(\"windows nt 10.0\") !== -1) {\n            name = \"Windows 10\";\n        } else if (userAgent.indexOf(\"windows nt 6.3\") !== -1) {\n            name = \"Windows 8.1\";\n        } else if (userAgent.indexOf(\"windows nt 6.2\") !== -1) {\n            name = \"Windows 8\";\n        } else if (userAgent.indexOf(\"windows nt 6.1\") !== -1) {\n            name = \"Windows 7\";\n        } else if (userAgent.indexOf(\"windows nt 6.0\") !== -1) {\n            name = \"Windows Vista/Windows Server 2008\";\n        } else if (userAgent.indexOf(\"windows nt 5.2\") !== -1) {\n            name = \"Windows XP x64/Windows Server 2003\";\n        } else if (userAgent.indexOf(\"windows nt 5.1\") !== -1) {\n            name = \"Windows XP\";\n        } else if (userAgent.indexOf(\"windows nt 5.01\") !== -1) {\n            name = \"Windows 2000, Service Pack 1 (SP1)\";\n        } else if (userAgent.indexOf(\"windows xp\") !== -1) {\n            name = \"Windows XP\";\n        } else if (userAgent.indexOf(\"windows 2000\") !== -1) {\n            name = \"Windows 2000\";\n        } else if (userAgent.indexOf(\"windows nt 5.0\") !== -1) {\n            name = \"Windows 2000\";\n        } else if (userAgent.indexOf(\"windows nt 4.0\") !== -1) {\n            name = \"Windows NT 4.0\";\n        } else if (userAgent.indexOf(\"windows nt\") !== -1) {\n            name = \"Windows NT 4.0\";\n        } else if (userAgent.indexOf(\"winnt4.0\") !== -1) {\n            name = \"Windows NT 4.0\";\n        } else if (userAgent.indexOf(\"winnt\") !== -1) {\n            name = \"Windows NT 4.0\";\n        } else if (userAgent.indexOf(\"windows me\") !== -1) {\n            name = \"Windows ME\";\n        } else if (userAgent.indexOf(\"win 9x 4.90\") !== -1) {\n            name = \"Windows ME\";\n        } else if (userAgent.indexOf(\"windows 98\") !== -1) {\n            name = \"Windows 98\";\n        } else if (userAgent.indexOf(\"win98\") !== -1) {\n            name = \"Windows 98\";\n        } else if (userAgent.indexOf(\"windows 95\") !== -1) {\n            name = \"Windows 95\";\n        } else if (userAgent.indexOf(\"windows_95\") !== -1) {\n            name = \"Windows 95\";\n        } else if (userAgent.indexOf(\"win95\") !== -1) {\n            name = \"Windows 95\";\n        } else if (userAgent.indexOf(\"ce\") !== -1) {\n            name = \"Windows CE\";\n        } else if (userAgent.indexOf(\"win16\") !== -1) {\n            name = \"Windows 3.11\";\n        } else if (userAgent.indexOf(\"iemobile\") !== -1) {\n            name = \"Windows Mobile\";\n        } else if (userAgent.indexOf(\"wm5 pie\") !== -1) {\n            name = \"Windows Mobile\";\n        } else if (userAgent.indexOf(\"windows phone 10.0\") !== -1) {\n            name = \"Windows Phone 10\";\n        } else if (userAgent.indexOf(\"windows\") !== -1) {\n            name = \"Windows (Unknown Version)\";\n        } else if (userAgent.indexOf(\"openbsd\") !== -1) {\n            name = \"Open BSD\";\n        } else if (userAgent.indexOf(\"sunos\") !== -1) {\n            name = \"Sun OS\";\n        } else if (userAgent.indexOf(\"ubuntu\") !== -1) {\n            name = \"Ubuntu\";\n        } else if (userAgent.indexOf(\"ipad\") !== -1) {\n            name = \"iOS (iPad)\";\n        } else if (userAgent.indexOf(\"ipod\") !== -1) {\n            name = \"iOS (iTouch)\";\n        } else if (userAgent.indexOf(\"iphone\") !== -1) {\n            name = \"iOS (iPhone)\";\n        } else if (userAgent.indexOf(\"mac os x beta\") !== -1) {\n            name = \"Mac O SX Beta\";\n        } else if (userAgent.indexOf(\"mac os x 10\") !== -1) {\n            if (/mac os x 10_(\\d+)\\_(\\d+)/.test(userAgent)) {\n                name = \"Mac OS X 10.\" + RegExp.$1;\n            } else {\n                name = \"Mac OS X 10\";\n            }\n        } else if (userAgent.indexOf(\"mac os x\") !== -1) {\n            name = \"Mac OS X\";\n        } else if (userAgent.indexOf(\"mac_68000\") !== -1) {\n            name = \"Mac OS Classic (68000)\";\n        } else if (userAgent.indexOf(\"68K\") !== -1) {\n            name = \"Mac OS Classic (68000)\";\n        } else if (userAgent.indexOf(\"mac_powerpc\") !== -1) {\n            name = \"Mac OS Classic (PowerPC)\";\n        } else if (userAgent.indexOf(\"ppc mac\") !== -1) {\n            name = \"Mac OS Classic (PowerPC)\";\n        } else if (userAgent.indexOf(\"macintosh\") !== -1) {\n            name = \"Mac OS Classic\";\n        } else if (userAgent.indexOf(\"googletv\") !== -1) {\n            name = \"Android (GoogleTV)\";\n        } else if (userAgent.indexOf(\"xoom\") !== -1) {\n            name = \"Android (Xoom)\";\n        } else if (userAgent.indexOf(\"htc_flyer\") !== -1) {\n            name = \"Android (HTC Flyer)\";\n        } else if (userAgent.indexOf(\"android\") !== -1) {\n            name = \"Android\";\n        } else if (userAgent.indexOf(\"symbian\") !== -1) {\n            name = \"Symbian\";\n        } else if (userAgent.indexOf(\"series60\") !== -1) {\n            name = \"Symbian (Series 60)\";\n        } else if (userAgent.indexOf(\"series70\") !== -1) {\n            name = \"Symbian (Series 70)\";\n        } else if (userAgent.indexOf(\"series80\") !== -1) {\n            name = \"Symbian (Series 80)\";\n        } else if (userAgent.indexOf(\"series90\") !== -1) {\n            name = \"Symbian (Series 90)\";\n        } else if (userAgent.indexOf(\"x11\") !== -1) {\n            name = \"UNIX\";\n        } else if (userAgent.indexOf(\"nix\") !== -1) {\n            name = \"UNIX\";\n        } else if (userAgent.indexOf(\"linux\") !== -1) {\n            name = \"Linux\";\n        } else if (userAgent.indexOf(\"qnx\") !== -1) {\n            name = \"QNX\";\n        } else if (userAgent.indexOf(\"os/2\") !== -1) {\n            name = \"IBM OS/2\";\n        } else if (userAgent.indexOf(\"beos\") !== -1) {\n            name = \"BeOS\";\n        } else if (userAgent.indexOf(\"blackberry95\") !== -1) {\n            name = \"Blackberry (Storm 1/2)\";\n        } else if (userAgent.indexOf(\"blackberry97\") !== -1) {\n            name = \"Blackberry (Bold)\";\n        } else if (userAgent.indexOf(\"blackberry96\") !== -1) {\n            name = \"Blackberry (Tour)\";\n        } else if (userAgent.indexOf(\"blackberry89\") !== -1) {\n            name = \"Blackberry (Curve 2)\";\n        } else if (userAgent.indexOf(\"blackberry98\") !== -1) {\n            name = \"Blackberry (Torch)\";\n        } else if (userAgent.indexOf(\"playbook\") !== -1) {\n            name = \"Blackberry (Playbook)\";\n        } else if (userAgent.indexOf(\"wnd.rim\") !== -1) {\n            name = \"Blackberry (IE/FF Emulator)\";\n        } else if (userAgent.indexOf(\"blackberry\") !== -1) {\n            name = \"Blackberry\";\n        } else if (userAgent.indexOf(\"palm\") !== -1) {\n            name = \"Palm OS\";\n        } else if (userAgent.indexOf(\"webos\") !== -1) {\n            name = \"WebOS\";\n        } else if (userAgent.indexOf(\"hpwos\") !== -1) {\n            name = \"WebOS (HP)\";\n        } else if (userAgent.indexOf(\"blazer\") !== -1) {\n            name = \"Palm OS (Blazer)\";\n        } else if (userAgent.indexOf(\"xiino\") !== -1) {\n            name = \"Palm OS (Xiino)\";\n        } else if (userAgent.indexOf(\"kindle\") !== -1) {\n            name = \"Kindle\";\n        } else if (userAgent.indexOf(\"wii\") !== -1) {\n            name = \"Nintendo (Wii)\";\n        } else if (userAgent.indexOf(\"nintendo ds\") !== -1) {\n            name = \"Nintendo (DS)\";\n        } else if (userAgent.indexOf(\"playstation 3\") !== -1) {\n            name = \"Sony (Playstation Console)\";\n        } else if (userAgent.indexOf(\"playstation portable\") !== -1) {\n            name = \"Sony (Playstation Portable)\";\n        } else if (userAgent.indexOf(\"webtv\") !== -1) {\n            name = \"MSN TV (WebTV)\";\n        } else if (userAgent.indexOf(\"inferno\") !== -1) {\n            name = \"Inferno\";\n        } else {\n            name = \"Unknown\";\n        }\n\n        /* navigator.platform is supported by all major browsers */\n        platform = navigator.platform.toLowerCase();\n\n        if (platform.indexOf(\"x64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"x86_64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"x86-64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"win64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"x64;\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"amd64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"wow64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"x64_64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"ia65\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"sparc64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"ppc64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"irix64\") !== -1) {\n            bits = \"64\";\n        } else if (userAgent.indexOf(\"irix64\") !== -1) {\n            bits = \"64\";\n        } else {\n            bits = \"32\";\n        }\n    } catch (err) {\n        name = \"error\";\n        bits = \"error\";\n    }\n\n    return {\n        name: name.replace(/\\s+/g, ''),\n        bits: \"x\" + bits\n    };\n}","/**\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * @constructs MediaPlayer\n *\n */\n/*jshint -W020 */\n\n/**\n * @class\n * @classdesc MediaPlayer is the object used by the webapp to instanciante and control hasplayer.\n */\nMediaPlayer = function () {\n\n//#region Private attributes/properties\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////// PRIVATE ////////////////////////////////////////////\n    var VERSION_DASHJS = '1.2.0',\n        VERSION = 'DEV',\n        GIT_TAG = '@@REVISION',\n        BUILD_DATE = '@@TIMESTAMP',\n        context = new MediaPlayer.di.Context(), // default context\n        system = new dijon.System(), // dijon system instance\n        initialized = false,\n        debugController = null, // use to handle key pressed and download debug file\n        videoModel, // model to manipulate the domVideoNode\n        videoBitrates = null, //bitrates list of video\n        audioBitrates = null,\n        videoQualityChanged = [],\n        audioQualityChanged = [],\n        error = null,\n        warning = null,\n        defaultAudioLang = 'und',\n        defaultSubtitleLang = 'und',\n        subtitlesEnabled = false,\n        initialQuality = {\n            video: -1,\n            audio: -1\n        },\n        streamController = null,\n        resetting = false,\n        playing = false,\n        autoPlay = true,\n        source = null, // current source played\n        scheduleWhilePaused = false, // should we buffer while in pause\n        isSafari = (fingerprint_browser().name === \"Safari\"),\n        plugins = {};\n//#endregion\n\n//#region Private methods\n    var _isPlayerInitialized = function () {\n        if (!initialized) {\n            throw new Error('MediaPlayer not initialized !!!');\n        }\n    };\n\n    var _isVideoModelInitialized = function () {\n        if (!videoModel.getElement()) {\n            throw new Error('MediaPlayer.play(): Video element not attached to MediaPlayer');\n        }\n    };\n\n    var _isSourceInitialized = function () {\n        if (!source) {\n            throw new Error('MediaPlayer.play(): Source not attached to MediaPlayer');\n        }\n    };\n\n    var _play = function () {\n        var plugin,\n            pluginsInitDefer = [],\n            pluginsLoadDefer = [];\n\n        _isPlayerInitialized();\n        _isVideoModelInitialized();\n        _isSourceInitialized();\n\n        // Check MSE support\n        // (except in case of HLS streams on Safari for which we do not use MSE)\n        if (!(isSafari && source.protocol === 'HLS') && !MediaPlayer.hasMediaSourceExtension()) {\n            this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.CAPABILITY_ERR_MEDIASOURCE, \"MediaSource extension not supported by the browser\");\n            return;\n        }\n\n        // Wait for plugins completely intialized before starting a new session\n        for(var name in  plugins) {\n            pluginsInitDefer.push(plugins[name].deferInit.promise);\n        }\n        Q.all(pluginsInitDefer).then((function () {\n            // Notify plugins a new stream is loaded\n            for (var name in plugins) {\n                plugin = plugins[name];\n                plugin.deferLoad = Q.defer();\n                pluginsLoadDefer.push(plugin.deferLoad.promise);\n                plugin.load(source, function () {\n                    this.deferLoad.resolve();\n                }.bind(plugin));\n            }\n\n            Q.all(pluginsLoadDefer).then((function () {\n                // Once all plugins are ready, we load the stream\n                playing = true;\n\n                this.metricsModel.addSession(null, source.url, videoModel.getElement().loop, null, \"MediaPlayer.js_\" + this.getVersion());\n\n                this.debug.log(\"[MediaPlayer] Version: \" + this.getVersionFull() + \" - \" + this.getBuildDate());\n                this.debug.log(\"[MediaPlayer] user-agent: \" + navigator.userAgent);\n                this.debug.log(\"[MediaPlayer] Load stream:\\n\", JSON.stringify(source, null, '  '));\n\n                // streamController Initialization\n                if (!streamController) {\n                    streamController = system.getObject('streamController');\n                    streamController.setVideoModel(videoModel);\n                    streamController.setAutoPlay(autoPlay);\n                }\n\n                streamController.setDefaultAudioLang(defaultAudioLang);\n                streamController.setDefaultSubtitleLang(defaultSubtitleLang);\n                streamController.enableSubtitles(subtitlesEnabled);\n                streamController.load(source);\n                system.mapValue(\"scheduleWhilePaused\", scheduleWhilePaused);\n                system.mapOutlet(\"scheduleWhilePaused\", \"stream\");\n\n            }).bind(this));\n        }).bind(this));\n    };\n\n    // player state and intitialization\n    var _isReady = function () {\n        return initialized && videoModel.getElement() && source && !resetting;\n    };\n\n    var _doAutoPlay = function () {\n        if (_isReady()) {\n            _play.call(this);\n        }\n    };\n\n    // event disptach\n    var _dispatchBitrateEvent = function (type, value) {\n        var event = document.createEvent(\"CustomEvent\");\n        event.initCustomEvent(type, false, false, {\n            type: value.streamType,\n            bitrate: value.switchedQuality,\n            representationId: value.representationId,\n            time: videoModel.getCurrentTime(),\n            width: value.width,\n            height: value.height\n        });\n        videoModel.getElement().dispatchEvent(event);\n    };\n\n    var _metricAdded = function (e) {\n        var event;\n        switch (e.data.metric) {\n            case \"ManifestReady\":\n                _isPlayerInitialized();\n                this.debug.log(\"[MediaPlayer] ManifestReady\");\n                videoBitrates = this.metricsExt.getBitratesForType('video');\n                this.debug.log(\"[MediaPlayer] video bitrates: \" + JSON.stringify(videoBitrates));\n                event = document.createEvent(\"CustomEvent\");\n                event.initCustomEvent('manifest_loaded', false, false, {});\n                videoModel.getElement().dispatchEvent(event);\n                break;\n            case \"RepresentationSwitch\":\n                _isPlayerInitialized();\n                if (e.data.stream == \"video\") {\n                    videoBitrates = this.metricsExt.getBitratesForType(e.data.stream);\n                    if (videoBitrates) {\n                        _dispatchBitrateEvent('download_bitrate', {\n                            streamType: e.data.stream,\n                            switchedQuality: videoBitrates[e.data.value.lto],\n                            representationId: e.data.value.to,\n                            width: this.metricsExt.getVideoWidthForRepresentation(e.data.value.to),\n                            height: this.metricsExt.getVideoHeightForRepresentation(e.data.value.to)\n                        });\n                        this.debug.log(\"[MediaPlayer][\" + e.data.stream + \"] send download_bitrate - b=\" + videoBitrates[e.data.value.lto]);\n                    }\n                } else if (e.data.stream == \"audio\") {\n                    audioBitrates = this.metricsExt.getBitratesForType(e.data.stream);\n                    if (audioBitrates) {\n                        _dispatchBitrateEvent('download_bitrate', {\n                            streamType: e.data.stream,\n                            switchedQuality: audioBitrates[e.data.value.lto],\n                            representationId: e.data.value.to,\n                            width: this.metricsExt.getVideoWidthForRepresentation(e.data.value.to),\n                            height: this.metricsExt.getVideoHeightForRepresentation(e.data.value.to)\n                        });\n                        this.debug.log(\"[MediaPlayer][\" + e.data.stream + \"] send download_bitrate - b=\" + videoBitrates[e.data.value.lto]);\n                    }\n                }\n                break;\n            case \"BufferedSwitch\":\n                _isPlayerInitialized();\n                if (e.data.stream == \"video\") {\n                    videoQualityChanged.push({\n                        streamType: e.data.stream,\n                        mediaStartTime: e.data.value.mt,\n                        switchedQuality: videoBitrates[e.data.value.lto],\n                        representationId: e.data.value.to,\n                        width: this.metricsExt.getVideoWidthForRepresentation(e.data.value.to),\n                        height: this.metricsExt.getVideoHeightForRepresentation(e.data.value.to)\n                    });\n                } else if (e.data.stream == \"audio\") {\n                    audioQualityChanged.push({\n                        streamType: e.data.stream,\n                        mediaStartTime: e.data.value.mt,\n                        switchedQuality: audioBitrates[e.data.value.lto],\n                        representationId: e.data.value.to,\n                        width: this.metricsExt.getVideoWidthForRepresentation(e.data.value.to),\n                        height: this.metricsExt.getVideoHeightForRepresentation(e.data.value.to)\n                    });\n                }\n                break;\n            case \"BufferLevel\":\n                //this.debug.log(\"[MediaPlayer] BufferLevel = \"+e.data.value.level+\" for type = \"+e.data.stream);\n                event = document.createEvent(\"CustomEvent\");\n                event.initCustomEvent('bufferLevel_updated', false, false, {\n                    type: e.data.stream,\n                    level: e.data.value.level\n                });\n                videoModel.getElement().dispatchEvent(event);\n                break;\n            case \"State\":\n                //this.debug.log(\"[MediaPlayer] State = \"+e.data.value.current+\" for type = \"+e.data.stream);\n                event = document.createEvent(\"CustomEvent\");\n                event.initCustomEvent('state_changed', false, false, {\n                    type: e.data.stream,\n                    state: e.data.value.current\n                });\n                videoModel.getElement().dispatchEvent(event);\n                break;\n        }\n    };\n\n    var _onError = function (e) {\n        error = e.data;\n        this.reset(2);\n    };\n\n    var _onWarning = function (e) {\n        warning = e.data;\n    };\n\n    var _cleanStreamTab = function (streamTab, idToRemove) {\n        var i = 0;\n\n        for (i = idToRemove.length - 1; i >= 0; i -= 1) {\n            streamTab.splice(i, 1);\n        }\n    };\n\n    var _detectPlayBitrateChange = function (streamTab) {\n        var currentTime = videoModel.getCurrentTime(),\n            currentSwitch = null,\n            idToRemove = [],\n            i = 0;\n\n        for (i = 0; i < streamTab.length; i += 1) {\n            currentSwitch = streamTab[i];\n            if (currentTime >= currentSwitch.mediaStartTime) {\n                _dispatchBitrateEvent('play_bitrate', currentSwitch);\n                this.debug.log(\"[MediaPlayer][\" + currentSwitch.streamType + \"] send play_bitrate - b=\" + currentSwitch.switchedQuality + \", t=\" + currentSwitch.mediaStartTime + \"(\" + videoModel.getPlaybackRate() + \")\");\n                // And remove when it's played\n                idToRemove.push(i);\n            }\n        }\n\n        _cleanStreamTab(streamTab, idToRemove);\n    };\n\n    // Usefull to dispatch event of quality changed\n    var _onTimeupdate = function () {\n        // If not in playing state, then do not send 'play_bitrate' events, wait for 'loadeddata' event first\n        if (videoModel.getPlaybackRate() === 0) {\n            return;\n        }\n        // Check for video playing quality change\n        _detectPlayBitrateChange.call(this, videoQualityChanged);\n        // Check for audio playing quality change\n        _detectPlayBitrateChange.call(this, audioQualityChanged);\n    };\n\n    // event connection\n    var _connectEvents = function () {\n        this.addEventListener('metricAdded', _metricAdded.bind(this));\n        this.addEventListener('error', _onError.bind(this));\n        this.addEventListener('warning', _onWarning.bind(this));\n        this.addEventListener('timeupdate', _onTimeupdate.bind(this));\n    };\n\n    // Keyboard handler to display version\n    var _handleKeyPressedEvent = function(e) {\n        // If Ctrl+Alt+Shift+d is pressed then display MediaPlayer version and plugins versions\n        if (e.altKey === true && e.ctrlKey === true && e.shiftKey === true && e.keyCode === 86) {\n            console.log('[MediaPlayer] Version: ' + this.getVersion() + ' - ' + this.getBuildDate());\n            for (var plugin in plugins) {\n                console.log('[' + plugins[plugin].getName() + '] Version: ' + plugins[plugin].getVersion() + ' - ' + plugins[plugin].getBuildDate());\n            }\n            \n        }\n    };\n\n    /// Private playback functions ///\n    var _resetAndPlay = function (reason) {\n        if (playing && streamController) {\n            if (!resetting) {\n                resetting = true;\n\n                var teardownComplete = {};\n                teardownComplete[MediaPlayer.dependencies.StreamController.eventList.ENAME_TEARDOWN_COMPLETE] = (function () {\n\n                    // Notify plugins that player is reset\n                    for (var plugin in plugins) {\n                        plugins[plugin].reset();\n                    }\n\n                    // Finish rest of shutdown process\n                    streamController = null;\n                    playing = false;\n\n                    resetting = false;\n\n                    this.debug.log(\"[MediaPlayer] Player is stopped\");\n\n                    if (_isReady.call(this)) {\n                        _doAutoPlay.call(this);\n                    }\n                }).bind(this);\n                streamController.subscribe(MediaPlayer.dependencies.StreamController.eventList.ENAME_TEARDOWN_COMPLETE, teardownComplete, undefined, true);\n                streamController.reset(reason);\n            }\n        } else {\n            if (_isReady.call(this)) {\n                _doAutoPlay.call(this);\n            }\n        }\n    };\n\n    var _toMediaPlayerTrack = function (track) {\n        if (!track) {\n            return null;\n        }\n        var _track = {};\n        if (track.id) {\n            _track.id = track.id;\n        }\n        if (track.lang) {\n            _track.lang = track.lang;\n        }\n        if (track.subType) {\n            _track.subType = track.subType;\n        }\n        return _track;\n    };\n\n    var _getTracksFromType = function (_type) {\n        if (!streamController) {\n            return null;\n        }\n        switch (_type) {\n            case MediaPlayer.TRACKS_TYPE.AUDIO:\n                return streamController.getAudioTracks();\n            case MediaPlayer.TRACKS_TYPE.TEXT:\n                return streamController.getSubtitleTracks();\n        }\n        return null;\n    };\n\n    var _getSelectedTrackFromType = function (_type) {\n        if (!streamController) {\n            return null;\n        }\n        switch (_type) {\n            case MediaPlayer.TRACKS_TYPE.AUDIO:\n                return streamController.getSelectedAudioTrack();\n            case MediaPlayer.TRACKS_TYPE.TEXT:\n                return streamController.getSelectedSubtitleTrack();\n        }\n        return null;\n    };\n\n    var _selectTrackFromType = function (_type, _track) {\n        if (!streamController) {\n            return null;\n        }\n        switch (_type) {\n            case MediaPlayer.TRACKS_TYPE.AUDIO:\n                streamController.setAudioTrack(_track);\n                break;\n            case MediaPlayer.TRACKS_TYPE.TEXT:\n                streamController.setSubtitleTrack(_track);\n                break;\n        }\n        return null;\n    };\n\n    var _isEqual = function (prop1, prop2) {\n        if (!prop1 && !prop2) {\n            // let's consider in this case that null and undefined are equal\n            return true;\n        }\n        return prop1 === prop2;\n    };\n\n    var _isSameTrack = function (track1, track2) {\n        return (_isEqual(track1.id, track2.id) && _isEqual(track1.lang, track2.lang) && _isEqual(track1.subType, track2.subType));\n    };\n\n    // parse the arguments of load function to make an object\n    var _parseLoadArguments = function () {\n        if (arguments && arguments.length > 0) {\n            var params = {};\n            // restaure url\n            if (typeof arguments[0] === 'string') {\n                params.url = arguments[0];\n            }\n            //restaure protData\n            if (arguments[1]) {\n                params.protData = arguments[1];\n            }\n            return params;\n        }\n\n    };\n\n    var _getDVRInfoMetric = function () {\n        var metrics = this.metricsModel.getReadOnlyMetricsFor('video'),\n            dvrInfo = metrics ? this.metricsExt.getCurrentDVRInfo(metrics) : null;\n        return dvrInfo;\n    };\n\n//#endregion\n\n//#region DIJON initialization\n    system.mapValue('system', system);\n    system.mapOutlet('system');\n    system.injectInto(context);\n//#endregion\n\n    return {\n        ///////////////////////////////////////////////////////////////////////////////////////////////\n        ////////////////////////////////////////// PUBLIC /////////////////////////////////////////////\n//#region dependencies\n        notifier: undefined,\n        debug: undefined,\n        eventBus: undefined,\n        metricsExt: undefined,\n        abrController: undefined,\n        metricsModel: undefined,\n        errHandler: undefined,\n        config: undefined,\n//#endregion\n\n//#region VERSION\n        /**\n         * Returns the version of the player.\n         * @method getVersion\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {string} the version of the player\n         */\n        getVersion: function () {\n            return VERSION;\n        },\n\n        /**\n         * Returns the full version of the player (including git tag).\n         * @method getVersionFull\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {string} the version of the player including git tag\n         */\n        getVersionFull: function () {\n            if (GIT_TAG.indexOf(\"@@\") === -1) {\n                return VERSION + '_' + GIT_TAG;\n            } else {\n                return VERSION;\n            }\n        },\n\n        /**\n         * Returns the version of dash.js from which this player has been built.\n         * @method getVersionDashJS\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {string} the dash.js version\n         */\n        getVersionDashJS: function () {\n            return VERSION_DASHJS;\n        },\n\n        /**\n         * Returns the date at which this player has been built.\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {string} the date at which this player has been built\n         */\n        getBuildDate: function () {\n            if (BUILD_DATE.indexOf(\"@@\") === -1) {\n                return BUILD_DATE;\n            } else {\n                return 'Not a builded version';\n            }\n        },\n//#endregion\n\n//#region INIT\n        /**\n         * Initialize the player.\n         * @method init\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {Object} video - the HTML5 video element used to decode and render the media data\n         */\n        init: function (video) {\n            if (!video) {\n                throw new Error('MediaPlayer.init(): Invalid Argument');\n            }\n            if (!initialized) {\n                system.injectInto(this);\n                initialized = true;\n                this.debug.log(\"[MediaPlayer] Version: \" + this.getVersionFull() + \" - \" + this.getBuildDate());\n                this.debug.log(\"[MediaPlayer] user-agent: \" + navigator.userAgent);\n            }\n            videoModel = system.getObject('videoModel');\n            videoModel.setElement(video);\n\n            // in case of init is called another time\n            /*if (playing && streamController) {\n                streamController.reset();\n                playing = false;\n            }*/\n\n            // connect default events\n            _connectEvents.call(this);\n            //debugController.init();\n\n            // create DebugController\n            debugController = system.getObject('debugController');\n            debugController.init(VERSION);\n\n            window.addEventListener('keydown', _handleKeyPressedEvent.bind(this));            \n        },\n//#endregion\n\n//#region LISTENERS\n        /**\n         * Registers a listener on the specified event.\n         * The possible event types are:\n         * <li>'error' (see [error]{@link MediaPlayer#event:error} event specification)\n         * <li>'warning' (see [warning]{@link MediaPlayer#event:warning} event specification)\n         * <li>'manifestUrlUpdate' (see [manifestUrlUpdate]{@link MediaPlayer#event:manifestUrlUpdate} event specification)\n         * <li>'play_bitrate' (see [play_bitrate]{@link MediaPlayer#event:play_bitrate} event specification)\n         * <li>'download_bitrate' (see [download_bitrate]{@link MediaPlayer#event:download_bitrate} event specification)\n         * <li>'bufferLevel_updated' (see [bufferLevel_updated]{@link MediaPlayer#event:bufferLevel_updated} event specification)\n         * <li>'state_changed' (see [state_changed]{@link MediaPlayer#event:state_changed} event specification)\n         * <li>'cueEnter' (see [cueEnter]{@link MediaPlayer#event:cueEnter} event specification)\n         * <li>'cueExit' (see [cueExit]{@link MediaPlayer#event:cueExit} event specification)\n         * @method addEventListener\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {string} type - the event type for listen to, either any HTML video element event or player event.\n         * @param {callback} listener - the callback which is called when an event of the specified type occurs\n         * @param {boolean} useCapture - see HTML DOM addEventListener() method specification\n         */\n        addEventListener: function (type, listener, useCapture) {\n            _isPlayerInitialized();\n            if (MediaPlayer.PUBLIC_EVENTS[type] === 'hasplayer') {\n                this.eventBus.addEventListener(type, listener, useCapture);\n            } else {\n                videoModel.listen(type, listener, useCapture);\n            }\n        },\n\n        /**\n         * Unregisters the listener previously registered with the addEventListener() method.\n         * @method removeEventListener\n         * @access public\n         * @memberof MediaPlayer#\n         * @see [addEventListener]{@link MediaPlayer#addEventListener}\n         * @param {string} type - the event type on which the listener was registered\n         * @param {callback} listener - the callback which was registered to the event type\n         */\n        removeEventListener: function (type, listener) {\n            _isPlayerInitialized();\n            if (MediaPlayer.PUBLIC_EVENTS[type] === 'hasplayer') {\n                this.eventBus.removeEventListener(type, listener);\n            } else {\n                videoModel.unlisten(type, listener);\n            }\n        },\n//#endregion\n\n//#region COMPONENTS GETTER\n        /**\n         * Returns the video model object.\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {object} the video model object\n         */\n        getVideoModel: function() {\n            return videoModel;\n        },\n\n        /**\n         * Returns the debug object.\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {object} the debug object\n         */\n        getDebug: function () {\n            return this.debug;\n        },\n\n        /**\n         * Returns the metrics extension object.\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {object} the metrics extension object\n         */\n        getMetricsExt: function () {\n            return this.metricsExt;\n        },\n//#endregion\n\n//#region CONFIG\n        /**\n         * Sets player configuration parameters.\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {MediaPlayer#PlayerParams} params - parameter(s) value(s) to set.\n         */\n        setConfig: function (params) {\n            if (this.config && params) {\n                this.debug.log(\"[MediaPlayer] set config: \" + JSON.stringify(params, null, '\\t'));\n                this.config.setParams(params);\n            }\n        },\n        setParams: function (params) {\n            this.setConfig(params);\n        },\n\n        /**\n         * Enables or disables debug information in the browser console.\n         * @method setDebug\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {boolean} value - true to enable debug information, false to disable\n         */\n        setDebug: function (value) {\n            _isPlayerInitialized();\n            if (typeof value !== 'boolean') {\n                throw new Error('MediaPlayer.setDebug(): Invalid Arguments');\n            }\n            if (value === true) {\n                this.debug.setLevel(4);\n            } else {\n                this.debug.setLevel(0);\n            }\n        },\n\n        /**\n         * Returns the autoplay state.\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {boolean} the autoplay state\n         */\n        getAutoPlay: function () {\n            return autoPlay;\n        },\n\n        /**\n         * Sets the autoplay state.\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {boolean} value - true to activate autoplay, false to disable autoplay\n         */\n        setAutoPlay: function (value) {\n            autoPlay = value;\n        },\n\n        /**\n         * Sets the initial quality to be downloaded for the given track type.\n         * This method has to be used before each call to load() method to set the initial quality.\n         * Otherwise, the initial quality is set according to previous bandwidth condition.\n         * @access public\n         * @memberof MediaPlayer#\n         * @see [setConfig]{@link MediaPlayer#setConfig} to set quality boundaries\n         * @param {string} type - the track type ('video' or 'audio')\n         * @param {number} value - the new initial quality index (starting from 0) to be downloaded\n         */\n        setInitialQualityFor: function (type, value) {\n            initialQuality[type] = value;\n        },\n\n        /**\n         * Returns the current quality for a stream type.\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {string} type - stream type, 'video' or 'audio'\n         * @return {number} the current quality level as an index of the quality (in bitrate ascending order)\n         */\n        getQualityFor: function (type) {\n            _isPlayerInitialized();\n            return this.abrController.getQualityFor(type);\n        },\n\n        /**\n         * Selects the quality for a stream type.\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {string} type - stream type, 'video' or 'audio'\n         * @param {number} value - the selected quality level as an index of the quality (in bitrate ascending order)\n         */\n        setQualityFor: function (type, value) {\n            _isPlayerInitialized();\n            if (typeof value !== 'number') {\n                throw new Error('MediaPlayer.setQualityFor(): Invalid Arguments');\n            }\n            this.abrController.setQualityFor(type, value);\n        },\n\n        /**\n         * Returns the auto switch quality state.\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {boolean} the auto switch quality state\n         */\n        getAutoSwitchQuality: function() {\n            _isPlayerInitialized();\n            return this.abrController.getAutoSwitchBitrate();\n        },\n\n        /**\n         * Sets the auto switch quality state.\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {boolean} value - the new auto switch quality state\n         */\n        setAutoSwitchQuality: function(value) {\n            _isPlayerInitialized();\n            if (typeof value !== 'boolean') {\n                throw new Error('MediaPlayer.setAutoSwitchQuality(): Invalid Arguments');\n            }\n            this.abrController.setAutoSwitchBitrate(value);\n        },\n\n        /**\n         * Returns the buffering behaviour while the player is in pause.\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {boolean} true if the player still buffers stream while in pause\n         */\n        getScheduleWhilePaused: function () {\n            return scheduleWhilePaused;\n        },\n\n        /**\n         * Sets the buffering behaviour while player is in pause.\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {boolean} value - true if the player has to buffer stream while in pause\n         */\n        setScheduleWhilePaused: function (value) {\n            if (typeof value !== 'boolean') {\n                throw new Error('MediaPlayer.setScheduleWhilePaused(): Invalid Arguments');\n            }\n            scheduleWhilePaused = value;\n        },\n\n        /**\n         * Sets the default audio language. If the default language is available in the stream,\n         * the corresponding audio track is selected. Otherwise, the first declared audio track in the manifest is selected.\n         * @method setDefaultAudioLang\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {string} lang - the default audio language based on ISO 3166-2\n         */\n        setDefaultAudioLang: function (language) {\n            if (typeof language !== 'string') {\n                throw new Error('MediaPlayer.setDefaultAudioLang(): Invalid Arguments');\n            }\n            defaultAudioLang = language;\n        },\n\n        /**\n         * Gets the default audio language.\n         * @method getDefaultAudioLang\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {string} lang - the default audio language based on ISO 3166-2\n         */\n        getDefaultAudioLang: function(){\n            return defaultAudioLang;\n        },\n\n        /**\n         * Sets the default subtitle language. If the default language is available in the stream,\n         * the corresponding subtitle track is selected. Otherwise, the first declared subtitle track in the manifest is selected.\n         * @method setDefaultSubtitleLang\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {string} lang - the default subtitle language based on ISO 3166-2\n         */\n        setDefaultSubtitleLang: function (language) {\n            if (typeof language !== 'string') {\n                throw new Error('MediaPlayer.setDefaultSubtitleLang(): Invalid Arguments');\n            }\n            defaultSubtitleLang = language;\n        },\n\n        /**\n         * Gets the default subtitle language.\n         * @method getDefaultSubtitleLang\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {string} lang - the default subtitle language based on ISO 3166-2\n         */\n        getDefaultSubtitleLang: function () {\n            return defaultSubtitleLang;\n        },\n//#endregion\n\n//#region PLAYBACK\n        /**\n         * Load/open a video stream.\n         * @method load\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {object} stream - video stream properties object such url, startTime, prodData ...\n            <pre>\n            {\n                url : \"[manifest url]\",\n                startTime : [start time in seconds (optional, only for static streams)],\n                startOver : [true if start-over DVR stream (optional)],\n                protocol : \"[protocol type]\", // 'HLS' to activate native support on Safari/OSx\n                protData : {\n                    // one entry for each key system ('com.microsoft.playready' or 'com.widevine.alpha')\n                    \"[key_system_name]\": {\n                        laURL: \"[licenser url (optional)]\",\n                        withCredentials: \"[license_request_withCredentials_value (true or false, optional)]\",\n                        cdmData: \"[CDM data (optional)]\", // Supported by PlayReady key system (using MS-prefixed EME API) only\n                        serverCertificate: \"[license_server_certificate (as Base64 string, optional)]\",\n                        audioRobustness: \"[audio_robustness_level (optional)]\", // Considered for Widevine key system only\n                        videoRobustness: \"[video_robustness_level (optional)]\" // Considered for Widevine key system only\n                    },\n                    ...\n               }\n               ...\n            }\n            </pre>\n        */\n        load: function (stream) {\n            var config = {\n                    video: {\n                        \"ABR.keepBandwidthCondition\": true\n                    },\n                    audio: {\n                        \"ABR.keepBandwidthCondition\": true\n                    }\n                };\n\n            // patch to be retro compatible with old syntax\n            if (arguments && arguments.length > 0 && typeof arguments[0] !== 'object') {\n                console.warn('You are using \"deprecated\" call of the method load, please refer to the documentation to change prameters call');\n                stream = _parseLoadArguments.apply(null, arguments);\n            }\n\n            if(!stream || !stream.url){\n                 throw new Error('MediaPlayer.load(): stream has no url.');\n            }\n\n            videoQualityChanged = [];\n            audioQualityChanged = [];\n\n            _isPlayerInitialized();\n\n            // Reset the player\n            this.reset(0);\n\n            // Set initial quality if first stream\n            if (initialQuality.video >= 0) {\n                this.abrController.setQualityFor('video', initialQuality.video);\n                config.video[\"ABR.keepBandwidthCondition\"] = false;\n                initialQuality.video = -1;\n            }\n\n            if (initialQuality.audio >= 0) {\n                this.abrController.setQualityFor('audio', initialQuality.audio);\n                config.audio[\"ABR.keepBandwidthCondition\"] = false;\n                initialQuality.audio = -1;\n            }\n\n            // Set config to set 'keepBandwidthCondition' parameter\n            this.setConfig(config);\n\n            // Reset last error and warning\n            error = null;\n            warning = null;\n\n            source = stream;\n            _resetAndPlay.call(this, 0);\n        },\n\n        /**\n        * Plays/resumes playback of the media.\n        * @method play\n        * @access public\n        * @memberof MediaPlayer#\n        */\n        play: function () {\n            _isPlayerInitialized();\n            videoModel.play();\n        },\n\n        /**\n         * Seeks the media to the new time. For LIVE streams, this function can be used to perform seeks within the DVR window if available.\n         * @method seek\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {number} time - the new time value in seconds\n         */\n        seek: function (time) {\n            var range = null,\n                liveDelay = 0;\n\n            _isPlayerInitialized();\n\n            if (typeof time !== 'number') {\n                throw new Error('MediaPlayer.seek(): Invalid Arguments');\n            }\n\n            if (!this.isLive()) {\n                if (time < 0 || time > videoModel.getDuration()) {\n                    throw new Error('MediaPlayer.seek(): seek value outside available time range');\n                } else {\n                    videoModel.setCurrentTime(time);\n                }\n            } else {\n                range = this.getDVRWindowRange();\n                liveDelay = streamController.getLiveDelay();\n                if (range === null) {\n                    throw new Error('MediaPlayer.seek(): impossible for live stream');\n                } else if (time < range.start || time > range.end) {\n                    throw new Error('MediaPlayer.seek(): seek value outside available time range');\n                } else {\n                    // Ensure we keep enough buffer\n                    if (time > (range.end - liveDelay)) {\n                        time = range.end - liveDelay;\n                    }\n                    streamController.seek(time, true);\n                }\n            }\n        },\n\n        /**\n         * Pauses the media playback.\n         * @method pause\n         * @access public\n         * @memberof MediaPlayer#\n         */\n        pause: function () {\n            _isPlayerInitialized();\n            videoModel.pause();\n        },\n\n        /**\n         * Stops the media playback and seek back to start of stream and media. Subsequently call to play() method will restart streaming and playing from beginning.\n         * @method stop\n         * @access public\n         * @memberof MediaPlayer#\n         */\n        stop: function () {\n            _isPlayerInitialized();\n            videoModel.pause();\n            //test if player is in VOD mode\n            if (!this.isLive()) {\n                videoModel.setCurrentTime(0);\n            }\n\n            // Notify plugins that current stream is stopped\n            for (var plugin in plugins) {\n                plugins[plugin].stop();\n            }\n        },\n\n        /**\n         * Stops and resets the player.\n         * @method reset\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {number} reason - the reason for stopping the player.\n         * Possible values are:\n         * <li>0 : stop during streaming at user request\n         * <li>1 : stop when all streams are completed\n         * <li>2 : stop after an error\n         */\n        reset: function (reason) {\n            _isPlayerInitialized();\n\n            // Reset ABR controller\n            this.setQualityFor('video', 0);\n            this.setQualityFor('audio', 0);\n\n            source = null;\n\n            _resetAndPlay.call(this, reason);\n        },\n\n        /**\n        * Updates the manifest URL. This method is used to provide an update of the manifest URL when the original\n        * URL provided in load() method is no more valid (for example if it has expired when signed)\n        * (see [manifestUrlUpdate]{@link MediaPlayer#event:manifestUrlUpdate} event specification).\n        * @method refeshManifest\n        * @access public\n        * @memberof MediaPlayer#\n        * param {string} url - the updated video stream's manifest URL\n        */\n        refreshManifest: function (url) {\n            _isPlayerInitialized();\n            streamController.refreshManifest(url);\n        },\n//#endregion\n\n//#region STREAM METADATA\n        /**\n         * Returns the media duration.\n         * @method getDuration\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {number} the media duration in seconds, <i>Infinity</i> for live content\n         */\n        getDuration: function () {\n            _isPlayerInitialized();\n            return videoModel.getDuration();\n        },\n\n        /**\n         * Returns true if the current stream is a live stream.\n         * @method isLive\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {boolean} true if current stream is a live stream, false otherwise\n         */\n        isLive: function () {\n            _isPlayerInitialized();\n            return videoModel.getDuration() !== Number.POSITIVE_INFINITY ? false : true;\n        },\n\n        /**\n         * Returns the current playback time/position.\n         * @method getPosition\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {number} the current playback time/position in seconds\n         */\n        getPosition: function () {\n            _isPlayerInitialized();\n            return videoModel.getCurrentTime();\n        },\n\n        /**\n         * Return the available DVR window range in case of live streams.\n         * @method getDVRWindowRange\n         * @access public\n         * @memberOf MediaPlayer#\n         * @return {object} range - the DVR window range\n         * @return {number} range.start - the DVR window range start time\n         * @return {number} range.end - the DVR window range end time\n         * @return {number} range.programStart - the DVR window range absolute program start date/time (if available, may be undefined)\n         * @return {number} range.programEnd - the DVR window range absolute program end date/time (if available, may be undefined)\n         */\n        getDVRWindowRange: function () {\n            _isPlayerInitialized();\n            if (!this.isLive()) {\n                return null;\n            }\n            var dvrInfo = _getDVRInfoMetric.call(this);\n            return dvrInfo ? dvrInfo.range : null;\n        },\n\n        /**\n         * Returns the DVR window size.\n         * @method getDVRWindowSize\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {number} the DVR window size in seconds\n         */\n        getDVRWindowSize: function () {\n            _isPlayerInitialized();\n            if (!this.isLive()) {\n                return null;\n            }\n            // TODO: get timeShiftBufferDepth\n            return null;\n            // var dvrInfo = _getDVRInfoMetric();\n            // return dvrInfo ? dvrInfo.mpd.timeShiftBufferDepth : null;;\n        },\n\n        /**\n         * TBD\n         * @method getDVRSeekOffset\n         * @access public\n         * @memberof MediaPlayer#\n         * @param  value\n         * @return DVR seek offset\n         */\n        getDVRSeekOffset: function (value) {\n            _isPlayerInitialized();\n            if (!this.isLive()) {\n                return null;\n            }\n            var dvrInfo = _getDVRInfoMetric.call(this),\n                val = dvrInfo ? dvrInfo.range.start + value : null;\n\n            if (val && val > dvrInfo.range.end) {\n                val = dvrInfo.range.end;\n            }\n\n            return val;\n        },\n\n        /**\n         * Returns the list of available bitrates (in bitrate ascending order).\n         * @method getVideoBitrates\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {Array<Number>} array of bitrate values\n         */\n        getVideoBitrates: function () {\n            _isPlayerInitialized();\n            return videoBitrates.slice();\n        },\n\n        /**\n         * Returns the metrics for stream type.\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {string} type - stream type, 'video' or 'audio'\n         * @return {Array} the metrics array for the selected type\n         */\n        getMetricsFor: function(type) {\n            var metrics = this.metricsModel.getReadOnlyMetricsFor(type);\n            return metrics;\n        },\n//#endregion\n\n//#region TRICK MODE\n        /////////// TRICK MODE\n        /**\n         * Returns the current trick mode speed.\n         * @method setTrickModeSpeed\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {number} the current trick mode speed\n         */\n        getTrickModeSpeed: function () {\n            if (streamController) {\n                return streamController.getTrickModeSpeed();\n            }\n\n            return 0;\n        },\n\n        /**\n         * Sets the trick mode speed.\n         * @method setTrickModeSpeed\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {number} speed - the new trick mode speed (0 corresponds to normal playback, i.e. playbackRate = 1)\n         */\n        setTrickModeSpeed: function (speed) {\n            _isPlayerInitialized();\n            if (streamController) {\n                streamController.setTrickModeSpeed(speed);\n            }\n        },\n//#endregion\n\n//#region ERROR/WARNING\n        /**\n         * Returns the Error object for the most recent error.\n         * @method getError\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {object} the Error object for the most recent error, or null if there has not been an error\n        */\n        getError: function () {\n            return error;\n        },\n\n        /**\n         * Returns the Warning object for the most recent warning.\n         * @method getWarning\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {object} the Warning object for the most recent warning, or null if there has not been a warning\n         */\n        getWarning: function () {\n            return warning;\n        },\n//#endregion\n\n//#region TRACKS\n        /**\n         * Returns the list of available tracks for the stream type (as specified in the stream manifest).\n         * The tracks list can be retrieved once the video 'loadeddata' event has been fired.\n         * @method getTracks\n         * @access public\n         * @param {String} type - the stream type according to MediaPlayer.TRACKS_TYPE (see @link MediaPlayer#TRACKS_TYPE)\n         * @memberof MediaPlayer#\n         * @return {Array<Track>} the available tracks for the stream type\n         */\n        getTracks: function (type) {\n\n            _isPlayerInitialized();\n\n            if (!type || (type !== MediaPlayer.TRACKS_TYPE.AUDIO && type !== MediaPlayer.TRACKS_TYPE.TEXT)) {\n                throw new Error('MediaPlayer Invalid Argument - \"type\" should be defined and shoud be kind of MediaPlayer.TRACKS_TYPE');\n            }\n\n            var _tracks = _getTracksFromType(type);\n\n            if (!_tracks) {\n                return [];\n            }\n\n            var tracks = [];\n            for (var i = 0; i < _tracks.length; i += 1) {\n                tracks.push(_toMediaPlayerTrack(_tracks[i]));\n            }\n\n            return tracks;\n        },\n\n        /**\n         * Selects the track to be playbacked for the stream type.\n         * @method selectTrack\n         * @access public\n         * @memberof MediaPlayer#\n         * @see [getTracks]{@link MediaPlayer#getTracks}\n         * @param {String} type - the stream type according to MediaPlayer.TRACKS_TYPE (see @link MediaPlayer#TRACKS_TYPE)\n         * @param {Track} track - the track to select, as returned by the [getTracks]{@link MediaPlayer#getTracks} method\n         *\n         */\n        selectTrack: function (type, track) {\n\n            _isPlayerInitialized();\n\n            if (!type || (type !== MediaPlayer.TRACKS_TYPE.AUDIO && type !== MediaPlayer.TRACKS_TYPE.TEXT)) {\n                throw new Error('MediaPlayer Invalid Argument - \"type\" should be defined and shoud be kind of MediaPlayer.TRACKS_TYPE');\n            }\n\n            if (!track || !(track.id || track.lang || track.subType)) {\n                throw new Error('MediaPlayer.selectTrack(): track parameter is not in valid');\n            }\n\n            var _tracks = _getTracksFromType(type);\n\n            if (!_tracks) {\n                this.debug.error(\"[MediaPlayer] No available track for type \" + type);\n                return;\n            }\n            var selectedTrack = _getSelectedTrackFromType(type);\n\n            if (selectedTrack && _isSameTrack(selectedTrack, track)) {\n                this.debug.log(\"[MediaPlayer] \" + type + \" track [\" + track.id + \" - \" + track.lang + \"] is already selected\");\n                return;\n            }\n\n            for (var i = 0; i < _tracks.length; i += 1) {\n                if (_isSameTrack(_tracks[i], track)) {\n                    _selectTrackFromType(type, _tracks[i]);\n                    return;\n                }\n            }\n        },\n\n        /**\n         * Returns the selected track for the stream type.\n         * @method getSelectedTrack\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {String} type - the stream type according to MediaPlayer.TRACKS_TYPE (see @link MediaPlayer#TRACKS_TYPE)\n         * @return {Track} the selected track\n         */\n        getSelectedTrack: function (type) {\n            _isPlayerInitialized();\n\n            if (!type || (type !== MediaPlayer.TRACKS_TYPE.AUDIO && type !== MediaPlayer.TRACKS_TYPE.TEXT)) {\n                throw new Error('MediaPlayer Invalid Argument - \"type\" should be defined and shoud be kind of MediaPlayer.TRACKS_TYPE');\n            }\n\n            return _toMediaPlayerTrack(_getSelectedTrackFromType(type));\n        },\n//#endregion\n\n//#region SUBTITLES DISPLAY\n        /**\n         * Enable or disables subtitles processing.\n         * @method enableSubtitles\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {boolean} value - true to enable subtitles, false to disables subtitles processing (by default subtitles are disabled)\n         */\n        enableSubtitles: function (value) {\n            _isPlayerInitialized();\n            if (typeof value !== 'boolean') {\n                throw new Error('MediaPlayer.enableSubtitles(): Invalid Arguments');\n            }\n            subtitlesEnabled = value;\n            if (streamController) {\n                streamController.enableSubtitles(subtitlesEnabled);\n            }\n        },\n\n        /**\n        * Returns the subtitles processing state.\n        * @method isSubtitlesEnabled\n        * @access public\n        * @memberof MediaPlayer#\n        * @return {boolean} true if subtitles are enabled, false otherwise\n        */\n        isSubtitlesEnabled: function () {\n            _isPlayerInitialized();\n            return subtitlesEnabled;\n        },\n\n        /**\n         * Enables or disables subtitles display in a div outside video player.\n         * @method enableSubtitleExternDisplay\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {boolean} mode - true if subtitles are displayed in a div outside video player\n         */\n        enableSubtitleExternDisplay: function (value) {\n            if (typeof value !== 'boolean') {\n                throw new Error('MediaPlayer.enableSubtitleExternDisplay(): Invalid Arguments');\n            }\n            this.config.setParams({'TextTrackExtensions.displayModeExtern': value});\n        },\n\n        /**\n         * Returns the HTML div element previously attached (@see [attachTTMLRenderingDiv]{@link MediaPlayer#attachTTMLRenderingDiv})\n         * @method getTTMLRenderingDiv\n         * @access public\n         * @memberof MediaPlayer#\n         * @returns {HTMLDivElement} the HTML div object previously attached\n         */\n        getTTMLRenderingDiv: function() {\n            return videoModel ? videoModel.getTTMLRenderingDiv() : null;\n        },\n\n        /**\n         * Attaches an HTML div element to be used to render rich TTML subtitles.\n         * @method attachTTMLRenderingDiv\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {HTMLDivElement} div - An unstyled div element placed after the video element. It will be styled to match the video size and overlay z-order\n         */\n        attachTTMLRenderingDiv: function(div) {\n            _isPlayerInitialized();\n            videoModel.setTTMLRenderingDiv(div);\n        },\n//#endregion\n\n//#region AUDIO VOLUME\n        /**\n         * Returns the audio mute state.\n         * @method getMute\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {boolean} true if the audio is muted, false otherwise\n         */\n        getMute: function () {\n            _isPlayerInitialized();\n            return videoModel.getMute();\n        },\n\n        /**\n         * Sets the audio mute state.\n         * @method setMute\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {boolean} value - true to mute audio, false otherwise\n         */\n        setMute: function (value) {\n            _isPlayerInitialized();\n            if (typeof value !== 'boolean') {\n                throw new Error('MediaPlayer.setMute(): Invalid Arguments');\n            }\n            videoModel.setMute(value);\n        },\n\n        /**\n         * Returns the audio volume level.\n         * @method getVolume\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {number} the current audio volume level, from 0.0 (silent) to 1.0 (loudest)\n         */\n        getVolume: function () {\n            _isPlayerInitialized();\n            return videoModel.getVolume();\n        },\n\n        /**\n         * Sets the audio volume level.\n         * @method setVolume\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {number} level - the audio volume level, from 0.0 (silent) to 1.0 (loudest)\n         */\n        setVolume: function (level) {\n            _isPlayerInitialized();\n            if ((typeof level !== 'number') || level < 0 || level > 1) {\n                throw new Error('MediaPlayer.setVolume(): Invalid Arguments');\n            }\n\n            videoModel.setVolume(level);\n        },\n//#endregion\n\n//#region TERMINAL ID\n        /**\n         * Returns the terminal ID.\n         * @method getTerminalId\n         * @access public\n         * @memberof MediaPlayer#\n         * @return {string} the terminal ID (<OS name>-<OS bits>-<browser name>)\n         */\n        getTerminalId: function () {\n            var browser = fingerprint_browser(),\n                os = fingerprint_os();\n\n            return os.name + \"-\" + os.bits + \"-\" + browser.name;\n        },\n//#endregion\n\n//#region PLUGINS\n        /**\n         * Adds a MediaPlayer plugin.\n         * @method addPlugin\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {object} plugin - the plugin instance\n         */\n        addPlugin: function (plugin) {\n            _isPlayerInitialized();\n\n            if (plugin === undefined) {\n                throw new Error('MediaPlayer.addPlugin(): plugin undefined');\n            }\n\n            // Check plugin API\n            if (typeof(plugin.getName) !== 'function' ||\n                typeof(plugin.getVersion) !== 'function' ||\n                typeof(plugin.init) !== 'function' ||\n                typeof(plugin.load) !== 'function' ||\n                typeof(plugin.stop) !== 'function' ||\n                typeof(plugin.reset) !== 'function') {\n                throw new Error('MediaPlayer.addPlugin(): plugin API not compliant');\n            }\n\n            if (plugins[plugin.getName()]) {\n                // Destroy plugin already loaded\n                plugins[plugin.getName()].destroy();\n            }\n\n            this.debug.log(\"[MediaPlayer] Add plugin '\" + plugin.getName() + \"' (v\" + plugin.getVersion() + \")\");\n\n            // Store plugin\n            plugins[plugin.getName()] = plugin;\n\n            // Initialize plugin (if player initialized)\n            plugin.deferInit = Q.defer();\n            if (initialized) {\n                plugin.init(this, function () {\n                    this.deferInit.resolve();\n                }.bind(plugin));\n            }\n        },\n\n        /**\n         * Removes a MediaPlayer plugin.\n         * @method removePlugin\n         * @access public\n         * @memberof MediaPlayer#\n         * @param {object|string} plugin - the plugin instance (or name) to remove\n         */\n        removePlugin: function (plugin) {\n            var name;\n\n            if (plugin === undefined) {\n                throw new Error('MediaPlayer.removePlugin(): plugin undefined');\n            }\n\n            if (typeof(plugin) === 'string') {\n                name = plugin;\n            } else {\n                if (typeof(plugin.getName) !== 'function') {\n                    throw new Error('MediaPlayer.removePlugin(): plugin API not compliant');\n                }\n                name = plugin.getName();\n            }\n\n            if (plugins[name]) {\n                this.debug.log(\"[MediaPlayer] Remove plugin '\" + name);\n                // Reset plugin\n                plugins[name].destroy();\n                // delete it\n                plugins[name] = null;\n                delete plugins[name];\n            }\n        }\n//#endregion\n    };\n};\n\nMediaPlayer.prototype = {\n    constructor: MediaPlayer\n};\n\n//#region Packages\n/**\n * Packages declaration\n */\nMediaPlayer.dependencies = {};\nMediaPlayer.dependencies.protection = {};\nMediaPlayer.dependencies.protection.servers = {};\nMediaPlayer.utils = {};\nMediaPlayer.models = {};\nMediaPlayer.modules = {};\nMediaPlayer.vo = {};\nMediaPlayer.vo.metrics = {};\nMediaPlayer.vo.protection = {};\nMediaPlayer.rules = {};\nMediaPlayer.rules.o = {};\nMediaPlayer.di = {};\n//#endregion\n\n//#region Enums\n/**\n * ENUMS\n */\nMediaPlayer.PUBLIC_EVENTS = {\n    /**\n     * The error event is fired when an error occurs.\n     * When the error event is fired, the application shall stop the player.\n     *\n     * @event MediaPlayer#error\n     * @param {object} event - the event\n     * @param {object} event.type - the event type ('error')\n     * @param {object} event.data - the event data\n     * @param {string} event.data.code - error code\n     * @param {string} event.data.message - error message\n     * @param {object} event.data.data - error additionnal data\n     */\n    'error': 'hasplayer',\n\n    /**\n    * The warning event is fired when a warning occurs.\n    *\n    * @event MediaPlayer#warning\n    * @param {object} event - the event\n    * @param {object} event.type - the event type ('warning')\n    * @param {object} event.data - the event data\n    * @param {string} event.data.code - warning code\n    * @param {string} event.data.message - warning message\n    * @param {object} event.data.data - warning additionnal data\n    */\n    'warning': 'hasplayer',\n\n    /**\n     * The manifestUrlUpdate event is fired when the URL of the manifest may have to be refreshed,\n     * since the player failed to download the manifest file (URL expiration for example).\n     * The application shall therefore provide an updated manifest URL by using the method [refreshManifest]{@link MediaPlayer#refreshManifest}\n     *\n     * @event MediaPlayer#manifestUrlUpdate\n     * @param {object} event - the event\n     * @param {object} event.type - the event type ('manifestUrlUpdate')\n     * @param {object} event.data - the event data\n     * @param {object} event.data.url - the current manifest url\n     */\n    'manifestUrlUpdate': 'hasplayer',\n\n    /**\n     * The metricAdded event is fired when a new metric has been added,\n     * TBD\n     */\n    'metricAdded' : 'hasplayer',\n\n    /**\n     * The metricChanged event is fired when a metric has been updated,\n     * TBD\n     */\n    'metricChanged' : 'hasplayer',\n\n    /**\n     * The cueEnter event is fired when a subtitle cue needs to be displayed.\n     *\n     * @event MediaPlayer#cueEnter\n     * @param {object} event - the event\n     * @param {object} event.type - the event type ('cueEnter')\n     * @param {object} event.data - the event data\n     * @param {object} event.data.text - the subtitle text\n     * @param {string} event.data.style.backgroundColor - the background color\n     * @param {string} event.data.style.color - the font color\n     * @param {string} event.data.style.fontFamily - the font family\n     * @param {string} event.data.style.fontSize - the font size\n     */\n    'cueEnter': 'hasplayer',\n\n    /**\n     * The cueExit event is fired when a subtitle cue needs to be erased.\n     *\n     * @event MediaPlayer#cueExit\n     * @param {object} event - the event\n     * @param {object} event.type - the event type ('cueExit')\n     * @param {object} event.data - the event data\n     * @param {object} event.data.text - the subtitle text\n     * @param {string} event.data.style.backgroundColor - the background color\n     * @param {string} event.data.style.color - the font color\n     * @param {string} event.data.style.fontFamily - the font family\n     * @param {string} event.data.style.fontSize - the font size\n     */\n    'cueExit': 'hasplayer',\n\n    /**\n     * The 'play_bitrate' event is fired when the current played bitrate has changed.\n     *\n     * @event MediaPlayer#play_bitrate\n     * @param {CustomEvent} event - the event\n     * @param {object} event.detail - the event data\n     * @param {string} event.detail.type - the stream type ('audio' or 'video')\n     * @param {number} event.detail.bitrate - the new bitrate\n     * @param {string} event.detail.representationId - the corresponding representation id (from manifest)\n     * @param {number} event.detail.time - the current video time\n     * @param {number} event.detail.width - in case of video stream, the video width of the representation\n     * @param {number} event.detail.height - in case of video stream, the video height of the representation\n     */\n    'play_bitrate': 'video',\n\n    /**\n     * The download_bitrate event is fired when the current downloaded bitrate has changed.\n     *\n     * @event MediaPlayer#download_bitrate\n     * @param {CustomEvent} event - the event\n     * @param {object} event.detail - the event data\n     * @param {string} event.detail.type - the stream type ('audio' or 'video')\n     * @param {number} event.detail.bitrate - the new bitrate\n     * @param {string} event.detail.representationId - the corresponding representation id (from manifest)\n     * @param {number} event.detail.time - the current video time\n     * @param {number} event.detail.width - in case of video stream, the video width of the representation\n     * @param {number} event.detail.height - in case of video stream, the video height of the representation\n     */\n    'download_bitrate': 'video',\n\n    /**\n     * The bufferLevel_updated event is fired when the buffer level changed.\n     *\n     * @event MediaPlayer#bufferLevel_updated\n     * @param {CustomEvent} event - the event\n     * @param {object} event.detail - the event data\n     * @param {string} event.detail.type - the stream type ('audio' or 'video')\n     * @param {number} event.detail.level - the buffer level (in seconds)\n     */\n    'bufferLevel_updated': 'video',\n\n    /**\n     * The state_changed event is fired when the player state changed.\n     *\n     * @event MediaPlayer#state_changed\n     * @param {CustomEvent} event - the event\n     * @param {object} event.detail - the event data\n     * @param {string} event.detail.type - the stream type ('audio' or 'video')\n     * @param {string} event.detail.state - the current state ('stopped', 'buffering', 'seeking' or 'playing')\n     */\n    'state_changed': 'video'\n};\n\n/**\n * Exposes the available tracks types used to manage tracks (language) switching.\n * @see [getTracks]{@link MediaPlayer#getTracks}\n * @see [getSelectedTrack]{@link MediaPlayer#getSelectedTrack}\n * @see [selectTrack]{@link MediaPlayer#selectTrack}\n * @enum\n */\nMediaPlayer.TRACKS_TYPE = {\n    AUDIO: \"audio\",\n    TEXT: \"text\"\n};\n//#endregion\n\n//#region Player parameters\n/**\n * Player parameters object.\n * All parameters values are applied for any stream type. Parameters can be overriden specifically for audio and video track by setting\n * parameters values in the params.audio and params.video objects.\n * @typedef MediaPlayer#PlayerParams\n * @type Object\n * @property {number}   BufferController.minBufferTimeForPlaying - Minimum buffer level before playing, in seconds (default value = 0)\n * @property {number}   BufferController.minBufferTime - Minimum buffer size (in seconds), if set to '-1' the maximum value between the manifest's minBufferTime and 16 sec. is considered (default value = -1)\n * @property {number}   BufferController.bufferToKeep - The buffer size (in seconds) to keep anterior to current playing time (default value = 30)\n * @property {number}   BufferController.liveDelay - The delay (in seconds) between the live edge and playing time, if set to '-1' the live delay is set according to minBufferTime (default value = -1)\n * @property {number}   ABR.minBandwidth - Minimum bandwidth to be playbacked (default value = -1)\n * @property {number}   ABR.maxBandwidth - Maximum bandwidth to be playbacked (default value = -1)\n * @property {number}   ABR.minQuality - Minimum quality index (start from 0) to be playbacked (default value = -1)\n * @property {number}   ABR.maxQuality - Maximum quality index (start from 0) to be playbacked (default value = -1)\n * @property {boolean}  ABR.switchUpIncrementally - Switch up quality incrementally, or not (default value = false)\n * @property {number}   ABR.switchUpRatioSafetyFactor - Switch up bandwith ratio safety factor (default value = 1.5)\n * @property {boolean}  ABR.latencyInBandwidth - Include (or not) latency in bandwidth (default value = true)\n * @property {number}   ABR.switchLowerBufferTime - Buffer level (in seconds) under which switching down to lowest quality occurs (default value = -1)\n * @property {number}   ABR.switchLowerBufferRatio - Buffer level (as percentage of buffer size) under which switching down to lowest quality occurs (default value = 0.25)\n * @property {number}   ABR.switchDownBufferTime - Buffer level (in seconds) under which switching down quality occur, if unsufficient bandwidth (default value = -1)\n * @property {number}   ABR.switchDownBufferRatio - Buffer level (as percentage of buffer size) under which switching down quality occurs, if unsufficient bandwidth (default value = 0.5)\n * @property {number}   ABR.switchUpBufferTime - Buffer level (in seconds) upper which switching up quality occurs, if sufficient bandwidth (default value = -1)\n * @property {number}   ABR.switchUpBufferRatio - Buffer level (as percentage of buffer size) upper which switching up quality occurs, if sufficient bandwidth (default value = 0.75)\n * @property {number}   ABR.droppedFramesMinRatio - The number of dropped frames (as a ratio to total video frames) from which switching up quality is disabled (default value = 0.1)\n * @property {number}   ABR.droppedFramesMaxRatio - The number of dropped frames (as a ratio to total video frames) from which quality is switched down (default value = 0.3)\n * @property {number}   ManifestLoader.RetryAttempts - Number of retry attempts for downloading manifest file when it fails (default value = 2)\n * @property {number}   ManifestLoader.RetryInterval - Interval (in milliseconds) between each retry attempts for downloading manifest file (default value = 500)\n * @property {number}   FragmentLoader.RetryAttempts - Number of retry attempts for downloading segment files when it fails (default value = 2)\n * @property {number}   FragmentLoader.RetryInterval - Interval (in milliseconds) between each retry attempts for downloading segment files (default value = 500)\n * @property {boolean}  Protection.licensePersistence - Provides or not license persistence at application level, in case no persistence is provided by the CDM (default value = false)\n * @property {number}   backoffSeekToEnd - Backoff value (in seconds) when seeking at end/duration (default value = 2)\n * @property {Object}   video - Video parameters (parameters for video track)\n * @property {Object}   audio - audio parameters (parameters for audio track)\n */\n//#endregion\n\n//#region Static functions\n/**\n * Static functions\n */\n/**\n* Returns the current browser status on MSE support.\n* @method hasMediaSourceExtension\n* @static\n* @return true if MSE is supported, false otherwise\n*/\nMediaPlayer.hasMediaSourceExtension = function () {\n    return new MediaPlayer.utils.Capabilities().supportsMediaSource();\n};\n\n/**\n * Returns the current browser status on EME support.\n * @method hasMediaKeysExtension\n * @static\n * @return true if EME is supported, false otherwise\n */\nMediaPlayer.hasMediaKeysExtension = function () {\n    return new MediaPlayer.utils.Capabilities().supportsMediaKeys();\n};\n//#endregion\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.AbrController = function() {\n    \"use strict\";\n\n    var autoSwitchBitrate = true,\n        autoSwitchDic = {},\n        qualityDict = {},\n        qualityMaxDict = {},\n        confidenceDict = {},\n        playerState = \"\",\n\n        getInternalAutoSwitch = function(type) {\n            if (!autoSwitchDic.hasOwnProperty(type)) {\n                autoSwitchDic[type] = true;\n            }\n            return autoSwitchDic[type];\n        },\n\n        setInternalAutoSwitch = function(type, value) {\n            autoSwitchDic[type] = value;\n        },\n\n        getInternalQuality = function(type) {\n            var quality;\n\n            if (!qualityDict.hasOwnProperty(type)) {\n                qualityDict[type] = 0;\n            }\n\n            quality = qualityDict[type];\n\n            return quality;\n        },\n\n        setInternalQuality = function(type, value) {\n            qualityDict[type] = value;\n        },\n\n        getInternalConfidence = function(type) {\n            var confidence;\n\n            if (!confidenceDict.hasOwnProperty(type)) {\n                confidenceDict[type] = 0;\n            }\n\n            confidence = confidenceDict[type];\n\n            return confidence;\n        },\n\n        setInternalConfidence = function(type, value) {\n            confidenceDict[type] = value;\n        },\n\n        getRulesRequestQuality = function(type, data) {\n            var self = this,\n                autoSwitch = getInternalAutoSwitch(type),\n                quality = getInternalQuality(type),\n                confidence = getInternalConfidence(type),\n                newQuality = MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE,\n                newConfidence = MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE,\n                qualityMax = MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE,\n                i,\n                len,\n                results = [],\n                metrics,\n                req,\n                values = {},\n                rules,\n                max;\n\n            if (!autoSwitchBitrate || !autoSwitch) {\n                self.debug.log(\"[AbrController][\" + type + \"] ABR disabled\");\n                return {\n                    quality: quality,\n                    confidence: confidence\n                };\n            }\n\n            self.debug.log(\"[AbrController][\" + type + \"] Check rules....\");\n\n            metrics = self.getMetricsFor(data);\n            rules = self.abrRulesCollection.getRules(MediaPlayer.rules.BaseRulesCollection.prototype.QUALITY_SWITCH_RULES);\n            for (i = 0, len = rules.length; i < len; i += 1) {\n                results.push(rules[i].checkIndex(quality, metrics, data, playerState));\n            }\n\n            values[MediaPlayer.rules.SwitchRequest.prototype.STRONG] = MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE;\n            values[MediaPlayer.rules.SwitchRequest.prototype.WEAK] = MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE;\n            values[MediaPlayer.rules.SwitchRequest.prototype.DEFAULT] = MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE;\n\n            for (i = 0, len = results.length; i < len; i += 1) {\n                req = results[i];\n                if (req.quality !== MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE) {\n                    self.debug.log(\"[AbrController][\" + type + \"] Request for quality \" + req.quality + \", priority = \" + req.priority + \" (\" + rules[i].name + \")\");\n                    values[req.priority] = Math.min(values[req.priority], req.quality);\n                }\n\n                if (req.max === true) {\n                    qualityMax = Math.min(qualityMax, req.quality);\n                }\n            }\n\n            if (values[MediaPlayer.rules.SwitchRequest.prototype.WEAK] !== MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE) {\n                newConfidence = MediaPlayer.rules.SwitchRequest.prototype.WEAK;\n                newQuality = values[MediaPlayer.rules.SwitchRequest.prototype.WEAK];\n            }\n\n            if (values[MediaPlayer.rules.SwitchRequest.prototype.DEFAULT] !== MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE) {\n                newConfidence = MediaPlayer.rules.SwitchRequest.prototype.DEFAULT;\n                newQuality = values[MediaPlayer.rules.SwitchRequest.prototype.DEFAULT];\n            }\n\n            if (values[MediaPlayer.rules.SwitchRequest.prototype.STRONG] !== MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE) {\n                newConfidence = MediaPlayer.rules.SwitchRequest.prototype.STRONG;\n                newQuality = values[MediaPlayer.rules.SwitchRequest.prototype.STRONG];\n            }\n\n            if (newQuality !== MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE && newQuality !== undefined) {\n                quality = newQuality;\n            }\n\n            if (newConfidence !== MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE && newConfidence !== undefined) {\n                confidence = newConfidence;\n            }\n\n            if (qualityMax !== MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE) {\n                qualityMaxDict[type] = qualityMax;\n            }\n\n            max = self.manifestExt.getRepresentationCount(data);\n            // Ensure valid quality index\n            if (quality < 0) {\n                quality = 0;\n            }\n            if (quality >= max) {\n                quality = max - 1;\n            }\n\n            if (confidence !== MediaPlayer.rules.SwitchRequest.prototype.STRONG &&\n                confidence !== MediaPlayer.rules.SwitchRequest.prototype.WEAK) {\n                confidence = MediaPlayer.rules.SwitchRequest.prototype.DEFAULT;\n            }\n\n            self.debug.info(\"[AbrController][\" + type + \"] Request quality: \" + quality);\n\n            return {\n                quality: quality,\n                confidence: confidence\n            };\n        },\n\n        getQualityBoundaries = function(type, data) {\n            var bitrates = this.metricsExt.getBitratesForType(type, data),\n                qualityMin = this.config.getParamFor(type, \"ABR.minQuality\", \"number\", -1),\n                qualityMax = this.config.getParamFor(type, \"ABR.maxQuality\", \"number\", -1),\n                bandwidthMin = this.config.getParamFor(type, \"ABR.minBandwidth\", \"number\", -1),\n                bandwidthMax = this.config.getParamFor(type, \"ABR.maxBandwidth\", \"number\", -1),\n                i,\n                count = bitrates.length;\n\n            if (bandwidthMin !== -1) {\n                for (i = 0; i < bitrates.length; i++) {\n                    if (bitrates[i] >= bandwidthMin) {\n                        qualityMin = (qualityMin === -1) ? i : Math.max(i, qualityMin);\n                        break;\n                    }\n                }\n            }\n\n            if (bandwidthMax !== -1) {\n                for (i = bitrates.length - 1; i >= 0; i--) {\n                    if (bitrates[i] <= bandwidthMax) {\n                        qualityMax = (qualityMax === -1) ? i : Math.min(i, qualityMax);\n                        break;\n                    }\n                }\n            }\n\n            qualityMin = (qualityMin >= count) ? (count - 1) : qualityMin;\n            qualityMin = (qualityMin < 0) ? 0 : qualityMin;\n            qualityMax = (qualityMax >= count || qualityMax < 0) ? (count - 1) : qualityMax;\n\n            return {\n                min: qualityMin,\n                max: qualityMax\n            };\n\n        };\n\n    return {\n        debug: undefined,\n        abrRulesCollection: undefined,\n        manifestExt: undefined,\n        metricsModel: undefined,\n        metricsExt: undefined,\n        config: undefined,\n\n        getAutoSwitchBitrate: function() {\n            return autoSwitchBitrate;\n        },\n\n        setAutoSwitchBitrate: function(value) {\n            this.debug.log(\"[AbrController] Set auto switch: \" + value);\n            autoSwitchBitrate = value;\n        },\n\n        getMetricsFor: function(data) {\n            var isVideo,\n                isAudio;\n\n            isVideo = this.manifestExt.getIsVideo(data);\n            if (isVideo) {\n                return this.metricsModel.getMetricsFor(\"video\");\n            } else {\n                isAudio = this.manifestExt.getIsAudio(data);\n                if (isAudio) {\n                    return this.metricsModel.getMetricsFor(\"audio\");\n                } else {\n                    return this.metricsModel.getMetricsFor(\"stream\");\n                }\n            }\n        },\n\n        getPlaybackQuality: function(type, data) {\n            var self = this,\n                previousQuality = this.getQualityFor(type),\n                qualityMin = -1,\n                qualityMax = -1,\n                quality,\n                confidence,\n                switchUpIncrementally = this.config.getParamFor(type, \"ABR.switchUpIncrementally\", \"boolean\", false),\n                result;\n\n            result = getRulesRequestQuality.call(this, type, data);\n            quality = result.quality;\n            confidence = result.confidence;\n\n            if (self.getAutoSwitchBitrate()) {\n                // Check incremental switch\n                if (switchUpIncrementally && (quality > previousQuality)) {\n                    self.debug.log(\"[AbrController][\" + type + \"] Incremental switch => quality: \" + quality);\n                    quality = previousQuality + 1;\n                }\n\n                // Check representation boundaries\n                var qualityBoundaries = getQualityBoundaries.call(self, type, data);\n                qualityMin = qualityBoundaries.min;\n                qualityMax = qualityBoundaries.max;\n\n                if (quality < qualityMin) {\n                    quality = qualityMin;\n                    self.debug.log(\"[AbrController][\" + type + \"] New quality < min => \" + quality);\n                }\n\n                if (quality > qualityMax) {\n                    quality = qualityMax;\n                    self.debug.log(\"[AbrController][\" + type + \"] New quality > max => \" + quality);\n                }\n\n                // Check max quality allowed by the rules (see DroppedFramesRule for example)\n                if (quality > qualityMaxDict[type]) {\n                    quality = qualityMaxDict[type];\n                    self.debug.log(\"[AbrController][\" + type + \"] Max allowed quality = \" + quality);\n                }\n            }\n\n            setInternalQuality.call(self, type, quality);\n            setInternalConfidence.call(self, type, confidence);\n\n            self.debug.info(\"[AbrController][\" + type + \"] Set quality: \" + quality);\n            return {\n                quality: quality,\n                confidence: confidence\n            };\n        },\n\n        getAutoSwitchFor: function(type) {\n            return getInternalAutoSwitch(type);\n        },\n\n        setAutoSwitchFor: function(type, value) {\n            var autoSwitch = getInternalAutoSwitch(type);\n            if (value !== autoSwitch) {\n                this.debug.log(\"[AbrController][\" + type + \"] Set auto switch: \" + value);\n                setInternalAutoSwitch(type, value);\n            }\n        },\n\n        getQualityFor: function(type) {\n            return getInternalQuality(type);\n        },\n\n        setQualityFor: function(type, value) {\n            var quality = getInternalQuality(type);\n            if (value !== quality) {\n                this.debug.log(\"[AbrController][\" + type + \"] Set playback quality: \" + value);\n                setInternalQuality(type, value);\n            }\n        },\n\n        isMinQuality: function(type, data, value) {\n            var qualityBoundaries = getQualityBoundaries.call(this, type, data);\n            return value <= qualityBoundaries.min;\n        },\n\n        setPlayerState: function(state) {\n            playerState = state;\n        }\n    };\n};\n\nMediaPlayer.dependencies.AbrController.prototype = {\n    constructor: MediaPlayer.dependencies.AbrController\n};\n\nMediaPlayer.dependencies.AbrController.BANDWIDTH_SAFETY = 0.9;","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.BufferController = function() {\n    \"use strict\";\n    var READY = \"READY\",\n        state = READY,\n        ready = false,\n        started = false,\n        waitingForBuffer = false,\n        initialPlayback = true,\n        initializationData = [],\n        seeking = false,\n        seekTarget = -1,\n        dataChanged = true,\n        trackChanged = false,\n        overrideBuffer = false,\n        availableRepresentations,\n        _currentRepresentation,\n        currentBufferedQuality = -1,\n        currentDownloadQuality = -1,\n        stalled = false,\n        isDynamic = false,\n        isBufferingCompleted = false,\n        deferredRejectedDataAppend = null,\n        periodInfo = null,\n        fragmentsToLoad = 0,\n        fragmentModel = null,\n        bufferLevel = 0,\n        isQuotaExceeded = false,\n        rejectedBytes = null,\n        appendingRejectedData = false,\n        mediaSource,\n        type,\n        data = null,\n        buffer = null,\n        minBufferTime,\n        minBufferTimeAtStartup,\n        bufferToKeep,\n        liveDelay,\n        bufferTimeout,\n        bufferStateTimeout,\n        trickModeEnabled = false,\n        trickModePreviousQuality = 0,\n        trickModePreviousAutoSwitch = true,\n        trickModeForward = false,\n\n        playListMetrics = null,\n        playListTraceMetrics = null,\n        playListTraceMetricsClosed = true,\n\n        inbandEventFound = false,\n\n        // Buffering state\n        INIT = -1,\n        BUFFERING = 0,\n        PLAYING = 1,\n        htmlVideoState = INIT,\n        htmlVideoTime = -1,\n\n        deferredFragmentBuffered = null,\n\n        // Segment download failure recovery\n        SEGMENT_DOWNLOAD_ERROR_MAX = 3,\n        segmentDownloadErrorCount = 0,\n        segmentRequestOnError = null,\n\n        // HLS chunk sequence number\n        currentSequenceNumber = -1,\n        playlistRefreshTimeout = null,\n\n        segmentDuration = NaN,\n\n        // Patch for Safari: do not remove past buffer in live use case since it generates MEDIA_ERROR_DECODE while appending new segment (see hasEnoughSpaceToAppend())\n        isSafari = (fingerprint_browser().name === \"Safari\"),\n        isWebKit = (fingerprint_browser().name === \"WebKit\"),\n\n        // Patch for Firefox: set buffer timestampOffset since on Firefox timestamping is based on CTS (see OnMediaLoaded())\n        isFirefox = (fingerprint_browser().name === \"Firefox\"),\n\n        sendRequest = function() {\n\n            if (!isRunning.call(this)) {\n                return;\n            }\n\n            if (fragmentModel !== null) {\n                this.fragmentController.onBufferControllerStateChange();\n            }\n        },\n\n        clearPlayListTraceMetrics = function(endTime, stopreason) {\n            var duration = 0,\n                startTime = null;\n\n            if (playListTraceMetricsClosed === false) {\n                startTime = playListTraceMetrics.start;\n                duration = endTime.getTime() - startTime.getTime();\n\n                playListTraceMetrics.duration = duration;\n                playListTraceMetrics.stopreason = stopreason;\n\n                playListTraceMetricsClosed = true;\n            }\n        },\n\n        setStalled = function(value) {\n            if (type === \"text\") {\n                return;\n            }\n\n            this.debug.info(\"[BufferController][\" + type + \"] stalled = \" + value);\n            stalled = value;\n            this.videoModel.stallStream(type, stalled);\n\n            // Notify ABR controller we start buffering in order to adapt ABR rules (see InsufficientbufferRule)\n            this.abrController.setPlayerState(stalled ? \"buffering\" : \"playing\");\n        },\n\n        startPlayback = function() {\n            if (!ready || !started) {\n                return;\n            }\n\n            this.debug.info(\"[BufferController][\" + type + \"] startPlayback\");\n\n            // Start buffering process\n            checkIfSufficientBuffer.call(this);\n        },\n\n        doStart = function() {\n            var currentTime;\n\n            if (started === true) {\n                return;\n            }\n\n            // We check also if buffering process is not already started\n            // This may happen if doStart is called by Stream on 'play' event after a seek\n            if (deferredFragmentBuffered !== null) {\n                return;\n            }\n\n            if (seeking === false) {\n                currentTime = new Date();\n                clearPlayListTraceMetrics(currentTime, MediaPlayer.vo.metrics.PlayList.Trace.USER_REQUEST_STOP_REASON);\n                playListMetrics = this.metricsModel.addPlayList(type, currentTime, 0, MediaPlayer.vo.metrics.PlayList.INITIAL_PLAY_START_REASON);\n            }\n\n            if (isBufferingCompleted) {\n                if (data.mimeType === \"application/ttml+xml\") {\n                    return;\n                }\n                isBufferingCompleted = false;\n            }\n\n            started = true;\n\n            this.debug.info(\"[BufferController][\" + type + \"] START\");\n\n            waitingForBuffer = true;\n\n            // Reset htmlVideoState in order to update it after a pause or seek command in UpdateBufferState function\n            if (htmlVideoState === INIT) {\n                // At first playback start, set state to BUFFERING\n                this.metricsModel.addState(type, \"buffering\", this.videoModel.getCurrentTime());\n            }\n            htmlVideoState = BUFFERING;\n            htmlVideoTime = -1;\n            segmentRequestOnError = null;\n\n            // Clear executed requests from fragment controller. In case the browser has cleared the buffer itslef silently,\n            // then FragmentController will not state that the cleared segments have been already loaded.\n            this.fragmentController.clearExecutedRequests(fragmentModel);\n\n            startPlayback.call(this);\n        },\n\n        doSeek = function(time) {\n            var self = this;\n\n            // Avoid identical successive seeks\n            if ((seeking === true) && (seekTarget === time)) {\n                // We are already seeking at the given time\n                return;\n            }\n\n            this.debug.info(\"[BufferController][\" + type + \"] SEEK: \" + time);\n\n            // Do stop since <video>'s stop command may not be called before seek one\n            if (started === true) {\n                doStop.call(this);\n            }\n\n            seeking = true;\n            seekTarget = time;\n\n            // Wait for current buffering process to be completed before restarting\n            Q.when(deferredFragmentBuffered ? deferredFragmentBuffered.promise : true).then(\n                function() {\n                    // self.debug.log(\"[BufferController][\"+type+\"] SEEK: do start\");\n                    // Set media type to stalled state\n                    setStalled.call(self, true);\n                        \n                    doStart.call(self);\n                }\n            );\n        },\n\n        doSeeked = function() {\n            this.debug.info(\"[BufferController][\" + type + \"] SEEKED\");\n            seeking = false;\n            seekTarget = -1;\n        },\n\n        doStop = function() {\n            if (!started) {\n                return;\n            }\n            this.debug.info(\"[BufferController][\" + type + \"] STOP\");\n\n            // Stop buffering process\n            clearTimeout(bufferTimeout);\n            clearTimeout(bufferStateTimeout);\n            started = false;\n            waitingForBuffer = false;\n\n            seeking = false;\n            seekTarget = -1;\n\n            // Stop buffering process and cancel loaded request\n            clearPlayListTraceMetrics(new Date(), MediaPlayer.vo.metrics.PlayList.Trace.USER_REQUEST_STOP_REASON);\n\n            this.fragmentController.abortRequestsForModel(fragmentModel);\n        },\n\n\n        getRepresentationForQuality = function(quality) {\n            return availableRepresentations[quality];\n        },\n\n        onBytesLoadingStart = function(request) {\n            this.debug.info(\"[BufferController][\" + type + \"] Load request \", (request.url !== null) ? request.url : request.quality);\n        },\n\n        onBytesLoaded = function(request, response) {\n            // Store current segment sequence number for next segment request (HLS use case)\n            if (request.sequenceNumber !== undefined) {\n                currentSequenceNumber = request.sequenceNumber;\n            }\n\n            if (this.fragmentController.isInitializationRequest(request)) {\n                onInitializationLoaded.call(this, request, response);\n            } else {\n                onMediaLoaded.call(this, request, response);\n            }\n        },\n\n        onInitializationLoaded = function(request, response) {\n\n            if (!isRunning.call(this)) {\n                return;\n            }\n\n            var initData = response.data,\n                quality = request.quality,\n                self = this;\n\n            this.debug.log(\"[BufferController][\" + type + \"] Initialization loaded \", quality);\n\n            try {\n                this.fragmentController.process(initData).then(function(data) {\n                    if (data) {\n                        // Cache the initialization data to use it next time the quality has changed\n                        initializationData[quality] = data;\n\n                        self.debug.info(\"[BufferController][\" + type + \"] Buffer initialization segment \", (request.url !== null) ? request.url : request.quality);\n                        //console.saveBinArray(data, type + \"_init_\" + request.quality + \".mp4\");\n                        appendToBuffer.call(self, data, request.quality).then(\n                            function() {\n                                // Load next media segment\n                                if (isRunning.call(self)) {\n                                    loadNextFragment.call(self);\n                                }\n                            }\n                        );\n                    } else {\n                        // ORANGE : For HLS Stream, init segment are pushed with media (@see HlsFragmentController)\n                        loadNextFragment.call(self);\n                    }\n                },\n                function (e) {\n                    signalSegmentBuffered.call(self);\n                    if (e.name) {\n                        self.errHandler.sendError(e.name, e.message, e.data);\n                    } else {\n                        self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR, \"Internal error while processing media segment\", e.message);\n                    }\n                });\n            } catch (e) {\n                signalSegmentBuffered.call(self);\n                if (e.name) {\n                    self.errHandler.sendError(e.name, e.message, e.data);\n                } else {\n                    self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR, \"Internal error while processing media segment\", e.message);\n                }\n            }\n        },\n\n        onMediaLoaded = function(request, response) {\n\n            if (!isRunning.call(this)) {\n                return;\n            }\n\n            var eventStreamAdaption = this.manifestExt.getEventStreamForAdaptationSet(this.getData()),\n                eventStreamRepresentation = this.manifestExt.getEventStreamForRepresentation(this.getData(), _currentRepresentation),\n                events,\n                self = this;\n\n            segmentDuration = request.duration;\n\n            // Reset segment download error status\n            segmentDownloadErrorCount = 0;\n\n            this.debug.log(\"[BufferController][\" + type + \"] Media loaded \", request.url);\n\n            if (this.chunkAborted === true) {\n                this.chunkAborted = false;\n            }\n\n            if (this.chunkMissingCount === 1) {\n                this.chunkMissingCount = 0;\n            }\n\n            try {\n                this.fragmentController.process(response.data, request, _currentRepresentation).then(function(data) {\n                    if (data) {\n                        if (eventStreamAdaption.length > 0 || eventStreamRepresentation.length > 0) {\n                            events = handleInbandEvents.call(self, data, request, eventStreamAdaption, eventStreamRepresentation);\n                            self.eventController.addInbandEvents(events);\n                        }\n\n                        self.debug.info(\"[BufferController][\" + type + \"] Buffer segment from url \", request.url);\n\n                        /*if (trickModeEnabled) {\n                                var filename = type + \"_\" + request.index + \"_\" + request.quality + \".mp4\",\n                                    blob = new Blob([data], {\n                                        type: 'data/mp4'\n                                    });\n\n                                if (navigator.msSaveBlob) { // For IE10+ and edge\n                                    navigator.msSaveBlob(blob, filename);\n                                }\n                            }*/\n\n                        //console.saveBinArray(data, request.url.substring(request.url.lastIndexOf('/') + 1));\n                        data = deleteInbandEvents.call(self, data);\n\n                        // Check if we need to override the current buffered segments (in case of language switch for example)\n                        Q.when(overrideBuffer ? removeBuffer.call(self) : true).then(\n                            function() {\n                                /*if (overrideBuffer) {\n                                    debugBufferRange.call(self);\n                                }*/\n                                overrideBuffer = false;\n\n                                // If firefox, set buffer timestampOffset since timestamping (MSE buffer range and <video> currentTime) is based on CTS (and not DTS like in other browsers)\n                                if (isFirefox) {\n                                    buffer.timestampOffset = -getSegmentTimestampOffset(data, request);\n                                }\n\n                                appendToBuffer.call(self, data, request.quality, request).then(\n                                    function() {\n                                        // Check if a new quality is being appended,\n                                        // then add a metric to enable MediaPlayer to detect playback quality changes\n                                        if (currentBufferedQuality !== request.quality) {\n                                            self.debug.log(\"[BufferController][\" + type + \"] Buffered quality changed: \" + request.quality);\n                                            self.metricsModel.addBufferedSwitch(type, request.startTime, _currentRepresentation.id, request.quality);\n                                            currentBufferedQuality = request.quality;\n                                        }\n\n                                        // Signal end of buffering process\n                                        signalSegmentBuffered.call(self);\n                                        // Check buffer level\n                                        checkIfSufficientBuffer.call(self);\n                                    }\n                                );\n                            }\n                        );\n                    } else {\n                        self.debug.error(\"[BufferController][\" + type + \"] Error with segment data, no bytes to push\");\n                        // Signal end of buffering process\n                        signalSegmentBuffered.call(self);\n                        // Check buffer level\n                        checkIfSufficientBuffer.call(self);\n                    }\n                },\n                function (e) {\n                    signalSegmentBuffered.call(self);\n                    if (e.name) {\n                        self.errHandler.sendError(e.name, e.message, e.data);\n                    } else {\n                        self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR, \"Internal error while processing media segment\", e.message);\n                    }\n                });\n            } catch (e) {\n                signalSegmentBuffered.call(self);\n                if (e.name) {\n                    self.errHandler.sendError(e.name, e.message, e.data);\n                } else {\n                    self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR, \"Internal error while processing media segment\", e.message);\n                }\n            }\n        },\n\n        appendToBuffer = function(data, quality, request) {\n            var deferred = Q.defer(),\n                currentVideoTime = this.videoModel.getCurrentTime(),\n                currentTime = new Date(),\n                self = this;\n\n            // this.debug.log(\"Push (\" + type + \") bytes: \" + data.byteLength);\n\n            if (playListTraceMetricsClosed === true) {\n                playListTraceMetricsClosed = false;\n                playListTraceMetrics = this.metricsModel.appendPlayListTrace(playListMetrics, _currentRepresentation.id, null, currentTime, currentVideoTime, null, 1.0, null);\n            }\n\n            if (!hasData()) {\n                return;\n            }\n\n            hasEnoughSpaceToAppend.call(this).then(\n                function() {\n                    if (!hasData()) {\n                        return;\n                    }\n                    self.debug.log(\"[BufferController][\" + type + \"] Buffering segment\");\n                    self.sourceBufferExt.append(buffer, data, request).then(\n                        function( /*appended*/ ) {\n                            self.debug.log(\"[BufferController][\" + type + \"] Segment buffered\");\n\n                            isQuotaExceeded = false;\n\n                            // Patch for Safari & WebKit: do not remove past buffer since it generates MEDIA_ERROR_DECODE while appending new segment\n                            if (bufferLevel > 1 && !isSafari && !isWebKit) {\n                                // Remove outdated buffer parts and requests\n                                // (checking bufferLevel ensure buffer is not empty or back to current time)\n                                removeBuffer.call(self, -1, getWorkingTime.call(self) - bufferToKeep).then(\n                                    function() {\n                                        debugBufferRange.call(self);\n                                        deferred.resolve();\n                                    }\n                                );\n                            } else if (trickModeEnabled) {\n                                // In case of trick play, remove outdated buffer parts according to trick play direction\n                                var start = trickModeForward ? -1 : (getWorkingTime.call(self) + segmentDuration);\n                                var end = trickModeForward ? (getWorkingTime.call(self) - segmentDuration) : -1;\n                                removeBuffer.call(self, start, end).then(\n                                    function() {\n                                        debugBufferRange.call(self);\n                                        deferred.resolve();\n                                    }\n                                );\n                            } else {\n                                debugBufferRange.call(self);\n                                deferred.resolve();\n                            }\n\n                            self.system.notify(\"bufferUpdated\");\n                        },\n                        function(result) {\n                            if (type === 'text') {\n                                // if text, do nt raise an error (the stream would stop)\n                                // just log th error\n                                self.debug.error(\"[BufferController][\" + type + \"] Failed to append data in source buffer : \" + result.err.message);\n                                deferred.resolve();\n                            } else {\n                                self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_APPEND_SOURCEBUFFER, \"Failed to append data into \" + type + \" source buffer\",\n                                                          new MediaPlayer.vo.Error(result.err.code, result.err.name, result.err.message));\n                                // if the append has failed because the buffer is full we should store the data\n                                // that has not been appended and stop request scheduling. We also need to store\n                                // the promise for this append because the next data can be appended only after\n                                // this promise is resolved.\n                                if (result.err.code === MediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_QUOTA_EXCEEDED) {\n                                    rejectedBytes = {\n                                        data: data,\n                                        quality: quality/*,\n                                    index: index*/\n                                    };\n                                    deferredRejectedDataAppend = deferred;\n                                    isQuotaExceeded = true;\n                                    fragmentsToLoad = 0;\n                                    // stop scheduling new requests\n                                    doStop.call(self);\n                                } else {\n                                    // promise has to be resolved\n                                    deferred.resolve();\n                                }\n                            }\n                        }\n                    );\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        debugBufferRange = function() {\n            var ranges = null,\n                i,\n                len;\n\n            if (this.debug.getLevel() >= this.debug.INFO) {\n                if (buffer) {\n                    ranges = this.sourceBufferExt.getAllRanges(buffer);\n                    if ((ranges === null) || (ranges.length === 0)) {\n                        return;\n                    }\n                    for (i = 0, len = ranges.length; i < len; i += 1) {\n                        this.debug.info(\"[BufferController][\" + type + \"] Buffered range [\" + i + \"]: \" + ranges.start(i) + \" - \" + ranges.end(i) + \" (\" + this.getVideoModel().getCurrentTime() + \")\");\n                    }\n                }\n            }\n        },\n\n        getSegmentTimestampOffset = function (data, request) {\n            var fragment = mp4lib.deserialize(data),\n                moov = fragment.getBoxByType(\"moov\"),\n                moof = fragment.getBoxByType(\"moof\"),\n                traf = moof === null ? null : moof.getBoxByType(\"traf\"),\n                trun = traf === null ? null : traf.getBoxByType(\"trun\"),\n                ctsOffset,\n                timescale;\n\n            if (trun === null || trun.samples_table.length === 0) {\n                return 0;\n            }\n\n            ctsOffset = trun.samples_table[0].sample_composition_time_offset;\n            if (ctsOffset ===  undefined) {\n                return 0;\n            }\n\n            // Try to get timescale from moov\n            if (moov) {\n                var mvhd = moov.getBoxByType(\"mvhd\");\n                timescale = mvhd.timescale;\n            } else {\n                timescale = request.timescale;\n            }\n\n            return (ctsOffset / timescale);\n        },\n\n        handleInbandEvents = function(data, request, adaptionSetInbandEvents, representationInbandEvents) {\n            var events = [],\n                i = 0,\n                identifier,\n                size,\n                expTwo = Math.pow(256, 2),\n                expThree = Math.pow(256, 3),\n                segmentStarttime = Math.max(isNaN(request.startTime) ? 0 : request.startTime, 0),\n                eventStreams = [],\n                inbandEvents;\n\n            inbandEventFound = false;\n            /* Extract the possible schemeIdUri : If a DASH client detects an event message box with a scheme that is not defined in MPD, the client is expected to ignore it */\n            inbandEvents = adaptionSetInbandEvents.concat(representationInbandEvents);\n            for (var loop = 0; loop < inbandEvents.length; loop++) {\n                eventStreams[inbandEvents[loop].schemeIdUri] = inbandEvents[loop];\n            }\n            while (i < data.length) {\n                identifier = String.fromCharCode(data[i + 4], data[i + 5], data[i + 6], data[i + 7]); // box identifier\n                size = data[i] * expThree + data[i + 1] * expTwo + data[i + 2] * 256 + data[i + 3] * 1; // size of the box\n                if (identifier === \"moov\" || identifier === \"moof\") {\n                    break;\n                } else if (identifier === \"emsg\") {\n                    inbandEventFound = true;\n                    var eventBox = [\"\", \"\", 0, 0, 0, 0, \"\"],\n                        arrIndex = 0,\n                        j = i + 12; //fullbox header is 12 bytes, thats why we start at 12\n\n                    while (j < size + i) {\n                        /* == string terminates with 0, this indicates end of attribute == */\n                        if (arrIndex === 0 || arrIndex === 1 || arrIndex === 6) {\n                            if (data[j] !== 0) {\n                                eventBox[arrIndex] += String.fromCharCode(data[j]);\n                            } else {\n                                arrIndex += 1;\n                            }\n                            j += 1;\n                        } else {\n                            eventBox[arrIndex] = data[j] * expThree + data[j + 1] * expTwo + data[j + 2] * 256 + data[j + 3] * 1;\n                            j += 4;\n                            arrIndex += 1;\n                        }\n                    }\n                    var schemeIdUri = eventBox[0],\n                        value = eventBox[1],\n                        timescale = eventBox[2],\n                        presentationTimeDelta = eventBox[3],\n                        duration = eventBox[4],\n                        id = eventBox[5],\n                        messageData = eventBox[6],\n                        presentationTime = segmentStarttime * timescale + presentationTimeDelta;\n\n                    if (eventStreams[schemeIdUri]) {\n                        var event = new Dash.vo.Event();\n                        event.eventStream = eventStreams[schemeIdUri];\n                        event.eventStream.value = value;\n                        event.eventStream.timescale = timescale;\n                        event.duration = duration;\n                        event.id = id;\n                        event.presentationTime = presentationTime;\n                        event.messageData = messageData;\n                        event.presentationTimeDelta = presentationTimeDelta;\n                        events.push(event);\n                    }\n                }\n                i += size;\n            }\n            return events;\n        },\n\n        deleteInbandEvents = function(data) {\n            if (!inbandEventFound) {\n                return data;\n            }\n\n            var length = data.length,\n                i = 0,\n                j = 0,\n                l = 0,\n                identifier,\n                size,\n                expTwo = Math.pow(256, 2),\n                expThree = Math.pow(256, 3),\n                modData = new Uint8Array(data.length);\n\n            while (i < length) {\n\n                identifier = String.fromCharCode(data[i + 4], data[i + 5], data[i + 6], data[i + 7]);\n                size = data[i] * expThree + data[i + 1] * expTwo + data[i + 2] * 256 + data[i + 3] * 1;\n\n\n                if (identifier !== \"emsg\") {\n                    for (l = i; l < i + size; l++) {\n                        modData[j] = data[l];\n                        j += 1;\n                    }\n                }\n                i += size;\n\n            }\n\n            return modData.subarray(0, j);\n        },\n\n        isRunning = function() {\n            if (started) {\n                return true;\n            }\n\n            // If buffering process is running, then we interrupt it\n            signalSegmentBuffered.call(this);\n\n            return false;\n        },\n\n        signalSegmentBuffered = function() {\n            if (deferredFragmentBuffered) {\n                // this.debug.log(\"[BufferController][\" + type + \"] ### End of buffering process\");\n                deferredFragmentBuffered.resolve();\n                deferredFragmentBuffered = null;\n            }\n        },\n\n        hasEnoughSpaceToAppend = function() {\n            var deferred = Q.defer(),\n                removedTime = 0,\n                fragmentDuration,\n                startClearing;\n\n            // do not remove any data until the quota is exceeded\n            if (!isQuotaExceeded) {\n                return Q.when(true);\n            }\n\n            startClearing = function() {\n                var currentTime = this.videoModel.getCurrentTime(),\n                    removeStart = 0,\n                    removeEnd,\n                    req;\n\n                // we need to remove data that is more than one segment before the video currentTime\n                req = this.fragmentController.getExecutedRequestForTime(fragmentModel, currentTime);\n                removeEnd = (req && !isNaN(req.startTime)) ? req.startTime : Math.floor(currentTime);\n                fragmentDuration = (req && !isNaN(req.duration)) ? req.duration : 1;\n\n                removeBuffer.call(this, removeStart, removeEnd).then(\n                    function(removedTimeValue) {\n                        removedTime += removedTimeValue;\n                        if (removedTime >= fragmentDuration) {\n                            deferred.resolve();\n                        } else {\n                            setTimeout(startClearing, fragmentDuration * 1000);\n                        }\n                    }\n                );\n            };\n\n            startClearing.call(this);\n\n            return deferred.promise;\n        },\n\n        removeBuffer = function(start, end) {\n            var deferred = Q.defer(),\n                removeStart,\n                removeEnd,\n                self = this;\n\n            if (buffer.buffered.length === 0) {\n                deferred.resolve(0);\n                return deferred.promise;\n            }\n\n            removeStart = ((start !== undefined) && (start !== -1)) ? start : buffer.buffered.start(0);\n            removeEnd = ((end !== undefined) && (end !== -1)) ? end : buffer.buffered.end(buffer.buffered.length - 1);\n\n            if (removeEnd <= removeStart) {\n                deferred.resolve(0);\n                return deferred.promise;\n            }\n\n            this.debug.info(\"[BufferController][\" + type + \"] Remove from \" + removeStart + \" to \" + removeEnd + \" (\" + this.getVideoModel().getCurrentTime() + \")\");\n\n            // Abort on buffer\n            if (type !== \"text\") {\n                // no need to abort for text buffer. remove call do the same thing\n                this.sourceBufferExt.abort(mediaSource, buffer);\n            }\n\n            // Wait for buffer update completed\n            this.sourceBufferExt.remove(buffer, removeStart, removeEnd, periodInfo.duration, mediaSource).then(\n                function() {\n                    // Remove all requests from the list of the executed requests\n                    self.fragmentController.removeExecutedRequestsBeforeTime(fragmentModel, removeEnd + 1); // +1 for rounding issues\n                    self.fragmentController.cancelPendingRequestsForModel(fragmentModel);\n                    deferred.resolve(removeEnd - removeStart);\n                }, function(ex) {\n                    self.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_REMOVE_SOURCEBUFFER, \"Failed to remove data from \" + type + \" source buffer\",\n                        new MediaPlayer.vo.Error(ex.code, ex.name, ex.message));\n                    deferred.resolve(0);\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        onBytesError = function(e) {\n\n            if (!isRunning.call(this)) {\n                return;\n            }\n\n            signalSegmentBuffered.call(this);\n\n            // Abandonned request => load segment at lowest quality\n            if (e.aborted) {\n                // if (e.quality !== 0) {\n                // this.debug.info(\"[BufferController][\" + type + \"] Segment download abandonned => Retry segment download at lowest quality\");\n                // this.abrController.setAutoSwitchFor(type, false);\n                // this.abrController.setQualityFor(type, 0);\n                bufferFragment.call(this);\n                // }\n                return;\n            }\n\n            // Ignore in case of text track, this will not stop playing\n            if (type === \"text\") {\n\n                this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_CONTENT,\n                    \"Failed to download media segment\", {\n                        url: e.url,\n                        status: e.status\n                    });\n\n                return;\n            }\n\n            // Segment download failed\n            segmentDownloadErrorCount += 1;\n\n            if (segmentDownloadErrorCount === SEGMENT_DOWNLOAD_ERROR_MAX) {\n                // If failed consecutively SEGMENT_DOWNLOAD_ERROR_MAX times, then raise an error\n                this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_CONTENT,\n                    \"Failed to download media segment\", {\n                        url: e.url,\n                        status: e.status\n                    });\n            } else {\n                // Raise a warning\n                this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_CONTENT,\n                    \"Failed to download media segment\", {\n                        url: e.url,\n                        status: e.status\n                    });\n\n                // Store segment request that failed to load\n                segmentRequestOnError = e;\n                if (htmlVideoState === BUFFERING) {\n                    // If already in buffering state (i.e. empty buffer) then signal to stream that segment loading failed\n                    // Else signal it when entering in buffering state (see updateBufferState())\n                    signalSegmentLoadingFailed.call(this);\n                }\n            }\n        },\n\n        signalStreamComplete = function( /*request*/ ) {\n            this.debug.log(\"[BufferController][\" + type + \"] Stream is complete.\");\n\n            isBufferingCompleted = true;\n            clearPlayListTraceMetrics(new Date(), MediaPlayer.vo.metrics.PlayList.Trace.END_OF_CONTENT_STOP_REASON);\n\n            signalSegmentBuffered.call(this);\n\n            doStop.call(this);\n\n            this.system.notify(\"bufferingCompleted\");\n        },\n\n        loadInitialization = function(quality) {\n\n            if (!isRunning.call(this)) {\n                return Q.when(null);\n            }\n\n            var self = this;\n\n            // Check if initialization segment for current quality has already been loaded and stored\n            if (initializationData[quality]) {\n                this.debug.info(\"[BufferController][\" + type + \"] Buffer initialization segment, quality = \", quality);\n                appendToBuffer.call(this, initializationData[quality], quality).then(\n                    function() {\n                        self.debug.log(\"[BufferController][\" + type + \"] Initialization segment buffered\");\n                        // Load next media segment\n                        if (isRunning.call(self)) {\n                            loadNextFragment.call(self);\n                        }\n                    }\n                );\n                return Q.when(null);\n            } else {\n                // Get init segment request for the current\n                return this.indexHandler.getInitRequest(availableRepresentations[quality]);\n            }\n        },\n\n        loadNextFragment = function() {\n\n            if (!isRunning.call(this)) {\n                return;\n            }\n\n            var time = getWorkingTime.call(this),\n                range,\n                segmentTime,\n                self = this;\n\n\n            // If we override buffer (in case of language for example), then consider current video time for the next segment time\n            if (overrideBuffer) {\n                segmentTime = time;\n            } else {\n                // Get buffer range that includes working time\n                range = this.sourceBufferExt.getBufferRange(buffer, time);\n\n                // Get next segment time\n                segmentTime = range ? range.end : time;\n            }\n\n            // currentSequenceNumber used in HLS\n            if ((currentSequenceNumber !== -1) && !seeking && !overrideBuffer) {\n                this.debug.log(\"[BufferController][\" + type + \"] loadNextFragment for sequence number: \" + currentSequenceNumber);\n                this.indexHandler.getNextSegmentRequestFromSN(_currentRepresentation, currentSequenceNumber).then(onFragmentRequest.bind(this));\n            } else {\n                this.debug.log(\"[BufferController][\" + type + \"] loadNextFragment for time: \" + segmentTime);\n                this.indexHandler.getSegmentRequestForTime(_currentRepresentation, segmentTime).then(onFragmentRequest.bind(this), function() {\n                    currentDownloadQuality = -1;\n                    signalStreamComplete.call(self);\n                });\n            }\n        },\n\n        onFragmentRequest = function(request) {\n\n            if (!isRunning.call(this)) {\n                return;\n            }\n\n            var manifest = this.manifestModel.getValue();\n\n            // Check if current request signals end of stream\n            if ((request !== null) && (request.action === request.ACTION_COMPLETE)) {\n                signalStreamComplete.call(this);\n                return;\n            }\n\n            if (request !== null) {\n                //if trick mode enbaled, get the request to get I Frame data.\n                if (trickModeEnabled) {\n                    request = this.indexHandler.getIFrameRequest(request);\n                }\n\n                // If we have already loaded the given fragment ask for the next one. Otherwise prepare it to get loaded\n                if (this.fragmentController.isFragmentLoadedOrPending(this, request)) {\n                    this.debug.log(\"[BufferController][\" + type + \"] new fragment request => already loaded or pending \" + request.url);\n                    this.indexHandler.getNextSegmentRequest(_currentRepresentation).then(onFragmentRequest.bind(this));\n                } else {\n                    // Download the segment\n                    this.fragmentController.prepareFragmentForLoading(this, request, onBytesLoadingStart, onBytesLoaded, onBytesError, null /*signalStreamComplete*/ );\n                    sendRequest.call(this);\n                }\n            } else {\n                // No more fragment in current list\n                this.debug.log(\"[BufferController][\" + type + \"] loadNextFragment failed\");\n                signalSegmentBuffered.call(this);\n\n                if (isDynamic) {\n                    // If live HLS, then check buffer since playlist should be updated\n                    if (manifest.name === \"M3U\") {\n                        updateCheckBufferTimeout.call(this);\n                    }\n                } else {\n                    // For VOD streams, signal end of stream\n                    signalStreamComplete.call(this);\n                }\n            }\n        },\n\n        hasData = function() {\n            return !!data && !!buffer;\n        },\n\n        getTimeToEnd = function() {\n            var currentTime = this.videoModel.getCurrentTime();\n\n            return ((periodInfo.start + periodInfo.duration) - currentTime);\n        },\n\n        getWorkingTime = function() {\n            var time = -1,\n                videoTime = this.videoModel.getCurrentTime();\n\n            if (seeking) {\n                time = seekTarget;\n                //this.debug.log(\"[BufferController][\" + type + \"] Working time = \" + time + \" (seeking = \" + seeking + \", video time = \" + videoTime + \")\");\n            } else {\n                time = videoTime;\n                //this.debug.log(\"[BufferController][\" + type + \"] Working time = \" + time);\n            }\n\n            return time;\n        },\n\n        getLiveEdgeTime = function() {\n            var deferred = Q.defer(),\n                startTime,\n                // Get live edge time from manifest as the last segment time\n                liveEdgeTime = _currentRepresentation.segmentAvailabilityRange.end,\n                self = this;\n\n            this.debug.log(\"[BufferController][\" + type + \"] Manifest live edge = \" + liveEdgeTime);\n\n            // Step back from a found live edge time to be able to buffer some data\n            startTime = Math.max((liveEdgeTime - liveDelay), _currentRepresentation.segmentAvailabilityRange.start);\n\n            // Get the request corresponding to the start time\n            this.indexHandler.getSegmentRequestForTime(_currentRepresentation, startTime).then(\n                function(request) {\n                    // Set live edge to be the start time of the founded segment\n                    periodInfo.liveEdge = request.startTime;\n                    self.debug.log(\"[BufferController][\" + type + \"] Live edge = \" + periodInfo.liveEdge);\n\n                    deferred.resolve(periodInfo.liveEdge);\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        updateBufferLevel = function(sendMetric) {\n            if (!hasData()) {\n                return;\n            }\n\n            var workingTime = getWorkingTime.call(this);\n\n            bufferLevel = this.sourceBufferExt.getBufferLength(buffer, workingTime);\n            this.debug.log(\"[BufferController][\" + type + \"] Working time = \" + workingTime + \", Buffer level = \" + bufferLevel.toFixed(3));\n            if (sendMetric) {\n                this.metricsModel.addBufferLevel(type, new Date(), bufferLevel);\n            }\n            this.updateBufferState();\n        },\n\n        checkIfSufficientBuffer = function() {\n\n            if (!isRunning.call(this)) {\n                return;\n            }\n\n            var timeToEnd,\n                delay;\n\n            this.debug.log(\"[BufferController][\" + type + \"] Check buffer...\");\n\n            updateBufferLevel.call(this, true);\n\n            // Check stalled mode of video model\n            if (stalled) {\n                if (bufferLevel > minBufferTimeAtStartup) {\n                    setStalled.call(this, false);\n                }\n            }\n\n            timeToEnd = getTimeToEnd.call(this);\n            this.debug.log(\"[BufferController][\" + type + \"] time to end = \" + timeToEnd);\n\n            // In trick mode state, always fills buffer\n            if (trickModeEnabled) {\n                if (bufferLevel < 1) {\n                    bufferFragment.call(this);\n                }\n            } else {\n                if (trackChanged || overrideBuffer ||\n                    ((bufferLevel < minBufferTime) &&\n                        ((minBufferTime < timeToEnd) || (minBufferTime >= timeToEnd && !isBufferingCompleted)))) {\n                    // Buffer needs to be filled\n                    bufferFragment.call(this);\n                } else {\n                    // Determine the timeout delay before checking again the buffer\n                    delay = bufferLevel - minBufferTime + 0.5; // + 0.5 to ensure buffer level will be inferior to minBufferTime\n                    updateCheckBufferTimeout.call(this, delay);\n                }\n            }\n        },\n\n        updateCheckBufferTimeout = function(delay) {\n            var self = this;\n\n            delay = delay ? delay : 1;\n\n            this.debug.log(\"[BufferController][\" + type + \"] Check buffer in = \" + delay.toFixed(3) + \" ms (bufferLevel = \" + bufferLevel + \")\");\n\n            clearTimeout(bufferTimeout);\n            bufferTimeout = setTimeout(function() {\n                bufferTimeout = null;\n                checkIfSufficientBuffer.call(self);\n            }, (delay * 1000));\n        },\n\n        bufferFragment = function() {\n            var now = new Date(),\n                currentVideoTime = this.videoModel.getCurrentTime(),\n                manifest = this.manifestModel.getValue(),\n                loadInit = false,\n                quality,\n                playlistUpdated = null,\n                self = this;\n\n            if (deferredFragmentBuffered !== null) {\n                this.debug.error(\"[BufferController][\" + type + \"] deferredFragmentBuffered has not been resolved, create a new one is not correct.\");\n            }\n\n            deferredFragmentBuffered = Q.defer();\n\n            this.debug.log(\"[BufferController][\" + type + \"] Start buffering process...\");\n\n            // Check if data has changed\n            doUpdateData.call(this);\n\n            // If initialization data has been changed (track changed), then load initialization segment\n            loadInit = (initializationData.length === 0) && (manifest.name !== \"M3U\");\n\n            // Get current quality\n            quality = this.abrController.getPlaybackQuality(type, data).quality;\n\n            // Get corresponding representation\n            _currentRepresentation = getRepresentationForQuality.call(this, quality);\n\n            // Quality changed?\n            if (quality !== currentDownloadQuality) {\n                this.debug.log(\"[BufferController][\" + type + \"] currentDownloadQuality changed : \" + quality);\n                currentDownloadQuality = quality;\n                // Load initialization segment\n                loadInit = true;\n\n                clearPlayListTraceMetrics(new Date(), MediaPlayer.vo.metrics.PlayList.Trace.REPRESENTATION_SWITCH_STOP_REASON);\n                this.debug.log(\"[BufferController][\" + type + \"] Send RepresentationSwitch with quality = \" + quality);\n                this.metricsModel.addRepresentationSwitch(type, now, currentVideoTime, _currentRepresentation.id, quality);\n\n                // HLS use case => download playlist for new representation\n                playlistUpdated = updatePlayListForRepresentation.call(this);\n            }\n\n            Q.when(playlistUpdated ? playlistUpdated : true).then(\n                function() {\n                    if (loadInit === true) {\n                        // Load initialization segment request\n                        loadInitialization.call(self, quality).then(\n                            function(request) {\n                                if (request !== null) {\n                                    self.fragmentController.prepareFragmentForLoading(self, request, onBytesLoadingStart, onBytesLoaded, onBytesError, null /*signalStreamComplete*/ );\n                                    sendRequest.call(self);\n                                }\n                            }, function(e) {\n                                signalSegmentBuffered.call(self);\n                                if (e.name === MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED) {\n                                    self.errHandler.sendError(e.name, e.message, e.data);\n                                } else {\n                                    self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR, \"Internal error while processing initialization segment\", e.message);\n                                }\n                            }\n                        );\n                    } else {\n                        // Load next fragment\n                        // Notes: 1 - Next fragment is download in // with initialization segment\n                        //        2 - Buffer level is checked once next fragment data has been pushed into buffer (@see checkIfSufficientBuffer())\n                        loadNextFragment.call(self);\n                    }\n                },\n                function(err) {\n                    signalSegmentBuffered.call(self);\n                    if (err) {\n                        self.errHandler.sendError(err.name, err.message, err.data);\n                    }\n                }\n            );\n\n        },\n\n        updatePlayListForRepresentation = function() {\n            var manifest = this.manifestModel.getValue(),\n                deferred,\n                representation,\n                idx,\n                self = this;\n\n            if (manifest.name !== \"M3U\") {\n                return Q.when(true);\n            }\n\n            // In static use case, do not update playlist if already downloaded\n            if (!isDynamic) {\n                if (_currentRepresentation.segmentInfoType === \"SegmentList\") {\n                    return Q.when(true);\n                }\n            }\n\n            if (playlistRefreshTimeout) {\n                clearTimeout(playlistRefreshTimeout);\n                playlistRefreshTimeout = null;\n            }\n\n            deferred = Q.defer();\n\n            idx = this.manifestExt.getDataIndex(data, manifest, periodInfo.index);\n            representation = manifest.Period_asArray[periodInfo.index].AdaptationSet_asArray[idx].Representation_asArray[currentDownloadQuality];\n\n            this.debug.log(\"[BufferController][\" + type + \"] Update playlist for representation \" + representation.id);\n\n            this.parser.hlsParser.updatePlaylist(representation, data).then(\n                function() {\n                    availableRepresentations = updateRepresentations.call(self, data, periodInfo);\n                    _currentRepresentation = getRepresentationForQuality.call(self, currentDownloadQuality);\n                    representation = manifest.Period_asArray[periodInfo.index].AdaptationSet_asArray[idx].Representation_asArray[currentDownloadQuality];\n\n                    // Refresh playlist according to last segment duration\n                    var segments = representation.SegmentList.SegmentURL_asArray;\n                    if (segments > 0) {\n                        segmentDuration = segments[segments.length-1] - 1;\n                    }\n                    playlistRefreshTimeout = setTimeout(function() {\n                        updatePlayListForRepresentation.call(self);\n                    }, (segmentDuration * 1000));\n\n                    deferred.resolve();\n                },\n                function(err) {\n                    if (err) {\n                        self.errHandler.sendWarning(err.name, err.message, err.data);\n                    }\n                    deferred.reject(err);\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        updateRepresentations = function(data, periodInfo) {\n            var manifest = this.manifestModel.getValue(),\n                idx,\n                adaptations;\n\n            idx = this.manifestExt.getDataIndex(data, manifest, periodInfo.index);\n            adaptations = this.manifestExt.getAdaptationsForPeriod(manifest, periodInfo);\n\n            return this.manifestExt.getRepresentationsForAdaptation(manifest, adaptations[idx]);\n        },\n\n        doUpdateData = function() {\n            if (dataChanged === false) {\n                return false;\n            }\n\n            this.debug.log(\"[BufferController][\" + type + \"] Data changed\");\n\n            // Update representations\n            availableRepresentations = updateRepresentations.call(this, data, periodInfo);\n            _currentRepresentation = getRepresentationForQuality.call(this, this.abrController.getPlaybackQuality(type, data).quality);\n\n            this.bufferExt.updateData(data, type);\n\n            if (trackChanged) {\n                // Reset stored initialization segments\n                initializationData = [];\n\n                // Clear the executed requests\n                this.fragmentController.clearExecutedRequests(fragmentModel);\n\n                // Signal to override current buffering segments to switch as soon as possible to new track\n                overrideBuffer = true;\n\n                // For xml subtitles file, reset cues since there is no media segment\n                if (type === 'text') {\n                    buffer.UpdateLang(data.id, data.lang);\n                    if (data.mimeType === 'application/ttml+xml') {\n                        removeBuffer.call(this);\n                    }\n                }\n            }\n\n            dataChanged = false;\n            trackChanged = false;\n        },\n\n        onFragmentLoadProgress = function(evt) {\n            var currentQuality = this.abrController.getQualityFor(type),\n                i,\n                rules;\n\n            // Check only if not at lowest quality\n            if (this.abrController.isMinQuality(type, data, currentQuality)) {\n                return;\n            }\n\n            rules = this.abrRulesCollection.getRules(MediaPlayer.rules.BaseRulesCollection.prototype.ABANDON_FRAGMENT_RULES);\n            var callback = function(switchRequest) {\n                if (switchRequest.quality < currentQuality) {\n                    this.fragmentController.abortRequestsForModel(fragmentModel);\n                    this.debug.info(\"[BufferController][\" + type + \"] Abandon current segment download\");\n                }\n            };\n\n            for (i = 0; i < rules.length; i++) {\n                rules[i].execute(evt.data.request, callback.bind(this));\n            }\n        },\n\n        signalSegmentLoadingFailed = function() {\n            if (segmentRequestOnError === null) {\n                return;\n            }\n            this.debug.log(\"[BufferController][\" + type + \"] Signal segment loading failed\");\n            this.system.notify(\"segmentLoadingFailed\", segmentRequestOnError);\n            segmentRequestOnError = null;\n        };\n\n    return {\n        videoModel: undefined,\n        metricsModel: undefined,\n        manifestExt: undefined,\n        manifestModel: undefined,\n        bufferExt: undefined,\n        sourceBufferExt: undefined,\n        abrController: undefined,\n        parser: undefined,\n        fragmentExt: undefined,\n        indexHandler: undefined,\n        debug: undefined,\n        system: undefined,\n        errHandler: undefined,\n        config: undefined,\n        abrRulesCollection: undefined,\n\n        initialize: function(type, newPeriodInfo, newData, buffer, fragmentController, source, eventController) {\n            var manifest = this.manifestModel.getValue();\n\n            this.debug.log(\"[BufferController][\" + type + \"] Initialize\");\n\n            this[MediaPlayer.dependencies.FragmentLoader.eventList.ENAME_LOADING_PROGRESS] = onFragmentLoadProgress;\n\n            isDynamic = this.manifestExt.getIsDynamic(manifest);\n            this.setMediaSource(source);\n            this.setType(type);\n            this.setBuffer(buffer);\n            this.setFragmentController(fragmentController);\n            this.setEventController(eventController);\n            minBufferTime = this.config.getParamFor(type, \"BufferController.minBufferTime\", \"number\", -1);\n            minBufferTimeAtStartup = this.config.getParamFor(type, \"BufferController.minBufferTimeForPlaying\", \"number\", MediaPlayer.dependencies.BufferExtensions.BUFFER_TIME_AT_STARTUP);\n            bufferToKeep = this.config.getParamFor(type, \"BufferController.bufferToKeep\", \"number\", MediaPlayer.dependencies.BufferExtensions.DEFAULT_BUFFER_TO_KEEP);\n            liveDelay = this.config.getParamFor(type, \"BufferController.liveDelay\", \"number\", -1);\n\n            this.updateData(newData, newPeriodInfo);\n\n            this.load();\n\n            ready = true;\n        },\n\n        load: function() {\n            var manifest = this.manifestModel.getValue(),\n                self = this;\n\n            doUpdateData.call(this);\n\n            // Retrieve the representation of initial quality to enable some parameters initialization\n            // (@see getLiveEdgeTime() for example)\n            _currentRepresentation = getRepresentationForQuality.call(this, this.abrController.getPlaybackQuality(type, data).quality);\n\n            currentDownloadQuality = -1;\n\n            // Clear buffer\n            removeBuffer.call(this).then(function () {\n                if (_currentRepresentation) {\n                    self.indexHandler.setIsDynamic(isDynamic);\n                    if (minBufferTime === -1) {\n                        minBufferTime = self.bufferExt.decideBufferLength(manifest.minBufferTime, periodInfo.duration, waitingForBuffer);\n                    }\n\n                    if (liveDelay === -1 || liveDelay < minBufferTime) {\n                        liveDelay = minBufferTime;\n                    }\n\n                    // Update manifest's minBufferTime value\n                    manifest.minBufferTime = minBufferTime;\n                    if (type === \"video\") {\n                        if (isDynamic) {\n                            self.indexHandler.updateSegmentList(_currentRepresentation).then(\n                                function() {\n                                    getLiveEdgeTime.call(self).then(\n                                        function(time) {\n                                            self.system.notify(\"startTimeFound\", time);\n                                        }\n                                    );\n                                }\n                            );\n                        } else {\n                            self.indexHandler.getCurrentTime(_currentRepresentation).then(\n                                function(time) {\n                                    if (time < _currentRepresentation.segmentAvailabilityRange.start) {\n                                        time = _currentRepresentation.segmentAvailabilityRange.start;\n                                    }\n                                    self.system.notify(\"startTimeFound\", time);\n                                }\n                            );\n                        }\n                    }\n                }\n\n            });\n        },\n\n        getIndexHandler: function() {\n            return this.indexHandler;\n        },\n\n        getType: function() {\n            return type;\n        },\n\n        setType: function(value) {\n            type = value;\n\n            if (this.indexHandler !== undefined) {\n                this.indexHandler.setType(value);\n            }\n        },\n\n        getPeriodInfo: function() {\n            return periodInfo;\n        },\n\n        getVideoModel: function() {\n            return this.videoModel;\n        },\n\n        setVideoModel: function(value) {\n            this.videoModel = value;\n        },\n\n        getFragmentController: function() {\n            return this.fragmentController;\n        },\n\n        setFragmentController: function(value) {\n            if (value) {\n                this.fragmentController = value;\n                fragmentModel = this.fragmentController.attachBufferController(this);\n                fragmentModel.fragmentLoader.subscribe(MediaPlayer.dependencies.FragmentLoader.eventList.ENAME_LOADING_PROGRESS, this);\n                fragmentModel.setType(type);\n            }\n        },\n\n        setEventController: function(value) {\n            this.eventController = value;\n        },\n\n        getData: function() {\n            return data;\n        },\n\n        updateData: function(newData, newPeriodInfo) {\n\n            this.debug.log(\"[BufferController][\" + type + \"] Update data\");\n\n            // Check if track has changed (in case of language switch for example)\n            trackChanged = (data === null) ? false : ((data.id !==  newData.id) || (data.lang !==  newData.lang) || (data.subType !==  newData.subType));\n\n            // Set the new data\n            data = newData;\n            periodInfo = newPeriodInfo;\n            dataChanged = true;\n\n            if (trackChanged) {\n                this.debug.log(\"[BufferController][\" + type + \"] Track changed\");\n\n                // Restart buffering process to switch as soon as possible to new track\n\n                // Reset current timeout\n                clearTimeout(bufferTimeout);\n                bufferTimeout = null;\n\n                // Reset buffering completed state\n                isBufferingCompleted = false;\n\n                // Restart controller if stopped (if buffering was already completed)\n                doStart.call(this);\n\n                // Restart buffering process\n                if (deferredFragmentBuffered === null) {\n                    checkIfSufficientBuffer.call(this);\n                }\n            }\n        },\n\n        getHtmlVideoState: function() {\n            return htmlVideoState;\n        },\n\n        getAvailableRepresentations: function() {\n            return availableRepresentations;\n        },\n\n        getCurrentRepresentation: function() {\n            return _currentRepresentation;\n        },\n\n        getBuffer: function() {\n            return buffer;\n        },\n\n        setBuffer: function(value) {\n            buffer = value;\n        },\n\n        getMinBufferTime: function() {\n            return minBufferTime;\n        },\n\n        setMinBufferTime: function(value) {\n            minBufferTime = value;\n        },\n\n        getLiveDelay: function() {\n            return liveDelay;\n        },\n\n        setMediaSource: function(value) {\n            mediaSource = value;\n        },\n\n        isReady: function() {\n            return state === READY;\n        },\n\n        isBufferingCompleted: function() {\n            return isBufferingCompleted;\n        },\n\n        updateManifest: function() {\n            this.system.notify(\"manifestUpdate\");\n        },\n\n        updateBufferState: function() {\n            var currentTime = this.videoModel.getCurrentTime(),\n                previousTime = htmlVideoTime === -1 ? currentTime : htmlVideoTime,\n                progress = (currentTime - previousTime),\n                ranges,\n                self = this;\n\n            clearTimeout(bufferStateTimeout);\n            bufferStateTimeout = null;\n\n            if (started === false) {\n                return;\n            }\n\n            if (type === \"text\") {\n                return;\n            }\n\n            if (trickModeEnabled) {\n                return;\n            }\n\n            //this.debug.log(\"#### [\" + type + \"] level = \" + bufferLevel + \", currentTime = \" + currentTime + \", progress = \" + progress);\n\n            switch (htmlVideoState) {\n                case INIT:\n                    htmlVideoState = BUFFERING;\n                    this.debug.info(\"[BufferController][\" + type + \"] BUFFERING - \" + currentTime + \" - \" + bufferLevel);\n                    this.metricsModel.addState(type, \"buffering\", currentTime);\n                    break;\n\n                case BUFFERING:\n                    if (!this.getVideoModel().isPaused() &&\n                        ((progress > 0) && (bufferLevel >= 1))) {\n                        htmlVideoState = PLAYING;\n                        this.debug.info(\"[BufferController][\" + type + \"] PLAYING - \" + currentTime);\n                        this.metricsModel.addState(type, \"playing\", currentTime);\n                        // Reset seeking state since on some browsers (IE11/Edge) seeked event may not be raised\n                        seeking = false;\n                        seekTarget = -1;\n\n                        // Reset segment download error status\n                        segmentDownloadErrorCount = 0;\n                    } else if (!this.getVideoModel().isStalled()) {\n                        ranges = this.sourceBufferExt.getAllRanges(buffer);\n                    }\n                    break;\n\n                case PLAYING:\n                    if (!this.getVideoModel().isPaused() && !this.getVideoModel().isSeeking() &&\n                        ((progress <= 0 && bufferLevel <= 1) || (bufferLevel === 0))) {\n                        htmlVideoState = BUFFERING;\n                        this.debug.info(\"[BufferController][\" + type + \"] BUFFERING - \" + currentTime + \" - \" + bufferLevel);\n                        this.metricsModel.addState(type, \"buffering\", currentTime);\n\n                        if (segmentRequestOnError) {\n                            // If buffering is due to segment download failure (see onBytesError()), then signal it to Stream (see Stream.onBufferFailed())\n                            signalSegmentLoadingFailed.call(this);\n                        } else {\n                            // Check if there is a hole in the buffer (segment download failed or input stream discontinuity), then skip it\n                            // For live streams we consider discontinuities lower than a segment duration\n                            ranges = this.sourceBufferExt.getAllRanges(buffer);\n                            var i;\n                            for (i = 0; i < ranges.length; i++) {\n                                if (currentTime < ranges.start(i)) {\n                                    if (!isDynamic || ((ranges.start(i) - currentTime) < segmentDuration)) {\n                                        break;\n                                    }\n                                }\n                            }\n                            if (i < ranges.length) {\n                                // Seek to next available range\n                                this.debug.info(\"[BufferController][\" + type + \"] BUFFERING => skip buffer discontinuity, seek to \" + ranges.start(i));\n                                this.videoModel.setCurrentTime(ranges.start(i));\n                            }\n                        }\n                    }\n\n                    bufferStateTimeout = setTimeout(function() {\n                        bufferStateTimeout = null;\n                        updateBufferLevel.call(self, false);\n                    }, 1000);\n\n                    break;\n            }\n\n            if (currentTime > 0) {\n                htmlVideoTime = currentTime;\n            }\n        },\n\n        updateStalledState: function() {\n            stalled = this.videoModel.isStalled();\n        },\n\n        reset: function(errored) {\n            var cancel = function cancelDeferred(d) {\n                    if (d) {\n                        d.reject();\n                        d = null;\n                    }\n                },\n                deferred = Q.defer(),\n                self = this;\n\n            doStop.call(this);\n            // Wait for current buffering process to be completed before restarting\n            this.sourceBufferExt.abort(mediaSource, buffer);\n\n            if (playlistRefreshTimeout) {\n                clearTimeout(playlistRefreshTimeout);\n                playlistRefreshTimeout = null;\n            }\n\n            Q.when(deferredFragmentBuffered ? deferredFragmentBuffered.promise : true).then(\n                function() {\n                    cancel(deferredRejectedDataAppend);\n                    cancel(deferredFragmentBuffered);\n\n                    if (fragmentModel) {\n                        fragmentModel.fragmentLoader.unsubscribe(MediaPlayer.dependencies.FragmentLoader.eventList.ENAME_LOADING_PROGRESS, self.abrController);\n                        self.fragmentController.abortRequestsForModel(fragmentModel);\n                        self.fragmentController.detachBufferController(fragmentModel);\n                        fragmentModel = null;\n                    }\n\n                    initializationData = [];\n                    initialPlayback = true;\n                    isQuotaExceeded = false;\n                    rejectedBytes = null;\n                    appendingRejectedData = false;\n\n                    if (trickModeEnabled) {\n                        // Restore ABR quality and auto switch state\n                        self.abrController.setAutoSwitchFor(type, trickModePreviousAutoSwitch);\n                        self.abrController.setQualityFor(type, trickModePreviousQuality);\n                    }\n\n                    if (!errored) {\n                        self.sourceBufferExt.removeSourceBuffer(mediaSource, buffer);\n                    }\n                    data = null;\n                    buffer = null;\n\n                    deferred.resolve();\n                }, function() {\n                    deferred.reject();\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        getSegmentDuration: function() {\n            return segmentDuration;\n        },\n\n        setTrickMode: function(enabled, forward) {\n            var deferred = Q.defer();\n\n            this.debug.log(\"[BufferController][\" + type + \"] setTrickMode - enabled = \" + enabled);\n\n            if (trickModeEnabled === enabled) {\n                deferred.resolve();\n                return deferred.promise;\n            }\n            trickModeEnabled = enabled;\n\n            if (trickModeEnabled) {\n                // Trick mode enabled\n                // => store current quality and auto switch state\n                // => disable auto switch and set lowest quality\n                trickModeForward = forward;\n                trickModePreviousQuality = this.abrController.getQualityFor(type);\n                trickModePreviousAutoSwitch = this.abrController.getAutoSwitchFor(type);\n                this.abrController.setAutoSwitchFor(type, false);\n                this.abrController.setQualityFor(type, 0);\n                deferred.resolve();\n            } else {\n                // Trick mode disabled\n                // => restore ABR quality and auto switch state\n                this.abrController.setAutoSwitchFor(type, trickModePreviousAutoSwitch);\n                this.abrController.setQualityFor(type, trickModePreviousQuality);\n                removeBuffer.call(this).then(function() {\n                    deferred.resolve();\n                });\n            }\n\n            return deferred.promise;\n        },\n\n        start: doStart,\n        seek: doSeek,\n        stop: doStop,\n        seeked: doSeeked,\n        updateBufferLevel: updateBufferLevel\n    };\n};\n\nMediaPlayer.dependencies.BufferController.prototype = {\n    constructor: MediaPlayer.dependencies.BufferController\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.BufferExtensions = function () {\n    \"use strict\";\n\n    var minBufferTarget,\n        currentBufferTarget,\n        topAudioQualityIndex = 0,\n        topVideoQualityIndex = 0,\n        audioData = null,\n        videoData = null,\n\n        getCurrentHttpRequestLatency = function(metrics) {\n            var httpRequest = this.metricsExt.getCurrentHttpRequest(metrics);\n            if (httpRequest !== null) {\n                return (httpRequest.tresponse.getTime() - httpRequest.trequest.getTime()) / 1000;\n            }\n            return 0;\n        },\n\n        isPlayingAtTopQuality = function() {\n            var self = this,\n                audioQuality,\n                videoQuality,\n                isAtTop;\n\n            audioQuality = audioData ? self.abrController.getQualityFor(\"audio\") : topAudioQualityIndex;\n            videoQuality = videoData ? self.abrController.getQualityFor(\"video\") : topVideoQualityIndex;\n\n            isAtTop = (audioQuality === topAudioQualityIndex) &&\n                (videoQuality === topVideoQualityIndex);\n\n            return isAtTop;\n        };\n\n    return {\n        system:undefined,\n        videoModel: undefined,\n        metricsExt: undefined,\n        metricsModel: undefined,\n        abrController: undefined,\n        bufferMax: undefined,\n\n        updateData: function(data, type) {\n            if (data) {\n                var topIndex = data.Representation_asArray.length - 1;\n\n                if (type === \"audio\") {\n                    topAudioQualityIndex = topIndex;\n                    audioData = data;\n                } else if (type === \"video\") {\n                    topVideoQualityIndex = topIndex;\n                    videoData = data;\n                }\n            }\n        },\n\n        getTopQualityIndex: function(type) {\n            var topQualityIndex = null;\n\n            if (type === \"audio\") {\n                topQualityIndex = topAudioQualityIndex;\n            } else if (type === \"video\") {\n                topQualityIndex = topVideoQualityIndex;\n            }\n\n            return topQualityIndex;\n        },\n\n        decideBufferLength: function (minBufferTime, duration/*, waitingForBuffer*/) {\n\n            if (duration === Infinity) {\n                minBufferTarget = (minBufferTime > 0) ? minBufferTime : MediaPlayer.dependencies.BufferExtensions.DEFAULT_MIN_BUFFER_TIME;\n            } else if (minBufferTime >= duration) {\n                minBufferTarget = Math.min(duration, MediaPlayer.dependencies.BufferExtensions.DEFAULT_MIN_BUFFER_TIME);\n            } else {\n                minBufferTarget = Math.min(duration, minBufferTime);\n            }\n\n            return minBufferTarget;\n        },\n\n        getLeastBufferLevel: function() {\n            var videoMetrics = this.metricsModel.getReadOnlyMetricsFor(\"video\"),\n                videoBufferLevel = this.metricsExt.getCurrentBufferLevel(videoMetrics),\n                audioMetrics = this.metricsModel.getReadOnlyMetricsFor(\"audio\"),\n                audioBufferLevel = this.metricsExt.getCurrentBufferLevel(audioMetrics),\n                leastLevel = null;\n\n            if (videoBufferLevel === null || audioBufferLevel === null) {\n                leastLevel = (audioBufferLevel !== null) ? audioBufferLevel.level : ((videoBufferLevel !== null) ? videoBufferLevel.level : null);\n            } else {\n                leastLevel = Math.min(audioBufferLevel.level, videoBufferLevel.level);\n            }\n\n            return leastLevel;\n        },\n\n        getRequiredBufferLength: function (waitingForBuffer, delay, isDynamic, duration) {\n            var self = this,\n                vmetrics = self.metricsModel.getReadOnlyMetricsFor(\"video\"),\n                ametrics = self.metricsModel.getReadOnlyMetricsFor(\"audio\"),\n                isLongFormContent = (duration >= MediaPlayer.dependencies.BufferExtensions.LONG_FORM_CONTENT_DURATION_THRESHOLD),\n                deferred = Q.defer(),\n                isAtTop = false,\n                requiredBufferLength;\n\n            if (self.bufferMax === MediaPlayer.dependencies.BufferExtensions.BUFFER_SIZE_MIN) {\n                requiredBufferLength = minBufferTarget;\n                deferred.resolve(requiredBufferLength);\n            } else if (self.bufferMax === MediaPlayer.dependencies.BufferExtensions.BUFFER_SIZE_INFINITY) {\n                requiredBufferLength = duration;\n                deferred.resolve(requiredBufferLength);\n            } else if (self.bufferMax === MediaPlayer.dependencies.BufferExtensions.BUFFER_SIZE_REQUIRED) {\n                currentBufferTarget = minBufferTarget;\n\n                if (!isDynamic) {\n                    if (!waitingForBuffer) {\n                        isAtTop = isPlayingAtTopQuality.call(self);\n                    }\n                }\n\n                        if (isAtTop) {\n                            currentBufferTarget = isLongFormContent ?\n                                MediaPlayer.dependencies.BufferExtensions.BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM :\n                                MediaPlayer.dependencies.BufferExtensions.BUFFER_TIME_AT_TOP_QUALITY;\n                        }\n\n                        requiredBufferLength = currentBufferTarget + delay + Math.max(getCurrentHttpRequestLatency.call(self, vmetrics),\n                            getCurrentHttpRequestLatency.call(self, ametrics));\n\n                        deferred.resolve(requiredBufferLength);\n            } else {\n                deferred.reject(\"invalid bufferMax value: \" + self.bufferMax);\n            }\n\n            return deferred.promise;\n        },\n\n        //TODO: need to add this info to MediaPlayer.vo.metrics.BufferLevel or create new metric?\n        getBufferTarget: function() {\n            return currentBufferTarget === undefined ? minBufferTarget : currentBufferTarget;\n        }\n    };\n};\n\nMediaPlayer.dependencies.BufferExtensions.BUFFER_SIZE_REQUIRED = \"required\";\nMediaPlayer.dependencies.BufferExtensions.BUFFER_SIZE_MIN = \"min\";\nMediaPlayer.dependencies.BufferExtensions.BUFFER_SIZE_INFINITY = \"infinity\";\nMediaPlayer.dependencies.BufferExtensions.BUFFER_TIME_AT_STARTUP = 1;\nMediaPlayer.dependencies.BufferExtensions.DEFAULT_MIN_BUFFER_TIME = 16;\nMediaPlayer.dependencies.BufferExtensions.DEFAULT_BUFFER_TO_KEEP = 30;\nMediaPlayer.dependencies.BufferExtensions.DEFAULT_LIVE_DELAY = 16;\nMediaPlayer.dependencies.BufferExtensions.BUFFER_TIME_AT_TOP_QUALITY = 30;\nMediaPlayer.dependencies.BufferExtensions.BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM = 300;\nMediaPlayer.dependencies.BufferExtensions.LONG_FORM_CONTENT_DURATION_THRESHOLD = 600;\nMediaPlayer.dependencies.BufferExtensions.prototype.constructor = MediaPlayer.dependencies.BufferExtensions;\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.Capabilities = function () {\n    \"use strict\";\n};\n\nMediaPlayer.utils.Capabilities.prototype = {\n    constructor: MediaPlayer.utils.Capabilities,\n    system: undefined,\n\n    supportsMediaSource: function () {\n        \"use strict\";\n\n        var hasWebKit = (\"WebKitMediaSource\" in window),\n            hasMediaSource = (\"MediaSource\" in window);\n\n        return (hasWebKit || hasMediaSource);\n    },\n\n    supportsMediaKeys: function () {\n        \"use strict\";\n\n        var hasWebKit = (\"WebKitMediaKeys\" in window),\n            hasMs = (\"MSMediaKeys\" in window),\n            hasMediaSource = (\"MediaKeys\" in window);\n\n        return (hasWebKit || hasMs || hasMediaSource);\n    },\n\n    /**\n     * Returns whether Encrypted Media Extensions are supported on this\n     * user agent\n     *\n     * @return {boolean} true if EME is supported, false otherwise\n     */\n    supportsEncryptedMedia: function () {\n        return this.system.hasMapping('protectionModel');\n    },\n\n    supportsCodec: function (element, codec) {\n        \"use strict\";\n\n        if (!(element instanceof HTMLMediaElement)) {\n            throw \"element must be of type HTMLMediaElement.\";\n        }\n\n        var canPlay = element.canPlayType(codec);\n        return (canPlay === \"probably\" || canPlay === \"maybe\");\n    }\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.Config = function () {\n    \"use strict\";\n\n    var paramsType = [\"video\", \"audio\"],\n\n        // Default configuration, provides list of possible parameters\n        params = {\n            // BufferController parameters\n            \"BufferController.minBufferTimeForPlaying\": -1,\n            \"BufferController.minBufferTime\": -1,\n            \"BufferController.bufferToKeep\": -1,\n            \"BufferController.liveDelay\": -1,\n            // ABR parameters\n            \"ABR.minBandwidth\": -1,\n            \"ABR.maxBandwidth\": -1,\n            \"ABR.minQuality\": -1,\n            \"ABR.maxQuality\": -1,\n            \"ABR.switchUpIncrementally\": -1,\n            \"ABR.switchUpRatioSafetyFactor\": -1,\n            \"ABR.latencyInBandwidth\": -1,\n            \"ABR.switchDownBufferTime\": -1,\n            \"ABR.switchDownBufferRatio\": -1,\n            \"ABR.switchLowerBufferTime\": -1,\n            \"ABR.switchLowerBufferRatio\": -1,\n            \"ABR.switchUpBufferTime\": -1,\n            \"ABR.switchUpBufferRatio\": -1,\n            \"ABR.keepBandwidthCondition\": -1,\n            \"ABR.droppedFramesMinRatio\": -1,\n            \"ABR.droppedFramesMaxRatio\": -1,\n            // Manifest loader parameters\n            \"ManifestLoader.RetryAttempts\": -1,\n            \"ManifestLoader.RetryInterval\": -1,\n            // Fragment loader parameters\n            \"FragmentLoader.RetryAttempts\": -1,\n            \"FragmentLoader.RetryInterval\": -1,\n            // Protection parameters\n            \"Protection.licensePersistence\": -1,\n            // Other parameters\n            \"backoffSeekToEnd\" : 2,\n            // Video parameters\n            \"video\": {\n            },\n            // Audio parameters\n            \"audio\": {\n            }\n        },\n\n        doSetParams = function (newParams) {\n            var item,\n                typeParams,\n                typeItem;\n\n            for (item in newParams) {\n                if (newParams.hasOwnProperty(item)) {\n                    // Check if comment\n                    if (item.indexOf('//') === -1) {\n                        // Check if type parameters\n                        if (paramsType.indexOf(item) > -1) {\n                            typeParams = newParams[item];\n                            for (typeItem in typeParams) {\n                                if (typeParams.hasOwnProperty(typeItem)) {\n                                    params[item][typeItem] = newParams[item][typeItem];\n                                }\n                            }\n                        } else {\n                            params[item] = newParams[item];\n                        }\n                    }\n                }\n            }\n        },\n\n        getParam = function (params, name, type, def) {\n            var value = params[name];\n\n            if ((value === undefined) || (value === -1)) {\n                return def;\n            }\n\n            if ((type !== undefined) && (typeof value !== type)) {\n                switch (type) {\n                    case 'number':\n                        value = Number(value);\n                        break;\n                    case 'boolean':\n                        value = (value === 'true') ||\n                                (value === '1') ||\n                                (value === 1);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            return value;\n        },\n\n        doGetParam = function (name, type, def) {\n            return getParam(params, name, type, def);\n        },\n\n        doGetParamFor = function (key, name, type, def) {\n            var typeParams = params[key];\n\n            if ((typeParams !== undefined) && (typeParams[name] !== undefined)) {\n                return getParam(typeParams, name, type, def);\n            }\n\n            return getParam(params, name, type, def);\n        };\n\n    return {\n        debug: undefined,\n\n        setup: function () {\n        },\n\n        setParams: function (newParams) {\n            doSetParams(newParams);\n\n            // Update debugger level if set in config\n            var level = this.getParam(\"Debug.level\", \"number\", -1);\n            if (level !== -1) {\n                this.debug.setLevel(level);\n            }\n        },\n\n        getParam: function (name, type, def) {\n            return doGetParam(name, type, def);\n        },\n\n        getParamFor: function (key, name, type, def) {\n            return doGetParamFor(key, name, type, def);\n        }\n    };\n};\n\nMediaPlayer.utils.Config.prototype = {\n    constructor: MediaPlayer.utils.Config\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.di.Context = function () {\n    \"use strict\";\n\n    var mapProtectionModel = function() {\n        var videoElement = document.createElement(\"video\"),\n            debug = this.system.getObject(\"debug\");\n\n        // Detect EME APIs.  Look for newest API versions first\n        if (MediaPlayer.models.ProtectionModel_21Jan2015.detect(videoElement)) {\n            this.system.mapSingleton('protectionModel', MediaPlayer.models.ProtectionModel_21Jan2015);\n        } else if (MediaPlayer.models.ProtectionModel_3Feb2014.detect(videoElement)) {\n            this.system.mapClass('protectionModel', MediaPlayer.models.ProtectionModel_3Feb2014);\n        } else if (MediaPlayer.models.ProtectionModel_01b.detect(videoElement)) {\n            this.system.mapClass('protectionModel', MediaPlayer.models.ProtectionModel_01b);\n        } else {\n            debug.log(\"No supported version of EME detected on this user agent!\");\n            debug.log(\"Attempts to play encrypted content will fail!\");\n        }\n    };\n\n    return {\n        system : undefined,\n        setup : function () {\n            this.system.autoMapOutlets = true;\n\n            // MediaPlayer.utils.*\n            this.system.mapSingleton('capabilities', MediaPlayer.utils.Capabilities);\n            this.system.mapSingleton('config', MediaPlayer.utils.Config);\n            this.system.mapSingleton('debug', MediaPlayer.utils.Debug);\n            this.system.mapSingleton('debugController', MediaPlayer.utils.DebugController);\n            this.system.mapClass('domParser', MediaPlayer.utils.DOMParser);\n            this.system.mapSingleton('eventBus', MediaPlayer.utils.EventBus);\n            this.system.mapSingleton('textTrackExtensions', MediaPlayer.utils.TextTrackExtensions);\n            this.system.mapSingleton('tokenAuthentication', MediaPlayer.utils.TokenAuthentication);\n            this.system.mapSingleton('vttParser', MediaPlayer.utils.VTTParser);\n            this.system.mapSingleton('ttmlParser', MediaPlayer.utils.TTMLParser);\n            this.system.mapSingleton('ttmlRenderer', MediaPlayer.utils.TTMLRenderer);\n\n            // MediaPlayer.models.*\n            this.system.mapSingleton('manifestModel', MediaPlayer.models.ManifestModel);\n            this.system.mapClass('metrics', MediaPlayer.models.MetricsList);\n            this.system.mapSingleton('metricsModel', MediaPlayer.models.MetricsModel);\n            this.system.mapSingleton('uriQueryFragModel', MediaPlayer.models.URIQueryAndFragmentModel);\n            this.system.mapSingleton('videoModel', MediaPlayer.models.VideoModel);\n\n            // MediaPlayer.dependencies.*\n            this.system.mapSingleton('abrController', MediaPlayer.dependencies.AbrController);\n            this.system.mapClass('bufferController', MediaPlayer.dependencies.BufferController);\n            this.system.mapSingleton('bufferExt', MediaPlayer.dependencies.BufferExtensions);\n            this.system.mapSingleton('errHandler', MediaPlayer.dependencies.ErrorHandler);\n            this.system.mapClass('eventController', MediaPlayer.dependencies.EventController);\n            this.system.mapClass('fragmentController', MediaPlayer.dependencies.FragmentController);\n            this.system.mapClass('fragmentLoader', MediaPlayer.dependencies.FragmentLoader);\n            this.system.mapClass('fragmentModel', MediaPlayer.dependencies.FragmentModel);\n            this.system.mapClass('manifestLoader', MediaPlayer.dependencies.ManifestLoader);\n            this.system.mapSingleton('manifestUpdater', MediaPlayer.dependencies.ManifestUpdater);\n            this.system.mapSingleton('mediaSourceExt', MediaPlayer.dependencies.MediaSourceExtensions);\n            this.system.mapSingleton('notifier', MediaPlayer.dependencies.Notifier);\n            this.system.mapSingleton('parser', MediaPlayer.dependencies.Parser);\n            this.system.mapSingleton('sourceBufferExt', MediaPlayer.dependencies.SourceBufferExtensions);\n            this.system.mapClass('stream', MediaPlayer.dependencies.Stream);\n            this.system.mapSingleton('streamController', MediaPlayer.dependencies.StreamController);\n            this.system.mapClass('textController', MediaPlayer.dependencies.TextController);\n            this.system.mapSingleton('textSourceBuffer', MediaPlayer.dependencies.TextSourceBuffer);\n            this.system.mapSingleton('textTTMLXMLMP4SourceBuffer', MediaPlayer.dependencies.TextTTMLXMLMP4SourceBuffer);\n            this.system.mapSingleton('videoExt', MediaPlayer.dependencies.VideoModelExtensions);\n\n            // MediaPlayer.dependencies.protection.*\n            // Protection package if available\n            if (MediaPlayer.dependencies.ProtectionController) {\n                this.system.mapClass('protectionController', MediaPlayer.dependencies.ProtectionController);\n                this.system.mapSingleton('protectionExt', MediaPlayer.dependencies.ProtectionExtensions);\n                this.system.mapSingleton('ksClearKey', MediaPlayer.dependencies.protection.KeySystem_ClearKey);\n                this.system.mapSingleton('ksPlayReady', MediaPlayer.dependencies.protection.KeySystem_PlayReady);\n                this.system.mapSingleton('ksWidevine', MediaPlayer.dependencies.protection.KeySystem_Widevine);\n                this.system.mapSingleton('serverClearKey', MediaPlayer.dependencies.protection.servers.ClearKey);\n                this.system.mapSingleton('serverDRMToday', MediaPlayer.dependencies.protection.servers.DRMToday);\n                this.system.mapSingleton('serverPlayReady', MediaPlayer.dependencies.protection.servers.PlayReady);\n                this.system.mapSingleton('serverWidevine', MediaPlayer.dependencies.protection.servers.Widevine);\n                mapProtectionModel.call(this); // Determines EME API support and version\n            }\n\n            // MediaPlayer.rules.*\n            this.system.mapClass('abrRulesCollection', MediaPlayer.rules.BaseRulesCollection);\n            this.system.mapClass('abandonRequestRule', MediaPlayer.rules.AbandonRequestsRule);\n            this.system.mapClass('downloadRatioRule', MediaPlayer.rules.DownloadRatioRule);\n            this.system.mapClass('droppedFramesRule', MediaPlayer.rules.DroppedFramesRule);\n            this.system.mapClass('insufficientBufferRule', MediaPlayer.rules.InsufficientBufferRule);\n            this.system.mapClass('limitSwitchesRule', MediaPlayer.rules.LimitSwitchesRule);\n\n            // Dash.dependencies.*\n            this.system.mapClass('baseURLExt', Dash.dependencies.BaseURLExtensions);\n            this.system.mapClass('fragmentExt', Dash.dependencies.FragmentExtensions);\n            this.system.mapClass('indexHandler', Dash.dependencies.DashHandler);\n            this.system.mapSingleton('manifestExt', Dash.dependencies.DashManifestExtensions);\n            //this.system.mapSingleton('metricsExt', Dash.dependencies.DashMetricsExtensions);\n            this.system.mapSingleton('metricsExt', MediaPlayer.dependencies.MetricsExtensions);\n            this.system.mapSingleton('timelineConverter', Dash.dependencies.TimelineConverter);\n            this.system.mapClass('dashParser', Dash.dependencies.DashParser);\n\n            // Mss package if available\n            if (Mss.dependencies.MssParser) {\n                this.system.mapClass('mssParser', Mss.dependencies.MssParser);\n            }\n\n            // Hls package if available\n            if (Hls.dependencies.HlsParser) {\n                this.system.mapClass('hlsParser', Hls.dependencies.HlsParser);\n                this.system.mapSingleton('hlsDemux', Hls.dependencies.HlsDemux);\n            }\n\n            // But we do always provide HlsStream to support HLS(+FP) streams in Safari\n            this.system.mapClass('hlsStream', Hls.dependencies.HlsStream);\n\n            // Create the context manager to plug some specific parts of the code\n            this.system.mapSingleton('contextManager', MediaPlayer.modules.ContextManager);\n\n            // Plug message handler. When the message is notify, the contextManager is called\n            this.system.mapHandler('setContext', 'contextManager', 'setContext');\n        }\n    };\n};\n","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.modules.ContextManager = function (){\n    \"use strict\";\n\n    return {\n        system: undefined,\n        debug: undefined,\n\n        setContext: function(ctx) {\n            this.system.autoMapOutlets = true;\n\n            if (ctx === \"MSS\") {\n                // here we map specific Class\n                this.system.mapClass('mp4Processor', MediaPlayer.dependencies.Mp4Processor);\n                this.system.mapClass('indexHandler', Mss.dependencies.MssHandler);\n                this.system.mapClass('fragmentController', Mss.dependencies.MssFragmentController);\n                this.system.mapClass('mssFragmentInfoController', Mss.dependencies.MssFragmentInfoController);\n            } else if (ctx === \"HLS\") {\n                this.system.mapClass('mp4Processor', MediaPlayer.dependencies.Mp4Processor);\n                this.system.mapClass('fragmentController', Hls.dependencies.HlsFragmentController);\n                this.system.mapClass('indexHandler', Hls.dependencies.HlsHandler);\n            } else {\n                this.system.mapClass('fragmentController', MediaPlayer.dependencies.FragmentController);\n                this.system.mapClass('indexHandler', Dash.dependencies.DashHandler);\n            }\n        }\n    };\n};\n\nMediaPlayer.modules.ContextManager.prototype =  {\n    constructor: MediaPlayer.modules.ContextManager\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.Debug = function () {\n    \"use strict\";\n\n    Date.prototype.HHMMSSmmm = function() {\n\n        var h = this.getHours().toString(),\n            m = this.getMinutes().toString(),\n            s = this.getSeconds().toString(),\n            ms = this.getMilliseconds().toString(),\n            HH = h[1] ? h : \"0\" + h[0],\n            MM = m[1] ? m : \"0\" + m[0],\n            SS = s[1] ? s : \"0\" + s[0],\n            mmm = ms[2] ? ms : \"0\" + (ms[1] ? ms : \"0\" + ms[0]);\n\n        return HH + \":\" + MM + \":\" + SS + \".\" + mmm;\n    };\n\n    Date.prototype.MMSSmmm = function() {\n\n        var m = this.getMinutes().toString(),\n            s = this.getSeconds().toString(),\n            ms = this.getMilliseconds().toString(),\n            MM = m[1] ? m : \"0\" + m[0],\n            SS = s[1] ? s : \"0\" + s[0],\n            mmm = ms[2] ? ms : \"0\" + (ms[1] ? ms : \"0\" + ms[0]);\n\n        return MM + \":\" + SS + \".\" + mmm;\n    };\n\n    // MemoryLogger definition\n\n    var MemoryLogger = function(){\n        // array to store logs\n        this.logArray= [];\n        // boolean to set leve in message\n        this.showLevel = true;\n    };\n\n\n    MemoryLogger.prototype.error =\n    MemoryLogger.prototype.warn = \n    MemoryLogger.prototype.info =\n    MemoryLogger.prototype.debug  = function(message){\n        this.logArray.push(message);\n    };\n\n    MemoryLogger.prototype.getLogs = function(){\n        return this.logArray;\n    };\n\n    // ORANGE: add level\n    var NONE  = 0,\n        ERROR = 1,\n        WARN  = 2,\n        INFO  = 3,\n        DEBUG = 4,\n        ALL   = 4,\n        level = 0,\n        showTimestamp = true,\n        showElapsedTime = false,\n        startTime = new Date(),\n        // default logger set to console\n        _logger = console,\n\n        _log = function (logLevel, args) {\n            if (logLevel <= getLevel()) {\n\n                var message = _prepareLog(logLevel, args);\n\n                switch (logLevel) {\n                    case ERROR:\n                        _logger.error(message);\n                        break;\n                    case WARN:\n                        _logger.warn(message);\n                        break;\n                    case INFO:\n                        _logger.info(message);\n                        break;\n                    case DEBUG:\n                        _logger.debug(message);\n                        break;\n                }\n                \n            }\n\n        },\n\n        _prepareLog = function(logLevel, args){\n            var message = \"\",\n                logTime = null;\n\n            if (showTimestamp) {\n                logTime = new Date();\n                message += \"[\" + logTime.HHMMSSmmm() + \"]\";\n            }\n\n            if(_logger && _logger.showLevel){\n                 message += \"[\"+_getStringLevel(logLevel)+\"]\";\n            }\n\n            if (showElapsedTime) {\n                message += \"[\" + new Date(logTime - startTime).MMSSmmm() + \"]\";\n            }\n\n            Array.apply(null, args).forEach(function(item) {\n                message += item + \" \";\n            });\n\n            return message;\n        },\n\n        _getStringLevel = function(level){\n            switch(level){\n                case ERROR:\n                return \"ERROR\";\n                case WARN:\n                return \"WARN\";\n                case INFO:\n                return \"INFO\";\n                case DEBUG:\n                return \"DEBUG\";\n                default:\n                return \"\";\n            }\n        },\n\n        getLevel = function() {\n            return level;\n        },\n\n        getLogger = function () {\n            return _logger;\n        };\n\n    return {\n        \n        // ORANGE: add level\n        NONE:   NONE,\n        ERROR:  ERROR,\n        WARN:   WARN,\n        INFO:   INFO,\n        DEBUG:  DEBUG,\n        ALL:    ALL,\n\n        getLevel: getLevel,\n        getLogger: getLogger,\n\n        setLevel: function(value) {\n            level  = value;\n        },\n\n        setLogger: function(type){\n           switch(type){\n                case 'log4javascript' :\n                    var appender = new log4javascript.PopUpAppender();\n                    var layout = new log4javascript.PatternLayout(\"%d{HH:mm:ss.SSS} %-5p - %m%n\");\n                    appender.setLayout(layout);\n                    _logger.addAppender(appender);\n                    _logger.setLevel(log4javascript.Level.ALL);\n                    _logger.initialized = true;\n                break;\n\n                case 'memory':\n                    _logger = new MemoryLogger();\n                break;\n\n                case 'console':\n                    _logger = console;\n                break;\n\n                default:\n                    _logger = null;\n           }\n        },\n\n        error: function () {\n            _log.call(this, ERROR, arguments);\n        },\n\n        warn: function () {\n            _log.call(this, WARN, arguments);\n        },\n\n        info: function () {\n            _log.call(this, INFO, arguments);\n        },\n\n        // Keep this function for compatibility\n        log: function () {\n            _log.call(this, DEBUG, arguments);\n        }\n    };\n};\n","/**\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2016, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * @constructs DebugController\n * @description A class which allow to download debug data on specific keybord shortcut\n */\nMediaPlayer.utils.DebugController = function() {\n    'use strict';\n\n    // debug data configuration\n    var debugData = {\n        isInDebug: false,\n        level: 0,\n        loggerType: 'console'\n    };\n\n    var version = '';\n\n    var _handleKeyPressedEvent = function(e) {\n        // if we press ctrl + alt + maj + z we activate debug mode\n        if ((e.altKey === true) && (e.ctrlKey === true) && (e.shiftKey === true) &&\n            ((e.keyCode === 68) || (e.keyCode === 90))) {\n            if (debugData.isInDebug) {\n                console.log('hasplayer.js debug OFF (v' + version + ')');\n                debugData.isInDebug = false;\n                if (e.keyCode === 90) {\n                    _downloadDebug(this.debug.getLogger().getLogs());\n                    this.debug.setLevel(debugData.level);\n                    this.debug.setLogger(debugData.loggerType);\n                } else {\n                    this.debug.setLevel(0);\n                }\n            } else {\n                console.log('hasplayer.js debug ON (v' + version + ')');\n                debugData.isInDebug = true;\n                debugData.level = this.debug.getLevel();\n                this.debug.setLevel((e.keyCode === 68) ? 4 : 3);\n                this.debug.setLogger((e.keyCode === 68) ? 'console' : 'memory');\n            }\n        }\n    };\n\n    var _downloadDebug = function(array) {\n        if (array && array.length > 0) {\n            var filename = 'hasplayer_logs.txt',\n                data = JSON.stringify(array, null, '\\r\\n'),\n                blob = new Blob([data], {\n                    type: 'text/json'\n                });\n\n            if (navigator.msSaveBlob) { // For IE10+ and edge\n                navigator.msSaveBlob(blob, filename);\n            } else {\n                var e = document.createEvent('MouseEvents'),\n                    a = document.createElement('a');\n                a.download = filename;\n                a.href = window.URL.createObjectURL(blob);\n                a.dataset.downloadurl = ['text/json', a.download, a.href].join(':');\n                e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n                a.dispatchEvent(e);\n            }\n        }\n    };\n\n    return {\n        debug: undefined,\n\n        setup: function() {\n            window.addEventListener('keydown', _handleKeyPressedEvent.bind(this));\n        },\n\n        init: function(ver) {\n            version = ver;\n        }\n\n    };\n};\n\nMediaPlayer.utils.DebugController.prototype = {\n    constructor: MediaPlayer.utils.DebugController\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nMediaPlayer.dependencies.ErrorHandler = function () {\n    \"use strict\";\n\n    return {\n        eventBus: undefined,\n        debug: undefined,\n\n        sendWarning: function (code, message, data) {\n            this.debug.warn(\"[Warn] Code: \" + code + \", Message: \" + message + \", Data: \" + JSON.stringify(data, null, '\\t'));\n            this.eventBus.dispatchEvent({\n                type: \"warning\",\n                data: {code : code, message: message, data: data}\n            });\n        },\n\n        sendError: function (code, message, data) {\n            this.debug.error(\"[Error] Code: \" + code + \", Message: \" + message + \", Data: \" + JSON.stringify(data, null, '\\t'));\n            this.eventBus.dispatchEvent({\n                type: \"error\",\n                data: {code : code, message: message, data: data}\n            });\n        }\n    };\n};\n\nMediaPlayer.dependencies.ErrorHandler.prototype = {\n    constructor: MediaPlayer.dependencies.ErrorHandler\n};\n\n// <video> element errors\nMediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR = \"INTERNAL_ERROR\";\n\n// <video> element errors\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_ABORTED = \"MEDIA_ERR_ABORTED\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_NETWORK = \"MEDIA_ERR_NETWORK\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_DECODE = \"MEDIA_ERR_DECODE\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_SRC_NOT_SUPPORTED = \"MEDIA_ERR_SRC_NOT_SUPPORTED\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_ENCRYPTED = \"MEDIA_ERR_ENCRYPTED\";\n\nMediaPlayer.dependencies.ErrorHandler.prototype.CAPABILITY_ERR_MEDIASOURCE = \"CAPABILITY_ERR_MEDIASOURCE\";\nMediaPlayer.dependencies.ErrorHandler.prototype.CAPABILITY_ERR_MEDIAKEYS = \"CAPABILITY_ERR_MEDIAKEYS\";\n\n// MSE errors\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CREATE_MEDIASOURCE = \"MEDIA_ERR_CREATE_MEDIASOURCE\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED = \"MEDIA_ERR_CODEC_UNSUPPORTED\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CREATE_SOURCEBUFFER = \"MEDIA_ERR_CREATE_SOURCEBUFFER\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_APPEND_SOURCEBUFFER = \"MEDIA_ERR_APPEND_SOURCEBUFFER\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_REMOVE_SOURCEBUFFER = \"MEDIA_ERR_REMOVE_SOURCEBUFFER\";\n\n// MediaPlayer errors\nMediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_PARSE = \"MANIFEST_ERR_PARSE\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_NO_STREAM = \"MANIFEST_ERR_NO_STREAM\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_NO_VIDEO = \"MANIFEST_ERR_NO_VIDEO\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_NO_AUDIO = \"MANIFEST_ERR_NO_AUDIO\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_NO_TEXT = \"MANIFEST_ERR_NO_TEXT\";\nMediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_MANIFEST = \"DOWNLOAD_ERR_MANIFEST\";\nMediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_SIDX = \"DOWNLOAD_ERR_SIDX\";\nMediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_INIT = \"DOWNLOAD_ERR_INIT\";\nMediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_CONTENT = \"DOWNLOAD_ERR_CONTENT\";\n\n// MSS errors\nMediaPlayer.dependencies.ErrorHandler.prototype.MSS_NO_TFRF = \"MSS_NO_TFRF\";\n\n// HLS errors\nMediaPlayer.dependencies.ErrorHandler.prototype.HLS_INVALID_PACKET_ERROR = \"HLS_INVALID_PACKET_ERROR\";\nMediaPlayer.dependencies.ErrorHandler.prototype.HLS_DEMUX_ERROR = \"HLS_DEMUX_ERROR\";\nMediaPlayer.dependencies.ErrorHandler.prototype.HLS_INVALID_KEY_ERROR = \"HLS_INVALID_KEY_ERROR\";\n\n// MediaKeyError from EME v0.1b (https://dvcs.w3.org/hg/html-media/raw-file/eme-v0.1b/encrypted-media/encrypted-media.html)\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR = \"MEDIA_KEYERR\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_UNKNOWN = \"MEDIA_KEYERR_UNKNOWN\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_CLIENT = \"MEDIA_KEYERR_CLIENT\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_SERVICE = \"MEDIA_KEYERR_SERVICE\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_OUTPUT = \"MEDIA_KEYERR_OUTPUT\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_HARDWARECHANGE = \"MEDIA_KEYERR_HARDWARECHANGE\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_DOMAIN = \"MEDIA_KEYERR_DOMAIN\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_EXPIRED = \"MEDIA_KEYERR_EXPIRED\";\n\n// Key system errors\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYSYSERR_ACCESS_DENIED = \"MEDIA_KEYSYSERR_ACCESS_DENIED\";\n\n// Key/license errors\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_URL_LICENSER_UNKNOWN = \"MEDIA_KEYMESSERR_URL_LICENSER_UNKNOWN\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_NO_CHALLENGE = \"MEDIA_KEYMESSERR_NO_CHALLENGE\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_LICENSER_ERROR = \"MEDIA_KEYMESSERR_LICENSER_ERROR\";\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_NO_SESSION = \"MEDIA_KEYMESSERR_NO_SESSION\";\n\n// Other MediaKeyError\nMediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_SERVER_CERTIFICATE = \"MEDIA_KEYERR_SERVER_CERTIFICATE\";\n\n// DOM exceptions (see http://www.w3.org/TR/WebIDL-1/#h-idl-domexception-error-names)\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_INDEX_SIZE = 1;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_HIERARCHY_REQUEST = 3;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_WRONG_DOCUMENT = 4;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_INVALID_CHARACTER = 5;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_NO_MODIFICATION_ALLOWED = 7;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_NOT_FOUND = 8;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_NOT_SUPPORTED = 9;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_INVALID_STATE = 11;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_SYNTAX = 12;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_INVALID_MODIFICATION = 13;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_NAMESPACE = 14;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_INVALID_ACCESS = 15;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_SECURITY = 18;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_NETWORK = 19;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_ABORT = 20;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_URL_MISMATCH = 21;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_QUOTA_EXCEEDED = 22;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_TIMEOUT = 23;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_INVALID_NODE_TYPE = 24;\nMediaPlayer.dependencies.ErrorHandler.prototype.DOM_ERR_DATA_CLONE = 25;\n","MediaPlayer.utils.EventBus = function() {\n    \"use strict\";\n\n    var registrations,\n\n        getListeners = function(type, useCapture) {\n            var captype = (useCapture ? '1' : '0') + type;\n\n            if (!(captype in registrations)) {\n                registrations[captype] = [];\n            }\n\n            return registrations[captype];\n        },\n\n        init = function() {\n            registrations = {};\n        };\n\n    init();\n\n    return {\n        addEventListener: function(type, listener, useCapture) {\n            var listeners = getListeners(type, useCapture),\n                idx = listeners.indexOf(listener);\n\n            if (idx === -1) {\n                listeners.push(listener);\n            }\n        },\n\n        removeEventListener: function(type, listener, useCapture) {\n            var listeners = getListeners(type, useCapture),\n                idx = listeners.indexOf(listener);\n\n            if (idx !== -1) {\n                listeners.splice(idx, 1);\n            }\n        },\n\n        dispatchEvent: function(evt) {\n            var listeners = getListeners(evt.type, false).slice(),\n                i = 0;\n\n            for (i = 0; i < listeners.length; i += 1) {\n                listeners[i].call(this, evt);\n            }\n            return !evt.defaultPrevented;\n        }\n    };\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Fraunhofer Fokus\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.EventController = function() {\n    \"use strict\";\n\n\n    var inlineEvents = [], // Holds all Inline Events not triggered yet\n        inbandEvents = [], // Holds all Inband Events not triggered yet\n        activeEvents = [], // Holds all Events currently running\n        eventInterval = null, // variable holding the setInterval\n        refreshDelay = 100, // refreshTime for the setInterval\n        presentationTimeThreshold = refreshDelay / 1000,\n        MPD_RELOAD_SCHEME = \"urn:mpeg:dash:event:2012\",\n        MPD_RELOAD_VALUE = 1,\n\n        reset = function() {\n            if (eventInterval !== null) {\n                clearInterval(eventInterval);\n                eventInterval = null;\n            }\n            inlineEvents = null;\n            inbandEvents = null;\n            activeEvents = null;\n        },\n\n        clear = function() {\n            if (eventInterval !== null) {\n                clearInterval(eventInterval);\n                eventInterval = null;\n            }\n        },\n\n        start = function() {\n            var self = this;\n\n            self.debug.log(\"[EventController] Start Event Controller\");\n            if (!isNaN(refreshDelay)) {\n                eventInterval = setInterval(onEventTimer.bind(this), refreshDelay);\n            }\n        },\n\n        /**\n         * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted\n         * @param values\n         */\n        addInlineEvents = function(values) {\n            var self = this;\n            inlineEvents = [];\n\n            if (values && values.length > 0) {\n                inlineEvents = values;\n            }\n            self.debug.log(\"[EventController] Added \" + values.length + \" inline events\");\n        },\n\n        /**\n         * i.e. processing of any one event message box with the same id is sufficient\n         * @param values\n         */\n        addInbandEvents = function(values) {\n            var self = this,\n                i = 0,\n                event;\n\n            for (i = 0; i < values.length; i++) {\n                event = values[i];\n                inbandEvents[event.id] = event;\n                self.debug.log(\"[EventController] Add inband event with id \" + event.id);\n            }\n        },\n\n        /**\n         * Itereate through the eventList and trigger/remove the events\n         */\n        onEventTimer = function() {\n            triggerEvents.call(this, inbandEvents);\n            triggerEvents.call(this, inlineEvents);\n            removeEvents.call(this);\n        },\n\n        triggerEvents = function(events) {\n            var self = this,\n                currentVideoTime = this.videoModel.getCurrentTime(),\n                presentationTime,\n                j = 0,\n                curr;\n\n            /* == Trigger events that are ready == */\n            if (events) {\n                for (j = 0; j < events.length; j++) {\n                    curr = events[j];\n\n                    if (curr !== undefined) {\n                        presentationTime = curr.presentationTime / curr.eventStream.timescale;\n                        if (presentationTime === 0 || (presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime)) {\n                            self.debug.log(\"[EventController] Start Event at \" + currentVideoTime);\n                            if (curr.duration > 0) {\n                                activeEvents.push(curr);\n                            }\n                            if (curr.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && curr.eventStream.value === MPD_RELOAD_VALUE) {\n                                refreshManifest.call(this);\n                            }\n                            events.splice(j, 1);\n                        }\n                    }\n                }\n            }\n        },\n\n        /**\n         * Remove events from the list that are over\n         */\n        removeEvents = function() {\n            var self = this,\n                currentVideoTime,\n                i = 0,\n                curr;\n\n            if (activeEvents) {\n                currentVideoTime = this.videoModel.getCurrentTime();\n\n                for (i = 0; i < activeEvents.length; i++) {\n                    curr = activeEvents[i];\n                    if (curr !== null && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime) {\n                        self.debug.log(\"[EventController] Remove Event at time \" + currentVideoTime);\n                        curr = null;\n                        activeEvents.splice(i, 1);\n                    }\n                }\n            }\n\n        },\n\n        refreshManifest = function() {\n            var self = this,\n                manifest = self.manifestModel.getValue(),\n                url = manifest.mpdUrl;\n\n            if (manifest.hasOwnProperty(\"Location\")) {\n                url = manifest.Location;\n            }\n            self.debug.log(\"[EventController] Refresh manifest @ \" + url);\n            self.manifestLoader.load(url).then(\n                function(manifestResult) {\n                    self.manifestModel.setValue(manifestResult);\n                }\n            );\n        };\n\n    return {\n        manifestModel: undefined,\n        manifestLoader: undefined,\n        debug: undefined,\n        system: undefined,\n        videoModel: undefined,\n        addInlineEvents: addInlineEvents,\n        addInbandEvents: addInbandEvents,\n        reset: reset,\n        clear: clear,\n        start: start\n    };\n\n};\n\nMediaPlayer.dependencies.EventController.prototype = {\n    constructor: MediaPlayer.dependencies.EventController\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.FragmentController = function() {\n    \"use strict\";\n\n    var fragmentModels = [],\n\n        findModel = function(bufferController) {\n            var ln = fragmentModels.length,\n                i = 0;\n            // We expect one-to-one relation between FragmentModel and BufferController,\n            // so just compare the given BufferController object with the one that stored in the model to find the model for it\n            for (i = 0; i < ln; i += 1) {\n                if (fragmentModels[i].getContext() === bufferController) {\n                    return fragmentModels[i];\n                }\n            }\n\n            return null;\n        },\n\n        isReadyToLoadNextFragment = function() {\n            var isReady = true,\n                ln = fragmentModels.length,\n                i = 0;\n            // Loop through the models and check if all of them are in the ready state\n            for (i = 0; i < ln; i += 1) {\n                if (!fragmentModels[i].isReady()) {\n                    isReady = false;\n                    break;\n                }\n            }\n\n            return isReady;\n        },\n\n        executeRequests = function() {\n            var i = 0;\n\n            for (i = 0; i < fragmentModels.length; i += 1) {\n                fragmentModels[i].executeCurrentRequest();\n            }\n        };\n\n    return {\n        system: undefined,\n        debug: undefined,\n\n        process: function(bytes) {\n            var result = null;\n\n            if (bytes !== null && bytes !== undefined && bytes.byteLength > 0) {\n                result = new Uint8Array(bytes);\n            }\n\n            return Q.when(result);\n        },\n\n        attachBufferController: function(bufferController) {\n            var model;\n\n            if (!bufferController) {\n                return null;\n            }\n            // Wrap the buffer controller into model and store it to track the loading state and execute the requests\n            model = findModel(bufferController);\n\n            if (!model) {\n                model = this.system.getObject(\"fragmentModel\");\n                model.setContext(bufferController);\n                fragmentModels.push(model);\n            }\n\n            return model;\n        },\n\n        detachBufferController: function(bufferController) {\n            var idx = fragmentModels.indexOf(bufferController);\n            // If we have the model for the given buffer just remove it from array\n            if (idx > -1) {\n                fragmentModels.splice(idx, 1);\n            }\n        },\n\n        onBufferControllerStateChange: function() {\n            // Check if we are ready to execute pending requests and do it\n            if (isReadyToLoadNextFragment()) {\n                executeRequests.call(this);\n            }\n        },\n\n        isFragmentLoadedOrPending: function(bufferController, request) {\n            var fragmentModel = findModel(bufferController),\n                isLoaded;\n\n            if (!fragmentModel) {\n                return false;\n            }\n\n            isLoaded = fragmentModel.isFragmentLoadedOrPending(request);\n\n            return isLoaded;\n        },\n\n        getPendingRequests: function(bufferController) {\n            var fragmentModel = findModel(bufferController);\n\n            if (!fragmentModel) {\n                return null;\n            }\n\n            return fragmentModel.getPendingRequests();\n        },\n\n        getLoadingRequests: function(bufferController) {\n            var fragmentModel = findModel(bufferController);\n\n            if (!fragmentModel) {\n                return null;\n            }\n\n            return fragmentModel.getLoadingRequests();\n        },\n\n        isInitializationRequest: function(request) {\n            return (request && request.type && request.type.toLowerCase() === \"initialization segment\");\n        },\n\n        getLoadingTime: function(bufferController) {\n            var fragmentModel = findModel(bufferController);\n\n            if (!fragmentModel) {\n                return null;\n            }\n\n            return fragmentModel.getLoadingTime();\n        },\n\n        getExecutedRequestForTime: function(model, time) {\n            if (model) {\n                return model.getExecutedRequestForTime(time);\n            }\n\n            return null;\n        },\n\n        removeExecutedRequest: function(model, request) {\n            if (model) {\n                model.removeExecutedRequest(request);\n            }\n        },\n\n        removeExecutedRequestsBeforeTime: function(model, time) {\n            if (model) {\n                model.removeExecutedRequestsBeforeTime(time);\n            }\n        },\n\n        clearExecutedRequests: function(model) {\n            if (model) {\n                model.clearExecutedRequests();\n            }\n        },\n\n        cancelPendingRequestsForModel: function(model) {\n            if (model) {\n                model.cancelPendingRequests();\n            }\n        },\n\n        abortRequestsForModel: function(model) {\n            if (model) {\n                model.abortRequests();\n            }\n        },\n\n        prepareFragmentForLoading: function(bufferController, request, startLoadingCallback, successLoadingCallback, errorLoadingCallback, streamEndCallback) {\n            var fragmentModel = findModel(bufferController);\n\n            if (!fragmentModel || !request) {\n                return null;\n            }\n            // Store the request and all the necessary callbacks in the model for deferred execution\n            fragmentModel.addRequest(request);\n            fragmentModel.setCallbacks(startLoadingCallback, successLoadingCallback, errorLoadingCallback, streamEndCallback);\n\n            return true;\n        }\n    };\n};\n\nMediaPlayer.dependencies.FragmentController.prototype = {\n    constructor: MediaPlayer.dependencies.FragmentController\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.FragmentLoader = function() {\n    \"use strict\";\n\n    var DEFAULT_RETRY_ATTEMPTS = 2,\n        DEFAULT_RETRY_INTERVAL = 500,\n        retryAttempts = DEFAULT_RETRY_ATTEMPTS,\n        retryInterval = DEFAULT_RETRY_INTERVAL,\n        retryCount = 0,\n        xhrs = [],\n        type,\n\n        _checkForExistence = function(request) {\n            var req = new XMLHttpRequest(),\n                isSuccessful = false;\n\n            req.open(\"HEAD\", request.url, true);\n\n            req.onload = function() {\n                if (req.status < 200 || req.status > 399) {\n                    return;\n                }\n                isSuccessful = true;\n                request.deferred.resolve(request);\n            };\n\n            req.onloadend = req.onerror = function() {\n                if (isSuccessful) {\n                    return;\n                }\n                request.deferred.reject(req);\n            };\n\n            req.send();\n        },\n\n        _loadRequest = function(request) {\n            var deferred = Q.defer(),\n                req = new XMLHttpRequest(),\n                httpRequestMetrics = null,\n                firstProgress = true,\n                needFailureReport = true,\n                lastTraceTime = null,\n                self = this;\n\n            xhrs.push(req);\n            request.requestStartDate = new Date();\n\n            httpRequestMetrics = self.metricsModel.addHttpRequest(\n                request.streamType,\n                null,\n                request.type,\n                request.url,\n                null,\n                request.range,\n                request.requestStartDate,\n                null,\n                null,\n                null,\n                null,\n                request.duration,\n                request.startTime,\n                request.quality);\n\n            self.metricsModel.appendHttpTrace(\n                httpRequestMetrics,\n                request.requestStartDate,\n                request.requestStartDate.getTime() - request.requestStartDate.getTime(), [0]);\n\n            lastTraceTime = request.requestStartDate;\n\n            req.open(\"GET\", self.tokenAuthentication.addTokenAsQueryArg(request.url), true);\n            req.responseType = \"arraybuffer\";\n            req = self.tokenAuthentication.setTokenInRequestHeader(req);\n\n            if (request.range) {\n                req.setRequestHeader(\"Range\", 'bytes='+request.range);\n            }\n\n            req.onprogress = function(event) {\n                var currentTime = new Date();\n                if (firstProgress) {\n                    firstProgress = false;\n                    if (!event.lengthComputable || (event.lengthComputable && event.total !== event.loaded)) {\n                        request.firstByteDate = currentTime;\n                        httpRequestMetrics.tresponse = currentTime;\n                    }\n                }\n\n                if (event.lengthComputable) {\n                    request.bytesLoaded = event.loaded;\n                    request.bytesTotal = event.total;\n                }\n\n                self.metricsModel.appendHttpTrace(\n                    httpRequestMetrics,\n                    currentTime,\n                    currentTime.getTime() - lastTraceTime.getTime(), [request.bytesLoaded ? request.bytesLoaded : 0]);\n\n                lastTraceTime = currentTime;\n\n                self.notify(MediaPlayer.dependencies.FragmentLoader.eventList.ENAME_LOADING_PROGRESS, {\n                    request: request,\n                    httpRequestMetrics: httpRequestMetrics,\n                    lastTraceTime: lastTraceTime\n                });\n\n            };\n\n            req.onload = function() {\n                if (req.status < 200 || req.status > 399) {\n                    return;\n                }\n                needFailureReport = false;\n\n                var currentTime = new Date(),\n                    bytes = req.response,\n                    bytesLength = (bytes ? bytes.byteLength : 0),\n                    latency,\n                    download;\n\n                if (!request.firstByteDate) {\n                    request.firstByteDate = request.requestStartDate;\n                }\n                request.requestEndDate = currentTime;\n\n                latency = (request.firstByteDate.getTime() - request.requestStartDate.getTime());\n                download = (request.requestEndDate.getTime() - request.firstByteDate.getTime());\n\n                self.debug.log(\"[FragmentLoader][\"+type+\"] Loaded: \" + request.url + \" (\" + req.status + \", \" + latency + \"ms, \" + download + \"ms)\");\n\n                httpRequestMetrics.tresponse = request.firstByteDate;\n                httpRequestMetrics.tfinish = request.requestEndDate;\n                httpRequestMetrics.responsecode = req.status;\n\n                httpRequestMetrics.bytesLength = bytesLength;\n\n                self.metricsModel.appendHttpTrace(\n                    httpRequestMetrics,\n                    currentTime,\n                    currentTime.getTime() - lastTraceTime.getTime(), [bytesLength]);\n\n                lastTraceTime = currentTime;\n\n                deferred.resolve({\n                    data: bytes,\n                    request: request\n                });\n            };\n\n            req.onabort = function() {\n                var currentTime = new Date(),\n                    lastTrace,\n                    bytes;\n\n                req.aborted = true;\n\n                if (httpRequestMetrics.trace.length === 0) {\n                    return;\n                }\n                lastTrace = httpRequestMetrics.trace[httpRequestMetrics.trace.length - 1];\n                bytes = lastTrace.b[0];\n\n                request.requestEndDate = currentTime;\n                httpRequestMetrics.tresponse = request.firstByteDate;\n                httpRequestMetrics.tfinish = request.requestEndDate;\n                httpRequestMetrics.responsecode = req.status;\n\n                httpRequestMetrics.bytesLength = bytes;\n            };\n\n            req.onloadend = req.onerror = function() {\n                if (xhrs.indexOf(req) === -1) {\n                    return;\n                }\n                \n                xhrs.splice(xhrs.indexOf(req), 1);\n                \n                if (!needFailureReport) {\n                    return;\n                }\n                needFailureReport = false;\n\n                httpRequestMetrics.responsecode = req.status;\n\n                // When request failed do not complete http metrics so that\n                // DownloadRatioRule does not take into account these request\n                /*var currentTime = new Date(),\n                    bytes = req.response,\n                    latency,\n                    download;\n\n                if (!request.firstByteDate) {\n                    request.firstByteDate = request.requestStartDate;\n                }\n                request.requestEndDate = currentTime;\n\n                latency = (request.firstByteDate.getTime() - request.requestStartDate.getTime());\n                download = (request.requestEndDate.getTime() - request.firstByteDate.getTime());\n\n                httpRequestMetrics.tresponse = request.firstByteDate;\n                httpRequestMetrics.tfinish = request.requestEndDate;\n                httpRequestMetrics.responsecode = req.status;\n\n                self.metricsModel.appendHttpTrace(httpRequestMetrics,\n                    currentTime,\n                    currentTime.getTime() - lastTraceTime.getTime(), [bytes ? bytes.byteLength : 0]);\n                lastTraceTime = currentTime;*/\n\n                deferred.reject(req);\n            };\n\n            self.debug.log(\"[FragmentLoader][\"+type+\"] Load: \" + request.url);\n\n            req.send();\n            return deferred.promise;\n        },\n\n        _load = function (request, deferred) {\n            var self = this;\n\n            _loadRequest.call(self, request).then(function(result) {\n                    retryCount = 0;\n                    deferred.resolve(result);\n                }, function(reqerror) {\n                     if (reqerror.aborted) {\n                        // Request has been aborted => set status to 0\n                        request.status = 0;\n                        request.aborted = true;\n                        deferred.reject(request);\n                    } else if (retryCount >= retryAttempts) {\n                        // No (more) retry => set status and reject\n                        retryCount = 0;\n                        request.status = reqerror.status;\n                        deferred.reject(request);\n                    } else {\n                        // Retry\n                        setTimeout(function() {\n                            retryCount++;\n                            _load.call(self, request, deferred);\n                        }, retryInterval);\n                    }\n                });           \n\n        };\n\n    return {\n        metricsModel: undefined,\n        debug: undefined,\n        tokenAuthentication: undefined,\n        config: undefined,\n        notify: undefined,\n        subscribe: undefined,\n        unsubscribe: undefined,\n\n        setup: function() {\n            retryAttempts = this.config.getParam(\"FragmentLoader.RetryAttempts\", \"number\", DEFAULT_RETRY_ATTEMPTS);\n            retryInterval = this.config.getParam(\"FragmentLoader.RetryInterval\", \"number\", DEFAULT_RETRY_INTERVAL);\n        },\n\n        setType: function (value) {\n            type = value;\n        },\n\n        load: function(request) {\n            var deferred = Q.defer();\n\n            // MSS use case: if initialization segment and data already ready (automatically generated),\n            // then do not download segment\n            if (request.type === \"Initialization Segment\" && request.data) {\n                deferred.resolve(request, {data: request.data});\n            } else {\n                _load.call(this, request, deferred);\n            }\n\n            return deferred.promise;\n        },\n\n        abort: function() {\n            var i = 0;\n\n            for (i = 0; i < xhrs.length; i += 1) {\n                this.debug.log(\"[FragmentLoader][\"+type+\"] Abort XHR \" + (xhrs[i].responseURL ? xhrs[i].responseURL : \"\"));\n                xhrs[i].abort();\n            }\n        },\n\n        checkForExistence: function(req) {\n            if (!req) {\n                return Q.when(null);\n            }\n\n            req.deferred = Q.defer();\n            _checkForExistence.call(this, req);\n\n            return req.deferred.promise;\n        }\n    };\n};\n\nMediaPlayer.dependencies.FragmentLoader.prototype = {\n    constructor: MediaPlayer.dependencies.FragmentLoader\n};\n\nMediaPlayer.dependencies.FragmentLoader.eventList = {\n    ENAME_LOADING_PROGRESS: \"loadingProgress\"\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nMediaPlayer.dependencies.FragmentModel = function () {\n    \"use strict\";\n\n    var context,\n        executedRequests = [],\n        pendingRequests = [],\n        loadingRequests = [],\n        startLoadingCallback,\n        successLoadingCallback,\n        errorLoadingCallback,\n        streamEndCallback,\n        type,\n\n        LOADING_REQUEST_THRESHOLD = 2,\n\n        loadCurrentFragment = function(request) {\n            var onSuccess,\n                onError,\n                self = this;\n\n            // We are about to start loading the fragment, so execute the corresponding callback\n            startLoadingCallback.call(context, request);\n\n            onSuccess = function(request, response) {\n                loadingRequests.splice(loadingRequests.indexOf(request), 1);\n                executedRequests.push(request);\n                successLoadingCallback.call(context, request, response);\n                request.deferred = null;\n            };\n\n            onError = function(request) {\n                loadingRequests.splice(loadingRequests.indexOf(request), 1);\n                errorLoadingCallback.call(context, request);\n                request.deferred = null;\n            };\n\n            self.fragmentLoader.load(request).then(onSuccess.bind(context, request),\n                onError.bind(context, request));\n        },\n\n        sortRequestsByProperty = function(requestsArray, sortProp) {\n            var compare = function (req1, req2){\n                if (req1[sortProp] < req2[sortProp]) {\n                    return -1;\n                }\n                if (req1[sortProp] > req2[sortProp]){\n                    return 1;\n                }\n                return 0;\n            };\n\n            requestsArray.sort(compare);\n\n        },\n\n        removeExecutedRequest = function(request) {\n            var idx = executedRequests.indexOf(request);\n\n            if (idx !== -1) {\n                executedRequests.splice(idx, 1);\n            }\n        };\n\n    return {\n        system: undefined,\n        debug: undefined,\n        fragmentLoader: undefined,\n\n        setContext: function(value) {\n            context = value;\n        },\n\n        getContext: function() {\n            return context;\n        },\n\n        setType: function (value) {\n            type = value;\n            if (this.fragmentLoader) {\n                this.fragmentLoader.setType(value);\n            }\n        },\n\n        addRequest: function(value) {\n            if (value) {\n                if (this.isFragmentLoadedOrPending(value)) {\n                    return;\n                }\n\n                pendingRequests.push(value);\n                sortRequestsByProperty.call(this, pendingRequests, \"index\");\n            }\n        },\n\n        setCallbacks: function(onLoadingStart, onLoadingSuccess, onLoadingError, onStreamEnd) {\n            startLoadingCallback = onLoadingStart;\n            streamEndCallback = onStreamEnd;\n            errorLoadingCallback = onLoadingError;\n            successLoadingCallback = onLoadingSuccess;\n        },\n\n        isFragmentLoadedOrPending: function(request) {\n            var isLoaded = false,\n                i = 0,\n                req;\n\n            // First, check if the fragment has already been loaded\n            for (i = 0; i < executedRequests.length; i++) {\n                req = executedRequests[i];\n                if (request.startTime === req.startTime || ((req.action === \"complete\") && request.action === req.action)) {\n                    //self.debug.log(request.streamType + \" Fragment already loaded for time: \" + request.startTime);\n                    if (request.url === req.url) {\n                        //self.debug.log(request.streamType + \" Fragment url already loaded: \" + request.url);\n                        isLoaded = true;\n                        break;\n                    } else {\n                        // Remove overlapping segment of a different quality\n                        executedRequests.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n\n            // if it has not been loaded check if it is going to be loaded\n            if (!isLoaded) {\n                for (i = 0; i < pendingRequests.length; i++) {\n                    req = pendingRequests[i];\n                    if ((request.url === req.url) && (request.startTime === req.startTime)) {\n                        isLoaded = true;\n                    }\n                }\n            }\n\n            if (!isLoaded) {\n                for (i = 0; i < loadingRequests.length; i++) {\n                    req = loadingRequests[i];\n                    if ((request.url === req.url) && (request.startTime === req.startTime)) {\n                        isLoaded = true;\n                    }\n                }\n            }\n\n            return isLoaded;\n        },\n\n        isReady: function() {\n            return context.isReady();\n        },\n\n        getPendingRequests: function() {\n            return pendingRequests;\n        },\n\n        getLoadingRequests: function() {\n            return loadingRequests;\n        },\n\n        getLoadingTime: function() {\n            var loadingTime = 0,\n                req,\n                i;\n\n            // get the latest loaded request and calculate its loading time. In case requestEndDate/firstByteDate properties\n            // have not been set (e.g. for a request with action='complete') we should get the previous request.\n            for (i = executedRequests.length - 1; i >= 0; i -= 1) {\n                req = executedRequests[i];\n\n                if ((req.requestEndDate instanceof Date) && (req.firstByteDate instanceof Date)) {\n                    loadingTime = req.requestEndDate.getTime() - req.firstByteDate.getTime();\n                    break;\n                }\n            }\n\n            return loadingTime;\n        },\n\n        getExecutedRequestForTime: function(time) {\n            var lastIdx = executedRequests.length - 1,\n                start = NaN,\n                end = NaN,\n                req = null,\n                i;\n\n            // loop through the executed requests and pick the one for which the playback interval matches the given time\n            for (i = lastIdx; i >= 0; i -=1) {\n                req = executedRequests[i];\n                start = req.startTime;\n                end = start + req.duration;\n                if (!isNaN(start) && !isNaN(end) && (time > start) && (time < end)) {\n                    return req;\n                }\n            }\n\n            return null;\n        },\n\n        getExecutedRequestForQualityAndIndex: function(quality, index) {\n            var lastIdx = executedRequests.length - 1,\n                req = null,\n                i;\n\n            for (i = lastIdx; i >= 0; i -=1) {\n                req = executedRequests[i];\n                if (req.quality === quality && req.index === index) {\n                    return req;\n                }\n            }\n\n            return null;\n        },\n\n        removeExecutedRequest: function(request) {\n            removeExecutedRequest.call(this, request);\n        },\n\n        removeExecutedRequestsBeforeTime: function(time) {\n            var lastIdx = executedRequests.length - 1,\n                start = NaN,\n                req = null,\n                i;\n\n            // loop through the executed requests and remove the ones for which startTime is less than the given time\n            for (i = lastIdx; i >= 0; i -=1) {\n                req = executedRequests[i];\n                start = req.startTime;\n                if (!isNaN(start) && (start < time)) {\n                    removeExecutedRequest.call(this, req);\n                }\n            }\n        },\n\n        clearExecutedRequests: function() {\n            executedRequests = [];\n        },\n\n        cancelPendingRequests: function() {\n            pendingRequests = [];\n        },\n\n        abortRequests: function() {\n            this.fragmentLoader.abort();\n            loadingRequests = [];\n        },\n\n        executeCurrentRequest: function() {\n            var self = this,\n                currentRequest;\n\n            if (pendingRequests.length === 0) {\n                return;\n            }\n\n            if (loadingRequests.length >= LOADING_REQUEST_THRESHOLD) {\n                // too many requests have been loading, do nothing until some of them are loaded or aborted\n                return;\n            }\n\n            // take the next request to execute and remove it from the list of pending requests\n            currentRequest = pendingRequests.shift();\n\n            switch (currentRequest.action) {\n                case \"complete\":\n                    // Stream has completed, execute the correspoinding callback\n                    executedRequests.push(currentRequest);\n                    streamEndCallback.call(context, currentRequest);\n                    break;\n                case \"download\":\n                    loadingRequests.push(currentRequest);\n                    loadCurrentFragment.call(self, currentRequest);\n                    break;\n                default:\n                    this.debug.log(\"Unknown request action.\");\n                    if (currentRequest.deferred) {\n                        currentRequest.deferred.reject();\n                        currentRequest.deferred = null;\n                    } else {\n                        errorLoadingCallback.call(context, currentRequest);\n                    }\n            }\n        }\n    };\n};\n\nMediaPlayer.dependencies.FragmentModel.prototype = {\n    constructor: MediaPlayer.dependencies.FragmentModel\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.ManifestLoader = function() {\n    \"use strict\";\n\n    var DEFAULT_RETRY_ATTEMPTS = 2,\n        DEFAULT_RETRY_INTERVAL = 500,\n        _retryAttempts = DEFAULT_RETRY_ATTEMPTS,\n        _retryInterval = DEFAULT_RETRY_INTERVAL,\n        _xhrLoader = null,\n\n        _getDecodedResponseText = function(text) {\n            var fixedCharCodes = '',\n                i = 0,\n                charCode;\n\n            // Some content is not always successfully decoded by every browser.\n            // Known problem case: UTF-16 BE manifests on Internet Explorer 11.\n            // This function decodes any text that the browser failed to decode.\n            if (text.length < 1) {\n                return text;\n            }\n\n            // The troublesome bit here is that IE still strips off the BOM, despite incorrectly decoding the file.\n            // So we will simply assume that the first character is < (0x3C) and detect its invalid decoding (0x3C00).\n            if (text.charCodeAt(0) !== 0x3C00) {\n                return text;\n            }\n\n            // We have a problem!\n            for (i = 0; i < text.length; i += 1) {\n                charCode = text.charCodeAt(i);\n\n                // Swap around the two bytes that make up the character code.\n                fixedCharCodes += String.fromCharCode(((charCode & 0xFF) << 8 | (charCode & 0xFF00) >> 8));\n            }\n\n            return fixedCharCodes;\n        },\n\n        _parseBaseUrl = function(url) {\n            var base = null;\n\n            if (url.indexOf(\"/\") !== -1) {\n                if (url.indexOf(\"?\") !== -1) {\n                    url = url.substring(0, url.indexOf(\"?\"));\n                }\n                base = url.substring(0, url.lastIndexOf(\"/\") + 1);\n            }\n\n            return base;\n        },\n\n        _abort = function() {\n\n            if (_xhrLoader !== null) {\n                _xhrLoader.abort();\n            }\n\n            this.parser.abort();\n        },\n\n        _load = function(url) {\n            var baseUrl = _parseBaseUrl(url),\n                deferred = Q.defer(),\n                self = this;\n\n            _xhrLoader = new MediaPlayer.dependencies.XHRLoader();\n            _xhrLoader.initialize(null, _retryAttempts, _retryInterval);\n            _xhrLoader.load(url).then(\n                function (request) {\n\n                    // Get the redirection URL and use it as base URL for subsequent requests\n                    if (request.responseURL) {\n                        self.debug.log(\"[ManifestLoader] Redirect URL: \" + request.responseURL);\n                        baseUrl = _parseBaseUrl(request.responseURL);\n                    }\n\n                    self.tokenAuthentication.checkRequestHeaderForToken(request);\n                    self.metricsModel.addHttpRequest(\"stream\",\n                        null,\n                        \"MPD\",\n                        url,\n                        null,\n                        null,\n                        request.startDate,\n                        request.endDate,\n                        request.status,\n                        null,\n                        null);\n\n                    self.parser.parse(_getDecodedResponseText(request.responseText), baseUrl).then(\n                        function(manifest) {\n                            if (manifest) {\n                                manifest.mpdUrl = url;\n                                manifest.mpdLoadedTime = request.endDate;\n                                self.metricsModel.addManifestUpdate(\"stream\", manifest.type, request.startDate, request.endDate, manifest.availabilityStartTime);\n                                deferred.resolve(manifest);\n                            } else {\n                                deferred.reject();\n                            }\n                        },\n                        function(error) {\n                            // Check if reject is due to other issue than manifest parsing\n                            // (for example HLS variant steam playlist download error)\n                            if (error && error.name && error.message) {\n                                deferred.reject(error);\n                            } else {\n                                self.debug.error(\"[ManifestLoader] Manifest parsing error\");\n                                deferred.reject({\n                                    name: MediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_PARSE,\n                                    message: \"Failed to parse manifest\",\n                                    data: {\n                                        url: url\n                                    }\n                                });\n                            }\n                        }\n                    );\n                },\n                function(request) {\n\n                    if (!request || request.aborted) {\n                        deferred.reject();\n                    } else {\n\n                        self.metricsModel.addHttpRequest(\"stream\",\n                            null,\n                            \"MPD\",\n                            url,\n                            null,\n                            null,\n                            request.startDate,\n                            request.endDate,\n                            request.status,\n                            null,\n                            null);\n\n                        deferred.reject({\n                            name: MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_MANIFEST,\n                            message: \"Failed to download manifest\",\n                            data : {\n                                url: url,\n                                status: request.status\n                            }\n                        });\n                    }\n                }\n            );\n\n            return deferred.promise;\n        };\n\n    return {\n        debug: undefined,\n        parser: undefined,\n        config: undefined,\n        metricsModel: undefined,\n        tokenAuthentication: undefined,\n\n        setup: function() {\n            _retryAttempts = this.config.getParam(\"ManifestLoader.RetryAttempts\", \"number\", DEFAULT_RETRY_ATTEMPTS);\n            _retryInterval = this.config.getParam(\"ManifestLoader.RetryInterval\", \"number\", DEFAULT_RETRY_INTERVAL);\n        },\n\n        load: _load,\n\n        abort: _abort\n    };\n};\n\nMediaPlayer.dependencies.ManifestLoader.prototype = {\n    constructor: MediaPlayer.dependencies.ManifestLoader\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.ManifestUpdater = function() {\n    \"use strict\";\n\n    var refreshDelay = NaN,\n        refreshTimer = null,\n        isStopped = false,\n        deferredUpdate,\n\n        clear = function() {\n            if (refreshTimer !== null) {\n                clearInterval(refreshTimer);\n                refreshTimer = null;\n            }\n        },\n\n        start = function() {\n            clear.call(this);\n\n            if (!isNaN(refreshDelay)) {\n                this.debug.log(\"Refresh manifest in \" + refreshDelay + \" seconds.\");\n                refreshTimer = setTimeout(onRefreshTimer.bind(this), Math.min(refreshDelay * 1000, Math.pow(2, 31) - 1), this);\n            }\n        },\n\n        update = function() {\n            var self = this,\n                manifest = self.manifestModel.getValue(),\n                timeSinceLastUpdate, \n                t;\n\n            if (manifest !== undefined && manifest !== null) {\n                t = self.manifestExt.getRefreshDelay(manifest);\n                timeSinceLastUpdate = (new Date().getTime() - manifest.mpdLoadedTime.getTime()) / 1000;\n                refreshDelay = Math.max(t - timeSinceLastUpdate, 0);\n                start.call(self);\n            }\n        },\n\n        onRefreshTimer = function() {\n            var self = this,\n                manifest,\n                url;\n\n            // The manifest should not update until the previous update has completed. A promise postpones the update\n            // until is is resolved. For the first time the promise does not exist yet, so pass 'true' instead.\n            Q.when(deferredUpdate ? deferredUpdate.promise : true).then(\n                function() {\n                    deferredUpdate = Q.defer();\n                    manifest = self.manifestModel.getValue();\n                    url = manifest.mpdUrl;\n\n                    if (manifest.hasOwnProperty(\"Location\")) {\n                        url = manifest.Location;\n                    }\n\n                    //self.debug.log(\"Refresh manifest @ \" + url);\n\n                    self.manifestLoader.load(url).then(\n                        function(manifestResult) {\n                            self.manifestModel.setValue(manifestResult);\n                            self.debug.log(\"Manifest has been refreshed.\");\n                            //self.debug.log(manifestResult);\n                            if (isStopped) {\n                                return;\n                            }\n\n                            update.call(self);\n                        }\n                    );\n                }\n            );\n        },\n\n        onStreamsComposed = function() {\n            // When streams are ready we can consider manifest update completed. Resolve the update promise.\n            if (deferredUpdate) {\n                deferredUpdate.resolve();\n            }\n        };\n\n    return {\n        debug: undefined,\n        system: undefined,\n        manifestModel: undefined,\n        manifestExt: undefined,\n        manifestLoader: undefined,\n\n        setup: function() {\n            update.call(this);\n            // Listen to streamsComposed event to be aware that the streams have been composed\n            this.system.mapHandler(\"streamsComposed\", undefined, onStreamsComposed.bind(this));\n        },\n\n        start: function() {\n            isStopped = false;\n            update.call(this);\n        },\n\n        stop: function() {\n            isStopped = true;\n            clear.call(this);\n        }\n    };\n};\n\nMediaPlayer.dependencies.ManifestUpdater.prototype = {\n    constructor: MediaPlayer.dependencies.ManifestUpdater\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.models.ManifestModel = function () {\n    \"use strict\";\n\n    var manifest = null;\n\n    return {\n        system: undefined,\n        eventBus: undefined,\n\n        getValue:  function () {\n            return manifest;\n        },\n\n        setValue: function (value) {\n            manifest = value;\n            if (manifest) {\n                this.system.notify(\"manifestUpdated\");\n            }\n\n            if (manifest !== null) {\n                this.eventBus.dispatchEvent({\n                    type: \"manifestLoaded\",\n                    data: value\n                });\n            }\n        }\n    };\n};\n\nMediaPlayer.models.ManifestModel.prototype = {\n    constructor: MediaPlayer.models.ManifestModel\n};\n\n\n\n\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.MediaSourceExtensions = function () {\n    \"use strict\";\n};\n\nMediaPlayer.dependencies.MediaSourceExtensions.prototype = {\n    constructor: MediaPlayer.dependencies.MediaSourceExtensions,\n\n    createMediaSource: function () {\n        \"use strict\";\n\n        var hasWebKit = (\"WebKitMediaSource\" in window),\n            hasMediaSource = (\"MediaSource\" in window);\n\n        if (hasMediaSource) {\n            return new MediaSource();\n        } else if (hasWebKit) {\n            return new WebKitMediaSource();\n        }\n\n        return null;\n    },\n\n    attachMediaSource: function (source, videoModel) {\n        \"use strict\";\n\n        videoModel.setSource(window.URL.createObjectURL(source));\n        return true;\n    },\n\n    detachMediaSource: function (videoModel) {\n        \"use strict\";\n        videoModel.setSource(null);\n        return true;\n    },\n\n    setDuration: function (source, value) {\n        \"use strict\";\n        var i,\n            updating = false;\n\n        if (source.readyState !== 'open') return source.duration;\n\n        for (i = 0; i < source.sourceBuffers.length; i++) {\n            if(source.sourceBuffers[i].updating){\n                updating = true;\n                break;\n            }\n        }\n\n        if (!updating) {\n            source.duration = value;\n        }\n\n        return source.duration;\n    },\n\n    signalEndOfStream: function(source) {\n        \"use strict\";\n        var buffers = source.sourceBuffers,\n            ln = buffers.length,\n            i = 0;\n\n        if (source.readyState !== 'open') {\n            return;\n        }\n\n        for (i; i < ln; i++) {\n            if (buffers[i].updating) {\n                return;\n            }\n            if (buffers[i].buffered.length === 0) {\n                return;\n            }\n        }\n\n        source.endOfStream();\n        return true;\n    }\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.MetricsExtensions = function() {\n    \"use strict\";\n\n    var h264ProfileMap = {\n        \"42\": \"Baseline\",\n        \"4D\": \"Main\",\n        \"58\": \"Extended\",\n        \"64\": \"High\"\n    };\n\n    var findRepresentionInPeriodArray = function(periodArray, representationId) {\n        var period,\n            adaptationSet,\n            adaptationSetArray,\n            representation,\n            representationArray,\n            periodArrayIndex,\n            adaptationSetArrayIndex,\n            representationArrayIndex;\n\n        for (periodArrayIndex = 0; periodArrayIndex < periodArray.length; periodArrayIndex = periodArrayIndex + 1) {\n            period = periodArray[periodArrayIndex];\n            adaptationSetArray = period.AdaptationSet_asArray;\n            for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                representationArray = adaptationSet.Representation_asArray;\n                for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                    representation = representationArray[representationArrayIndex];\n                    if (representationId === representation.id) {\n                        return representation;\n                    }\n                }\n            }\n        }\n\n        return null;\n    };\n\n    var adaptationIsType = function(adaptation, bufferType) {\n        var found = false;\n        // TODO : HACK ATTACK\n        // Below we call getIsVideo and getIsAudio and then check the adaptation set for a 'type' property.\n        // getIsVideo and getIsAudio are adding this 'type' property and SHOULD NOT BE.\n        // This method expects getIsVideo and getIsAudio to be sync, but they are async (returns a promise).\n        // This is a bad workaround!\n        // The metrics extensions should have every method use promises.\n\n        if (bufferType === \"video\") {\n            this.manifestExt.getIsVideo(adaptation);\n            if (adaptation.type === \"video\") {\n                found = true;\n            }\n        } else if (bufferType === \"audio\") {\n            this.manifestExt.getIsAudio(adaptation);\n            if (adaptation.type === \"audio\") {\n                found = true;\n            }\n        } else if (bufferType === \"text\") {\n            this.manifestExt.getIsText(adaptation);\n            if (adaptation.type === \"text\") {\n                found = true;\n            }\n        } else {\n            found = false;\n        }\n\n        return found;\n    };\n\n    var rslt = MediaPlayer.utils.copyMethods(Dash.dependencies.DashMetricsExtensions);\n\n    rslt.config = undefined;\n\n    rslt.getDuration = function() {\n        var self = this,\n            manifest = self.manifestModel.getValue(),\n            duration = manifest ? manifest.Period.duration : null;\n\n        if (duration !== Infinity) {\n            return duration;\n        }\n\n        return -1;\n    };\n\n    rslt.getFormatForType = function(type) {\n        var self = this,\n            manifest = self.manifestModel.getValue(),\n            i = 0,\n            adaptation;\n\n        for (i = 0; i < manifest.Period.AdaptationSet.length; i++) {\n            adaptation = manifest.Period.AdaptationSet[i];\n            if (adaptation.type === type) {\n                return adaptation.mimeType;\n            }\n        }\n\n        return null;\n    };\n\n    rslt.getCodecForType = function(type) {\n        var self = this,\n            manifest = self.manifestModel.getValue(),\n            i = 0,\n            adaptation;\n\n        for (i = 0; i < manifest.Period.AdaptationSet.length; i++) {\n            adaptation = manifest.Period.AdaptationSet[i];\n            if (adaptation.type === type || adaptation.contentType === type) {\n                //return codecs of the first Representation\n                return adaptation.Representation_asArray[0].codecs;\n            }\n        }\n\n        return null;\n    };\n\n    rslt.getVideoWidthForRepresentation = function(representationId) {\n        var self = this,\n            manifest = self.manifestModel.getValue(),\n            representation,\n            periodArray;\n\n        if (manifest) {\n            periodArray = manifest.Period_asArray;\n\n            representation = findRepresentionInPeriodArray.call(self, periodArray, representationId);\n\n            if (representation === null) {\n                return null;\n            }\n\n            return representation.width;\n        } else {\n            return null;\n        }\n    };\n\n    rslt.getVideoHeightForRepresentation = function(representationId) {\n        var self = this,\n            manifest = self.manifestModel.getValue(),\n            representation,\n            periodArray;\n\n        if (manifest) {\n            periodArray = manifest.Period_asArray;\n\n            representation = findRepresentionInPeriodArray.call(self, periodArray, representationId);\n\n            if (representation === null) {\n                return null;\n            }\n\n            return representation.height;\n        } else {\n            return null;\n        }\n    };\n\n    rslt.getCodecsForRepresentation = function(representationId) {\n        var self = this,\n            manifest = self.manifestModel.getValue(),\n            representation,\n            periodArray = manifest.Period_asArray;\n\n        representation = findRepresentionInPeriodArray.call(self, periodArray, representationId);\n\n        if (representation === null) {\n            return null;\n        }\n\n        return representation.codecs;\n    };\n\n    rslt.getH264ProfileLevel = function(codecs) {\n\n        if (codecs.indexOf(\"avc1\") < 0) {\n            return \"\";\n        }\n        var profile = h264ProfileMap[codecs.substr(5, 2)],\n            level = parseInt(codecs.substr(9, 2), 16) / 10.0;\n\n        return profile + \"@\" + level.toString();\n    };\n\n    rslt.getBitratesForType = function(type, data) {\n        var self = this,\n            manifest = self.manifestModel.getValue(),\n            periodArray,\n            period,\n            periodArrayIndex,\n            adaptationSetArray,\n            adaptationSet = null,\n            representation,\n            representationArray,\n            adaptationSetArrayIndex,\n            representationArrayIndex,\n            bitrateArray = [];\n\n        if (((manifest === null) || (manifest === undefined)) && ((data === null) || (data === undefined))) {\n            return null;\n        }\n\n        if (data) {\n            adaptationSet = data;\n        } else {\n            periodArray = manifest.Period_asArray;\n\n            for (periodArrayIndex = 0; periodArrayIndex < periodArray.length; periodArrayIndex = periodArrayIndex + 1) {\n                period = periodArray[periodArrayIndex];\n                adaptationSetArray = period.AdaptationSet_asArray;\n                for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                    adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                    if (adaptationIsType.call(self, adaptationSetArray[adaptationSetArrayIndex], type)) {\n                        adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (adaptationSet !== null) {\n            // Order adaptationSet's representations in bitrate ascending value\n            adaptationSet = self.manifestExt.processAdaptation(adaptationSet);\n            representationArray = adaptationSet.Representation_asArray;\n            for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                representation = representationArray[representationArrayIndex];\n                bitrateArray.push(representation.bandwidth);\n            }\n        }\n\n        return bitrateArray;\n    };\n\n    rslt.getBitratesWithResolutionForType = function(type) {\n        var self = this,\n            manifest = self.manifestModel.getValue(),\n            periodArray,\n            period,\n            periodArrayIndex,\n            adaptationSet,\n            adaptationSetArray,\n            representation,\n            representationArray,\n            adaptationSetArrayIndex,\n            representationArrayIndex,\n            bitrateArray = [];\n\n        if ((manifest === null) || (manifest === undefined)) {\n            return null;\n        }\n\n        periodArray = manifest.Period_asArray;\n\n        for (periodArrayIndex = 0; periodArrayIndex < periodArray.length; periodArrayIndex = periodArrayIndex + 1) {\n            period = periodArray[periodArrayIndex];\n            adaptationSetArray = period.AdaptationSet_asArray;\n            for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                if (adaptationIsType.call(self, adaptationSet, type)) {\n                    //order adaptation in bitrate ascending value\n                    adaptationSet = self.manifestExt.processAdaptation(adaptationSet);\n                    representationArray = adaptationSet.Representation_asArray;\n                    for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                        representation = representationArray[representationArrayIndex];\n                        var reso = {\n                            bitrate: representation.bandwidth,\n                            width: representation.width,\n                            height: representation.height\n                        };\n                        bitrateArray.push(reso);\n                    }\n                    return bitrateArray;\n                }\n            }\n        }\n\n        return bitrateArray;\n    };\n\n    return rslt;\n};\n\nMediaPlayer.dependencies.MetricsExtensions.prototype = {\n    constructor: MediaPlayer.dependencies.MetricsExtensions\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n MediaPlayer.models.MetricsModel = function () {\n    \"use strict\";\n\n    return {\n        system : undefined,\n        eventBus: undefined,\n        config: undefined,\n        streamMetrics: {},\n        metricsChanged: function () {\n            this.eventBus.dispatchEvent({\n                type: \"metricsChanged\",\n                data: {}\n            });\n        },\n\n        metricChanged: function (streamType) {\n            this.eventBus.dispatchEvent({\n                type: \"metricChanged\",\n                data: {stream: streamType}\n            });\n            this.metricsChanged();\n        },\n\n        metricUpdated: function (streamType, metricType, vo) {\n            this.eventBus.dispatchEvent({\n                type: \"metricUpdated\",\n                data: {stream: streamType, metric: metricType, value: vo}\n            });\n            this.metricChanged(streamType);\n        },\n\n        metricAdded: function (streamType, metricType, vo) {\n            this.eventBus.dispatchEvent({\n                type: \"metricAdded\",\n                data: {stream: streamType, metric: metricType, value: vo}\n            });\n            this.metricChanged(streamType);\n        },\n\n        clearAllCurrentMetrics: function () {\n            var self = this;\n\n            for (var type in this.streamMetrics) {\n                if (this.streamMetrics.hasOwnProperty(type) && (type === \"stream\")) {\n                    delete this.streamMetrics[type];\n                } else {\n                    var keepBW = this.config.getParamFor(type, \"ABR.keepBandwidthCondition\", \"boolean\", true);\n\n                    for (var prop in this.streamMetrics[type]) {\n                        // We keep HttpList in order to keep bandwidth conditions when switching the input stream\n                        if (this.streamMetrics[type].hasOwnProperty(prop) && ((prop !== \"HttpList\") || (keepBW === false))) {\n                            this.streamMetrics[type][prop] = [];\n                        }\n                    }\n                }\n            }\n\n            this.metricsChanged.call(self);\n        },\n\n        getReadOnlyMetricsFor: function(type) {\n            if (this.streamMetrics.hasOwnProperty(type)) {\n                return this.streamMetrics[type];\n            }\n\n            return null;\n        },\n\n        getMetricsFor: function(type) {\n            var metrics;\n\n            if (this.streamMetrics.hasOwnProperty(type)) {\n                metrics = this.streamMetrics[type];\n            } else {\n                metrics = this.system.getObject(\"metrics\");\n                this.streamMetrics[type] = metrics;\n            }\n\n            return metrics;\n        },\n\n        addTcpConnection: function (streamType, tcpid, dest, topen, tclose, tconnect) {\n            var vo = new MediaPlayer.vo.metrics.TCPConnection();\n\n            vo.tcpid = tcpid;\n            vo.dest = dest;\n            vo.topen = topen;\n            vo.tclose = tclose;\n            vo.tconnect = tconnect;\n\n            this.getMetricsFor(streamType).TcpList.push(vo);\n            this.metricAdded(streamType, \"TcpConnection\", vo);\n\n            return vo;\n        },\n\n        // ORANGE: add request quality\n        addHttpRequest: function (streamType, tcpid, type, url, actualurl, range, trequest, tresponse, tfinish, responsecode, interval, mediaduration, startTime, quality) {\n            var vo = new MediaPlayer.vo.metrics.HTTPRequest(),\n                metrics = this.getMetricsFor(streamType).HttpList;\n\n            vo.stream = streamType;\n            vo.tcpid = tcpid;\n            vo.type = type;\n            vo.url = url;\n            vo.actualurl = actualurl;\n            vo.range = range;\n            vo.trequest = trequest;\n            vo.tresponse = tresponse;\n            vo.tfinish = tfinish;\n            vo.responsecode = responsecode;\n            vo.interval = interval;\n            vo.mediaduration = mediaduration;\n            vo.startTime = startTime;\n            vo.quality = quality;\n\n            metrics.push(vo);\n            this.metricAdded(streamType, \"HttpRequest\", vo);\n\n            // Keep only last 10 metrics to avoid memory leak\n            if (metrics.length > 10) {\n                metrics.shift();\n            }\n\n            return vo;\n        },\n\n        appendHttpTrace: function (httpRequest, s, d, b) {\n            var vo = new MediaPlayer.vo.metrics.HTTPRequest.Trace();\n\n            vo.s = s;\n            vo.d = d;\n            vo.b = b;\n\n            httpRequest.trace.push(vo);\n            this.metricUpdated(httpRequest.stream, \"HttpRequestTrace\", httpRequest);\n\n            return vo;\n        },\n\n        addRepresentationSwitch: function (streamType, t, mt, to, lto) {\n            var vo = new MediaPlayer.vo.metrics.RepresentationSwitch();\n\n            vo.t = t;\n            vo.mt = mt;\n            vo.to = to;\n            vo.lto = lto;\n\n            this.getMetricsFor(streamType).RepSwitchList.push(vo);\n            this.metricAdded(streamType, \"RepresentationSwitch\", vo);\n\n            return vo;\n        },\n\n        addBufferedSwitch: function (streamType, mt, to, lto) {\n            var vo = new MediaPlayer.vo.metrics.BufferedSwitch();\n\n            vo.mt = mt;\n            vo.to = to;\n            vo.lto = lto;\n\n            this.getMetricsFor(streamType).BufferedSwitchList.push(vo);\n            this.metricAdded(streamType, \"BufferedSwitch\", vo);\n\n            return vo;\n        },\n\n        addState: function (streamType, currentState, position, reason) {\n\n            var state = this.getMetricsFor(streamType).State;\n            if (state.length > 0 && state[state.length - 1].current === currentState) {\n                return;\n            }\n\n            var vo = new MediaPlayer.vo.metrics.State(),\n                metrics = this.getMetricsFor(streamType).State;\n\n            vo.current = currentState;\n            vo.position = position;\n            vo.reason = reason;\n\n            metrics.push(vo);\n            this.metricAdded(streamType, \"State\", vo);\n\n            // console.log(\"[STATE] type: \" + streamType + \", state:\" + currentState + \", position: \" + position);\n\n            // Keep only last 10 metrics to avoid memory leak\n            if (metrics.length > 10) {\n                metrics.shift();\n            }\n\n            return vo;\n        },\n\n        addSession: function (streamType, url, loop, endTime, playerType) {\n            var vo = new MediaPlayer.vo.metrics.Session();\n\n            vo.uri = url;\n            if (loop) {\n                vo.loopMode = 1;\n            } else {\n                vo.loopMode = 0;\n            }\n            vo.endTime = endTime;\n            vo.playerType = playerType;\n\n            this.metricAdded(streamType, \"Session\", vo);\n\n            return vo;\n        },\n\n        addCondition: function (streamType, isFullScreen, videoWidth, videoHeight, droppedFrames, fps) {\n            var vo = new MediaPlayer.vo.metrics.Condition();\n\n            vo.isFullScreen = isFullScreen;\n            vo.windowSize = videoWidth + \"x\" + videoHeight;\n            vo.fps = fps;\n            vo.droppedFrames = droppedFrames;\n\n            this.metricAdded(streamType, \"Condition\", vo);\n\n            return vo;\n        },\n\n        addMetaData: function () {\n            this.metricAdded(null, \"ManifestReady\", null);\n        },\n\n        addBufferLevel: function (streamType, t, level) {\n            var vo = new MediaPlayer.vo.metrics.BufferLevel(),\n                metrics = this.getMetricsFor(streamType).BufferLevel;\n\n            vo.t = t;\n            vo.level = Number(level.toFixed(3));\n\n            metrics.push(vo);\n            this.metricAdded(streamType, \"BufferLevel\", vo);\n\n            // Keep only last 10 metrics to avoid memory leak\n            if (metrics.length > 10) {\n                metrics.shift();\n            }\n\n            return vo;\n        },\n\n\n        addDVRInfo: function (streamType, t, range) {\n            var vo = new MediaPlayer.vo.metrics.DVRInfo(),\n                metrics = this.getMetricsFor(streamType).DVRInfo;\n\n            vo.t = t;\n            vo.range = range;\n\n            metrics.push(vo);\n            this.metricAdded(streamType, \"DVRInfo\", vo);\n\n            // Keep only last 10 metrics to avoid memory leak\n            if (metrics.length > 10) {\n                metrics.shift();\n            }\n\n            return vo;\n        },\n\n        addDroppedFrames: function (streamType, quality) {\n            var vo = new MediaPlayer.vo.metrics.DroppedFrames(),\n                list = this.getMetricsFor(streamType).DroppedFrames;\n\n            vo.time = quality.creationTime;\n            vo.droppedFrames = quality.droppedVideoFrames;\n            vo.decodedFrameCount = quality.totalVideoFrames;\n\n            if (list.length > 0 && list[list.length - 1] === vo) {\n                return list[list.length - 1];\n            }\n\n            list.push(vo);\n\n            this.metricAdded(streamType, \"DroppedFrames\", vo);\n            return vo;\n        },\n\n\n        addPlaybackQuality: function (streamType, t, quality, mediaTime) {\n            var vo = new MediaPlayer.vo.metrics.PlaybackQuality(),\n                metrics = this.getMetricsFor(streamType).PlaybackQuality;\n\n            vo.t = t;//quality.creationTime;\n            vo.mt = mediaTime;\n            vo.droppedFrames = quality.droppedVideoFrames;\n            vo.totalVideoFrames = quality.totalVideoFrames;\n\n            // Add new metrics only if droppedVideoFrames or totalVideoFrames changed\n            if (metrics.length > 0) {\n                if ((vo.droppedFrames === metrics[metrics.length-1].droppedFrames) &&\n                    (vo.totalVideoFrames === metrics[metrics.length-1].totalVideoFrames)) {\n                    return metrics[metrics.length - 1];\n                }\n            }\n\n            metrics.push(vo);\n            this.metricAdded(streamType, \"PlaybackQuality\", vo);\n\n            // Keep only last 10 metrics to avoid memory leak\n            if (metrics.length > 10) {\n                metrics.shift();\n            }\n\n            return vo;\n        },\n\n        addVideoResolution: function (streamType, t, width, height, mediaTime) {\n            var vo = new MediaPlayer.vo.metrics.VideoResolution(),\n                metrics = this.getMetricsFor(streamType).VideoResolution;\n\n            vo.t = t;\n            vo.mt = mediaTime;\n            vo.width = width;\n            vo.height = height;\n\n            // Add new metrics only if width or height changed\n            if (metrics.length > 0) {\n                if ((vo.width === metrics[metrics.length-1].width) &&\n                    (vo.height === metrics[metrics.length-1].height)) {\n                    return metrics[metrics.length - 1];\n                }\n            }\n\n            metrics.push(vo);\n            this.metricAdded(streamType, \"VideoResolution\", vo);\n\n            return vo;\n        },\n\n        addManifestUpdate: function(streamType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\n            var vo = new MediaPlayer.vo.metrics.ManifestUpdate(),\n                metrics = this.getMetricsFor(\"stream\");\n\n            vo.streamType = streamType;\n            vo.type = type;\n            vo.requestTime = requestTime; // when this manifest update was requested\n            vo.fetchTime = fetchTime; // when this manifest update was received\n            vo.availabilityStartTime = availabilityStartTime;\n            vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Period[0].startTime for static)\n            vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\n            vo.currentTime = currentTime; // actual element.currentTime\n            vo.buffered = buffered; // actual element.ranges\n            vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\n\n            metrics.ManifestUpdate.push(vo);\n            this.metricAdded(streamType, \"ManifestUpdate\", vo);\n\n            return vo;\n        },\n\n        updateManifestUpdateInfo: function(manifestUpdate, updatedFields) {\n            if (manifestUpdate && updatedFields) {\n                for (var field in updatedFields) {\n                    if (updatedFields.hasOwnProperty(field)) {\n                        manifestUpdate[field] = updatedFields[field];\n                    }\n                }\n\n                this.metricUpdated(manifestUpdate.streamType, \"ManifestUpdate\", manifestUpdate);\n            }\n        },\n\n        addManifestUpdatePeriodInfo: function(manifestUpdate, id, index, start, duration) {\n            var vo = new MediaPlayer.vo.metrics.ManifestUpdate.PeriodInfo();\n\n            vo.id = id;\n            vo.index = index;\n            vo.start = start;\n            vo.duration = duration;\n\n            manifestUpdate.periodInfo.push(vo);\n            this.metricUpdated(manifestUpdate.streamType, \"ManifestUpdatePeriodInfo\", manifestUpdate);\n\n            return vo;\n        },\n\n        addManifestUpdateRepresentationInfo: function(manifestUpdate, id, index, periodIndex, streamType, presentationTimeOffset, startNumber, segmentInfoType) {\n            var vo = new MediaPlayer.vo.metrics.ManifestUpdate.RepresentationInfo();\n\n            vo.id = id;\n            vo.index = index;\n            vo.periodIndex = periodIndex;\n            vo.streamType = streamType;\n            vo.startNumber = startNumber;\n            vo.segmentInfoType = segmentInfoType;\n            vo.presentationTimeOffset = presentationTimeOffset;\n\n            manifestUpdate.representationInfo.push(vo);\n            this.metricUpdated(manifestUpdate.streamType, \"ManifestUpdateRepresentationInfo\", manifestUpdate);\n\n            return vo;\n        },\n\n        addPlayList: function (streamType, start, mstart, starttype, speed) {\n            var vo = new MediaPlayer.vo.metrics.PlayList(),\n                metrics = this.getMetricsFor(streamType).PlayList;\n\n            vo.stream = streamType;\n            vo.start = start;\n            vo.mstart = mstart;\n            vo.starttype = starttype;\n            vo.speed = speed;\n\n            metrics.push(vo);\n            this.metricAdded(streamType, \"PlayList\", vo);\n\n            // Keep only last 10 metrics to avoid memory leak\n            if (metrics.length > 10) {\n                metrics.shift();\n            }\n\n            return vo;\n        },\n\n        appendPlayListTrace: function (playList, representationid, subreplevel, start, mstart, duration, playbackspeed, stopreason) {\n            var vo = new MediaPlayer.vo.metrics.PlayList.Trace();\n\n            vo.representationid = representationid;\n            vo.subreplevel = subreplevel;\n            vo.start = start;\n            vo.mstart = mstart;\n            vo.duration = duration;\n            vo.playbackspeed = playbackspeed;\n            vo.stopreason = stopreason;\n\n            if (playList && Array.isArray(playList.trace)) {\n                playList.trace.push(vo);\n                this.metricUpdated(playList.stream, \"PlayListTrace\", playList);\n\n                // Keep only last 10 metrics to avoid memory leak\n                if (playList.trace.length > 10) {\n                    playList.trace.shift();\n                }\n            }\n\n            return vo;\n        }\n    };\n};\n\nMediaPlayer.models.MetricsModel.prototype = {\n    constructor: MediaPlayer.models.MetricsModel\n};\n","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.Mp4Processor = function() {\n    \"use strict\";\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    // MOOV\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    var createMovieHeaderBox = function(tracks) {\n\n            // Movie Header Box\n            // This box defines overall information which is media-independent, and relevant to the\n            // entire presentation considered as a whole.\n\n            // Create MovieHeader box (mvhd)\n            var mvhd = new mp4lib.boxes.MovieHeaderBox(),\n                track = tracks[tracks.length - 1]; // take last track to determine get track id\n\n            mvhd.version = 1; // version = 1  in order to have 64bits duration value\n            mvhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n            mvhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n            mvhd.timescale = track.timescale; // the time-scale for the entire presentation => take timescale of current adaptationSet\n            mvhd.duration = Math.round(track.duration * track.timescale); // the length of the presentation (in the indicated timescale) =>  take duration of period\n            mvhd.rate = 0x00010000; // 16.16 number, \"1.0\" = normal playback\n            mvhd.volume = 0x0100; // 8.8 number, \"1.0\" = full volume\n            mvhd.reserved = 0;\n            mvhd.reserved_2 = [0x0, 0x0];\n            mvhd.matrix = [0x00010000, 0x0, 0x0, 0x0, 0x00010000, 0x0, 0x0, 0x0, 0x40000000]; // provides a transformation matrix for the video; (u,v,w) are restricted here to (0,0,1),\n            // hex values (0,0,0x40000000)\n            mvhd.pre_defined = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n            mvhd.next_track_ID = track.trackId + 1; // indicates a value to use for the track ID of the next track to be added to this presentation\n            mvhd.flags = 0; //default value\n\n            return mvhd;\n        },\n\n        createTrackBox = function(track) {\n\n            // Track Box: This is a container box for a single track of a presentation\n            // Track Header Box: This box specifies the characteristics of a single track\n            var trak,\n                tkhd,\n                mdia;\n\n            // Create Track box (trak)\n            trak = new mp4lib.boxes.TrackBox();\n\n            // Create and add TrackHeader box (trak)\n            tkhd = new mp4lib.boxes.TrackHeaderBox();\n\n            tkhd.version = 1; // version = 1  in order to have 64bits duration value\n            tkhd.flags = 0x1 | 0x2 | 0x4; //Track_enabled: Indicates that the track is enabled. Flag value is 0x000001. A disabled track (the low\n            //bit is zero) is treated as if it were not present.\n            //Track_in_movie: Indicates that the track is used in the presentation. Flag value is 0x000002.\n            //Track_in_preview: Indicates that the track is used when previewing the presentation. Flag value is 0x000004.\n            tkhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n            tkhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n            tkhd.track_id = track.trackId; // uniquely identifies this track over the entire life-time of this presentation\n            tkhd.reserved = 0;\n            tkhd.duration = Math.round(track.duration * track.timescale); // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period\n            tkhd.reserved_2 = [0x0, 0x0];\n            tkhd.layer = 0; // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track\n            tkhd.alternate_group = 0; // specifies a group or collection of tracks => ignore\n            tkhd.volume = 0x0100; // 8.8 number, \"1.0\" = full volume\n            tkhd.reserved_3 = 0;\n            tkhd.matrix = [0x00010000, 0x0, 0x0, 0x0, 0x00010000, 0x0, 0x0, 0x0, 0x40000000]; // provides a transformation matrix for the video; (u,v,w) are restricted here to (0,0,1),\n            tkhd.width = track.width << 16; // visual presentation size as fixed-point 16.16 values\n            tkhd.height = track.height << 16; // visual presentation size as fixed-point 16.16 values\n\n            trak.boxes.push(tkhd);\n\n            //Create container for the track information in a track (mdia)\n            mdia = new mp4lib.boxes.MediaBox();\n\n            //Create and add Media Header Box (mdhd)\n            mdia.boxes.push(createMediaHeaderBox(track));\n\n            //Create and add Handler Reference Box (hdlr)\n            mdia.boxes.push(createHandlerReferenceBox(track));\n\n            //Create and add Media Information Box (minf)\n            mdia.boxes.push(createMediaInformationBox(track));\n\n            trak.boxes.push(mdia);\n\n            return trak;\n        },\n\n        getLanguageCode = function(language) {\n\n            // Declares the language code for this track. See ISO 639-2/T for the set of three character\n            // codes. Each character is packed as the difference between its ASCII value and 0x60. Since the code\n            // is confined to being three lower-case letters, these values are strictly positive.\n            var firstLetterCode,\n                secondLetterCode,\n                thirdLetterCode,\n                result = 0;\n\n            // If lang member is define, get it. if not language is 'und'\n            // If current adaptation is video type, return 'und'.\n            // var language = adaptation.lang ? adaptation.lang : 'und' ;\n\n            // Return value is packed on 15 bits, each character is defined on 5 bits\n            // there is a padding value to align on 16 bits\n            firstLetterCode = (language.charCodeAt(0) - 96) << 10; //96 decimal base = 0x60\n            secondLetterCode = (language.charCodeAt(1) - 96) << 5;\n            thirdLetterCode = language.charCodeAt(2) - 96;\n\n            result = firstLetterCode | secondLetterCode | thirdLetterCode;\n\n            return result;\n        },\n\n        createMediaHeaderBox = function(track) {\n\n            // mdhd : The media header declares overall information that is media-independent, and relevant to characteristics of\n            // the media in a track.\n            var mdhd = new mp4lib.boxes.MediaHeaderBox();\n\n            mdhd.flags = 0;\n            mdhd.version = 1; // version = 1  in order to have 64bits duration value\n            mdhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n            mdhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n            mdhd.timescale = track.timescale; // the time-scale for the entire presentation => take timescale of current adaptationSet\n            mdhd.duration = Math.round(track.duration * track.timescale); //integer that declares the duration of this media (in the scale of the timescale). If the\n            //duration cannot be determined then duration is set to all 1s.\n            mdhd.pad = 0; // padding for language value\n            mdhd.language = getLanguageCode(track.language);\n\n            mdhd.pre_defined = 0; // default value\n\n            return mdhd;\n        },\n\n        stringToCharCode = function(str) {\n            var code = 0,\n                i;\n\n            for (i = 0; i < str.length; i += 1) {\n                code |= str.charCodeAt(i) << ((str.length - i - 1) * 8);\n            }\n            return code;\n        },\n\n        createHandlerReferenceBox = function(track) {\n\n            // This box within a Media Box declares the process by which the media-data in the track is presented, and thus,\n            // the nature of the media in a track. For example, a video track would be handled by a video handler.\n            var hdlr = new mp4lib.boxes.HandlerBox();\n\n            hdlr.version = 0; // default value version = 0\n            hdlr.pre_defined = 0; //default value.\n            switch (track.type) {\n                case 'video':\n                    hdlr.handler_type = stringToCharCode(hdlr.HANDLERTYPEVIDEO);\n                    hdlr.name = hdlr.HANDLERVIDEONAME;\n                    break;\n                case 'audio':\n                    hdlr.handler_type = stringToCharCode(hdlr.HANDLERTYPEAUDIO);\n                    hdlr.name = hdlr.HANDLERAUDIONAME;\n                    break;\n                default:\n                    hdlr.handler_type = stringToCharCode(hdlr.HANDLERTYPETEXT);\n                    hdlr.name = hdlr.HANDLERTEXTNAME;\n            }\n            hdlr.name += '\\0';\n            hdlr.reserved = [0x0, 0x0, 0x0]; //default value\n            hdlr.flags = 0; //default value\n\n            return hdlr;\n        },\n\n        createMediaInformationBox = function(track) {\n\n            // This box contains all the objects that declare characteristic information of the media in the track.\n            var minf = new mp4lib.boxes.MediaInformationBox();\n\n            //Create and add the adapted media header box (vmhd, smhd or nmhd) for audio, video or text.\n            switch (track.type) {\n                case 'video':\n                    minf.boxes.push(createVideoMediaHeaderBox(track));\n                    break;\n                case 'audio':\n                    minf.boxes.push(createSoundMediaHeaderBox(track));\n                    break;\n                default:\n                    //minf.boxes.push(createNullMediaHeaderBox(track));\n            }\n\n            //Create and add Data Information Box (dinf)\n            minf.boxes.push(createDataInformationBox(track));\n\n            //Create and add Sample Table Box (stbl)\n            minf.boxes.push(createSampleTableBox(track));\n\n            return minf;\n\n        },\n\n        createDataInformationBox = function() {\n            var dinf,\n                dref,\n                url;\n\n            // The data information box contains objects that declare the location of the media information in a track.\n            dinf = new mp4lib.boxes.DataInformationBox();\n\n            // The data reference object contains a table of data references (normally URLs) that declare the location(s) of\n            // the media data used within the presentation\n            dref = new mp4lib.boxes.DataReferenceBox();\n\n            dref.version = 0; // is an integer that specifies the version of this box default = 0\n            dref.entry_count = 1; // is an integer that counts the actual entries\n            dref.flags = 0; // default value\n\n            // The DataEntryBox within the DataReferenceBox shall be either a DataEntryUrnBox or a DataEntryUrlBox.\n            // (not used, but mandatory)\n            url = new mp4lib.boxes.DataEntryUrlBox();\n            url.location = \"\";\n            url.version = 0;\n            url.flags = 1;\n\n            //add data Entry Url Box in data Reference box\n            dref.boxes.push(url);\n\n            //add data Reference Box in data information box\n            dinf.boxes.push(dref);\n\n            return dinf;\n        },\n\n        createDecodingTimeToSampleBox = function() {\n\n            // This box contains a compact version of a table that allows indexing from decoding time to sample number.\n\n            var stts = new mp4lib.boxes.TimeToSampleBox();\n\n            stts.version = 0; // is an integer that specifies the version of this box. default value = 0\n            stts.entry_count = 0; // is an integer that gives the number of entries in the following table. not used in fragmented content\n            stts.flags = 0; // default value = 0\n\n            stts.entry = [];\n\n            return stts;\n        },\n\n        createSampleToChunkBox = function() {\n\n            // Samples within the media data are grouped into chunks.\n            var stsc = new mp4lib.boxes.SampleToChunkBox();\n\n            stsc.flags = 0;\n            stsc.version = 0; // is an integer that specifies the version of this box. default value = 0.\n            stsc.entry_count = 0; // is an integer that gives the number of entries in the following table\n\n            stsc.entry = [];\n\n            return stsc;\n        },\n\n        createChunkOffsetBox = function() {\n\n            // The chunk offset table gives the index of each chunk into the containing file\n            var stco = new mp4lib.boxes.ChunkOffsetBox();\n\n            stco.version = 0; // is an integer that specifies the version of this box. default value = 0\n            stco.entry_count = 0; // is an integer that gives the number of entries in the following table\n            stco.flags = 0; // default value\n\n            stco.chunk_offset = [];\n\n            return stco;\n        },\n\n        createSampleSizeBox = function() {\n\n            // This box contains the sample count and a table giving the size in bytes of each sample. This allows the media\n            // data itself to be unframed. The total number of samples in the media is always indicated in the sample count.\n            var stsz = new mp4lib.boxes.SampleSizeBox();\n\n            stsz.version = 0; // default value = 0\n            stsz.flags = 0; //default value = 0\n            stsz.sample_count = 0; //is an integer that gives the number of samples in the track; if sample-size is 0, then it is\n            //also the number of entries in the following table\n            stsz.sample_size = 0; //is integer specifying the default sample size.\n\n            return stsz;\n        },\n\n        _hexstringtoBuffer = function(a) {\n            var res = new Uint8Array(a.length / 2),\n                i;\n\n            for (i = 0; i < a.length / 2; i += 1) {\n                res[i] = parseInt(\"\" + a[i * 2] + a[i * 2 + 1], 16);\n            }\n            return res;\n        },\n\n        _mergeArrays = function(oldBuffer, newPart) {\n            var res = new Uint8Array(oldBuffer.length + newPart.length);\n            res.set(oldBuffer, 0);\n            res.set(newPart, oldBuffer.length);\n            return res;\n        },\n\n        createAVCConfigurationBox = function(track) {\n            var avcC,\n                NALDatabuffer,\n                codecPrivateData,\n                NALArray,\n                SPS_index,\n                PPS_index,\n                i,\n                NALBuffer,\n                tempBuffer,\n                regexpSPS = new RegExp(\"^[A-Z0-9]7\", \"gi\"),\n                regexpPPS = new RegExp(\"^[A-Z0-9]8\", \"gi\");\n\n            //Create an AVC Configuration Box\n            avcC = new mp4lib.boxes.AVCConfigurationBox();\n\n            avcC.configurationVersion = 1; //unsigned int(8) configurationVersion = 1;\n            avcC.lengthSizeMinusOne = 3; //indicates the length in bytes of the NALUnitLength field in an AVC video\n            //sample or AVC parameter set sample of the associated stream minus one\n\n            avcC.reserved = 0x3F; //bit(6) reserved = ‘111111’b;\n\n            avcC.SPS_NAL = []; //SPS NAL Array\n            avcC.PPS_NAL = []; //PPS NAL Array\n\n            NALDatabuffer = new Uint8Array(0);\n\n            codecPrivateData = track.codecPrivateData;\n\n            NALArray = codecPrivateData.split(\"00000001\");\n\n            NALArray.splice(0, 1);\n\n            SPS_index = 0;\n            PPS_index = 0;\n            for (i = 0; i < NALArray.length; i += 1) {\n                NALBuffer = _hexstringtoBuffer(NALArray[i]);\n\n                if (NALArray[i].match(regexpSPS)) {\n                    avcC.SPS_NAL[SPS_index++] = {\n                        \"NAL_length\": NALBuffer.length,\n                        \"NAL\": NALBuffer\n                    };\n                    avcC.AVCProfileIndication = parseInt(NALArray[i].substr(2, 2), 16); //contains the profile code as defined in ISO/IEC 14496-10.\n                    avcC.profile_compatibility = parseInt(NALArray[i].substr(4, 2), 16); //is a byte defined exactly the same as the byte which occurs between the\n                    //profile_IDC and level_IDC in a sequence parameter set (SPS), as defined in ISO/IEC 14496-10.\n                    avcC.AVCLevelIndication = parseInt(NALArray[i].substr(6, 2), 16); //contains the level code as defined in ISO/IEC 14496-10.\n                }\n                if (NALArray[i].match(regexpPPS)) {\n                    avcC.PPS_NAL[PPS_index++] = {\n                        \"NAL_length\": NALBuffer.length,\n                        \"NAL\": NALBuffer\n                    };\n                }\n\n                tempBuffer = new Uint8Array(NALBuffer.length + 4);\n                tempBuffer[3] = NALBuffer.length;\n                tempBuffer.set(NALBuffer, 4);\n\n                NALDatabuffer = _mergeArrays(NALDatabuffer, tempBuffer);\n            }\n            avcC.numOfSequenceParameterSets = SPS_index; // number of SPSs that are used as the initial set of SPSs for decoding the AVC elementary stream.\n            avcC.numOfPictureParameterSets = PPS_index; // number of PPSs that are used as the initial set of PPSs for decoding the AVC elementary stream.\n\n            return avcC;\n        },\n\n        createAVCVisualSampleEntry = function(track) {\n            var avc1 = null;\n\n            //An AVC visual sample entry shall contain an AVC Configuration Box\n            if (track.contentProtection !== undefined) {\n                avc1 = new mp4lib.boxes.EncryptedVideoBox();\n            } else {\n                avc1 = new mp4lib.boxes.AVC1VisualSampleEntryBox();\n            }\n\n            avc1.data_reference_index = 1; //To DO... ??\n            avc1.compressorname = [0x0A, 0x41, 0x56, 0x43, 0x20, 0x43, 0x6F, 0x64,\n                                   0x69, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,\n                                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\n            // = \"AVC Coding\";\n            //is a name, for informative purposes. It is formatted in a fixed 32-byte field, with the first\n            //byte set to the number of bytes to be displayed, followed by that number of bytes of displayable data,\n            //and then padding to complete 32 bytes total (including the size byte). The field may be set to 0.\n            avc1.depth = 0x0018; //takes one of the following values 0x0018 – images are in colour with no alpha.\n            avc1.reserved = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0]; //default value = 0\n            avc1.reserved_2 = 0; //default value = 0\n            avc1.reserved_3 = 0; //default value = 0\n            avc1.pre_defined = 0; //unsigned int(16) pre_defined = 0;\n            avc1.pre_defined_2 = [0x0, 0x0, 0x0]; //unsigned int(32)[3] pre_defined = 0;\n            avc1.pre_defined_3 = 65535; //int(16) pre_defined = -1;\n            avc1.frame_count = 1; //template unsigned int(16) frame_count = 1;indicates how many frames of compressed video are stored in each sample. The default is\n            //1, for one frame per sample; it may be more than 1 for multiple frames per sample\n            avc1.horizresolution = 0x00480000; // 72 dpi\n            avc1.vertresolution = 0x00480000; // 72 dpi\n\n            avc1.height = track.height; //are the maximum visual width and height of the stream described by this sample\n            avc1.width = track.width; //description, in pixels\n\n            //create and add AVC Configuration Box (avcC)\n            avc1.boxes.push(createAVCConfigurationBox(track));\n\n            if (track.contentProtection !== undefined) {\n                // create and add Protection Scheme Info Box\n                avc1.boxes.push(createProtectionSchemeInfoBox(track));\n            }\n\n            return avc1;\n        },\n\n        createOriginalFormatBox = function(track) {\n            var frma = new mp4lib.boxes.OriginalFormatBox();\n            frma.data_format = stringToCharCode(track.codecs.substring(0, track.codecs.indexOf('.')));\n            return frma;\n        },\n\n        createSchemeTypeBox = function() {\n            var schm = new mp4lib.boxes.SchemeTypeBox();\n\n            schm.flags = 0;\n            schm.version = 0;\n            schm.scheme_type = 0x63656E63; //'cenc' => common encryption\n            schm.scheme_version = 0x00010000; // version set to 0x00010000 (Major version 1, Minor version 0)\n\n            return schm;\n        },\n\n        createSchemeInformationBox = function(track) {\n            var schi = new mp4lib.boxes.SchemeInformationBox();\n\n            //create and add Track Encryption Box\n            schi.boxes.push(createTrackEncryptionBox(track));\n\n            return schi;\n        },\n\n        createTrackEncryptionBox = function(track) {\n            var tenc = new mp4lib.boxes.TrackEncryptionBox();\n\n            tenc.flags = 0; //default value\n            tenc.version = 0; //default value\n\n            tenc.default_IsEncrypted = 0x1; //default value\n            tenc.default_IV_size = 8; //default value, NA => à préciser\n            tenc.default_KID = (track.contentProtection && (track.contentProtection.length) > 0 && track.contentProtection[0][\"cenc:default_KID\"]) ?\n                track.contentProtection[0][\"cenc:default_KID\"] :\n                [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n\n            return tenc;\n        },\n\n        createProtectionSchemeInfoBox = function(track) {\n            //create Protection Scheme Info Box\n            var sinf = new mp4lib.boxes.ProtectionSchemeInformationBox();\n\n            //create and add Original Format Box => indicate codec type of the encrypted content\n            sinf.boxes.push(createOriginalFormatBox(track));\n\n            //create and add Scheme Type box\n            sinf.boxes.push(createSchemeTypeBox());\n\n            //create and add Scheme Information Box\n            sinf.boxes.push(createSchemeInformationBox(track));\n\n            return sinf;\n        },\n\n        createVisualSampleEntry = function(track) {\n            var codec = track.codecs.substring(0, track.codecs.indexOf('.'));\n\n            switch (codec) {\n                case \"avc1\":\n                    return createAVCVisualSampleEntry(track);\n                default:\n                    throw {\n                        name: MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED,\n                        message: \"Video codec is not supported (MP4)\",\n                        data: {\n                            codec: codec\n                        }\n                    };\n            }\n        },\n\n        parseHexString = function(str) {\n            var bytes = [];\n            while (str.length >= 2) {\n                bytes.push(parseInt(str.substring(0, 2), 16));\n                str = str.substring(2, str.length);\n            }\n\n            return bytes;\n        },\n\n        createMPEG4AACESDescriptor = function(track) {\n            var audioSpecificConfig,\n                dsiLength,\n                decoderSpecificInfo,\n                dcdLength,\n                decoderConfigDescriptor,\n                esdLength,\n                esDescriptor;\n\n            // AudioSpecificConfig\n            // defined in ISO/IEC 14496-3, subpart 1\n            // => AudioSpecificConfig corresponds to hex bytes contained in \"codecPrivateData\" field\n            audioSpecificConfig = parseHexString(track.codecPrivateData);\n\n            // DecoderSpecificInfo\n            // defined in ISO/IEC 14496-1 (Systems), extends a BaseDescriptor\n            dsiLength = audioSpecificConfig.length;\n            decoderSpecificInfo = new Uint8Array(2 + dsiLength); // 2 = tag + size bytes\n            decoderSpecificInfo[0] = 0x05; // bit(8), tag=0x05 (DecSpecificInfoTag)\n            decoderSpecificInfo[1] = dsiLength; // bit(8), size\n            decoderSpecificInfo.set(audioSpecificConfig, 2); // AudioSpecificConfig bytes\n\n            // DecoderConfigDescriptor\n            // defined in ISO/IEC 14496-1 (Systems), extends a BaseDescriptor\n            dcdLength = 13 + decoderSpecificInfo.length; // 2 = tag + size bytes\n            decoderConfigDescriptor = new Uint8Array(2 + dcdLength);\n            decoderConfigDescriptor[0] = 0x04; // bit(8), tag=0x04 (DecoderConfigDescrTag)\n            decoderConfigDescriptor[1] = dcdLength; // bit(8), size\n            decoderConfigDescriptor[2] = 0x40; // bit(8), objectTypeIndication=0x40 (MPEG-4 AAC)\n            decoderConfigDescriptor[3] = 0x05 << 2; // bit(6), streamType=0x05 (Audiostream)\n            decoderConfigDescriptor[3] |= 0 << 1; // bit(1), upStream=0\n            decoderConfigDescriptor[3] |= 1; // bit(1), reserved=1\n            decoderConfigDescriptor[4] = 0xFF; // bit(24), buffersizeDB=undefined\n            decoderConfigDescriptor[5] = 0xFF; // ''\n            decoderConfigDescriptor[6] = 0xFF; // ''\n            decoderConfigDescriptor[7] = (track.bandwidth & 0xFF000000) >> 24; // bit(32), maxBitrate=undefined\n            decoderConfigDescriptor[8] = (track.bandwidth & 0x00FF0000) >> 16; // ''\n            decoderConfigDescriptor[9] = (track.bandwidth & 0x0000FF00) >> 8; // ''\n            decoderConfigDescriptor[10] = (track.bandwidth & 0x000000FF); // ''\n            decoderConfigDescriptor[11] = (track.bandwidth & 0xFF000000) >> 24; // bit(32), avgbitrate\n            decoderConfigDescriptor[12] |= (track.bandwidth & 0x00FF0000) >> 16; // ''\n            decoderConfigDescriptor[13] |= (track.bandwidth & 0x0000FF00) >> 8; // ''\n            decoderConfigDescriptor[14] |= (track.bandwidth & 0x000000FF); // ''\n            decoderConfigDescriptor.set(decoderSpecificInfo, 15); // DecoderSpecificInfo bytes\n\n            // ES_Descriptor\n            // defined in ISO/IEC 14496-1 (Systems), extends a BaseDescriptor\n            esdLength = 3 + decoderConfigDescriptor.length;\n            esDescriptor = new Uint8Array(2 + esdLength); // 2 = tag + size bytes\n            esDescriptor[0] = 0x03; // bit(8), tag=0x03 (ES_DescrTag)\n            esDescriptor[1] = esdLength; // bit(8), size\n            esDescriptor[2] = (track.trackId & 0xFF00) >> 8; // bit(16), ES_ID=track_id\n            esDescriptor[3] = (track.trackId & 0x00FF); // ''\n            esDescriptor[4] = 0; // bit(8), flags and streamPriority\n            esDescriptor.set(decoderConfigDescriptor, 5); // decoderConfigDescriptor bytes\n\n            return esDescriptor;\n        },\n\n        createMP4AudioSampleEntry = function(track) {\n            var mp4a = null,\n                esdBox,\n                ES_Descriptor;\n\n            if (track.contentProtection !== undefined) {\n                mp4a = new mp4lib.boxes.EncryptedAudioBox();\n            } else {\n                mp4a = new mp4lib.boxes.MP4AudioSampleEntryBox();\n            }\n\n            // SampleEntry fields\n            mp4a.reserved = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n            mp4a.data_reference_index = 1; // ??\n\n            // AudioSampleEntry fields\n            mp4a.reserved_2 = [0x0, 0x0]; // default value = 0\n            mp4a.channelcount = track.channels; // number of channels\n            mp4a.samplesize = 16; // default value = 16\n            mp4a.pre_defined = 0; // default value = 0\n            mp4a.reserved_3 = 0; // default value = 0\n            mp4a.samplerate = track.samplingRate << 16; // sampling rate, as fixed-point 16.16 values\n\n            esdBox = new mp4lib.boxes.ESDBox();\n            ES_Descriptor = createMPEG4AACESDescriptor(track);\n            esdBox.ES_tag = ES_Descriptor[0];\n            esdBox.ES_length = ES_Descriptor[1];\n            esdBox.ES_data = ES_Descriptor.subarray(2, ES_Descriptor.length);\n            esdBox.version = 0;\n            esdBox.flags = 0;\n\n            // MP4AudioSampleEntry fields\n            mp4a.boxes.push(esdBox);\n\n            if (track.contentProtection !== undefined) {\n                // create and add Protection Scheme Info Box\n                mp4a.boxes.push(createProtectionSchemeInfoBox(track));\n            }\n\n            return mp4a;\n        },\n\n        createAudioSampleEntry = function(track) {\n            var codec = track.codecs.substring(0, track.codecs.indexOf('.'));\n\n            switch (codec) {\n                case \"mp4a\":\n                    return createMP4AudioSampleEntry(track);\n                default:\n                    throw {\n                        name: MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED,\n                        message: \"Audio codec is not supported (MP4)\",\n                        data: {\n                            codec: codec\n                        }\n                    };\n            }\n\n            return null;\n        },\n\n        createSampleDescriptionBox = function(track) {\n\n            //The sample description table gives detailed information about the coding type used, and any initialization\n            //information needed for that coding.\n            var stsd = new mp4lib.boxes.SampleDescriptionBox();\n            stsd.version = 0;\n            stsd.flags = 0;\n\n            switch (track.type) {\n                case \"video\":\n                    stsd.boxes.push(createVisualSampleEntry(track));\n                    break;\n                case \"audio\":\n                    stsd.boxes.push(createAudioSampleEntry(track));\n                    break;\n                default:\n                    //NAN : To do add text entry\n                    break;\n            }\n\n            return stsd;\n        },\n\n        createSampleTableBox = function(track) {\n\n            //The sample table contains all the time and data indexing of the media samples in a track. Using the tables\n            //here, it is possible to locate samples in time, determine their type (e.g. I-frame or not), and determine their\n            //size, container, and offset into that container.\n            var stbl = new mp4lib.boxes.SampleTableBox();\n\n            //create and add Decoding Time to Sample Box (stts)\n            stbl.boxes.push(createDecodingTimeToSampleBox(track));\n\n            //create and add Sample to Chunk Box (stsc)\n            stbl.boxes.push(createSampleToChunkBox(track));\n\n            //create and add Chunk Offset Box (stco)\n            stbl.boxes.push(createChunkOffsetBox(track));\n\n            //create and add Sample Size Box (stsz)\n            stbl.boxes.push(createSampleSizeBox(track));\n\n            //create and add Sample Description Box (stsd)\n            stbl.boxes.push(createSampleDescriptionBox(track));\n\n            return stbl;\n        },\n\n        createVideoMediaHeaderBox = function() {\n            //The video media header contains general presentation information, independent of the coding, for video\n            //track. Note that the flags field has the value 1.\n            var vmhd = new mp4lib.boxes.VideoMediaHeaderBox();\n\n            vmhd.version = 0; //default value, is an integer that specifies the version of this box\n            vmhd.flags = 1; //default value\n            vmhd.graphicsmode = 0; //specifies a composition mode for this video track, from the following enumerated set,\n            //which may be extended by derived specifications: copy = 0 copy over the existing image\n            vmhd.opcolor = [0x0, 0x0, 0x0]; //is a set of 3 colour values (red, green, blue) available for use by graphics modes\n            //default value opcolor = {0, 0, 0};\n\n            return vmhd;\n        },\n\n        createSoundMediaHeaderBox = function() {\n\n            //The sound media header contains general presentation information, independent of the coding, for audio\n            //track. This header is used for all tracks containing audio\n            var smhd = new mp4lib.boxes.SoundMediaHeaderBox();\n\n            smhd.version = 0; //default value, is an integer that specifies the version of this box\n            smhd.balance = 0; //is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the\n            //normal value); full left is -1.0 and full right is 1.0.\n            smhd.reserved = 0;\n            smhd.flags = 1;\n\n            return smhd;\n        },\n\n        /*createNullMediaHeaderBox = function () {\n            //NAN non défini dans mp4lib, à définir\n            //var nmhd = new NullMediaHeaderBox();\n            //return nmhd;\n        },*/\n\n        createFileTypeBox = function() {\n\n            //create a File Type Box\n            var ftyp = new mp4lib.boxes.FileTypeBox();\n\n            ftyp.major_brand = 1769172790; // is a brand identifier iso6 => decimal ASCII value for iso6\n            ftyp.minor_brand = 1; // is an informative integer for the minor version of the major brand\n            ftyp.compatible_brands = []; //is a list, to the end of the box, of brands isom, iso6 and msdh\n            ftyp.compatible_brands[0] = 1769172845; // => decimal ASCII value for isom\n            ftyp.compatible_brands[1] = 1769172790; // => decimal ASCII value for iso6\n            ftyp.compatible_brands[2] = 1836278888; // => decimal ASCII value for msdh\n\n            return ftyp;\n        },\n\n        createMovieExtendsBox = function(tracks) {\n            var mvex,\n                //mehd,\n                trex,\n                track = tracks[tracks.length - 1],\n                i;\n\n            // Create Movie Extends Box (mvex)\n            // This box warns readers that there might be Movie Fragment Boxes in this file\n            mvex = new mp4lib.boxes.MovieExtendsBox();\n\n            // Create Movie Extends Header Box (mehd)\n            // The Movie Extends Header is optional, and provides the overall duration, including fragments, of a fragmented\n            // movie. If this box is not present, the overall duration must be computed by examining each fragment.\n            // mehd is optional\n            /*if (track.duration !== Number.POSITIVE_INFINITY) {\n                mehd = new mp4lib.boxes.MovieExtendsHeaderBox();\n                mehd.version = 1;\n                mehd.flags = 0;\n                mehd.fragment_duration = Math.round(track.duration * track.timescale); // declares length of the presentation of the whole movie including fragments\n\n                //add mehd box in mvex box\n                mvex.boxes.push(mehd);\n            }*/\n\n            for (i = 0; i < tracks.length; i += 1) {\n                track = tracks[i];\n                // Create Track Extend Box (trex), exactly one for each track in the movie box\n                // This sets up default values used by the movie fragments. By setting defaults in this way, space and\n                // complexity can be saved in each Track Fragment Box.\n                trex = new mp4lib.boxes.TrackExtendsBox();\n                trex.version = 0;\n                trex.flags = 0;\n                trex.track_ID = track.trackId; // identifies the track; this shall be the track ID of a track in the Movie Box\n                trex.default_sample_description_index = 1; // Set default value\n                trex.default_sample_duration = 0; // ''\n                trex.default_sample_flags = 0; // ''\n                trex.default_sample_size = 0; // ''\n\n                // add trex box in mvex box\n                mvex.boxes.push(trex);\n            }\n\n            return mvex;\n        },\n\n        createProtectionSystemSpecificHeaderBox = function(keySystems) {\n            var psshs = [],\n                pssh_bytes,\n                pssh,\n                i;\n\n            for (i = 0; i < keySystems.length; i += 1) {\n                pssh_bytes = new Uint8Array(keySystems[i].initData);\n                pssh = new mp4lib.boxes.ProtectionSystemSpecificHeaderBox();\n                pssh.read(pssh_bytes, 8, pssh_bytes.length); // 8: skip box length and type fields\n                psshs.push(pssh);\n            }\n\n            return psshs;\n        },\n\n        generateMoov = function (tracks) {\n            var boxes = [],\n                moov,\n                supportedKS,\n                i;\n\n            // Create Movie box (moov)\n            moov = new mp4lib.boxes.MovieBox();\n\n            // Create and add MovieHeader box (mvhd)\n            moov.boxes.push(createMovieHeaderBox(tracks));\n\n            for (i = 0; i < tracks.length; i += 1) {\n                // Create and add Track box (trak)\n                moov.boxes.push(createTrackBox(tracks[i]));\n            }\n\n            // Create and add MovieExtends box (mvex)\n            moov.boxes.push(createMovieExtendsBox(tracks));\n\n            // Create and add Protection System Specific Header box (pssh)\n            for (i = 0; i < tracks.length; i++) {\n                if (tracks[i].contentProtection !== undefined) {\n                    supportedKS = this.protectionExt.getSupportedKeySystemsFromContentProtection(tracks[i].contentProtection);\n                    moov.boxes.push.apply(moov.boxes, createProtectionSystemSpecificHeaderBox(supportedKS));\n                }\n            }\n\n            boxes.push(createFileTypeBox());\n\n            boxes.push(moov);\n\n            return boxes;\n        },\n\n        ///////////////////////////////////////////////////////////////////////////////////////////\n        // MOOF\n        ///////////////////////////////////////////////////////////////////////////////////////////\n\n        sequenceNumber = 1,\n\n        createMovieFragmentHeaderBox = function() {\n\n            // Movie Fragment Header Box\n            // The movie fragment header contains a sequence number, as a safety check. The sequence number usually\n            // starts at 1 and must increase for each movie fragment in the file, in the order in which they occur. This allows\n            // readers to verify integrity of the sequence; it is an error to construct a file where the fragments are out of\n            // sequence.\n            var mfhd = new mp4lib.boxes.MovieFragmentHeaderBox();\n\n            mfhd.version = 0;\n            mfhd.flags = 0;\n            mfhd.sequence_number = sequenceNumber++;\n\n            return mfhd;\n        },\n\n        createTrackFragmentBox = function(track) {\n\n            // Track Fragment Box\n            // Within the movie fragment there is a set of track fragments, zero or more per track. The track fragments in\n            // turn contain zero or more track runs, each of which document a contiguous run of samples for that track.\n            // Within these structures, many fields are optional and can be defaulted.\n            var traf = new mp4lib.boxes.TrackFragmentBox();\n\n            traf.version = 0;\n            traf.flags = 0;\n\n            // Add Track Fragment Header box (tfhd)\n            traf.boxes.push(createTrackFragmentHeaderBox(track));\n\n            // Add Track Fragment Decode Time box (tfdt)\n            traf.boxes.push(createTrackFragmentBaseMediaDecodeTimeBox(track));\n\n            // Add Track Fragment Run box (trun)\n            traf.boxes.push(createTrackFragmentRunBox(track));\n\n            // Add Sample Dependency Table box (sdtp)\n            traf.boxes.push(createSampleDependencyTableBox(track));\n\n            return traf;\n        },\n\n        createTrackFragmentHeaderBox = function(track) {\n\n            // Track Fragment Header Box\n            // Each movie fragment can add zero or more fragments to each track; and a track fragment can add zero or\n            // more contiguous runs of samples. The track fragment header sets up information and defaults used for those\n            // runs of samples.\n            var tfhd = new mp4lib.boxes.TrackFragmentHeaderBox();\n\n            tfhd.version = 0;\n            tfhd.flags = //0x000008 | // default-sample-duration-present\n            //0x000010 | // default-sample-size-present\n            0x020000; // default-base-is-moof\n\n            tfhd.track_ID = track.trackId;\n            //tfhd.default_sample_duration = 0;\n            //tfhd.default_sample_size = 0;\n\n            return tfhd;\n        },\n\n        createTrackFragmentBaseMediaDecodeTimeBox = function(track) {\n\n            // Track Fragment Base Media Decode Time Box\n            // The Track Fragment Base Media Decode Time Box provides the absolute decode time, measured on the\n            // media timeline, of the first sample in decode order in the track fragment. This can be useful, for example,\n            // when performing random access in a file; it is not necessary to sum the sample durations of all preceding\n            // samples in previous fragments to find this value (where the sample durations are the deltas in the Decoding\n            // Time to Sample Box and the sample_durations in the preceding track runs).\n            // The Track Fragment Base Media Decode Time Box, if present, shall be positioned after the Track Fragment\n            // Header Box and before the first Track Fragment Run box.\n\n            var tfdt = new mp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox();\n\n            tfdt.version = 1; // baseMediaDecodeTime on 64 bits\n            tfdt.flags = 0;\n\n            tfdt.baseMediaDecodeTime = (track.samples.length > 0) ? track.samples[0].dts : 0;\n\n            return tfdt;\n        },\n\n        createTrackFragmentRunBox = function(track) {\n\n            // Track Fragment Run Box\n            // Within the Track Fragment Box, there are zero or more Track Run Boxes. If the duration-is-empty flag is set in\n            // the tf_flags, there are no track runs. A track run documents a contiguous set of samples for a track.\n            // The number of optional fields is determined from the number of bits set in the lower byte of the flags, and the\n            // size of a record from the bits set in the second byte of the flags. This procedure shall be followed, to allow for\n            // new fields to be defined.\n\n            var trun = new mp4lib.boxes.TrackFragmentRunBox(),\n                i,\n                cts_base,\n                sample_duration_present_flag,\n                sample;\n\n            cts_base = track.samples[0].cts;\n            sample_duration_present_flag = (track.samples[0].duration > 0) ? 0x000100 : 0x000000;\n\n            trun.version = 0;\n            trun.flags = 0x000001 | // data-offset-present\n                         sample_duration_present_flag | // sample-duration-present\n                         0x000200 | // sample-size-present\n                         0x000400 | // sample-flags-present\n                         ((track.type === 'video') ? 0x000800 : 0x000000); // sample-composition-time-offsets-present\n\n            trun.data_offset = 0; // Initialize to 0, will be updated once mdat is set\n            trun.samples_table = [];\n            trun.sample_count = track.samples.length;\n\n            for (i = 0; i < track.samples.length; i++) {\n                sample = {\n                    sample_duration: track.samples[i].duration,\n                    sample_size: track.samples[i].size,\n                    sample_composition_time_offset: track.samples[i].cts - track.samples[i].dts,\n                    sample_flags: track.samples[i].flags\n                };\n\n                if (sample.sample_composition_time_offset < 0) {\n                    trun.version = 1;\n                }\n\n                trun.samples_table.push(sample);\n            }\n\n            return trun;\n        },\n\n        createSampleDependencyTableBox = function(track) {\n            var sdtp = new mp4lib.boxes.SampleDependencyTableBox(),\n                i;\n\n            sdtp.version = 0;\n            sdtp.flags = 0;\n            sdtp.sample_dependency_table = [];\n            for (i = 0; i < track.samples.length; i++) {\n                sdtp.sample_dependency_table.push((track.samples[i].flags & 0x0FF00000) >> 20);\n            }\n\n            return sdtp;\n        },\n\n        createMediaDataBox = function(track) {\n\n            // Media Data Box\n\n            var mdat = new mp4lib.boxes.MediaDataBox();\n\n            mdat.data = track.data;\n\n            return mdat;\n        },\n\n        generateMoof = function (tracks) {\n\n            var boxes = [],\n                moof,\n                i,\n                length,\n                trafs,\n                mdatLength = 0,\n                trackglobal = {},\n                mdatTracksTab = [],\n                offset = 0;\n\n            // Create Movie Fragment box (moof)\n            moof = new mp4lib.boxes.MovieFragmentBox();\n\n            // Create Movie Fragment Header box (moof)\n            moof.boxes.push(createMovieFragmentHeaderBox());\n\n            if (tracks) {\n                for (i = 0; i < tracks.length; i += 1) {\n                    // Create Track Fragment box (traf)\n                    moof.boxes.push(createTrackFragmentBox(tracks[i]));\n                }\n            }\n\n            boxes.push(moof);\n\n            moof.computeLength();\n            length = moof.size;\n\n            // Add tracks data\n            trafs = moof.getBoxesByType(\"traf\");\n\n            length += 8; // 8 = 'size' + 'type' mdat fields length\n\n            if (tracks && tracks.length) {\n                // mdat array size = tracks.length\n                mdatTracksTab = [tracks.length];\n            }\n\n            if (tracks) {\n                for (i = 0; i < tracks.length; i += 1) {\n                    // Update trun.data_offset for the track\n                    trafs[i].getBoxByType(\"trun\").data_offset = length;\n                    // Update length of output fragment file\n                    length += tracks[i].data.length;\n                    // Add current data in mdatTracksTab array\n                    mdatTracksTab[i] = tracks[i].data;\n                    // Update length of global mdat\n                    mdatLength += mdatTracksTab[i].length;\n                }\n            }\n\n            trackglobal.data = new Uint8Array(mdatLength);\n\n            // Concatenate all the tracks data in an array\n            for (i = 0; i < mdatTracksTab.length; i++) {\n                trackglobal.data.set(mdatTracksTab[i], offset);\n                offset += mdatTracksTab[i].length;\n            }\n\n            // Create mdat\n            boxes.push(createMediaDataBox(trackglobal));\n\n            return boxes;\n        };\n\n    return {\n        protectionExt: undefined,\n\n        generateInitSegment: function (tracks) {\n            var file = new mp4lib.boxes.File();\n            file.boxes = generateMoov.call(this, tracks);\n            return mp4lib.serialize(file);\n        },\n\n        generateMediaSegment: function (tracks) {\n            var file = new mp4lib.boxes.File();\n            file.boxes = generateMoof.call(this, tracks);\n            return mp4lib.serialize(file);\n        },\n\n        generateInitMediaSegment: function (tracks) {\n            var file = new mp4lib.boxes.File();\n            file.boxes = generateMoov.call(this, tracks);\n            file.boxes = file.boxes.concat(generateMoof.call(this, tracks));\n            return mp4lib.serialize(file);\n        },\n    };\n};\n\nMediaPlayer.dependencies.Mp4Processor.prototype = {\n    constructor: MediaPlayer.dependencies.Mp4Processor\n};","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.Notifier = function () {\n    \"use strict\";\n\n    var OBSERVABLE_ID_PROP = \"observableId\",\n        system,\n        id = 0,\n\n        getId = function() {\n            if (!this[OBSERVABLE_ID_PROP]) {\n                id += 1;\n                this[OBSERVABLE_ID_PROP] = \"_id_\" + id;\n            }\n\n            return this[OBSERVABLE_ID_PROP];\n        };\n\n    return {\n        system : undefined,\n\n        setup: function() {\n            system = this.system;\n            system.mapValue('notify', this.notify);\n            system.mapValue('subscribe', this.subscribe);\n            system.mapValue('unsubscribe', this.unsubscribe);\n        },\n\n        notify: function (/*eventName[, args]*/) {\n            var eventId = arguments[0] + getId.call(this),\n                event = new MediaPlayer.vo.Event();\n\n            event.sender =  this;\n            event.type = arguments[0];\n            event.data = arguments[1];\n            event.error = arguments[2];\n            event.timestamp = new Date().getTime();\n\n            system.notify.call(system, eventId, event);\n        },\n\n        subscribe: function(eventName, observer, handler, oneShot) {\n            if (!handler && observer[eventName]) {\n                handler = observer[eventName] = observer[eventName].bind(observer);\n            }\n\n            if(!observer) throw \"observer object cannot be null or undefined\";\n\n            if(!handler) throw \"event handler cannot be null or undefined\";\n\n            eventName += getId.call(this);\n\n            system.mapHandler(eventName, undefined, handler, oneShot);\n        },\n\n        unsubscribe: function(eventName, observer, handler) {\n            handler = handler || observer[eventName];\n            eventName += getId.call(this);\n\n            system.unmapHandler(eventName, undefined, handler);\n        }\n    };\n};\n\nMediaPlayer.dependencies.Notifier.prototype = {\n    constructor: MediaPlayer.dependencies.Notifier\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.Parser = function() {\n    \"use strict\";\n\n    var _parser = null,\n\n        parse = function(data, baseUrl) {\n\n            if (_parser === null) {\n                // we parse the response of the request to know the manifest type\n                if (data.indexOf(\"SmoothStreamingMedia\") > -1 && typeof(this.mssParser) !== 'undefined') {\n                    this.system.notify('setContext', 'MSS');\n                    //do some business to transform it into a Dash Manifest\n                    _parser = this.mssParser;\n                } else if (data.indexOf(\"#EXTM3U\") > -1 && typeof(this.hlsParser) !== 'undefined') {\n                    this.system.notify('setContext', 'HLS');\n                    _parser = this.hlsParser;\n                } else if (data.indexOf(\"MPD\") > -1 && typeof(this.dashParser) !== 'undefined') {\n                    this.system.notify('setContext', 'MPD');\n                    _parser = this.dashParser;\n                } else {\n                    return Q.reject(\"manifest cannot be parsed, protocol is unsupported!\");\n                }\n            }\n\n            return _parser.parse(data, baseUrl);\n        },\n\n        abort = function() {\n            if ((_parser !== null) && (_parser.abort !== undefined)) {\n                _parser.abort();\n            }\n        },\n\n        reset = function() {\n            _parser = null;\n        };\n\n    return {\n        debug: undefined,\n        system: undefined,\n        dashParser: undefined,\n        mssParser: undefined,\n        hlsParser: undefined,\n        metricsModel: undefined,\n\n        parse: parse,\n        abort: abort,\n        reset: reset\n    };\n};\n\nMediaPlayer.dependencies.Parser.prototype = {\n    constructor: MediaPlayer.dependencies.Parser\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.SourceBufferExtensions = function () {\n    \"use strict\";\n    this.system = undefined;\n    this.manifestExt = undefined;\n};\n\nMediaPlayer.dependencies.SourceBufferExtensions.prototype = {\n\n    constructor: MediaPlayer.dependencies.SourceBufferExtensions,\n\n    createSourceBuffer: function (mediaSource, codec) {\n        \"use strict\";\n\n        var buffer = null;\n\n        if (!mediaSource) {\n            return null;\n        }\n\n        try {\n            buffer = mediaSource.addSourceBuffer(codec);\n        } catch(ex) {\n            // For text track not supported by MSE, we try to create corresponding specific source buffer\n            if (this.manifestExt.getIsTextTrack(codec)) {\n                if ((codec === 'text/vtt') || (codec === 'text/ttml')) {\n                    buffer = this.system.getObject(\"textSourceBuffer\");\n                } else if (codec === 'application/ttml+xml+mp4' || codec === 'application/mp4' || codec === 'application/ttml+xml') {\n                    buffer = this.system.getObject(\"textTTMLXMLMP4SourceBuffer\");\n                } else {\n                    throw ex;\n                }\n            } else {\n                throw ex;\n            }\n        }\n        return buffer;\n    },\n\n    removeSourceBuffer: function (mediaSource, buffer) {\n        \"use strict\";\n        try {\n            mediaSource.removeSourceBuffer(buffer);\n        } catch (ex) {\n        }\n    },\n\n    getBufferRange: function (buffer, time, tolerance) {\n        \"use strict\";\n        var ranges = null,\n            start = 0,\n            end = 0,\n            firstStart = null,\n            lastEnd = null,\n            gap = 0,\n            toler = (tolerance || 0.03),\n            len,\n            i;\n\n        try {\n            ranges = buffer.buffered;\n        } catch(ex) {\n            return null;\n        }\n\n        if (ranges) {\n            for (i = 0, len = ranges.length; i < len; i += 1) {\n                start = ranges.start(i);\n                end = ranges.end(i);\n                if (firstStart === null) {\n                    gap = Math.abs(start - time);\n                    if (time >= start && time < end) {\n                        // start the range\n                        firstStart = start;\n                        lastEnd = end;\n                        continue;\n                    } else if (gap <= toler) {\n                        // start the range even though the buffer does not contain time 0\n                        firstStart = start;\n                        lastEnd = end;\n                        continue;\n                    }\n                } else {\n                    gap = start - lastEnd;\n                    if (gap <= toler) {\n                        // the discontinuity is smaller than the tolerance, combine the ranges\n                        lastEnd = end;\n                    } else {\n                        break;\n                    }\n                }\n            }\n\n            if (firstStart !== null) {\n                return {start: firstStart, end: lastEnd};\n            }\n        }\n\n        return null;\n    },\n\n    getAllRanges: function(buffer) {\n        var ranges = null;\n\n        try{\n            ranges = buffer.buffered;\n            return ranges;\n        } catch (ex) {\n            return null;\n        }\n    },\n\n    getBufferLength: function (buffer, time, tolerance) {\n        \"use strict\";\n\n        var self = this,\n            range,\n            length;\n\n        range = self.getBufferRange(buffer, time, tolerance);\n\n        if (range === null) {\n            length = 0;\n        } else {\n            length = range.end - time;\n        }\n\n        return length;\n    },\n\n    waitForUpdateEnd: function(buffer) {\n        \"use strict\";\n        var defer = Q.defer(),\n            intervalId,\n            CHECK_INTERVAL = 50,\n            checkIsUpdateEnded = function() {\n                // if updating is still in progress do nothing and wait for the next check again.\n                if (buffer.updating) {\n                    return;\n                }\n                // updating is completed, now we can stop checking and resolve the promise\n                clearInterval(intervalId);\n                defer.resolve(true);\n            },\n            updateEndHandler = function() {\n                if (buffer.updating) {\n                    return;\n                }\n\n                buffer.removeEventListener(\"updateend\", updateEndHandler, false);\n                defer.resolve(true);\n            };\n\n            if (!buffer.updating) {\n                defer.resolve(true);\n                return defer.promise;\n            }\n        // use updateend event if possible\n        if (typeof buffer.addEventListener === \"function\") {\n            try {\n                buffer.addEventListener(\"updateend\", updateEndHandler, false);\n            } catch (err) {\n                // use setInterval to periodically check if updating has been completed\n                intervalId = setInterval(checkIsUpdateEnded, CHECK_INTERVAL);\n            }\n        } else {\n            // use setInterval to periodically check if updating has been completed\n            intervalId = setInterval(checkIsUpdateEnded, CHECK_INTERVAL);\n        }\n\n        return defer.promise;\n    },\n\n    append: function (buffer, bytes, request) {\n        var deferred = Q.defer(),\n            self = this;\n\n        self.waitForUpdateEnd(buffer).then(function() {\n            try {\n                if (\"append\" in buffer) {\n                    buffer.append(bytes, request);\n                } else if (\"appendBuffer\" in buffer) {\n                    buffer.appendBuffer(bytes);\n                }\n\n                // updating is in progress, we should wait for it to complete before signaling that this operation is done\n                self.waitForUpdateEnd(buffer, request).then(\n                    function() {\n                        deferred.resolve();\n                    }\n                );\n            } catch (err) {\n                deferred.reject({err: err, data: bytes});\n            }\n        });\n\n        return deferred.promise;\n    },\n\n    remove: function (buffer, start, end, duration, mediaSource) {\n        var deferred = Q.defer(),\n            self = this;\n\n        self.waitForUpdateEnd(buffer).then(function() {\n            try {\n                // make sure that the given time range is correct. Otherwise we will get InvalidAccessError\n                if ((start >= 0) && (start < duration) && (end > start) && (mediaSource.readyState !== \"ended\")) {\n                    buffer.remove(start, end);\n                }\n\n                //workaround in order to remove all the cues in the textTrack from the video element.\n                //end parameter equals the video.duration. The use case of a dash stream with a full TTML subtitles file has an issue because video duration could be NaN. It occurs\n                //after the manifest has been parsed, a call to MediaSource.setDuration is made but after a few ms, a duration change event occurs with a value of NaN. The origin of this issue may be\n                //that no media segments have been pushed.\n                //So, all the buffer is removed.\n                if (isNaN(end) && (mediaSource.readyState !== \"ended\")) {\n                    buffer.remove(start);\n                }\n\n                // updating is in progress, we should wait for it to complete before signaling that this operation is done\n                self.waitForUpdateEnd(buffer).then(\n                    function() {\n                        deferred.resolve();\n                    }\n                );\n            } catch (err) {\n                deferred.reject(err);\n            }\n        });\n\n        return deferred.promise;\n    },\n\n    abort: function (mediaSource, buffer) {\n        \"use strict\";\n            try {\n                if (mediaSource.readyState === \"open\") {\n                    buffer.abort();\n                }\n            } catch(ex){\n            }\n    }\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Define Math.sign method in case it is not defined (like in IE11)\nif (!Math.sign) {\n    Math.sign = function(value) {\n        \"use strict\";\n        return (value < 0) ? -1 : ((value === 0) ? 0 : 1);\n    };\n}\n\nMediaPlayer.dependencies.Stream = function() {\n    \"use strict\";\n\n    var manifest,\n        mediaSource,\n        contentProtection = null,\n        videoController = null,\n        videoTrackIndex = -1,\n        audioController = null,\n        audioTrackIndex = -1,\n        textController = null,\n        subtitlesEnabled = false,\n        dvrStarted = false,\n        fragmentInfoVideoController = null,\n        fragmentInfoAudioController = null,\n        fragmentInfoTextController = null,\n\n        textTrackIndex = -1,\n        autoPlay = true,\n        initialized = false,\n        errored = false,\n\n        // Events listeners\n        endedListener,\n        loadedListener,\n        playListener,\n        pauseListener,\n        errorListener,\n        seekingListener,\n        seekedListener,\n        waitingListener,\n        timeupdateListener,\n        durationchangeListener,\n        progressListener,\n        ratechangeListener,\n        canplayListener,\n        playingListener,\n        loadstartListener,\n\n        // Audio/text languages\n        defaultAudioLang = 'und',\n        defaultSubtitleLang = 'und',\n\n        periodInfo = null,\n\n        // Initial start time\n        initialStartTime = -1,\n\n        // Play start time (= live edge for live streams)\n        playStartTime = -1,\n\n        // Programmatical seek\n        seekTime,\n        checkStartTimeIntervalId,\n\n        // trick mode variables\n        tmState = \"Stopped\",\n        tmSpeed = 1,\n        tmPreviousSpeed,\n        tmStartTime,\n        tmVideoStartTime,\n        tmMinSeekStep,\n        tmSeekStep,\n        tmSeekTime,\n        tmSeekTimeout,\n        tmSeekValue,\n        tmEndDetected = false,\n        muteState = false,\n\n        eventController = null,\n        protectionController,\n        initializeMediaSourceFinished = true,\n\n        reloadTimeout = null,\n        isReloading = false,\n\n        startClockTime = -1,\n        startStreamTime = -1,\n        visibilitychangeListener,\n\n        // ProtectionController events listener\n        onProtectionError = function(event) {\n            this.errHandler.sendError(event.data.code, event.data.message, event.data.data);\n        },\n\n        play = function() {\n            if (!initialized) {\n                return;\n            }\n\n            this.debug.info(\"[Stream] Play.\");\n            this.videoModel.play();\n        },\n\n        pause = function() {\n            this.debug.info(\"[Stream] Pause.\");\n            this.videoModel.pause();\n        },\n\n        seek = function(time, autoplay) {\n            if (!initialized) {\n                //this.debug.info(\"[Stream] (seek) not initialized\");\n                return;\n            }\n\n            this.debug.info(\"[Stream] Seek: \" + time);\n\n            // In case of live streams and then DVR seek, then we start the fragmentInfoControllers\n            // (check if seek not due to stream loading or reloading)\n            if (this.manifestExt.getIsDynamic(manifest) && !isReloading && (this.videoModel.getCurrentTime() !== 0)) {\n                startFragmentInfoControllers.call(this);\n            }\n\n            // Stream is starting playing => fills the buffers before setting <video> current time\n            if (autoplay === true) {\n                // 1- seeks the buffer controllers at the desired time\n                // 2- once data is present in the buffers, then we can set the current time to the <video> component (see onBufferUpdated())\n                seekTime = time;\n                this.system.unmapHandler(\"bufferUpdated\");\n                this.system.mapHandler(\"bufferUpdated\", undefined, onBufferUpdated.bind(this));\n                startBuffering.call(this, seekTime);\n            } else {\n                // Stream is already playing, simply seek the <video> component\n                this.videoModel.setCurrentTime(time);\n            }\n        },\n\n        // Media Source\n        setUpMediaSource = function(mediaSourceArg) {\n            var deferred = Q.defer(),\n                self = this,\n\n                onMediaSourceOpen = function( /*e*/ ) {\n                    //self.debug.log(\"MediaSource is open!\");\n\n                    mediaSourceArg.removeEventListener(\"sourceopen\", onMediaSourceOpen);\n                    mediaSourceArg.removeEventListener(\"webkitsourceopen\", onMediaSourceOpen);\n\n                    deferred.resolve(mediaSourceArg);\n                };\n\n            //self.debug.log(\"MediaSource should be closed. The actual readyState is: \" + mediaSourceArg.readyState);\n\n            mediaSourceArg.addEventListener(\"sourceopen\", onMediaSourceOpen, false);\n            mediaSourceArg.addEventListener(\"webkitsourceopen\", onMediaSourceOpen, false);\n\n            self.mediaSourceExt.attachMediaSource(mediaSourceArg, self.videoModel);\n\n            //self.debug.log(\"MediaSource attached to video.  Waiting on open...\");\n\n            return deferred.promise;\n        },\n\n        tearDownMediaSource = function() {\n            var self = this,\n                funcs = [],\n                deferred = Q.defer(),\n\n                executeReset = function() {\n                    if (!!videoController) {\n                        funcs.push(videoController.reset(errored));\n                    }\n\n                    if (!!fragmentInfoVideoController) {\n                        funcs.push(fragmentInfoVideoController.reset(errored));\n                    }\n\n                    if (!!audioController) {\n                        funcs.push(audioController.reset(errored));\n                    }\n\n                    if (!!fragmentInfoAudioController) {\n                        funcs.push(fragmentInfoAudioController.reset(errored));\n                    }\n\n                    if (!!textController) {\n                        funcs.push(textController.reset(errored));\n                    }\n\n                    if (!!fragmentInfoTextController) {\n                        funcs.push(fragmentInfoTextController.reset(errored));\n                    }\n\n                    Q.all(funcs).then(\n                        function() {\n                            if (!!eventController) {\n                                eventController.reset();\n                                eventController = undefined;\n                            }\n\n                            if (!!mediaSource) {\n                                self.mediaSourceExt.detachMediaSource(self.videoModel);\n                            }\n\n                            initialized = false;\n\n                            contentProtection = null;\n\n                            videoController = null;\n                            audioController = null;\n                            textController = null;\n\n                            mediaSource = null;\n                            manifest = null;\n\n                            deferred.resolve();\n                        });\n                };\n\n\n            Q.when(initializeMediaSourceFinished).then(\n                function() {\n                    executeReset();\n                });\n            return deferred.promise;\n        },\n\n        createBufferController = function(data, codec) {\n            var bufferController = null,\n                buffer = null;\n\n            // Check if codec is supported (applies only for video and audio)\n            if (data.type === 'video' || data.type === 'audio') {\n                if (!this.capabilities.supportsCodec(this.videoModel.getElement(), codec)) {\n                    this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED, 'Codec is not supported (HTMLMediaElement)', {\n                        codec: codec\n                    });\n                    return null;\n                }\n            }\n\n            // Create SourceBuffer\n            try {\n                buffer = this.sourceBufferExt.createSourceBuffer(mediaSource, codec);\n            } catch (ex) {\n                this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CREATE_SOURCEBUFFER, 'Failed to create ' + data.type + ' source buffer',\n                    new MediaPlayer.vo.Error(ex.code, ex.name, ex.message));\n                return null;\n            }\n\n            // Create and initialize BufferController\n            bufferController = this.system.getObject(\"bufferController\");\n            bufferController.initialize(data.type, periodInfo, data, buffer, this.fragmentController, mediaSource, eventController);\n\n            if (data.type === 'text' && buffer.hasOwnProperty('initialize')) {\n                buffer.initialize(codec, bufferController, data);\n            }\n\n            return bufferController;\n        },\n\n        createFragmentInfoController = function(bufferController, data) {\n            if (manifest.name !== 'MSS' || (!this.manifestExt.getIsDynamic(manifest) && !this.manifestExt.getIsStartOver(manifest))) {\n                return null;\n            }\n\n            var fragmentInfoController = null;\n\n            if (bufferController && data && data.type) {\n                fragmentInfoController = this.system.getObject(\"mssFragmentInfoController\");\n                fragmentInfoController.initialize(data.type, this.fragmentController, bufferController);\n            }\n\n            return fragmentInfoController;\n        },\n\n        initializeProtectionController = function () {\n            var deferred = null,\n                data,\n                audioCodec = null,\n                videoCodec = null,\n                ksSelected,\n                self = this;\n\n            data = this.manifestExt.getVideoData(manifest, periodInfo.index);\n            if (data) {\n                videoCodec = this.manifestExt.getCodec(data);\n                contentProtection = this.manifestExt.getContentProtectionData(data);\n            }\n            data = this.manifestExt.getSpecificAudioData(manifest, periodInfo.index, defaultAudioLang);\n            if (data) {\n                audioCodec = this.manifestExt.getCodec(data);\n            }\n\n            if (!contentProtection) {\n                return Q.when(true);\n            }\n\n            if (!this.capabilities.supportsEncryptedMedia()) {\n                // No protectionController (MediaKeys not supported/enabled) but content is protected => error\n                this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.CAPABILITY_ERR_MEDIAKEYS, \"EME is not supported/enabled\", null);\n                return Q.when(false);\n            }\n\n            if (!protectionController) {\n                return Q.when(true);\n            }\n\n            deferred = Q.defer();\n\n            ksSelected = {};\n            ksSelected[MediaPlayer.dependencies.ProtectionController.eventList.ENAME_KEY_SYSTEM_SELECTED] = function(/*event*/) {\n                self.debug.log(\"[Stream] ProtectionController initialized\");\n                protectionController.unsubscribe(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_KEY_SYSTEM_SELECTED, ksSelected);\n                deferred.resolve(true);\n            };\n            protectionController.subscribe(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_KEY_SYSTEM_SELECTED, ksSelected);\n            this.debug.log(\"[Stream] Initialize ProtectionController\");\n            protectionController.init(contentProtection, audioCodec, videoCodec);\n\n            return deferred.promise;\n        },\n\n        initializeMediaSource = function() {\n            var data,\n                videoCodec,\n                audioCodec,\n                textMimeType;\n\n            if (!manifest) {\n                return;\n            }\n\n            initializeMediaSourceFinished = false;\n            eventController = this.system.getObject(\"eventController\");\n\n            // Initialize video BufferController\n            data = this.manifestExt.getVideoData(manifest, periodInfo.index);\n\n            if (data === null) {\n                this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_NO_VIDEO, 'No Video data in manifest');\n            } else {\n                filterCodecs.call(this, data);\n                videoTrackIndex = this.manifestExt.getDataIndex(data, manifest, periodInfo.index);\n                videoCodec = this.manifestExt.getCodec(data);\n                contentProtection = this.manifestExt.getContentProtectionData(data);\n\n                if (videoCodec === null) {\n                    this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED, 'Video codec information not available', {codec: ''});\n                } else {\n                    videoController = createBufferController.call(this, data, videoCodec);\n                    fragmentInfoVideoController = createFragmentInfoController.call(this, videoController, data);\n                }\n            }\n\n            // Abort if no video controller\n            if (videoController === null) {\n                initializeMediaSourceFinished = true;\n                return;\n            }\n\n            // Initialize audio BufferController\n            data = this.manifestExt.getSpecificAudioData(manifest, periodInfo.index, defaultAudioLang);\n\n            if (data === null) {\n                this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_NO_AUDIO, \"No audio data in manifest\");\n            } else {\n                filterCodecs.call(this, data);\n                audioTrackIndex = this.manifestExt.getDataIndex(data, manifest, periodInfo.index);\n                audioCodec = this.manifestExt.getCodec(data);\n\n                if (audioCodec === null) {\n                    this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED, 'Audio codec information not available', {codec: ''});\n                } else {\n                    audioController = createBufferController.call(this, data, audioCodec);\n\n                    // Abort if audio track defined but failed to create audio controller\n                    if (audioController === null) {\n                        initializeMediaSourceFinished = true;\n                        return;\n                    }\n\n                    fragmentInfoAudioController = createFragmentInfoController.call(this, audioController, data);\n                }\n            }\n\n            // Initialize text BufferController\n            data = this.manifestExt.getSpecificTextData(manifest, periodInfo.index, defaultSubtitleLang);\n\n            if (data !== null) {\n                textTrackIndex = this.manifestExt.getDataIndex(data, manifest, periodInfo.index);\n                textMimeType = this.manifestExt.getMimeType(data);\n\n                if (textMimeType === null) {\n                    this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_NO_TEXT, \"Text codec information not available\");\n                } else {\n                    textController = createBufferController.call(this, data, textMimeType);\n                    fragmentInfoTextController = createFragmentInfoController.call(this, textController, data);\n                }\n            }\n\n            // Initialize EventController\n            if (eventController) {\n                eventController.addInlineEvents(this.manifestExt.getEventsForPeriod(manifest, periodInfo));\n            }\n\n            initializeMediaSourceFinished = true;\n            return;\n        },\n\n        initializePlayback = function() {\n            this.debug.log(\"[Stream] Setting duration: \" + periodInfo.duration);\n            this.mediaSourceExt.setDuration(mediaSource, periodInfo.duration);\n            initialized = true;\n        },\n\n        startFragmentInfoControllers = function() {\n            if (manifest.name !== 'MSS' || (!this.manifestExt.getIsDynamic(manifest) && !this.manifestExt.getIsStartOver(manifest))) {\n                return;\n            }\n\n            if (fragmentInfoVideoController && dvrStarted === false) {\n                dvrStarted = true;\n                fragmentInfoVideoController.start(videoController.getSegmentDuration());\n            }\n\n            if (fragmentInfoAudioController) {\n                fragmentInfoAudioController.start(audioController.getSegmentDuration());\n            }\n\n            if (fragmentInfoTextController && subtitlesEnabled) {\n                fragmentInfoTextController.start(textController.getSegmentDuration());\n            }\n        },\n\n        stopFragmentInfoControllers = function() {\n            if (fragmentInfoVideoController) {\n                dvrStarted = false;\n                fragmentInfoVideoController.stop();\n            }\n\n            if (fragmentInfoAudioController) {\n                fragmentInfoAudioController.stop();\n            }\n\n            if (fragmentInfoTextController) {\n                fragmentInfoTextController.stop();\n            }\n        },\n\n        onLoaded = function() {\n            this.debug.info(\"[Stream] <video> loadedmetadata event\");\n        },\n\n        onCanPlay = function() {\n            this.debug.info(\"[Stream] <video> canplay event\");\n        },\n\n        onPlaying = function() {\n            this.debug.info(\"[Stream] <video> playing event\");\n\n            this.metricsModel.addState(\"video\", \"playing\", this.getVideoModel().getCurrentTime());\n\n            // Store start time (clock and stream time) for resynchronization purpose\n            startClockTime = new Date().getTime() / 1000;\n            startStreamTime = this.getVideoModel().getCurrentTime();\n        },\n\n        onLoadStart = function() {\n            this.debug.info(\"[Stream] <video> loadstart event\");\n        },\n\n        onPlay = function() {\n            this.debug.info(\"[Stream] <video> play event\");\n\n            //listen pause event to have correct metrics, it should be unlistened by the onBufferingCompleted callback.\n            this.videoModel.listen(\"pause\", pauseListener);\n\n            if (tmSpeed !== 1) {\n                this.setTrickModeSpeed(1);\n            } else {\n                // Set the currentTime here to be sure that videoTag is ready to accept the seek (cause IE fail on set currentTime on BufferUpdate)\n                if (playStartTime >= 0) {\n                    setVideoModelCurrentTime.call(this, playStartTime);\n                    playStartTime = -1;\n                } else {\n                    startBuffering.call(this);\n                }\n            }\n\n            this.metricsModel.addPlayList(\"video\", new Date().getTime(), this.videoModel.getCurrentTime(), \"play\");\n        },\n\n        // ORANGE : ended event\n        onEnded = function() {\n            this.debug.info(\"[Stream] <video> ended event\");\n            //add stopped state metric with reason = 1 : end of stream\n            this.metricsModel.addState(\"video\", \"stopped\", this.videoModel.getCurrentTime(), 1);\n\n            if (this.manifestExt.getIsStartOver(manifest)) {\n                stopFragmentInfoControllers.call(this);\n            }\n        },\n\n        onPause = function() {\n            this.debug.info(\"[Stream] <video> pause event\");\n            startClockTime = -1;\n            startStreamTime = -1;\n            if (tmSpeed === 1) {\n                // ORANGE : add metric\n                this.metricsModel.addState(\"video\", \"paused\", this.videoModel.getCurrentTime());\n                this.metricsModel.addPlayList(\"video\", new Date().getTime(), this.videoModel.getCurrentTime(), \"pause\");\n            }\n            suspend.call(this);\n            if (manifest.name === 'MSS' && this.manifestExt.getIsDynamic(manifest)) {\n                startFragmentInfoControllers.call(this);\n            }\n        },\n\n        onError = function(event) {\n            var error = event.target.error,\n                code,\n                message = \"[Stream] <video> error: \";\n\n            if (error.code === -1) {\n                // not an error!\n                return;\n            }\n\n            switch (error.code) {\n                case 1:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_ABORTED;\n                    message += \"fetching process aborted\";\n                    break;\n                case 2:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_NETWORK;\n                    message += \"network error\";\n                    break;\n                case 3:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_DECODE;\n                    message += \"media decoding error\";\n                    break;\n                case 4:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_SRC_NOT_SUPPORTED;\n                    message += \"media format not supported\";\n                    break;\n                case 5:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_ENCRYPTED;\n                    message += \"media is encrypted\";\n                    break;\n            }\n\n            errored = true;\n\n            this.errHandler.sendError(code, message);\n        },\n\n        onSeeking = function() {\n            var time = this.videoModel.getCurrentTime(),\n                duration = this.videoModel.getDuration();\n\n            this.debug.info(\"[Stream] <video> seeking event: \" + time);\n\n            // Check if seeking is different from trick mode seeking, then cancel trick mode\n            if ((tmSpeed !== 1) && (time.toFixed(3) !== tmSeekValue.toFixed(3))) {\n                this.setTrickModeSpeed(1);\n                return;\n            }\n\n            // Check if seek time is less than range start, never seek before range start.\n            time = (time < this.getStartTime()) ? this.getStartTime() : time;\n\n            // Seeking at end of stream (= duration) does not work consistently across browsers and 'ended' event is then not always raised.\n            // Then seek 2 sec. backward to enable 'ended' event to be raised.\n            var backoffSeekToEnd = this.config.getParam(\"backoffSeekToEnd\", \"number\", 2);\n            if (duration !== Infinity && time >= (duration - backoffSeekToEnd)) {\n                setVideoModelCurrentTime.call(this, (duration - backoffSeekToEnd));\n                return;\n            }\n\n            if (tmSpeed === 1) {\n                this.metricsModel.addState(\"video\", \"seeking\", this.getVideoModel().getCurrentTime());\n                this.metricsModel.addPlayList('video', new Date().getTime(), time, MediaPlayer.vo.metrics.PlayList.SEEK_START_REASON);\n            }\n\n            startBuffering.call(this, time);\n        },\n\n        onSeeked = function() {\n            var self = this,\n                currentTime,\n                currentVideoTime,\n                elapsedTime,\n                elapsedSeekTime,\n                elapsedVideoTime,\n                speed,\n                ratio = 0.9,\n                seekValue,\n                videoEndedEvent,\n                delay,\n                _seek = function(delay, seekValue) {\n                    if (self.videoModel.getCurrentTime() === self.getStartTime() || tmEndDetected) {\n                        self.debug.log(\"[Stream] Trick mode (x\" + tmSpeed + \"): stop\");\n                        if (tmEndDetected) {\n                            videoEndedEvent = document.createEvent(\"Event\");\n                            videoEndedEvent.initEvent(\"ended\", true, true);\n                            self.videoModel.getElement().dispatchEvent(videoEndedEvent);\n                        }\n                        return;\n                    }\n                    if (seekValue < self.getStartTime()) {\n                        seekValue = self.getStartTime();\n                    } else if (seekValue >= self.videoModel.getDuration()) {\n                        seekValue = self.videoModel.getDuration() - tmMinSeekStep;\n                        tmEndDetected = true;\n                    }\n                    if (delay > 0) {\n                        self.debug.log(\"[Stream] Trick mode (x\" + tmSpeed + \"): wait \" + delay.toFixed(3) + \" s\");\n                    }\n                    tmSeekTimeout = setTimeout(function() {\n                        tmSeekTime = new Date().getTime() / 1000;\n                        self.debug.log(\"[Stream] Trick mode (x\" + tmSpeed + \"): seek time = \" + seekValue.toFixed(3));\n                        tmSeekValue = seekValue;\n                        self.videoModel.setCurrentTime(seekValue);\n                    }, delay > 0 ? (delay * 1000) : 0);\n                };\n\n            this.debug.info(\"[Stream] <video> seeked event\");\n\n            // Notify BufferControllers that video has seeked\n            seekedBuffers.call(this);\n\n            // Trick mode\n            if (tmSpeed !== 1) {\n\n                currentTime = (new Date().getTime()) / 1000;\n                currentVideoTime = self.videoModel.getCurrentTime();\n                elapsedTime = currentTime - tmStartTime;\n                elapsedSeekTime = currentTime - tmSeekTime;\n                elapsedVideoTime = Math.abs(currentVideoTime - tmVideoStartTime);\n                speed = (elapsedVideoTime / elapsedTime);\n\n                self.debug.log(\"[Stream] Trick mode (x\" + tmSpeed + \"): elapsed time = \" + elapsedTime.toFixed(3) + \", elapsed video time = \" + elapsedVideoTime.toFixed(3) + \", speed = \" + speed.toFixed(3));\n\n                if (tmState === \"Changed\") {\n                    clearTimeout(tmSeekTimeout);\n                    // Target speed changed => reset start times, and seek\n                    tmState = \"Running\";\n                    tmStartTime = (new Date().getTime()) / 1000;\n                    tmVideoStartTime = currentVideoTime;\n                    self.debug.info(\"[Stream] Trick mode (x\" + tmSpeed + \"): videoTime = \" + tmVideoStartTime);\n                    //if trick mode speed has decreased, we have to decrease tmSeekStep\n                    tmSeekStep = Math.abs(tmPreviousSpeed / tmSpeed) > 1 ? tmSeekStep / Math.abs(tmPreviousSpeed / tmSpeed) : tmSeekStep;\n                    seekValue = currentVideoTime + (tmSeekStep * Math.sign(tmSpeed));\n                    delay = 0;\n                } else if (speed < (Math.abs(tmSpeed) * ratio)) {\n                    // Measured speed < target speed => increase seek step\n                    var speedRatio = Math.abs(tmSpeed / speed);\n                    tmSeekStep *= Math.round(speedRatio) + Math.round(speedRatio % tmMinSeekStep);\n                    self.debug.info(\"[Stream] Trick mode (x\" + tmSpeed + \"): seek step = \" + tmSeekStep);\n                    seekValue = currentVideoTime + (tmSeekStep * Math.sign(tmSpeed));\n                    delay = 0;\n                } else {\n                    // Measured speed > target speed => wait before next seek\n                    seekValue = currentVideoTime + (tmSeekStep * Math.sign(tmSpeed));\n                    delay = (Math.abs(seekValue - tmVideoStartTime) / Math.abs(tmSpeed)) - elapsedTime - elapsedSeekTime;\n                }\n\n                _seek.call(self, delay, seekValue);\n\n            }\n\n            // The current time has been changed on video model, then reactivate 'seeking' event listener\n            // (see setVideoModelCurrentTime())\n            this.videoModel.listen(\"seeking\", seekingListener);\n\n            isReloading = false;\n            startClockTime = -1;\n            startStreamTime = -1;\n        },\n\n        onProgress = function() {\n            this.debug.info(\"[Stream] <video> progress event\");\n            updateBuffer.call(this);\n        },\n\n        onTimeupdate = function() {\n            this.debug.info(\"[Stream] <video> timeupdate event: \" + this.videoModel.getCurrentTime());\n            updateBuffer.call(this);\n        },\n\n        onWaiting = function() {\n            this.debug.info(\"[Stream] <video> waiting event\");\n            if (!this.getVideoModel().isSeeking()) {\n                this.metricsModel.addState(\"video\", \"buffering\", this.getVideoModel().getCurrentTime());\n            }\n        },\n\n        onDurationchange = function() {\n            var duration = this.videoModel.getDuration();\n            this.debug.info(\"[Stream] <video> durationchange event: \" + duration);\n        },\n\n        onRatechange = function() {\n            this.debug.info(\"[Stream] <video> ratechange event: \" + this.videoModel.getPlaybackRate());\n            if (videoController) {\n                videoController.updateStalledState();\n            }\n            if (audioController) {\n                audioController.updateStalledState();\n            }\n            if (textController) {\n                textController.updateStalledState();\n            }\n        },\n\n        onReload = function() {\n\n            // Ask for manifest refresh\n            // Then, once manifest has been refresh and data updated, we reload session (see updateData())\n            pause.call(this);\n            isReloading = true;\n            this.system.notify(\"manifestUpdate\", true);\n        },\n\n        updateBuffer = function() {\n\n            if (videoController) {\n                videoController.updateBufferLevel(true);\n            }\n\n            if (audioController) {\n                audioController.updateBufferLevel(true);\n            }\n\n            if (textController) {\n                textController.updateBufferLevel(true);\n            }\n        },\n\n        startBuffering = function(time) {\n            this.debug.log(\"[Stream] startBuffering\" + ((time === undefined) ? \"\" : (\" at time \" + time)));\n\n            if (videoController) {\n                if (time === undefined) {\n                    videoController.start();\n                } else {\n                    videoController.seek(time);\n                }\n            }\n\n            if (audioController) {\n                if (time === undefined) {\n                    audioController.start();\n                } else {\n                    audioController.seek(time);\n                }\n            }\n\n            if (textController && subtitlesEnabled && tmSpeed === 1) {\n                if (time === undefined) {\n                    textController.start();\n                } else {\n                    textController.seek(time);\n                }\n            }\n        },\n\n        stopBuffering = function() {\n            this.debug.log(\"[Stream] stopBuffering\");\n\n            if (videoController) {\n                videoController.stop();\n            }\n\n            if (audioController) {\n                audioController.stop();\n            }\n\n            if (textController) {\n                textController.stop();\n            }\n        },\n\n        seekedBuffers = function() {\n            if (videoController) {\n                videoController.seeked();\n            }\n            if (audioController) {\n                audioController.seeked();\n            }\n            if (textController) {\n                textController.seeked();\n            }\n        },\n\n        suspend = function() {\n            if (!this.scheduleWhilePaused || this.manifestExt.getIsDynamic(manifest)) {\n                stopBuffering.call(this);\n            }\n\n            clearInterval(checkStartTimeIntervalId);\n        },\n\n        doLoad = function(manifestResult) {\n\n            var self = this;\n\n            //self.debug.log(\"Stream start loading.\");\n\n            manifest = manifestResult;\n            self.debug.log(\"[Stream] Create MediaSource\");\n\n            try {\n                mediaSource = self.mediaSourceExt.createMediaSource();\n            } catch (error) {\n                self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CREATE_MEDIASOURCE, \"Failed to create MediaSource\", {\n                    name: error.name,\n                    message: error.message\n                });\n            }\n\n            if (mediaSource === null) {\n                return;\n            }\n\n            initializeProtectionController.call(self).then(function() {\n                self.debug.log(\"[Stream] Setup MediaSource\");\n                setUpMediaSource.call(self, mediaSource).then(\n                    function(mediaSourceResult) {\n                        mediaSource = mediaSourceResult;\n                        self.debug.log(\"[Stream] Initialize MediaSource\");\n                        initializeMediaSource.call(self);\n                        self.debug.log(\"[Stream] Initialize playback\");\n                        initializePlayback.call(self);\n                        self.debug.log(\"[Stream] Playback initialized\");\n                    }\n                );\n            });\n        },\n\n        setVideoModelCurrentTime = function(time) {\n            this.debug.log(\"[Stream] Set video model current time: \" + time);\n            this.videoModel.unlisten(\"seeking\", seekingListener);\n            this.videoModel.setCurrentTime(time);\n        },\n\n        onBufferingCompleted = function() {\n\n            // if there is at least one buffer controller that has not completed buffering yet do nothing\n            if ((videoController && !videoController.isBufferingCompleted()) || (audioController && !audioController.isBufferingCompleted())) {\n                return;\n            }\n\n            // buffering has been complted, now we can signal end of stream\n            if (mediaSource) {\n                //unlisten pause event to have correct metrics, and not catch the pause event sent before the onded event\n                this.videoModel.unlisten(\"pause\", pauseListener);\n                this.debug.info(\"[Stream] Signal end of stream\");\n                this.mediaSourceExt.signalEndOfStream(mediaSource);\n            }\n        },\n\n        // 'startTimeFound' event raised by video controller when start time has been found\n        // startTime = video live edge for live streams\n        // startTime = first video segment time for static streams\n        // => then seek every BufferController at the found start time\n        onStartTimeFound = function(startTime) {\n            this.debug.info(\"[Stream] Start time = \" + startTime);\n            // Check if initial start time is set, then overload start time\n            if (initialStartTime !== -1 &&\n                !this.manifestExt.getIsDynamic(manifest) &&\n                initialStartTime < periodInfo.duration) {\n                this.debug.info(\"[Stream] Initial start time = \" + initialStartTime);\n                startTime = initialStartTime;\n            }\n            seek.call(this, startTime, (periodInfo.index === 0) && autoPlay);\n        },\n\n        // ORANGE: 'bufferUpdated' event raised when some data has been appended into media buffers\n        // => if not started (live use case) then check for playback start time and do play\n        onBufferUpdated = function() {\n            var videoRange,\n                audioRange,\n                startTime;\n\n            this.debug.info(\"[Stream] Check start time\");\n\n            // Check if video buffer is not empty\n            videoRange = this.sourceBufferExt.getBufferRange(videoController.getBuffer(), seekTime, videoController.getSegmentDuration());\n            if (videoRange === null) {\n                return;\n            }\n\n            startTime = Math.max(seekTime, videoRange.start);\n\n            if (videoRange.end < startTime) {\n                return;\n            }\n\n            if (audioController) {\n                // Check if audio buffer is not empty\n                audioRange = this.sourceBufferExt.getBufferRange(audioController.getBuffer(), seekTime, audioController.getSegmentDuration());\n                if (audioRange === null) {\n                    return;\n                }\n                this.debug.info(\"[Stream] Check start time: A[\" + audioRange.start + \"-\" + audioRange.end + \"], V[\" + videoRange.start + \"-\" + videoRange.end + \"]\");\n                // Check if audio and video can be synchronized (if some audio sample is available at returned start time)\n                if (audioRange.end < startTime) {\n                    return;\n                }\n                startTime = Math.max(startTime, audioRange.start);\n            }\n\n            this.debug.info(\"[Stream] Check start time: OK => \" + startTime);\n\n            // Unmap \"bufferUpdated\" handler\n            this.system.unmapHandler(\"bufferUpdated\");\n\n            // Set current time on video if 'play' event has already been raised.\n            // If 'play' event has not yet been raised, the the current time will be set afterwards\n            if (!this.videoModel.isPaused()) {\n                setVideoModelCurrentTime.call(this, startTime);\n            } else {\n                playStartTime = startTime;\n            }\n\n            if (this.manifestExt.getIsStartOver(manifest)) {\n                startFragmentInfoControllers.call(this);\n            }\n            \n            play.call(this);\n        },\n\n        // 'sourceDurationChanged' event is raised when source duration changed (start-over streams use case)\n        onSourceDurationChanged = function(duration) {\n            this.debug.info(\"[Stream] Source duration changed: \" + duration);\n            this.mediaSourceExt.setDuration(mediaSource, duration);\n            manifest.mediaPresentationDuration = duration;\n            periodInfo.duration = duration;\n        },\n\n        selectTrack = function(controller, track, currentIndex) {\n            var index = -1;\n\n            if (!controller) {\n                return currentIndex;\n            }\n\n            if (currentIndex === -1) {\n                return currentIndex;\n            }\n\n            // Get data index corresponding to the new selected track\n            index = this.manifestExt.getDataIndex(track, manifest, periodInfo.index);\n\n            // Check if different track selected\n            if (index !== currentIndex) {\n                if (manifest.name === 'MSS' && (this.manifestExt.getIsDynamic(manifest)  || this.manifestExt.getIsStartOver(manifest))) {\n                    // If live MSS, refresh the manifest to get new selected track segments info\n                    this.system.notify(\"manifestUpdate\");\n                } else {\n                    // Else update controller data directly\n                    controller.updateData(track, periodInfo);\n                }\n            }\n\n            return index;\n        },\n\n        filterCodecs = function(data) {\n            var codec,\n                i;\n            // Filter codecs that are not supported\n            // But keep at least codec from lowest representation\n            i = 1;\n            while (i < data.Representation_asArray.length) {\n                codec = this.manifestExt.getCodecForRepresentation(data.Representation_asArray[i]);\n                if (codec) {\n                    if (!this.capabilities.supportsCodec(this.videoModel.getElement(), codec)) {\n                        this.debug.warn('[Stream] codec not supported: ' + codec);\n                        data.Representation_asArray.splice(i, 1);\n                        i--;\n                    }\n                }\n                i++;\n            }\n        },\n\n        updateData = function(updatedPeriodInfo) {\n            var videoData,\n                data;\n\n            manifest = this.manifestModel.getValue();\n            periodInfo = updatedPeriodInfo;\n            this.debug.log(\"[Stream] Manifest updated ... set new data on buffers.\");\n\n            if (videoController) {\n                videoData = videoController.getData();\n\n                if (!!videoData && videoData.hasOwnProperty(\"id\")) {\n                    data = this.manifestExt.getDataForId(videoData.id, manifest, periodInfo.index);\n                } else {\n                    data = this.manifestExt.getDataForIndex(videoTrackIndex, manifest, periodInfo.index);\n                }\n                filterCodecs.call(this, data);\n                videoController.updateData(data, periodInfo);\n            }\n\n            if (audioController) {\n                data = this.manifestExt.getDataForIndex(audioTrackIndex, manifest, periodInfo.index);\n                filterCodecs.call(this, data);\n                audioController.updateData(data, periodInfo);\n            }\n\n            if (textController) {\n                data = this.manifestExt.getDataForIndex(textTrackIndex, manifest, periodInfo.index);\n                textController.updateData(data, periodInfo);\n            }\n\n            if (eventController) {\n                var events = this.manifestExt.getEventsForPeriod(manifest, periodInfo);\n                eventController.addInlineEvents(events);\n            }\n\n            if (isReloading && videoController) {\n                this.system.unmapHandler(\"bufferUpdated\");\n                this.system.mapHandler(\"bufferUpdated\", undefined, onBufferUpdated.bind(this));\n                // Call load on video controller in order to get new stream start time (=live edge for live streams)\n                videoController.load();\n            }\n\n            if (dvrStarted) {\n                startFragmentInfoControllers.call(this);\n            }\n        },\n\n        streamsComposed = function() {\n            var time = this.videoModel.getCurrentTime();\n            textController.seek(time);\n            textController.seeked();\n        },\n\n        // Called when a BufferController failed to download or buffer a segment\n        onSegmentLoadingFailed = function(segmentRequest) {\n            var self = this;\n\n            this.debug.log(\"[Stream] Segment loading failed: start time = \" + segmentRequest.startTime + \", duration = \" + segmentRequest.duration);\n\n            if ((this.manifestExt.getIsDynamic(manifest) || this.manifestExt.getIsStartOver(manifest)) && reloadTimeout === null) {\n                // For Live streams, then we try to reload the session\n                isReloading = true;\n                var delay = segmentRequest.duration;\n                this.debug.info(\"[Stream] Reload session in \" + delay + \" s.\");\n                reloadTimeout = setTimeout(function() {\n                    reloadTimeout = null;\n                    //pause.call(self);\n                    isReloading = true;\n                    self.debug.info(\"[Stream] Reload session (update manifest)\");\n                    self.system.notify(\"manifestUpdate\", true);\n                    stopFragmentInfoControllers.call(self);\n                }, delay * 1000);\n            } else {\n                // For VOD streams, we seek at recovery time\n                seek.call(this, (segmentRequest.startTime + segmentRequest.duration));\n            }\n        },\n\n        onVisibilitychange = function() {\n\n            if (document.hidden === true || startClockTime === -1) {\n                return;\n            }\n\n            // If current document get focus back, then check if resynchronization is required\n            var clockTime = new Date().getTime() / 1000,\n                streamTime = this.getVideoModel().getCurrentTime(),\n                elapsedClockTime = clockTime - startClockTime,\n                elapsedStreamTime = streamTime - startStreamTime;\n\n            this.debug.log(\"[Stream] VisibilityChange: elapsedClockTime = \" + elapsedClockTime + \", elapsedStreamTime = \" + elapsedStreamTime + \" (\" + (elapsedClockTime - elapsedStreamTime) + \")\");\n\n            if ((elapsedClockTime - elapsedStreamTime) > 1) {\n                onReload.call(this);\n            }\n\n        };\n\n    return {\n        system: undefined,\n        videoModel: undefined,\n        manifestLoader: undefined,\n        manifestModel: undefined,\n        mediaSourceExt: undefined,\n        sourceBufferExt: undefined,\n        manifestExt: undefined,\n        fragmentController: undefined,\n        fragmentExt: undefined,\n        protectionExt: undefined,\n        capabilities: undefined,\n        debug: undefined,\n        metricsExt: undefined,\n        errHandler: undefined,\n        timelineConverter: undefined,\n        scheduleWhilePaused: undefined,\n        textTrackExtensions: undefined,\n        metricsModel: undefined,\n        eventBus: undefined,\n        notify: undefined,\n        config: undefined,\n\n        setup: function() {\n            this.system.mapHandler(\"startTimeFound\", undefined, onStartTimeFound.bind(this));\n            this.system.mapHandler(\"segmentLoadingFailed\", undefined, onSegmentLoadingFailed.bind(this));\n            this.system.mapHandler(\"bufferingCompleted\", undefined, onBufferingCompleted.bind(this));\n            this.system.mapHandler(\"sourceDurationChanged\", undefined, onSourceDurationChanged.bind(this));\n            \n            // Protection event handlers\n            if (MediaPlayer.dependencies.ProtectionController) {\n                this[MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR] = onProtectionError.bind(this);\n            }\n\n            playListener = onPlay.bind(this);\n            pauseListener = onPause.bind(this);\n            errorListener = onError.bind(this);\n            seekingListener = onSeeking.bind(this);\n            seekedListener = onSeeked.bind(this);\n            waitingListener = onWaiting.bind(this);\n            progressListener = onProgress.bind(this);\n            ratechangeListener = onRatechange.bind(this);\n            timeupdateListener = onTimeupdate.bind(this);\n            durationchangeListener = onDurationchange.bind(this);\n            loadedListener = onLoaded.bind(this);\n            canplayListener = onCanPlay.bind(this);\n            playingListener = onPlaying.bind(this);\n            loadstartListener = onLoadStart.bind(this);\n            endedListener = onEnded.bind(this);\n\n            visibilitychangeListener = onVisibilitychange.bind(this);\n        },\n\n        load: function(manifest, periodInfoValue) {\n            periodInfo = periodInfoValue;\n            doLoad.call(this, manifest);\n        },\n\n        setVideoModel: function(value) {\n            this.videoModel = value;\n            this.videoModel.listen(\"play\", playListener);\n            this.videoModel.listen(\"pause\", pauseListener);\n            this.videoModel.listen(\"error\", errorListener);\n            this.videoModel.listen(\"seeking\", seekingListener);\n            this.videoModel.listen(\"seeked\", seekedListener);\n            this.videoModel.listen(\"waiting\", waitingListener);\n            this.videoModel.listen(\"timeupdate\", timeupdateListener);\n            this.videoModel.listen(\"durationchange\", durationchangeListener);\n            this.videoModel.listen(\"progress\", progressListener);\n            this.videoModel.listen(\"ratechange\", ratechangeListener);\n            this.videoModel.listen(\"loadedmetadata\", loadedListener);\n            this.videoModel.listen(\"ended\", endedListener);\n            this.videoModel.listen(\"canplay\", canplayListener);\n            this.videoModel.listen(\"playing\", playingListener);\n            this.videoModel.listen(\"loadstart\", loadstartListener);\n\n            //document.addEventListener(\"visibilitychange\", visibilitychangeListener);\n        },\n\n        setInitialStartTime: function(startTime) {\n            var time = parseFloat(startTime);\n            if (!isNaN(time)) {\n                initialStartTime = time;\n            }\n        },\n\n        getAudioTracks: function() {\n            return this.manifestExt.getAudioDatas(manifest, periodInfo.index);\n        },\n\n        setAudioTrack: function(audioTrack) {\n            if (fragmentInfoAudioController) {\n                fragmentInfoAudioController.stop();\n            }\n            audioTrackIndex = selectTrack.call(this, audioController, audioTrack, audioTrackIndex);\n        },\n\n        getSelectedAudioTrack: function() {\n            if (audioController) {\n                return this.manifestExt.getDataForIndex(audioTrackIndex, manifest, periodInfo.index);\n            }\n            return undefined;\n        },\n\n        getSubtitleTracks: function() {\n            return this.manifestExt.getTextDatas(manifest, periodInfo.index);\n        },\n\n        setSubtitleTrack: function(subtitleTrack) {\n            if (fragmentInfoTextController) {\n                fragmentInfoTextController.stop();\n            }\n            textTrackIndex = selectTrack.call(this, textController, subtitleTrack, textTrackIndex);\n        },\n\n        getSelectedSubtitleTrack: function() {\n            if (textController && subtitlesEnabled) {\n                return this.manifestExt.getDataForIndex(textTrackIndex, manifest, periodInfo.index);\n            }\n            return undefined;\n        },\n\n        initProtection: function(protectionCtrl) {\n            protectionController = protectionCtrl;\n            if (protectionController) {\n                protectionController.subscribe(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR, this);\n            }\n        },\n\n        getVideoModel: function() {\n            return this.videoModel;\n        },\n\n        getManifestExt: function() {\n            var self = this;\n            return self.manifestExt;\n        },\n\n        setAutoPlay: function(value) {\n            autoPlay = value;\n        },\n\n        setDefaultAudioLang: function(language) {\n            defaultAudioLang = language;\n        },\n\n        setDefaultSubtitleLang: function(language) {\n            defaultSubtitleLang = language;\n        },\n\n        getAutoPlay: function() {\n            return autoPlay;\n        },\n\n        reset: function() {\n            var deferred = Q.defer(),\n                self = this;\n\n            this.debug.info(\"[Stream] Reset\");\n\n            stopBuffering.call(this);\n\n            stopFragmentInfoControllers.call(this);\n\n            pause.call(this);\n\n            // Trick mode seeking timeout\n            clearTimeout(tmSeekTimeout);\n\n            // Stop reload timeout\n            clearTimeout(reloadTimeout);\n\n            //if player is in trick mode, restore mute state.\n            if (tmSpeed !== 1) {\n                this.videoModel.setMute(muteState);\n            }\n\n            //document.removeEventListener(\"visibilityChange\");\n\n            this.videoModel.unlisten(\"play\", playListener);\n            this.videoModel.unlisten(\"pause\", pauseListener);\n            this.videoModel.unlisten(\"error\", errorListener);\n            this.videoModel.unlisten(\"seeking\", seekingListener);\n            this.videoModel.unlisten(\"seeked\", seekedListener);\n            this.videoModel.unlisten(\"waiting\", waitingListener);\n            this.videoModel.unlisten(\"timeupdate\", timeupdateListener);\n            this.videoModel.unlisten(\"durationchange\", durationchangeListener);\n            this.videoModel.unlisten(\"progress\", progressListener);\n            this.videoModel.unlisten(\"ratechange\", ratechangeListener);\n            this.videoModel.unlisten(\"loadedmetadata\", loadedListener);\n            this.videoModel.unlisten(\"ended\", endedListener);\n            this.videoModel.unlisten(\"canplay\", canplayListener);\n            this.videoModel.unlisten(\"playing\", playingListener);\n            this.videoModel.unlisten(\"loadstart\", loadstartListener);\n\n            this.system.unmapHandler(\"streamsComposed\", undefined, streamsComposed);\n\n            this.system.unmapHandler(\"bufferUpdated\");\n            this.system.unmapHandler(\"startTimeFound\");\n            this.system.unmapHandler(\"segmentLoadingFailed\");\n            this.system.unmapHandler(\"bufferingCompleted\");\n            this.system.unmapHandler(\"sourceDurationChanged\");\n            \n            tearDownMediaSource.call(this).then(\n                function() {\n                    if (protectionController) {\n                        protectionController.unsubscribe(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR, self);\n                    }\n\n                    protectionController = undefined;\n                    self.fragmentController = undefined;\n\n                    deferred.resolve();\n                });\n\n            return deferred.promise;\n        },\n\n        getDuration: function() {\n            return periodInfo.duration;\n        },\n\n        getStartTime: function() {\n            return periodInfo.start;\n        },\n\n        getPeriodIndex: function() {\n            return periodInfo.index;\n        },\n\n        getId: function() {\n            return periodInfo.id;\n        },\n\n        getPeriodInfo: function() {\n            return periodInfo;\n        },\n\n        getMinbufferTime: function() {\n            if (!videoController) {\n                return MediaPlayer.dependencies.BufferExtensions.DEFAULT_MIN_BUFFER_TIME;\n            }\n            return videoController.getMinbufferTime();\n        },\n\n        getLiveDelay: function() {\n            if (!videoController) {\n                return MediaPlayer.dependencies.BufferExtensions.DEFAULT_LIVE_DELAY;\n            }\n            return videoController.getLiveDelay();\n        },\n\n        startEventController: function() {\n            eventController.start();\n        },\n\n        resetEventController: function() {\n            eventController.reset();\n        },\n\n        enableSubtitles: function(enabled) {\n            var track;\n\n            if (enabled !== subtitlesEnabled) {\n                subtitlesEnabled = enabled;\n                track = this.textTrackExtensions.getCurrentTextTrack(this.videoModel.getElement());\n                this.textTrackExtensions.cleanSubtitles();\n\n                if (textController) {\n                    if (enabled) {\n                        if (manifest.name === 'MSS' && (this.manifestExt.getIsDynamic(manifest)  || this.manifestExt.getIsStartOver(manifest))) {\n                            // In case of MSS live streams, refresh manifest before activating subtitles\n                            this.system.mapHandler(\"streamsComposed\", undefined, streamsComposed.bind(this), true);\n                            this.system.notify(\"manifestUpdate\");\n                        } else {\n                            streamsComposed.call(this);\n                        }\n                        // show subtitle here => useful for full TTML file\n                        if (track && track.kind !== 'metadata' && track.mode !== 'showing') {\n                            track.mode = \"showing\";\n                        }else if (track) {\n                            track.mode = \"hidden\";\n                        }\n                    } else {\n                        if (fragmentInfoTextController) {\n                            fragmentInfoTextController.stop();\n                        }\n                        // hide subtitle here\n                        if (track) {\n                            track.mode = \"disabled\";\n                        }\n                        textController.stop();\n                    }\n                }\n            }\n        },\n\n        setTrickModeSpeed: function(speed) {\n            var funcs = [],\n                self = this,\n                enableTrickMode = (speed !== 1) ? true : false,\n                currentVideoTime,\n                seekValue,\n                restoreMute = function() {\n                    if (self.videoModel.getCurrentTime() > (currentVideoTime + 1)) {\n                        self.videoModel.unlisten(\"timeupdate\", restoreMute);\n                        self.debug.info(\"[Stream] Set mute: \" + muteState + \", the mute state before using trick mode.\");\n                        self.videoModel.setMute(muteState);\n                    }\n                };\n\n            if (speed === tmSpeed) {\n                return;\n            }\n\n            if (!videoController) {\n                return;\n            }\n\n            self.debug.info(\"[Stream] Trick mode: speed = \" + speed);\n\n            if (enableTrickMode && tmState === \"Stopped\") {\n                //unlisten pause event to have correct metrics\n                this.videoModel.unlisten(\"pause\", pauseListener);\n                self.debug.info(\"[Stream] Set mute: true\");\n                muteState = self.videoModel.getMute();\n                if (!muteState) {\n                    self.videoModel.setMute(true);\n                }\n                self.videoModel.pause();\n            } else if (!enableTrickMode) {\n                //stop trick mode, add a trick mode metric\n                self.metricsModel.addPlayList('video', new Date().getTime(), tmVideoStartTime, 'trickMode', tmSpeed);\n                tmSpeed = 1;\n                clearTimeout(tmSeekTimeout);\n                stopBuffering.call(self);\n            }\n\n            funcs.push(videoController.setTrickMode(enableTrickMode, speed > 1));\n            if (audioController) {\n                funcs.push(audioController.setTrickMode(enableTrickMode, speed > 1));\n            }\n\n            Q.all(funcs).then(function() {\n                tmPreviousSpeed = tmSpeed;\n                tmSpeed = speed;\n                currentVideoTime = self.videoModel.getCurrentTime();\n\n                if (!enableTrickMode) {\n                    //listen pause event to have correct metrics\n                    self.videoModel.listen(\"pause\", pauseListener);\n                    self.debug.info(\"[Stream] Trick mode: Stopped, current time = \" + currentVideoTime);\n                    tmState = \"Stopped\";\n                    self.videoModel.listen(\"timeupdate\", restoreMute);\n                    currentVideoTime = tmEndDetected ? self.getStartTime() : currentVideoTime;\n                    seek.call(self, currentVideoTime, true);\n                } else {\n                    if (tmState === \"Running\") {\n                        //trick mode speed has changed, add a trick mode metric for the previous speed\n                        self.metricsModel.addPlayList('video', new Date().getTime(), tmVideoStartTime, 'trickMode', tmPreviousSpeed);\n                        tmState = \"Changed\";\n                    } else if (tmState === \"Stopped\") {\n                        tmEndDetected = false;\n                        tmState = \"Running\";\n                        tmSeekStep = tmMinSeekStep = videoController.getSegmentDuration();\n                        tmStartTime = tmSeekTime = (new Date().getTime()) / 1000;\n                        tmVideoStartTime = currentVideoTime;\n                        self.debug.info(\"[Stream] Trick mode (x\" + tmSpeed + \"): videoTime = \" + tmVideoStartTime);\n                        seekValue = currentVideoTime + (tmSeekStep * Math.sign(tmSpeed));\n                        seekValue = Math.round((seekValue - (seekValue % tmMinSeekStep)) * 1000) / 1000;\n                        self.debug.info(\"[Stream] Trick mode (x\" + tmSpeed + \"): seek step = \" + tmSeekStep);\n                        tmSeekValue = seekValue;\n                        seek.call(self, seekValue);\n                    }\n                }\n            });\n        },\n\n        getTrickModeSpeed: function() {\n            return tmSpeed;\n        },\n\n        updateData: updateData,\n        play: play,\n        seek: seek,\n        pause: pause\n    };\n};\n\nMediaPlayer.dependencies.Stream.prototype = {\n    constructor: MediaPlayer.dependencies.Stream\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.StreamController = function() {\n    \"use strict\";\n\n    /*\n     * StreamController aggregates all streams defined as Period sections in the manifest file\n     * and implements corresponding logic to switch between them.\n     */\n\n    var source,\n        running = false,\n        streams = [],\n        activeStream,\n        protectionController,\n        ownProtectionController = false,\n        //TODO set correct value for threshold\n        STREAM_BUFFER_END_THRESHOLD = 6,\n        STREAM_END_THRESHOLD = 0.2,\n        autoPlay = true,\n        isPeriodSwitchingInProgress = false,\n        timeupdateListener,\n        seekingListener,\n        progressListener,\n        pauseListener,\n        playListener,\n        protectionData,\n        defaultAudioLang = 'und',\n        defaultSubtitleLang = 'und',\n        subtitlesEnabled = false,\n        reloadStream = false,\n        deferredLoading = null,\n\n        isSafari = (fingerprint_browser().name === \"Safari\"),\n\n        /*\n         * Replaces the currently displayed <video> with a new data and corresponding <video> element.\n         *\n         * @param fromVideoModel Currently used video data\n         * @param toVideoModel New video data to be displayed\n         *\n         * TODO - move method to appropriate place - VideoModelExtensions??\n         */\n        switchVideoModel = function(fromVideoModel, toVideoModel) {\n            var activeVideoElement = fromVideoModel.getElement(),\n                newVideoElement = toVideoModel.getElement();\n\n            if (!newVideoElement.parentNode) {\n                activeVideoElement.parentNode.insertBefore(newVideoElement, activeVideoElement);\n            }\n\n            // We use width property to hide/show video element because when using display=\"none\"/\"block\" playback\n            // sometimes stops after switching.\n            activeVideoElement.style.width = \"0px\";\n            newVideoElement.style.width = \"100%\";\n\n            copyVideoProperties(activeVideoElement, newVideoElement);\n            detachVideoEvents.call(this, fromVideoModel);\n            attachVideoEvents.call(this, toVideoModel);\n\n            return true;\n        },\n\n        attachVideoEvents = function(videoModel) {\n            videoModel.listen(\"seeking\", seekingListener);\n            videoModel.listen(\"progress\", progressListener);\n            videoModel.listen(\"timeupdate\", timeupdateListener);\n            videoModel.listen(\"pause\", pauseListener);\n            videoModel.listen(\"play\", playListener);\n        },\n\n        detachVideoEvents = function(videoModel) {\n            videoModel.unlisten(\"seeking\", seekingListener);\n            videoModel.unlisten(\"progress\", progressListener);\n            videoModel.unlisten(\"timeupdate\", timeupdateListener);\n            videoModel.unlisten(\"pause\", pauseListener);\n            videoModel.unlisten(\"play\", playListener);\n        },\n\n        copyVideoProperties = function(fromVideoElement, toVideoElement) {\n            [\"controls\", \"loop\", \"muted\", \"playbackRate\", \"volume\"].forEach(function(prop) {\n                toVideoElement[prop] = fromVideoElement[prop];\n            });\n        },\n\n        /*\n         * Called when more data is buffered.\n         * Used to determine the time current stream is almost buffered and we can start buffering of the next stream.\n         * TODO move to ???Extensions class\n         */\n        onProgress = function() {\n\n            var ranges = activeStream.getVideoModel().getElement().buffered;\n\n            // nothing is buffered\n            if (!ranges.length) {\n                return;\n            }\n\n            var lastRange = ranges.length - 1,\n                bufferEndTime = ranges.end(lastRange),\n                remainingBufferDuration = activeStream.getStartTime() + activeStream.getDuration() - bufferEndTime;\n\n            if (remainingBufferDuration < STREAM_BUFFER_END_THRESHOLD) {\n                activeStream.getVideoModel().unlisten(\"progress\", progressListener);\n                onStreamBufferingEnd();\n            }\n        },\n\n        switchStream = function(from, to, seekTo) {\n\n            if (isPeriodSwitchingInProgress || !from || !to || from === to) {\n                return;\n            }\n\n            isPeriodSwitchingInProgress = true;\n\n            from.pause();\n            activeStream = to;\n\n            switchVideoModel.call(this, from.getVideoModel(), to.getVideoModel());\n\n            if (seekTo) {\n                this.seek(from.getVideoModel().getCurrentTime());\n            } else {\n                this.seek(to.getStartTime());\n            }\n\n            this.play();\n            from.resetEventController();\n            activeStream.startEventController();\n            isPeriodSwitchingInProgress = false;\n        },\n\n\n        /*\n         * Called when current playback positon is changed.\n         * Used to determine the time current stream is finished and we should switch to the next stream.\n         * TODO move to ???Extensions class\n         */\n        onTimeupdate = function() {\n\n            if (!activeStream) {\n                return;\n            }\n\n            var self = this,\n                time = new Date(),\n                streamEndTime = activeStream.getStartTime() + activeStream.getDuration(),\n                videoElement = activeStream.getVideoModel().getElement(),\n                currentTime = videoElement.currentTime,\n                playBackQuality = self.videoExt.getPlaybackQuality(videoElement);\n\n            // playBackQuality may be null\n            if (playBackQuality)\n                self.metricsModel.addPlaybackQuality(\"video\", time, playBackQuality, currentTime);\n            self.metricsModel.addVideoResolution(\"video\", time, videoElement.videoWidth, videoElement.videoHeight, currentTime);\n\n            if (!getNextStream()) {\n                return;\n            }\n\n            // Sometimes after seeking timeUpdateHandler is called before seekingHandler and a new period starts\n            // from beginning instead of from a chosen position. So we do nothing if the player is in the seeking state\n            if (activeStream.getVideoModel().getElement().seeking) {\n                return;\n            }\n\n            // check if stream end is reached\n            if (streamEndTime - currentTime < STREAM_END_THRESHOLD) {\n                switchStream.call(this, activeStream, getNextStream());\n            }\n        },\n\n        /*\n         * Called when Seeking event is occured.\n         * TODO move to ???Extensions class\n         */\n        onSeeking = function() {\n            var seekingTime = activeStream.getVideoModel().getCurrentTime(),\n                seekingStream = getStreamForTime(seekingTime);\n\n            if (seekingStream && seekingStream !== activeStream) {\n                switchStream.call(this, activeStream, seekingStream, seekingTime);\n            }\n        },\n\n        onPause = function() {\n            this.manifestUpdater.stop();\n        },\n\n        onPlay = function() {\n            this.manifestUpdater.start();\n        },\n\n        /*\n         * Handles the current stream buffering end moment to start the next stream buffering\n         */\n        onStreamBufferingEnd = function() {\n            var nextStream = getNextStream();\n            if (nextStream) {\n                nextStream.seek(nextStream.getStartTime());\n            }\n        },\n\n        getNextStream = function() {\n            var nextIndex = activeStream.getPeriodIndex() + 1;\n            return (nextIndex < streams.length) ? streams[nextIndex] : null;\n        },\n\n        getStreamForTime = function(time) {\n            var duration = 0,\n                stream = null,\n                ln = streams.length,\n                i = 0;\n\n            if (ln > 0) {\n                duration += streams[0].getStartTime();\n            }\n\n            for (i = 0; i < ln; i += 1) {\n                stream = streams[i];\n                duration += stream.getDuration();\n\n                if (time < duration) {\n                    return stream;\n                }\n            }\n        },\n\n        //  TODO move to ???Extensions class\n        createVideoModel = function() {\n            var model = this.system.getObject(\"videoModel\"),\n                video = document.createElement(\"video\");\n            model.setElement(video);\n            return model;\n        },\n\n        removeVideoElement = function(element) {\n            if (element.parentNode) {\n                element.parentNode.removeChild(element);\n            }\n        },\n\n        composeStreams = function() {\n            var manifest = this.manifestModel.getValue(),\n                metrics = this.metricsModel.getMetricsFor(\"stream\"),\n                manifestUpdateInfo = this.metricsExt.getCurrentManifestUpdate(metrics),\n                periodInfo,\n                periods,\n                pLen,\n                sLen,\n                pIdx,\n                sIdx,\n                period,\n                mpd,\n                stream;\n\n            if (!manifest) {\n                return false;\n            }\n\n            // Specific use case of \"start-over\" or \"session DVR\" live streams\n            // We set this information in the manifest, to be used by MssFragmentController for DVR window updating\n            if (source.startOver) {\n                manifest.startOver = true;\n            } \n\n            this.debug.info(\"[StreamController] composeStreams\");\n\n            if (this.capabilities.supportsEncryptedMedia()) {\n                if (!protectionController) {\n                    protectionController = this.system.getObject(\"protectionController\");\n                    /*this.eventBus.dispatchEvent({\n                        type: MediaPlayer.events.PROTECTION_CREATED,\n                        data: {\n                            controller: protectionController,\n                            manifest: manifest\n                        }\n                    });*/\n                    ownProtectionController = true;\n                }\n                protectionController.setMediaElement(this.videoModel.getElement());\n                if (protectionData) {\n                    protectionController.setProtectionData(protectionData);\n                }\n            }\n\n            mpd = this.manifestExt.getMpd(manifest);\n            if (activeStream) {\n                periodInfo = activeStream.getPeriodInfo();\n                mpd.isClientServerTimeSyncCompleted = periodInfo.mpd.isClientServerTimeSyncCompleted;\n                mpd.clientServerTimeShift = periodInfo.mpd.clientServerTimeShift;\n            }\n\n            periods = this.manifestExt.getRegularPeriods(manifest, mpd);\n            if (periods.length === 0) {\n                return false;\n            }\n\n            for (pIdx = 0, pLen = periods.length; pIdx < pLen; pIdx += 1) {\n                period = periods[pIdx];\n                for (sIdx = 0, sLen = streams.length; sIdx < sLen; sIdx += 1) {\n                    // If the stream already exists we just need to update the values we got from the updated manifest\n                    if (streams[sIdx].getId() === period.id) {\n                        stream = streams[sIdx];\n                        this.debug.info(\"[StreamController] update stream data\");\n                        stream.updateData(period);\n                    }\n                }\n                // If the Stream object does not exist we probably loaded the manifest the first time or it was\n                // introduced in the updated manifest, so we need to create a new Stream and perform all the initialization operations\n                if (!stream) {\n                    this.debug.info(\"[StreamController] Create stream\");\n                    stream = this.system.getObject(\"stream\");\n                    stream.setVideoModel(pIdx === 0 ? this.videoModel : createVideoModel.call(this));\n                    stream.initProtection(protectionController);\n                    stream.setAutoPlay(autoPlay);\n                    stream.setDefaultAudioLang(defaultAudioLang);\n                    stream.setDefaultSubtitleLang(defaultSubtitleLang);\n                    stream.enableSubtitles(subtitlesEnabled);\n                    stream.setInitialStartTime(source.startTime);\n                    stream.load(manifest, period);\n                    streams.push(stream);\n                }\n\n                this.metricsModel.addManifestUpdatePeriodInfo(manifestUpdateInfo, period.id, period.index, period.start, period.duration);\n                stream = null;\n            }\n\n            // If the active stream has not been set up yet, let it be the first Stream in the list\n            if (!activeStream) {\n                activeStream = streams[0];\n                attachVideoEvents.call(this, activeStream.getVideoModel());\n            }\n\n            this.metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {\n                currentTime: this.videoModel.getCurrentTime(),\n                buffered: this.videoModel.getElement().buffered,\n                presentationStartTime: periods[0].start,\n                clientTimeOffset: mpd.clientServerTimeShift\n            });\n\n            if (deferredLoading) {\n                deferredLoading.resolve();\n                deferredLoading = null;\n            }\n\n            return true;\n        },\n\n        manifestUpdate = function(reload) {\n            if (reload === true) {\n                reloadStream = true;\n            }\n            this.refreshManifest();\n        },\n\n        manifestHasUpdated = function() {\n\n            // Check if stopping\n            if (!running) {\n                if (deferredLoading) {\n                    deferredLoading.resolve();\n                    deferredLoading = null;\n                }\n                return;\n            }\n\n            this.debug.info(\"[StreamController] Manifest updated\");\n\n            var result = composeStreams.call(this);\n\n            if (result) {\n                this.system.notify(\"streamsComposed\");\n            } else {\n                this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_NO_STREAM, \"No stream/period is provided in the manifest\");\n            }\n\n            if (deferredLoading) {\n                deferredLoading.resolve();\n                deferredLoading = null;\n            }\n        },\n\n        loadNativeHlsStream = function (source) {\n            // If HLS+FP on Safari then we do use specific Stream instance\n            if (isSafari && source.protocol === 'HLS') {\n                var stream = this.system.getObject(\"hlsStream\");\n                stream.setVideoModel(this.videoModel);\n                stream.setProtectionData(protectionData);\n                stream.setAutoPlay(autoPlay);\n                stream.setDefaultAudioLang(defaultAudioLang);\n                stream.setDefaultSubtitleLang(defaultSubtitleLang);\n                stream.enableSubtitles(subtitlesEnabled);\n                streams.push(stream);\n                activeStream = stream;\n                attachVideoEvents.call(this, activeStream.getVideoModel());\n                stream.load(source.url);\n                return true;\n            }\n\n            return false;\n        };\n\n    return {\n        system: undefined,\n        videoModel: undefined,\n        parser: undefined,\n        manifestLoader: undefined,\n        manifestUpdater: undefined,\n        manifestModel: undefined,\n        manifestExt: undefined,\n        fragmentExt: undefined,\n        capabilities: undefined,\n        debug: undefined,\n        metricsModel: undefined,\n        metricsExt: undefined,\n        videoExt: undefined,\n        errHandler: undefined,\n        eventBus: undefined,\n        notify: undefined,\n        subscribe: undefined,\n        unsubscribe: undefined,\n\n        setup: function() {\n            this.system.mapHandler(\"manifestUpdate\", undefined, manifestUpdate.bind(this));\n            this.system.mapHandler(\"manifestUpdated\", undefined, manifestHasUpdated.bind(this));\n            timeupdateListener = onTimeupdate.bind(this);\n            progressListener = onProgress.bind(this);\n            seekingListener = onSeeking.bind(this);\n            pauseListener = onPause.bind(this);\n            playListener = onPlay.bind(this);\n        },\n\n        getManifestExt: function() {\n            return activeStream.getManifestExt();\n        },\n\n        setAutoPlay: function(value) {\n            autoPlay = value;\n        },\n\n        getAutoPlay: function() {\n            return autoPlay;\n        },\n\n        getVideoModel: function() {\n            return this.videoModel;\n        },\n\n        setVideoModel: function(value) {\n            this.videoModel = value;\n        },\n\n        getAudioTracks: function() {\n            if (activeStream) {\n                return activeStream.getAudioTracks();\n            }\n            return null;\n        },\n\n        getSelectedAudioTrack: function() {\n\n            if (activeStream) {\n                return activeStream.getSelectedAudioTrack();\n            }\n\n            return undefined;\n        },\n\n        setAudioTrack: function(audioTrack) {\n            if (activeStream) {\n                activeStream.setAudioTrack(audioTrack);\n            }\n        },\n\n        getSubtitleTracks: function() {\n            if (activeStream) {\n                return activeStream.getSubtitleTracks();\n            }\n            return null;\n        },\n\n        setSubtitleTrack: function(subtitleTrack) {\n            if (activeStream) {\n                activeStream.setSubtitleTrack(subtitleTrack);\n            }\n        },\n\n        getSelectedSubtitleTrack: function() {\n\n            if (activeStream) {\n                return activeStream.getSelectedSubtitleTrack();\n            }\n\n            return undefined;\n        },\n\n        getMinbufferTime: function() {\n            if (!activeStream) {\n                return MediaPlayer.dependencies.BufferExtensions.DEFAULT_MIN_BUFFER_TIME;\n            }\n            return activeStream.getMinbufferTime();\n        },\n\n        getLiveDelay: function() {\n            if (!activeStream) {\n                return MediaPlayer.dependencies.BufferExtensions.DEFAULT_LIVE_DELAY;\n            }\n            return activeStream.getLiveDelay();\n        },\n\n        load: function(newSource) {\n            var self = this;\n\n            running = true;\n\n            source = newSource;\n\n            if (source.protData) {\n                protectionData = source.protData;\n            }\n\n            if (loadNativeHlsStream.call(this, source)) {\n                return;\n            }\n\n            reloadStream = false;\n\n            deferredLoading = Q.defer();\n            self.debug.info(\"[StreamController] load url: \" + source.url);\n            self.manifestLoader.load(source.url).then(\n                function(manifest) {\n                    self.manifestModel.setValue(manifest);\n                    //ORANGE : add Metadata metric\n                    self.metricsModel.addMetaData();\n                    self.debug.info(\"[StreamController] Manifest has loaded.\");\n                    //self.debug.log(self.manifestModel.getValue());\n                    self.manifestUpdater.start();\n                },\n                function(err) {\n                    deferredLoading.resolve();\n                    deferredLoading = null;\n                    // err is undefined in the case the request has been aborted\n                    if (err) {\n                        self.errHandler.sendError(err.name, err.message, err.data);\n                    }\n                }\n            );\n        },\n\n        refreshManifest: function(url) {\n            var manifest = this.manifestModel.getValue(),\n                manifestUrl = url ? url : (manifest.hasOwnProperty(\"Location\") ? manifest.Location : manifest.mpdUrl);\n\n            this.debug.log(\"[StreamController] Refresh manifest: \" + manifestUrl);\n\n            var self = this;\n            this.manifestLoader.abort();\n            this.manifestLoader.load(manifestUrl, true).then(\n                function(manifestResult) {\n                    self.manifestModel.setValue(manifestResult);\n                    self.debug.log(\"[StreamController] Manifest has been refreshed\");\n                    reloadStream = false;\n                },\n                function(err) {\n                    // err is undefined in the case the request has been aborted\n                    if (err === undefined) {\n                        return;\n                    }\n\n                    // Url is refreshed\n                    if (url) {\n                        // Raise an error only in case we try to reload the session\n                        // to recover some segment downloading error\n                        if (reloadStream) {\n                            self.errHandler.sendError(err.name, err.message, err.data);\n                        }\n                    } else {\n                        // If internal manifest updating (for ex. track switching),\n                        // then raise a warning and ask for refreshing the url (in case it is no more valid or expired)\n                        self.errHandler.sendWarning(err.name, err.message, err.data);\n                        self.eventBus.dispatchEvent({\n                            type: \"manifestUrlUpdate\",\n                            data: {\n                                url: manifestUrl\n                            }\n                        });\n                    }\n                }\n            );\n        },\n\n        reset: function(reason) {\n            var teardownComplete = {},\n                funcs = [],\n                stream,\n                i,\n                self = this;\n\n            this.debug.info(\"[StreamController] Reset\");\n\n            if (!!activeStream) {\n                detachVideoEvents.call(this, activeStream.getVideoModel());\n            }\n\n            running = false;\n\n            self.manifestLoader.abort();\n            self.manifestUpdater.stop();\n            self.parser.reset();\n\n            teardownComplete[MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE] = function() {\n                // Complete ProtectionController teardown process\n                ownProtectionController = false;\n                protectionController = null;\n                protectionData = null;\n\n                self.manifestModel.setValue(null);\n\n                self.metricsModel.addState('video', 'stopped', self.videoModel.getCurrentTime(), reason);\n                self.metricsModel.clearAllCurrentMetrics();\n                self.notify(MediaPlayer.dependencies.StreamController.eventList.ENAME_TEARDOWN_COMPLETE);\n            };\n\n            // Wait for current loading process (manifest download and updating) to be achieved\n            Q.when(deferredLoading ? deferredLoading.promise : true).then(function () {\n\n                self.pause();\n\n                isPeriodSwitchingInProgress = false;\n\n                // Reset the streams\n                for (i = 0; i < streams.length; i += 1) {\n                    stream = streams[i];\n                    funcs.push(stream.reset());\n                    if (stream !== activeStream) {\n                        removeVideoElement(stream.getVideoModel().getElement());\n                    }\n                }\n\n                // Reset the video model (stalled states)\n                self.videoModel.reset();\n\n                Q.all(funcs).then(\n                    function() {\n                        streams = [];\n                        activeStream = null;\n\n                        // Teardown the protection system\n                        if (!protectionController) {\n                            teardownComplete[MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE]();\n                        } else if (ownProtectionController) {\n                            protectionController.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE, teardownComplete, undefined, true);\n                            protectionController.teardown();\n                        } else {\n                            protectionController.setMediaElement(null);\n                            teardownComplete[MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE]();\n                        }\n                    }\n                );\n            });\n        },\n\n        setDefaultAudioLang: function(language) {\n            defaultAudioLang = language;\n        },\n\n        setDefaultSubtitleLang: function(language) {\n            defaultSubtitleLang = language;\n        },\n\n        enableSubtitles: function(enabled) {\n            subtitlesEnabled = enabled;\n            if (activeStream) {\n                activeStream.enableSubtitles(enabled);\n            }\n        },\n\n        setTrickModeSpeed: function(speed) {\n            if (activeStream) {\n                activeStream.setTrickModeSpeed(speed);\n            }\n        },\n\n        getTrickModeSpeed: function() {\n            if (activeStream) {\n                return activeStream.getTrickModeSpeed();\n            }\n            return 0;\n        },\n\n        play: function() {\n            activeStream.play();\n        },\n\n        pause: function() {\n            if (activeStream) {\n                activeStream.pause();\n            }\n        },\n\n        seek: function(time, autoplay) {\n            if (activeStream) {\n                activeStream.seek(time, autoplay);\n            }\n        },\n    };\n};\n\nMediaPlayer.dependencies.StreamController.prototype = {\n    constructor: MediaPlayer.dependencies.StreamController\n};\n\nMediaPlayer.dependencies.StreamController.eventList = {\n    ENAME_STREAMS_COMPOSED: \"streamsComposed\",\n    ENAME_TEARDOWN_COMPLETE: \"streamTeardownComplete\"\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.TokenAuthentication = function () {\n    \"use strict\";\n    var tokenAuthentication = {type:MediaPlayer.utils.TokenAuthentication.TYPE_QUERY};\n    return {\n        debug:undefined,\n        getTokenAuthentication:function () {\n\n            return tokenAuthentication;\n\n        },\n        setTokenAuthentication:function (object) {\n\n            tokenAuthentication = object;\n\n        },\n        checkRequestHeaderForToken:function(request) {\n\n            if (tokenAuthentication.name !== undefined &&\n                request.getResponseHeader(tokenAuthentication.name) !== null) {\n\n                tokenAuthentication.token = request.getResponseHeader(tokenAuthentication.name);\n                this.debug.log(tokenAuthentication.name+\" received: \" + tokenAuthentication.token);\n\n           }\n        },\n        addTokenAsQueryArg:function(url) {\n\n            if(tokenAuthentication.name !== undefined && tokenAuthentication.token !== undefined) {\n                if (tokenAuthentication.type === MediaPlayer.utils.TokenAuthentication.TYPE_QUERY) {\n\n                    var modifier = url.indexOf('?') === -1 ? '?' : '&';\n                    url += modifier + tokenAuthentication.name +\"=\" + tokenAuthentication.token;\n                    this.debug.log(tokenAuthentication.name+\" is being appended on the request url with a value of : \" + tokenAuthentication.token);\n\n                }\n            }\n\n            return url;\n        },\n        setTokenInRequestHeader:function(request) {\n\n            if (tokenAuthentication.type === MediaPlayer.utils.TokenAuthentication.TYPE_HEADER) {\n\n                request.setRequestHeader(tokenAuthentication.name, tokenAuthentication.token);\n                this.debug.log(tokenAuthentication.name+\" is being set in the request header with a value of : \" + tokenAuthentication.token);\n\n            }\n\n            return request;\n        }\n    };\n};\n\nMediaPlayer.utils.TokenAuthentication.TYPE_QUERY = \"query\";\nMediaPlayer.utils.TokenAuthentication.TYPE_HEADER = \"header\";","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.models.URIQueryAndFragmentModel = function () {\n    \"use strict\";\n\n    var URIFragmentDataVO = new MediaPlayer.vo.URIFragmentData(),\n        URIQueryData = [],\n\n        reset = function () {\n            URIFragmentDataVO = new MediaPlayer.vo.URIFragmentData();\n            URIQueryData = [];\n        },\n\n        parseURI = function (uri) {\n\n            var URIFragmentData = [],\n                testQuery = new RegExp(/[?]/),\n                testFragment = new RegExp(/[#]/),\n                isQuery = testQuery.test(uri),\n                isFragment = testFragment.test(uri),\n                mappedArr;\n\n            function reduceArray(previousValue, currentValue, index, array) {\n                var arr =  array[0].split(/[=]/);\n                array.push({key:arr[0], value:arr[1]});\n                array.shift();\n                return array;\n            }\n\n            function mapArray(currentValue, index, array) {\n                if (index > 0)\n                {\n                    if (isQuery && URIQueryData.length === 0) {\n                        URIQueryData = array[index].split(/[&]/);\n                    } else if (isFragment) {\n                        URIFragmentData = array[index].split(/[&]/);\n                    }\n                }\n\n                return array;\n            }\n\n            mappedArr = uri.split(/[?#]/).map(mapArray);\n\n            if (URIQueryData.length > 0) {\n                URIQueryData = URIQueryData.reduce(reduceArray, null);\n            }\n\n            if (URIFragmentData.length > 0) {\n                URIFragmentData = URIFragmentData.reduce(reduceArray, null);\n                URIFragmentData.forEach(function (object) {\n                    URIFragmentDataVO[object.key] = object.value;\n                });\n            }\n\n            return uri;\n        };\n\n    return {\n        parseURI:parseURI,\n        reset:reset,\n        //ORANGE: fix bug on not updating URIFragmentDataVO \n        getURIFragmentData: function() {\n            return URIFragmentDataVO;\n        },\n        getURIQueryData:URIQueryData\n    };\n};\n\nMediaPlayer.models.URIQueryAndFragmentModel.prototype = {\n    constructor: MediaPlayer.models.URIQueryAndFragmentModel\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.models.VideoModel = function () {\n    \"use strict\";\n\n    var element,\n        stalledStreams = [],\n        TTMLRenderingDiv = null,\n\n        addStalledStream = function (type) {    \n            if (type === null || stalledStreams.indexOf(type) !== -1) {\n                return;\n            }\n    \n            this.debug.info(\"<video> # stall stream \" + type);\n            stalledStreams.push(type);\n            // If at least one stream is stalled, then halt playback until nothing is stalled\n            if (stalledStreams.length === 1) {\n                this.setPlaybackRate(0);\n            }\n        },\n\n        removeStalledStream = function (type) {\n            var index = stalledStreams.indexOf(type);\n    \n            if (type === null) {\n                return;\n            }\n            this.debug.info(\"<video> # unstall stream \" + type);\n            if (index !== -1) {\n                stalledStreams.splice(index, 1);\n            }\n            // If no stream is stalled then resume playback.\n            if (this.isStalled() === false && element.playbackRate === 0) {\n                this.setPlaybackRate(1);\n            }\n        };\n\n    return {\n        system: undefined,\n        debug: undefined,\n\n        setup: function () {\n            stalledStreams = [];\n        },\n\n        reset: function () {\n            stalledStreams = [];\n        },\n\n        play: function () {\n            this.debug.info(\"<video> # play()\");\n            element.play();\n        },\n\n        pause: function () {\n            this.debug.info(\"<video> # pause()\");\n            element.pause();\n        },\n\n        isPaused: function () {\n            return element.paused;\n        },\n\n        isSeeking: function () {\n            return element.seeking;\n        },\n\n        getDuration: function () {\n            return element.duration;\n        },\n\n        getPlaybackRate: function () {\n            return element.playbackRate;\n        },\n\n        setPlaybackRate: function (value) {\n            this.debug.info(\"<video> # playbackRate = \" + value);\n            element.playbackRate = value;\n        },\n\n        getMute: function () {\n            return element.muted;\n        },\n\n        setMute: function (value) {\n            element.muted = value;\n        },\n\n        getVolume: function () {\n            return element.volume;\n        },\n\n        setVolume: function (value) {\n            element.volume = value;\n        },\n\n        getCurrentTime: function () {\n            return element.currentTime;\n        },\n\n        setCurrentTime: function (currentTime) {\n            this.debug.info(\"<video> # currentTime = \" + currentTime);\n            element.currentTime = currentTime;\n        },\n\n        listen: function (type, callback) {\n            element.addEventListener(type, callback, false);\n        },\n\n        unlisten: function (type, callback) {\n            element.removeEventListener(type, callback, false);\n        },\n\n        listenOnParent: function (type, callback) {\n            element.parentElement.addEventListener(type, callback, false);\n        },\n\n        unlistenOnParent: function (type, callback) {\n            element.parentElement.removeEventListener(type, callback, false);\n        },\n\n        getElement: function () {\n            return element;\n        },\n\n        setElement: function (value) {\n            element = value;\n        },\n\n        setSource: function (source) {\n            if (source) {\n                this.debug.info(\"<video> # set source\");\n                element.src = source;\n            } else {\n                this.debug.info(\"<video> # reset source\");\n                element.removeAttribute('src');\n                element.load();\n            }\n        },\n\n        isStalled: function () {\n            return (stalledStreams.length > 0);\n        },\n\n        stallStream: function (type, stalled) {\n            if (stalled) {\n                addStalledStream.call(this, type);\n            } else {\n                removeStalledStream.call(this, type);\n            }\n        },\n        \n        getTTMLRenderingDiv: function() {\n            return TTMLRenderingDiv;\n        },\n\n        setTTMLRenderingDiv: function(div) {\n            TTMLRenderingDiv = div;\n            // The styling will allow the captions to match the video window size and position.\n            TTMLRenderingDiv.style.position = 'absolute';\n            TTMLRenderingDiv.style.display = 'flex';\n            TTMLRenderingDiv.style.overflow = 'hidden';\n            TTMLRenderingDiv.style.pointerEvents = 'none';\n            TTMLRenderingDiv.style.top = 0;\n            TTMLRenderingDiv.style.left = 0;\n        }\n    };\n};\n\nMediaPlayer.models.VideoModel.prototype = {\n    constructor: MediaPlayer.models.VideoModel\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.VideoModelExtensions = function () {\n    \"use strict\";\n\n    return {\n        getPlaybackQuality: function (videoElement) {\n            var hasWebKit = (\"webkitDroppedFrameCount\" in videoElement),\n                hasQuality = (\"getVideoPlaybackQuality\" in videoElement),\n                result = null;\n\n            if (hasQuality) {\n                result = videoElement.getVideoPlaybackQuality();\n            }\n            // ORANGE : add totalVideoFrames\n            else if (hasWebKit) {\n                result = {droppedVideoFrames: videoElement.webkitDroppedFrameCount, creationTime: new Date(), totalVideoFrames: videoElement.webkitDecodedFrameCount};\n            }\n\n            return result;\n        }\n    };\n};\n\nMediaPlayer.dependencies.VideoModelExtensions.prototype = {\n    constructor: MediaPlayer.dependencies.VideoModelExtensions\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.XHRLoader = function() {\n    \"use strict\";\n\n    var _xhr = null,\n        _url = null,\n        _responseType = null,\n        _range = null,\n        _onprogress = null,\n        _retryAttempts = 0,\n        _retryInterval = 0,\n        _retryCount = 0,\n        _retryTimeout = null,\n        _deferred = null,\n\n        _abort = function() {\n\n            if (_xhr !== null && _xhr.readyState > 0 && _xhr.readyState < 4) {\n                _xhr.abort();\n            } else if (_retryTimeout) {\n                clearTimeout(_retryTimeout);\n                _retryTimeout = null;\n                _deferred.reject();\n            }\n        },\n\n        _load = function() {\n            var needFailureReport = true,\n\n                onprogress = function(event) {\n                    if (_onprogress) {\n                        _onprogress(_xhr, event);\n                    }\n                },\n\n                onabort = function() {\n                    _xhr.aborted = true;\n                },\n\n                onload = function() {\n                    if (_xhr.status < 200 || _xhr.status > 299) {\n                        return;\n                    }\n\n                    if (_xhr.status === 200 && _xhr.readyState === 4) {\n                        // The request succeeded\n                        // => return the response the responseURL in case of URL redirection\n                        needFailureReport = false;\n\n                        // Add endDate attribute to store request end time\n                        _xhr.endDate = new Date();\n\n                        _deferred.resolve(_xhr);\n                    }\n                },\n\n                onloadend = function() {\n\n                    if (!needFailureReport) {\n                        return;\n                    }\n                    needFailureReport = false;\n\n                    // Add endDate attribute to store request end time\n                    _xhr.endDate = new Date();\n\n                    // The request failed\n                    _retryCount++;\n                    if (!_xhr.aborted && _retryAttempts > 0 && _retryCount <= _retryAttempts) {\n                        // Retry the request\n                        _retryTimeout = setTimeout(function() {\n                            _load();\n                        }, _retryInterval);\n                    } else {\n                        _deferred.reject(_xhr);\n                    }\n                };\n\n            try {\n                _xhr = new XMLHttpRequest();\n                _xhr.open(\"GET\", _url, true);\n\n                if (_responseType) {\n                    _xhr.responseType = _responseType;\n                }\n\n                if (_range) {\n                    _xhr.setRequestHeader('Range', 'bytes=' + _range);\n                }\n\n                _xhr.onprogress = onprogress;\n                _xhr.onabort = onabort;\n                _xhr.onload = onload;\n                _xhr.onloadend = onloadend;\n                _xhr.onerror = onloadend;\n\n                // Add startDate attribute to store request start time\n                _xhr.startDate = new Date();\n\n                _xhr.send();\n            } catch (e) {\n                _xhr.onerror();\n            }\n        };\n\n    return {\n\n        initialize: function(responseType, retryAttempts, retryInterval, onprogress) {\n            _responseType = responseType;\n            _retryAttempts = retryAttempts;\n            _retryInterval = retryInterval;\n            _onprogress = onprogress;\n        },\n\n        load: function(url, range) {\n            _url = url;\n            _range = range;\n            _retryCount = 0;\n            _deferred = Q.defer();\n            _load();\n            return _deferred.promise;\n        },\n\n        abort: _abort\n    };\n};\n\nMediaPlayer.dependencies.XHRLoader.prototype = {\n    constructor: MediaPlayer.dependencies.XHRLoader\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Akamai Technologies nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.TextController = function() {\n\n    var LOADING = \"LOADING\",\n        //LOADED = \"LOADED\",\n        READY = \"READY\",\n        initialized = false,\n        periodInfo = null,\n        mediaSource,\n        data,\n        buffer,\n        availableRepresentations,\n        state = READY,\n        setState = function(value) {\n            this.debug.log(\"TextController setState to:\" + value);\n            state = value;\n        },\n        startPlayback = function() {\n\n            if (!initialized || state !== READY) {\n                return;\n            }\n\n            var self = this;\n            // TODO Multiple tracks can be handled here by passing in quality level.\n            self.indexHandler.getInitRequest(availableRepresentations[0]).then(\n                function(request) {\n                    //self.debug.log(\"Loading text track initialization: \" + request.url);\n                    //self.debug.log(request);\n                    self.fragmentLoader.load(request).then(onBytesLoaded.bind(self, request), onBytesError.bind(self, request));\n                    setState.call(self, LOADING);\n                }\n            );\n        },\n        doStart = function() {\n            startPlayback.call(this);\n        },\n\n        updateRepresentations = function(data, periodInfo) {\n            var adaptations,\n                manifest = this.manifestModel.getValue(),\n                idx;\n\n            idx = this.manifestExt.getDataIndex(data, manifest, periodInfo.index);\n\n            adaptations = this.manifestExt.getAdaptationsForPeriod(manifest, periodInfo);\n            return this.manifestExt.getRepresentationsForAdaptation(manifest, adaptations[idx]);\n        },\n\n        onBytesLoaded = function(request, response) {\n            var self = this;\n            //self.debug.log(\" Text track Bytes finished loading: \" + request.url);\n            // ORANGE: add request parameter to retrieve startTime and timescale in fragmentController\n            self.fragmentController.process(response.data, request).then(\n                function(data) {\n                    if (data !== null) {\n                        //self.debug.log(\"Push text track bytes: \" + data.byteLength);\n                        self.sourceBufferExt.append(buffer, data, self.videoModel);\n                    }\n                }\n            );\n        },\n\n        onBytesError = function( /*request*/ ) {};\n\n    return {\n        videoModel: undefined,\n        fragmentLoader: undefined,\n        fragmentController: undefined,\n        indexHandler: undefined,\n        sourceBufferExt: undefined,\n        manifestModel: undefined,\n        manifestExt: undefined,\n        debug: undefined,\n        initialize: function(periodInfo, data, buffer, videoModel, source) {\n            var self = this;\n\n            self.setVideoModel(videoModel);\n            self.setBuffer(buffer);\n            self.setMediaSource(source);\n\n            self.updateData(data, periodInfo);\n\n            initialized = true;\n            \n            startPlayback.call(self);\n        },\n\n        setPeriodInfo: function(value) {\n            periodInfo = value;\n        },\n\n        getPeriodIndex: function() {\n            return periodInfo.index;\n        },\n\n        getVideoModel: function() {\n            return this.videoModel;\n        },\n\n        setVideoModel: function(value) {\n            this.videoModel = value;\n        },\n\n        getData: function() {\n            return data;\n        },\n\n        setData: function(value) {\n            data = value;\n        },\n\n        getBuffer: function() {\n            return buffer;\n        },\n\n        setBuffer: function(value) {\n            buffer = value;\n        },\n\n        setMediaSource: function(value) {\n            mediaSource = value;\n        },\n\n        updateData: function(dataValue, periodInfoValue) {\n            data = dataValue;\n            periodInfo = periodInfoValue;\n\n            availableRepresentations = updateRepresentations.call(this, data, periodInfo);\n            setState.call(this, READY);\n            startPlayback.call(this);\n        },\n\n        reset: function(errored) {\n            if (!errored) {\n                this.sourceBufferExt.abort(mediaSource, buffer);\n                this.sourceBufferExt.removeSourceBuffer(mediaSource, buffer);\n            }\n        },\n\n        start: doStart\n    };\n};\n\nMediaPlayer.dependencies.TextController.prototype = {\n    constructor: MediaPlayer.dependencies.TextController\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Akamai Technologies nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.dependencies.TextSourceBuffer = function () {\n\n    var video,\n        data,\n        mimeType,\n\n        decodeUtf8 = function(arrayBuffer) {\n            var result = \"\",\n                i = 0,\n                c = 0,\n                c2 = 0,\n                c3 = 0,\n                data = new Uint8Array(arrayBuffer);\n\n            // If we have a BOM skip it\n            if (data.length >= 3 && data[0] === 0xef && data[1] === 0xbb && data[2] === 0xbf) {\n                i = 3;\n            }\n\n            while (i < data.length) {\n                c = data[i];\n\n                if (c < 128) {\n                    result += String.fromCharCode(c);\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    if (i + 1 >= data.length) {\n                        throw \"UTF-8 Decode failed. Two byte character was truncated.\";\n                    }\n                    c2 = data[i + 1];\n                    result += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                    i += 2;\n                } else {\n                    if (i + 2 >= data.length) {\n                        throw \"UTF-8 Decode failed. Multi byte character was truncated.\";\n                    }\n                    c2 = data[i + 1];\n                    c3 = data[i + 2];\n                    result += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                    i += 3;\n                }\n            }\n            return result;\n        },\n\n        buffered = {\n            length: 0,\n            ranges: [],\n\n            start: function(index) {\n                return this.ranges[index].start;\n            },\n\n            end: function(index) {\n                return this.ranges[index].end;\n            },\n\n            addRange: function(start, end) {\n                var i = 0,\n                    rangesUpdated = false,\n                    tolerance = 0.01;\n\n                //detect discontinuity in ranges.\n                for (i = 0; i < this.ranges.length; i++) {\n                    if (this.ranges[i].end <= (start + tolerance) && this.ranges[i].end >= (start - tolerance)) {\n                        rangesUpdated = true;\n                        this.ranges[i].end = end;\n                    }\n\n                    if (this.ranges[i].start <= (end + tolerance) && this.ranges[i].start >= (end - tolerance)) {\n                        rangesUpdated = true;\n                        this.ranges[i].start = start;\n                    }\n                }\n\n                if (!rangesUpdated) {\n                    this.ranges.push({\n                        start: start,\n                        end: end\n                    });\n                    this.length = this.length + 1;\n\n                    // TimeRanges must be normalized\n                    this.ranges.sort(function(a, b) {\n                        return a.start - b.start;\n                    });\n                }\n            },\n\n            removeRange: function(start, end) {\n                var i = 0;\n                for (i = this.ranges.length - 1; i >= 0; i -= 1) {\n                    if (((end === undefined || end === -1) || (this.ranges[i].end <= end)) &&\n                        ((start === undefined || start === -1) || (this.ranges[i].start >= start))) {\n                        this.ranges.splice(i, 1);\n                    }\n                }\n\n                this.length = this.ranges.length;\n            },\n\n            reset: function() {\n                this.length = 0;\n                this.ranges = [];\n            }\n        };\n\n    return {\n        system:undefined,\n        eventBus:undefined,\n        errHandler: undefined,\n        textTrackExtensions: undefined,\n        buffered: buffered,\n\n        initialize: function (type, bufferController) {\n            mimeType = type;\n            video = bufferController.getVideoModel().getElement();\n            data = bufferController.getData();\n            buffered.reset();\n        },\n\n        remove: function(start, end) {\n            if (start < 0 || start >= end) {\n                throw \"INVALID_ACCESS_ERR\";\n            }\n\n            this.textTrackExtensions.deleteCues(video, false, start, end);\n            this.buffered.removeRange(start, end);\n        },\n\n        append: function (bytes, request) {\n            var self = this,\n                ccContent = decodeUtf8(bytes),\n                cues = self.getParser().parse(ccContent, request);\n\n            if (video.textTracks.length === 0) {\n                // We need to create the TextTrack\n                self.textTrackExtensions.addTextTrack(video, [], data.Representation_asArray[0].id, data.lang, true);\n            }\n\n            if (video.textTracks.length === 0) {\n                // Failed to create TextTrack, should never happen\n                return;\n            }\n\n            self.textTrackExtensions.addCues(video.textTracks[0], cues);\n\n            if (request) {\n                self.buffered.addRange(request.startTime, request.startTime + request.duration);\n            }\n        },\n\n        abort: function() {\n            this.textTrackExtensions.deleteCues(video);\n            this.buffered.reset();\n        },\n\n        getParser: function() {\n            var parser;\n\n            if (mimeType === \"text/vtt\") {\n                parser = this.system.getObject(\"vttParser\");\n            } /*else if (mimeType === \"application/ttml+xml\") {\n                parser = this.system.getObject(\"ttmlParser\");\n            }*/\n\n            return parser;\n        },\n\n        addEventListener: function (type, listener, useCapture) {\n            this.eventBus.addEventListener(type, listener, useCapture);\n        },\n\n        removeEventListener: function (type, listener, useCapture) {\n            this.eventBus.removeEventListener(type, listener, useCapture);\n        }\n    };\n};\n\nMediaPlayer.dependencies.TextSourceBuffer.prototype = {\n    constructor: MediaPlayer.dependencies.TextSourceBuffer\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Akamai Technologies nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.TextTrackExtensions = function() {\n    \"use strict\";\n    var Cue,\n        currentLanguage = \"\",\n        ttmlRenderer = null;\n\n    return {\n        system: undefined,\n        eventBus: undefined,\n        videoModel: undefined,\n        debug: undefined,\n        config: undefined,\n\n        setup: function() {\n            Cue = window.VTTCue || window.TextTrackCue;\n        },\n\n        cueEnter: function(subtitle_style, subtitle_text, subtitle_type) {\n            this.eventBus.dispatchEvent({\n                type: \"cueEnter\",\n                data: {\n                    text: subtitle_text,\n                    style: subtitle_style,\n                    type: subtitle_type\n                }\n            });\n        },\n\n        cueExit: function(subtitle_style, subtitle_text, subtitle_type) {\n            this.eventBus.dispatchEvent({\n                type: \"cueExit\",\n                data: {\n                    text: subtitle_text,\n                    style: subtitle_style,\n                    type: subtitle_type\n                }\n            });\n        },\n\n        getCurrentTextTrack: function(video){\n            for(var i=0; i< video.textTracks.length; i++){\n                if(video.textTracks[i].label === 'hascaption'){\n                    return video.textTracks[i];\n                }\n            }\n            return null;\n        },\n\n        addTextTrack: function(video, captionData, label, scrlang, isDefaultTrack) {\n            var track = null,\n                currentItem = null,\n                subtitleDisplayMode = 'subtitles',\n                renderingDiv = this.videoModel.getTTMLRenderingDiv(),\n                i;\n\n            //no function removeTextTrack is defined\n            //add one, only if it's necessary\n            //deleteCues will be very efficient in this case\n            track = this.getCurrentTextTrack(video);\n            if (!track) {\n                if (renderingDiv) {\n                    ttmlRenderer = this.system.getObject(\"ttmlRenderer\");\n                    ttmlRenderer.initialize(renderingDiv);\n                }\n                subtitleDisplayMode = renderingDiv !== null ? 'metadata' : 'subtitles';\n                if (subtitleDisplayMode === 'subtitles') {\n                    subtitleDisplayMode = this.config.getParam(\"TextTrackExtensions.displayModeExtern\", \"boolean\") === true ? 'metadata' : 'subtitles';\n                }\n                //TODO: Ability to define the KIND in the MPD - ie subtitle vs caption....\n                track = video.addTextTrack(subtitleDisplayMode, 'hascaption', scrlang);\n                currentLanguage = scrlang;\n                // track.default is an object property identifier that is a reserved word\n                // The following jshint directive is used to suppressed the warning \"Expected an identifier and instead saw 'default' (a reserved word)\"\n                /*jshint -W024 */\n                track.default = isDefaultTrack;\n                if (subtitleDisplayMode !== 'metadata') {\n                    track.mode = \"showing\";\n                }else{\n                    track.mode = \"hidden\";\n                }\n\n            } else {\n                this.cleanSubtitles();\n                track.default = isDefaultTrack;\n                if (track.mode !== 'showing' && track.kind !== 'metadata') {\n                    track.mode = \"showing\";\n                }\n                currentLanguage = scrlang;\n            }\n\n            for (i = 0; i < captionData.length; i += 1) {\n                currentItem = captionData[i];\n                track.addCue(new Cue(currentItem.start, currentItem.end, currentItem.data));\n            }\n\n            return track;\n        },        \n\n        onCueEnter: function(e) {\n            var renderingDiv = this.videoModel.getTTMLRenderingDiv();\n\n            if (e.currentTarget.type === 'image' && renderingDiv === null) {\n                this.debug.warn(\"[TextTrackExtensions] Rendering image subtitles without div is impossible\");\n            }\n\n            if (renderingDiv) {\n                ttmlRenderer.onCueEnter(e);\n            }\n            this.cueEnter(e.currentTarget.style, e.currentTarget.text, e.currentTarget.type);\n        },\n\n        onCueExit: function(e) {\n            var renderingDiv = this.videoModel.getTTMLRenderingDiv();\n\n            if (renderingDiv) {\n                ttmlRenderer.onCueExit(e);\n            }\n            this.cueExit(e.currentTarget.style, e.currentTarget.text);\n        },\n\n        // Orange: addCues added so it is possible to add cues during playback,\n        //         not only during track initialization\n\n        addCues: function(track, captionData) {\n            var i = 0,\n                currentItem = null,\n                newCue = null;\n\n            for (i = 0; i < captionData.length; i += 1) {\n                currentItem = captionData[i];\n                if (currentItem.start < currentItem.end) {\n                    newCue = new Cue(currentItem.start, currentItem.end, currentItem.data);\n\n                    newCue.id = currentLanguage;\n                    newCue.type = currentItem.type;\n                    newCue.onenter = this.onCueEnter.bind(this);\n                    newCue.onexit = this.onCueExit.bind(this);\n                    newCue.snapToLines = false;\n                    newCue.line = currentItem.line;\n\n                    if (currentItem.style) {\n                        newCue.style = currentItem.style;\n                    }\n\n                    track.addCue(newCue);\n                }\n            }\n        },\n\n        deleteCues: function(video, disabled, start, end) {\n            var track = null,\n                cues = null,\n                lastIdx = null,\n                currentTrackMode,\n                i = 0;\n\n            //when multiple tracks are supported - iterate through and delete all cues from all tracks.\n            if (video) {\n                track = video.textTracks[0];\n                if (track) {\n                    currentTrackMode = track.mode;\n                    //if track mode is disabled, the cues are not accessible\n                    //we have to change the mode value to be sure the delete process is correctly executed.\n                    if (currentTrackMode === 'disabled') {\n                        track.mode = 'hidden';\n                    }\n                    cues = track.cues;\n                    if (cues) {\n                        lastIdx = cues.length - 1;\n\n                        for (i = lastIdx; i >= 0; i -= 1) {\n                            if (((end === undefined || end === -1) || (cues[i].endTime <= end)) &&\n                                ((start === undefined || start === -1) || (cues[i].startTime >= start))) {\n                                track.removeCue(cues[i]);\n                            }\n                        }\n                    }\n                    track.mode = currentTrackMode;\n                }\n            }\n        },\n\n        cleanSubtitles: function() {\n            var renderingDiv = this.videoModel.getTTMLRenderingDiv();\n            if (renderingDiv && ttmlRenderer) {\n                ttmlRenderer.cleanSubtitles();\n            }\n        },\n    };\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Akamai Technologies nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Orange: This Source Buffer processes TTML+XML subtitles encapsulated in the mp4\n//         This format is used by smoothstreaming headends\n\nMediaPlayer.dependencies.TextTTMLXMLMP4SourceBuffer = function() {\n\n    var video,\n        mimeType,\n        currentLang,\n        currentId,\n\n        // We need to simulate TimeRanges, as defined \n        // by Media Streaming Extensions.\n        // start() and end() functions must be provided,\n        // as player checks the buffer level using these\n\n        buffered = {\n            length: 0,\n            ranges: [],\n\n            start: function(index) {\n                return this.ranges[index].start;\n            },\n\n            end: function(index) {\n                return this.ranges[index].end;\n            },\n\n            addRange: function(start, end) {\n                var i = 0,\n                    rangesUpdated = false,\n                    tolerance = 0.01;\n\n                //detect discontinuity in ranges.\n                for (i = 0; i < this.ranges.length; i++) {\n                    if (this.ranges[i].end <= (start + tolerance) && this.ranges[i].end >= (start - tolerance)) {\n                        rangesUpdated = true;\n                        this.ranges[i].end = end;\n                    }\n\n                    if (this.ranges[i].start <= (end + tolerance) && this.ranges[i].start >= (end - tolerance)) {\n                        rangesUpdated = true;\n                        this.ranges[i].start = start;\n                    }\n                }\n\n                if (!rangesUpdated) {\n                    this.ranges.push({\n                        start: start,\n                        end: end\n                    });\n                    this.length = this.length + 1;\n\n                    // TimeRanges must be normalized\n                    this.ranges.sort(function(a, b) {\n                        return a.start - b.start;\n                    });\n                }\n            },\n\n            removeRange: function(start, end) {\n                var i = 0;\n                for (i = this.ranges.length - 1; i >= 0; i -= 1) {\n                    if (((end === undefined || end === -1) || (this.ranges[i].end <= end)) &&\n                        ((start === undefined || start === -1) || (this.ranges[i].start >= start))) {\n                        this.ranges.splice(i, 1);\n                    }\n                }\n\n                this.length = this.ranges.length;\n            },\n\n            reset: function() {\n                this.length = 0;\n                this.ranges = [];\n            }\n        };\n\n    return {\n        updating: false,\n        system: undefined,\n        eventBus: undefined,\n        buffered: buffered,\n        textTrackExtensions: undefined,\n        ttmlParser: undefined,\n        debug: undefined,\n        manifestModel: undefined,\n        errHandler: undefined,\n\n        initialize: function(type, bufferController, subtitleData) {\n            mimeType = type;\n            video = bufferController.getVideoModel().getElement();\n            buffered.reset();\n            currentLang = subtitleData.lang;\n            currentId = subtitleData.id;\n        },\n        remove: function(start, end) {\n            /*If start is negative or greater than duration, then throw an INVALID_ACCESS_ERR exception and abort these steps.\n            If end is less than or equal to start, then throw an INVALID_ACCESS_ERR exception and abort these steps.\n            If this object has been removed from the sourceBuffers attribute of the parent media source then throw an INVALID_STATE_ERR exception and abort these steps.\n            If the updating attribute equals true, then throw an INVALID_STATE_ERR exception and abort these steps.\n            If the readyState attribute of the parent media source is in the \"ended\" state then run the following steps:\n\n            Set the readyState attribute of the parent media source to \"open\"\n            Queue a task to fire a simple event named sourceopen at the parent media source .\n            Set the updating attribute to true.\n            Queue a task to fire a simple event named updatestart at this SourceBuffer object.\n            Return control to the caller and run the rest of the steps asynchronously.\n            Run the coded frame removal algorithm with start and end as the start and end of the removal range.\n            Set the updating attribute to false.\n            Queue a task to fire a simple event named update at this SourceBuffer object.\n            Queue a task to fire a simple event named updateend at this SourceBuffer object.*/\n            if (start < 0 || start >= end) {\n                throw \"INVALID_ACCESS_ERR\";\n            }\n\n            this.getTextTrackExtensions().deleteCues(video, false, start, end);\n            this.buffered.removeRange(start, end);\n        },\n\n        append: function(bytes) {\n            var self = this,\n                file = mp4lib.deserialize(bytes),\n                moov = file.getBoxByType('moov'),\n                mvhd,\n                moof,\n                mdat,\n                traf,\n                tfhd,\n                tfdt,\n                trun,\n                subs,\n                fragmentStart,\n                fragmentDuration = 0,\n                ttmlData,\n                encoding = 'utf-8';\n\n            //no mp4, all the subtitles are in one xml file\n            if (mimeType === 'application/ttml+xml') {\n                this.track = this.textTrackExtensions.addTextTrack(video, [], currentId, currentLang, true);\n\n                //detect utf-16 encoding\n                if (MediaPlayer.utils.isUTF16(bytes)) {\n                    encoding = 'utf-16';\n                }\n\n                this.convertUTFToString(bytes, encoding)\n                    .then(function(result) {\n                        self.ttmlParser.parse(result).then(function(cues) {\n                            if (cues) {\n\n                                self.textTrackExtensions.addCues(self.track, cues);\n                                self.buffered.addRange(0, video.duration);\n                                self.eventBus.dispatchEvent({\n                                    type: \"updateend\"\n                                });\n                            }\n                        }, function(error) {\n                            self.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR, \"Internal error while parsing TTML data\", error);\n                        });\n                    });\n                return;\n            }\n\n            if (moov) {\n                // This must be an init segment, if it has a moov box.\n                // We need it to read the timescale, as it will be \n                // used to compute fragments time ranges.\n\n                mvhd = moov.getBoxByType('mvhd');\n                self.timescale = mvhd.timescale;\n\n                // Also, it is a good moment to set up a text track on videoElement\n                // TODO: set up name and language \n                this.track = this.textTrackExtensions.addTextTrack(video, [], currentId, currentLang, true);\n                this.eventBus.dispatchEvent({\n                    type: \"updateend\"\n                });\n                return;\n            }\n\n            moof = file.getBoxByType('moof');\n            if (moof) {\n\n                // This is a subtitles track fragment\n                // let's decode the data and add captions to video element\n                mdat = file.getBoxByType('mdat');\n\n                // We need to update TimeRanges.                            \n                // assume that there is a single text sample in fragment\n                traf = moof.getBoxByType('traf');\n                tfhd = traf.getBoxByType('tfhd');\n                tfdt = traf.getBoxByType('tfdt');\n                trun = traf.getBoxByType('trun');\n                subs = traf.getBoxByType('subs');\n\n                fragmentStart = tfdt.baseMediaDecodeTime / self.timescale;\n                fragmentDuration = 0;\n                if (trun.flags & 0x000100) {\n                    fragmentDuration = trun.samples_table[0].sample_duration / self.timescale;\n                } else {\n                    fragmentDuration = tfhd.default_sample_duration / self.timescale;\n                }\n\n                self.buffered.addRange(fragmentStart, fragmentStart + fragmentDuration);\n                \n                if (subs) {\n                    for (var i = 0; i < subs.entry_count; i++) {\n                        for (var j = 0; j < subs.entry[i].subsample_count; j++) {\n                            //the first subsample is the one in which TTML text is set\n                            ttmlData = mdat.data.subarray(0, subs.entry[i].subSampleEntries[0].subsample_size);\n                            break;\n                        }\n                    }\n                } else {\n                    ttmlData = mdat.data;\n                }\n\n                //detect utf-16 encoding\n                if (MediaPlayer.utils.isUTF16(ttmlData)) {\n                    encoding = 'utf-16';\n                }\n                // parse data and add to cues\n                self.convertUTFToString(ttmlData, encoding)\n                    .then(function(result) {\n                        self.ttmlParser.parse(result).then(function(cues) {\n                            var i,\n                            manifest = self.manifestModel.getValue();\n\n                            if (cues) {\n                                if (manifest.name === 'MSS') {\n                                    for (i = 0; i < cues.length; i += 1) {\n                                        cues[i].start = cues[i].start + fragmentStart;\n                                        cues[i].end = cues[i].end + fragmentStart;\n                                    }\n                                }\n\n                                self.textTrackExtensions.addCues(self.track, cues);\n\n                                self.eventBus.dispatchEvent({\n                                    type: \"updateend\"\n                                });\n                            }\n                        }, function(error) {\n                            self.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR, \"Internal error while parsing TTML data\", error);\n                        });\n                    });\n            }\n            return;\n        },\n\n        convertUTFToString: function(buf, encoding) {\n            var deferred = Q.defer(),\n                blob = new Blob([buf], {\n                    type: \"text/xml\"\n                }),\n                f = new FileReader();\n\n            f.onload = function(e) {\n                deferred.resolve(e.target.result);\n            };\n            f.readAsText(blob, encoding);\n\n            return deferred.promise;\n        },\n\n        UpdateLang: function(id, lang){\n            currentId = id;\n            currentLang = lang;\n        },\n\n        abort: function() {\n            this.getTextTrackExtensions().deleteCues(video, true);\n        },\n\n        getTextTrackExtensions: function() {\n            return this.textTrackExtensions;\n        },\n\n        addEventListener: function(type, listener, useCapture) {\n            this.eventBus.addEventListener(type, listener, useCapture);\n            if (!this.updating)\n                this.eventBus.dispatchEvent({\n                    type: \"updateend\"\n                });\n        },\n\n        removeEventListener: function(type, listener, useCapture) {\n            this.eventBus.removeEventListener(type, listener, useCapture);\n        }\n    };\n};\n\nMediaPlayer.dependencies.TextTTMLXMLMP4SourceBuffer.prototype = {\n    constructor: MediaPlayer.dependencies.TextTTMLXMLMP4SourceBuffer\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Akamai Technologies nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.TTMLParser = function() {\n    \"use strict\";\n\n    /*\n     * This TTML parser follows \"TTML Simple Delivery Profile for Closed Captions (US)\" spec - http://www.w3.org/TR/ttml10-sdp-us/\n     *\n     * ORANGE: Some strict limitations of US profile removed to allow for non-US TTML2 implmentations used in Europe:\n     *         - no requirement for US profile\n     *         - offset-style format allowed for <timeExpression>\n     * */\n\n    var SECONDS_IN_HOUR = 60 * 60,\n        SECONDS_IN_MIN = 60,\n        TTAF_URI = \"http://www.w3.org/2006/10/ttaf1\",\n        TTAF_PARAMETER_URI = \"http://www.w3.org/2006/10/ttaf1#parameter\",\n        TTAF_STYLE_URI = \"http://www.w3.org/2006/10/ttaf1#styling\",\n        TTML_URI = \"http://www.w3.org/ns/ttml\",\n        TTML_PARAMETER_URI = \"http://www.w3.org/ns/ttml#parameter\",\n        TTML_STYLE_URI = \"http://www.w3.org/ns/ttml#styling\",\n        SMPTE_TT_URI = \"http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt\",\n        globalPrefTTNameSpace = [TTML_URI, TTAF_URI],\n        globalPrefStyleNameSpace =  [TTML_STYLE_URI, TTAF_STYLE_URI],\n        globalPrefParameterNameSpace = [TTML_PARAMETER_URI, TTAF_PARAMETER_URI],\n        globalPrefSMPTENameSpace = [SMPTE_TT_URI],\n\n        // R0028 - A document must not contain a <timeExpression> value that does not conform to the subset of clock-time that\n        // matches either of the following patterns: hh:mm:ss.mss or hh:mm:ss:ff, where hh denotes hours (00-23),\n        // mm denotes minutes (00-59), ss denotes seconds (00-59), mss denotes milliseconds (000-999), and ff denotes frames (00-frameRate - 1).\n        // R0030 - For time expressions that use the hh:mm:ss.mss format, the following constraints apply:\n        // - Exactly 2 digits must be used in each of the hours, minutes, and second components (include leading zeros).\n        // - Exactly 3 decimal places must be used for the milliseconds component (include leading zeros).\n        // R0031 -For time expressions that use the hh:mm:ss:ff format, the following constraints apply:\n        // - Exactly 2 digits must be used in each of the hours, minutes, second, and frame components (include leading zeros).\n\n        // Orange: the restrictions above are for US profile only.\n        //         in general, TTML allows other syntax representations, see https://dvcs.w3.org/hg/ttml/raw-file/tip/ttml2/spec/ttml2.html#timing-value-timeExpression\n        //         we have added support for offset-time, a pretty popular one.\n\n        timingRegexClockTime = /^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])((\\.[0-9][0-9][0-9])|(:[0-9][0-9]))$/,\n        timingRegexOffsetTime = /^\\d+(\\.\\d+|)(h|m|s|ms|f)$/,\n        xmlDoc = null,\n        nodeTt = null,\n        nodeHead = null,\n        nodeLayout = null,\n        nodeStyling = null,\n        nodeBody = null,\n        frameRate = null,\n        tabStyles = [],\n        tabRegions = [],\n        tabImages = [],\n\n        parseTimings = function(timingStr) {\n\n            var timeParts,\n                parsedTime,\n                metric;\n\n            if (timingRegexClockTime.test(timingStr)) {\n\n                timeParts = timingStr.split(\":\");\n\n                parsedTime = (parseFloat(timeParts[0]) * SECONDS_IN_HOUR +\n                    parseFloat(timeParts[1]) * SECONDS_IN_MIN +\n                    parseFloat(timeParts[2]));\n\n                // R0031 -For time expressions that use the hh:mm:ss:ff format, the following constraints apply:\n                //  - A ttp:frameRate attribute must be present on the tt element.\n                //  - A ttp:frameRateMultiplier attribute may be present on the tt element.\n\n                // ORANGE: removed the restrictions above.\n                //         now if no frameRate is defined in tt, the :ff information is ignored.\n\n                if (timeParts[3]) {\n                    if (frameRate && !isNaN(frameRate)) {\n                        parsedTime += parseFloat(timeParts[3]) / frameRate;\n                    }\n                }\n                return parsedTime;\n            }\n\n            if (timingRegexOffsetTime.test(timingStr)) {\n\n                if (timingStr.substr(timingStr.length - 2) == 'ms') {\n                    parsedTime = parseFloat(timingStr.substr(0, timingStr.length - 3));\n                    metric = timingStr.substr(timingStr.length - 2);\n                } else {\n                    parsedTime = parseFloat(timingStr.substr(0, timingStr.length - 2));\n                    metric = timingStr.substr(timingStr.length - 1);\n                }\n\n                switch (metric) {\n                    case 'h':\n                        parsedTime = parsedTime * 60 * 60;\n                        break;\n                    case 'm':\n                        parsedTime = parsedTime * 60;\n                        break;\n                    case 's':\n                        break;\n                    case 'ms':\n                        parsedTime = parsedTime * 0.01;\n                        break;\n                    case 'f':\n                        if (frameRate && !isNaN(frameRate)) {\n                            parsedTime = parsedTime / frameRate;\n                        } else {\n                            return NaN;\n                        }\n                        break;\n                }\n\n                return parsedTime;\n            }\n\n            return NaN;\n        },\n\n        passStructuralConstraints = function() {\n            var passed = false;\n\n            nodeTt = xmlDoc ? this.domParser.getChildNode(xmlDoc, \"tt\") : null;\n            nodeHead = nodeTt ? this.domParser.getChildNode(nodeTt, \"head\") : null;\n            nodeLayout = nodeHead ? this.domParser.getChildNode(nodeHead, \"layout\") : null;\n            nodeStyling = nodeHead ? this.domParser.getChildNode(nodeHead, \"styling\") : null;\n            nodeBody = nodeTt ? this.domParser.getChildNode(nodeTt, \"body\") : null;\n\n            // R001 - A document must contain a tt element.\n            // R002 - A document must contain both a head and body element.\n            // R003 - A document must contain both a styling and a layout element.\n            if (nodeTt && nodeHead && /*nodeLayout && nodeStyling &&*/ nodeBody) {\n                passed = true;\n            }\n\n            // R0008 - A document must contain a ttp:profile element where the use attribute of that element is specified as http://www.w3.org/ns/ttml/profile/sdp-us.\n            // ORANGE: The R0008 requirement is removed in the parser implementation to make it work with non-US profiles\n            return passed;\n        },\n\n        findStyleElement = function(nodeTab, styleElementName, defaultTTMLValue) {\n            var styleName,\n                regionName,\n                resu = null,\n                i = 0;\n\n            for (i = 0; i < nodeTab.length; i += 1) {\n                //search styleElementName in node Element\n                resu = findParameterElement.call(this, [nodeTab[i]], globalPrefStyleNameSpace, styleElementName);\n\n                if (resu) {\n                    return resu;\n                }\n\n                //search style reference in node Element\n                styleName = findParameterElement.call(this, [nodeTab[i]], globalPrefTTNameSpace, 'style');\n                if (styleName) {\n                    //search if styleElementName is defined in the specific style reference\n                    resu = searchInTab.call(this, tabStyles, styleName, styleElementName);\n                    if (resu) {\n                        return resu;\n                    }\n\n                    //search if others styles are referenced in the selected one\n                    styleName = searchInTab.call(this, tabStyles, styleName, 'style');\n\n                    while (styleName) {\n                        //search in this other style\n                        resu = searchInTab.call(this, tabStyles, styleName, styleElementName);\n                        if (resu) {\n                            return resu;\n                        }\n                        styleName = searchInTab.call(this, tabStyles, styleName, 'style');\n                    }\n                }\n\n                //search region reference in node Element\n                regionName = findParameterElement.call(this, [nodeTab[i]], globalPrefTTNameSpace, 'region');\n                if (regionName) {\n                    //region reference has been found in the node element, search styleElementName definition in this specified region\n                    resu = searchInTab.call(this, tabRegions, regionName, styleElementName);\n\n                    if (resu) {\n                        return resu;\n                    }\n\n                    styleName = searchInTab.call(this, tabRegions, regionName, 'style');\n                    //search style reference in this specified region Element\n\n                    if (styleName) {\n                        //specified style has been detected\n                        //browse attributes of this style to detect styleElementName attribute\n                        resu = searchInTab.call(this, tabStyles, styleName, styleElementName);\n                        if (resu) {\n                            return resu;\n                        }\n\n                        //search if others styles are referenced in the selected one\n                        styleName = searchInTab.call(this, tabStyles, styleName, 'style');\n\n                        while (styleName) {\n                            //search in this other style\n                            resu = searchInTab.call(this, tabStyles, styleName, styleElementName);\n                            if (resu) {\n                                return resu;\n                            }\n                            styleName = searchInTab.call(this, tabStyles, styleName, 'style');\n                        }\n                    }\n                }\n            }\n\n            return defaultTTMLValue !== undefined ? defaultTTMLValue : null;\n        },\n\n        searchInTab = function(tab, elementNameReference, styleElementName) {\n            var i = 0,\n                returnValue = null,\n                j = 0;\n\n            for (i = 0; i < tab[elementNameReference].length; i += 1) {\n                //search with style nameSpaces\n                for (j = 0; j < globalPrefStyleNameSpace.length; j += 1) {\n                    returnValue = tab[elementNameReference].getNamedItem(styleElementName);\n                    if (!returnValue) {\n                        returnValue = tab[elementNameReference].getNamedItemNS(globalPrefStyleNameSpace[j], styleElementName);\n                    }\n                    if (returnValue) {\n                        return returnValue.nodeValue;\n                    }\n                }\n                //search with main nameSpaces\n                for (j = 0; j < globalPrefTTNameSpace.length; j += 1) {\n                    returnValue = tab[elementNameReference].getNamedItem(styleElementName);\n                    if (!returnValue) {\n                        returnValue = tab[elementNameReference].getNamedItemNS(globalPrefTTNameSpace[j], styleElementName);\n                    }\n                    if (returnValue) {\n                        return returnValue.nodeValue;\n                    }\n                }\n            }\n\n            return null;\n        },\n\n        findParameterElement = function(nodeTab, nameSpaceTab, parameterElementName) {\n            var parameterValue = null,\n                i = 0,\n                k = 0;\n            //search for each node in the noteTab, if the parameterElementName is defined\n            for (i = 0; i < nodeTab.length; i += 1) {\n                for (k = 0; k < nameSpaceTab.length; k += 1) {\n                    parameterValue = this.domParser.getAttributeValue(nodeTab[i], parameterElementName, nameSpaceTab[k]);\n                    if (parameterValue) {\n                        return parameterValue;\n                    }\n                }\n            }\n\n            return parameterValue;\n        },\n\n        computeCellResolution = function(cellResolution) {\n            if (!cellResolution) {\n                //default cell resolution defined in TTML documentation\n                cellResolution = '32 15';\n            }\n\n            var computedCellResolution = cellResolution,\n                i = 0;\n\n            computedCellResolution = computedCellResolution.split(' ');\n\n            for (i = 0; i < computedCellResolution.length; i += 1) {\n                computedCellResolution[i] = parseFloat(computedCellResolution[i]);\n            }\n\n            return computedCellResolution;\n        },\n\n        getStyle = function(nodeElementsTab, rootExtent){\n            var cssStyle = {\n                    backgroundColor: null,\n                    color: null,\n                    fontSize: null,\n                    fontFamily: null,\n                    fontStyle: null,\n                    textOutline: {\n                        color: null,\n                        with: null\n                    },\n                    textAlign: null,\n                    displayAlign: null,\n                    origin: null,\n                    extent: null,\n                    cellResolution: null,\n                    rootExtent: rootExtent,\n                    showBackground: null\n                };\n\n            cssStyle.backgroundColor = findStyleElement.call(this, nodeElementsTab, 'backgroundColor', 'transparent');\n            cssStyle.color = findStyleElement.call(this, nodeElementsTab, 'color');\n            cssStyle.fontSize = findStyleElement.call(this, nodeElementsTab, 'fontSize');\n            cssStyle.fontFamily = findStyleElement.call(this, nodeElementsTab, 'fontFamily');\n            cssStyle.fontStyle = findStyleElement.call(this, nodeElementsTab, 'fontStyle', 'normal');\n            cssStyle.textOutline = findStyleElement.call(this, nodeElementsTab, 'textOutline');\n            cssStyle.extent = findStyleElement.call(this, nodeElementsTab, 'extent');\n            cssStyle.origin = findStyleElement.call(this, nodeElementsTab, 'origin');\n            cssStyle.textAlign = findStyleElement.call(this, nodeElementsTab, 'textAlign', 'start');\n            cssStyle.displayAlign = findStyleElement.call(this, nodeElementsTab, 'displayAlign', 'before');\n            cssStyle.showBackground = findStyleElement.call(this, nodeElementsTab, 'showBackground');\n            cssStyle.cellResolution = findParameterElement.call(this, nodeElementsTab, globalPrefParameterNameSpace, 'cellResolution');\n            cssStyle.cellResolution = computeCellResolution(cssStyle.cellResolution);\n\n            return cssStyle;\n        },\n\n        internalParse = function(data) {\n            var captionArray = [],\n                errorMsg,\n                regions,\n                region,\n                previousStartTime = null,\n                previousEndTime = null,\n                startTime,\n                endTime,\n                cssStyle = null,\n                caption,\n                divBody,\n                i,\n                textDatas,\n                j,\n                k,\n                rootExtent,\n                textNodes,\n                textValue = \"\",\n                imageRef,\n                ttmlRenderingType = \"\",\n                lastCaption;\n\n            try {\n\n                if (this.videoModel.getTTMLRenderingDiv() !== null) {\n                    ttmlRenderingType = 'html';\n                }\n\n                xmlDoc = this.domParser.createXmlTree(data);\n\n                if (!passStructuralConstraints.call(this)) {\n                    errorMsg = \"TTML document has incorrect structure\";\n                    return Q.reject(errorMsg);\n                }\n\n                for (i = 0; i < globalPrefParameterNameSpace.length; i += 1) {\n                    frameRate = this.domParser.getAttributeValue(nodeTt, 'frameRate', globalPrefParameterNameSpace[i]) ? parseInt(frameRate, 10) : null;\n                }\n\n                divBody = this.domParser.getChildNodes(nodeBody, 'div');\n\n                if (!divBody || divBody.length === 0) {\n                    errorMsg = \"TTML body document does not contain any div\";\n                    return Q.reject(errorMsg);\n                }\n\n                //get all styles informations\n                tabStyles = this.domParser.getAllSpecificNodes(nodeTt, 'style');\n                //get all regions informations\n                tabRegions = this.domParser.getAllSpecificNodes(nodeTt, 'region');\n                //get all images url\n                tabImages = this.domParser.getAllSpecificNodes(nodeTt, 'image');\n                //search if there is a root container size\n                rootExtent = findStyleElement.call(this, [nodeTt], 'extent');\n\n                //browse all the different div elements\n                for (k = 0; k < divBody.length; k += 1) {\n                    //is it images subtitles?\n                    imageRef = findParameterElement.call(this, [divBody[k]], globalPrefSMPTENameSpace, 'backgroundImage');\n                    if (imageRef && tabImages[imageRef.substring(1)] !== undefined) {\n\n                        startTime = parseTimings(findParameterElement.call(this, [divBody[k]], globalPrefTTNameSpace, 'begin'));\n                        endTime = parseTimings(findParameterElement.call(this, [divBody[k]], globalPrefTTNameSpace, 'end'));\n                        \n                        cssStyle = getStyle.call(this, [divBody[k], nodeTt], rootExtent);\n                       \n                        caption = {\n                            start: startTime,\n                            end: endTime,\n                            data: 'data:image/' + tabImages[imageRef.substring(1)].imagetype.nodeValue + ';base64, ' + this.domParser.getChildNode(tabImages[imageRef.substring(1)], '#text').nodeValue,\n                            type: 'image',\n                            line: 80,\n                            style: cssStyle\n                        };\n                        captionArray.push(caption);\n                    }\n                    regions = this.domParser.getChildNodes(divBody[k], 'p');\n\n                    if (!regions || regions.length === 0) {\n                        errorMsg = \"TTML document does not contain any cues\";\n                    } else {\n                        for (i = 0; i < regions.length; i += 1) {\n                            caption = null;\n                            cssStyle = null;\n                            region = regions[i];\n\n                            startTime = parseTimings(findParameterElement.call(this, [region], globalPrefTTNameSpace, 'begin'));\n                            endTime = parseTimings(findParameterElement.call(this, [region], globalPrefTTNameSpace, 'end'));\n\n                            if (isNaN(startTime) || isNaN(endTime) || (endTime < startTime)) {\n                                errorMsg = \"TTML document has incorrect timing value\";\n                            } else {\n                                 //is it images subtitles?\n                                imageRef = findParameterElement.call(this, [region], globalPrefSMPTENameSpace, 'backgroundImage');\n                                if (imageRef && tabImages[imageRef.substring(1)] !== undefined) {\n                                    cssStyle = getStyle.call(this, [region, divBody[k], nodeTt], rootExtent);\n                                    caption = {\n                                        start: startTime,\n                                        end: endTime,\n                                        data: 'data:image/' + tabImages[imageRef.substring(1)].imagetype.nodeValue + ';base64, ' + this.domParser.getChildNode(tabImages[imageRef.substring(1)], '#text').nodeValue,\n                                        type: 'image',\n                                        line: 80,\n                                        style: cssStyle\n                                    };\n                                }\n\n                                textDatas = this.domParser.getChildNodes(region, 'span');\n                                //subtitles are set in span\n                                if (textDatas.length > 0) {\n                                    for (j = 0; j < textDatas.length; j++) {\n                                        if (j > 0) {\n                                            textValue += '\\n';\n                                        }\n                                        /******************** Find style informations ***************************************\n                                         *   1- in subtitle paragraph ToDo\n                                         *   2- in style element referenced in the subtitle paragraph\n                                         *   3- in region ToDo\n                                         *   4- in style referenced in the region referenced in the subtitle paragraph\n                                         *   5- in the main div ToDo\n                                         *   6- in the style of the main div\n                                         **************************************************************************************/\n                                        //search style informations once. \n                                        if (j === 0) {\n                                            cssStyle = getStyle.call(this, [textDatas[j], region, nodeBody, nodeTt, divBody[k]], rootExtent);\n                                        }\n\n                                        textNodes = this.domParser.getTextNodesIn(textDatas[j]);\n\n                                        for (var r = 0; r < textNodes.length; r += 1) {\n                                            if (r > 0) {\n                                                textValue += '\\n';\n                                            }\n                                            textValue += textNodes[r].textContent;\n                                        }\n                                    }\n                                    //line and position element have no effect on IE\n                                    //For Chrome line = 80 is a percentage workaround to reorder subtitles\n                                    caption = {\n                                        start: startTime,\n                                        end: endTime,\n                                        data: textValue,\n                                        type: 'text',\n                                        line: 80,\n                                        style: cssStyle\n                                    };\n                                    textValue = \"\";\n                                    captionArray.push(caption);\n                                } else {\n                                    cssStyle = getStyle.call(this, [region, nodeBody, nodeTt], rootExtent);\n\n                                    //line and position element have no effect on IE\n                                    //For Chrome line = 80 is a percentage workaround to reorder subtitles\n                                    //try to detect multi lines subtitle\n                                    if (i > 0) {\n                                        previousStartTime = parseTimings(findParameterElement.call(this, [regions[i - 1]], globalPrefTTNameSpace, 'begin'));\n                                        previousEndTime = parseTimings(findParameterElement.call(this, [regions[i - 1]], globalPrefTTNameSpace, 'end'));\n                                    }\n                                    //workaround to be able to show subtitles on two lines even if startTime and endTime are not equals to the previous values.\n                                    if ((startTime === previousStartTime && endTime === previousEndTime) || (startTime >= previousStartTime && endTime <= previousEndTime)) {\n                                        if (region.textContent !== \"\") {\n                                            //if rendering is done in an internal div, do not add subtitle text with the same time.\n                                            if (ttmlRenderingType === 'html') {\n                                                caption = {\n                                                    start: startTime,\n                                                    end: endTime,\n                                                    data: region.textContent,\n                                                    type: 'text',\n                                                    line: 80,\n                                                    style: cssStyle\n                                                };\n                                            } else {\n                                                if (startTime >= previousStartTime && endTime <= previousEndTime) {\n                                                    lastCaption = captionArray[captionArray.length - 1];\n                                                    lastCaption.end = startTime;\n                                                } else {\n                                                    lastCaption = captionArray.pop();\n                                                }\n                                                caption = {\n                                                    start: startTime,\n                                                    end: endTime,\n                                                    data: lastCaption.data + '\\n' + region.textContent,\n                                                    type: 'text',\n                                                    line: 80,\n                                                    style: cssStyle\n                                                };\n                                            }\n                                        }\n                                    } else {\n\n                                        textNodes = this.domParser.getTextNodesIn(region);\n\n                                        for (j = 0; j < textNodes.length; j += 1) {\n                                            if (j > 0) {\n                                                textValue += '\\n';\n                                            }\n                                            textValue += textNodes[j].textContent;\n                                        }\n                                        if (textValue !== \"\") {\n                                            caption = {\n                                                start: startTime,\n                                                end: endTime,\n                                                data: textValue,\n                                                type: 'text',\n                                                line: 80,\n                                                style: cssStyle\n                                            };\n                                            textValue = \"\";\n                                        }\n                                    }\n                                    if (caption !== null) {\n                                        captionArray.push(caption);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (captionArray.length > 0) {\n                    return Q.when(captionArray);\n                } else {\n                    return Q.reject(errorMsg);\n                }\n\n            } catch (err) {\n                errorMsg = err.message;\n                return Q.reject(errorMsg);\n            }\n        };\n\n    return {\n        domParser: undefined,\n        videoModel: undefined,\n        parse: internalParse\n\n    };\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Akamai Technologies nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.TTMLRenderer = function() {\n    \"use strict\";\n    var ttmlDiv,\n        subtitleDivTab = [],\n\n        onFullScreenChange = function() {\n            var i = 0;\n\n            for (i = 0; i < subtitleDivTab.length; i++) {\n                applySubtitlesCSSStyle(subtitleDivTab[i], subtitleDivTab[i].ttmlStyle, ttmlDiv);\n            }\n        },\n\n        onSeeking = function() {\n            //used for FF, when the user wants to seek, cueExit is not always sent.\n            this.cleanSubtitles();\n        },\n\n        createSubtitleDiv = function() {\n            var subtitleDiv = document.createElement(\"div\");\n\n            subtitleDiv.style.position = 'absolute';\n            subtitleDiv.style.display = 'flex';\n            subtitleDiv.style.flexDirection = 'row';\n            subtitleDiv.style.overflow = 'initial';\n            subtitleDiv.style.pointerEvents = 'none';\n\n            ttmlDiv.appendChild(subtitleDiv);\n\n            return subtitleDiv;\n        },\n\n        removeSubtitleDiv = function(div) {\n            if (ttmlDiv.hasChildNodes()) {\n                ttmlDiv.removeChild(div);\n            }\n        },\n\n        computeFontSize = function(fontSize, cellUnit) {\n            var computedFontSize,\n                i;\n            if (fontSize && fontSize[fontSize.length - 1] === '%') {\n                computedFontSize = parseFloat(fontSize.substr(0, fontSize.length - 1)) / 100 * cellUnit[1] + 'px';\n            } else if (fontSize && fontSize[fontSize.length - 1] === 'x') {\n                //case in pixels\n                computedFontSize = fontSize;\n            } else if (fontSize && fontSize[fontSize.length - 1] === 'c') {\n                var cellsSize = fontSize.replace(/\\s/g, '').split('c');\n\n                for (i = 0; i < cellsSize.length; i += 1) {\n                    cellsSize[i] = parseFloat(cellsSize[i]);\n                }\n\n                if (isNaN(cellsSize[1])) {\n                    computedFontSize = cellsSize[0] * cellUnit[1] + 'px';\n                } else {\n                    computedFontSize = cellsSize[1] * cellUnit[1] + 'px';\n                }\n            } else { //default value defined in TTML\n                computedFontSize = cellUnit[1] + 'px';\n            }\n\n            return computedFontSize;\n        },\n\n        computeTextOutline = function(textOutline, cellUnit, defaultColor) {\n            var computedTextOutline = {\n                    color: defaultColor,\n                    width: null\n                },\n                formatTextOutlineWidth,\n                textOutlineWidthIndex = 0;\n\n            if (textOutline) {\n                textOutline = textOutline.split(' ');\n\n                //detect if outline color has been defined, if not, outline color should be set to color value\n                if (textOutline[0] && isNaN(textOutline[0][0])) {\n                    computedTextOutline.color = textOutline[0];\n                    textOutlineWidthIndex = 1;\n                } else {\n                    computedTextOutline.color = defaultColor;\n                }\n\n                if (computedTextOutline.color && computedTextOutline.color[0] === '#') {\n                    computedTextOutline.color = hex2rgba_convert(computedTextOutline.color);\n                }\n\n                //detect text outline width, the first length value\n                if (textOutline[textOutlineWidthIndex]) {\n                    //get the last character for text Outline width definition\n                    formatTextOutlineWidth = textOutline[textOutlineWidthIndex][textOutline[textOutlineWidthIndex].length - 1];\n                    switch (formatTextOutlineWidth) {\n                        //definition in cell.\n                        case 'c':\n                            textOutline[textOutlineWidthIndex] = textOutline[textOutlineWidthIndex].split('c');\n                            if (textOutline[textOutlineWidthIndex][0]) {\n                                computedTextOutline.width = textOutline[textOutlineWidthIndex][0] * cellUnit[1] + 'px';\n                            }\n                            break;\n                        case 'x':\n                            //definition in pixel\n                            computedTextOutline.width = textOutline[textOutlineWidthIndex];\n                            break;\n                    }\n                }\n            }\n            return computedTextOutline;\n        },\n\n        hex2rgba_convert = function(hex) {\n            hex = hex.replace('#', '');\n            var r = parseInt(hex.substring(0, 2), 16),\n                g = parseInt(hex.substring(2, 4), 16),\n                b = parseInt(hex.substring(4, 6), 16),\n                a = hex.length > 6 ? parseInt(hex.substring(6, 8), 16) : 255,\n                result = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n\n            return result;\n        },\n\n        rgbaTTMLToCss = function(rgbaTTML) {\n            var rgba,\n                resu = rgbaTTML,\n                alpha;\n\n            rgba = rgbaTTML.replace(/^(rgb|rgba)\\(/,'').replace(/\\)$/,'').replace(/\\s/g,'').split(',');\n            if (rgba[rgba.length - 1] > 1) {\n                alpha = parseInt(rgba[rgba.length - 1], 10) / 255;\n                resu = 'rgba('+rgba[0]+','+rgba[1]+','+rgba[2]+','+alpha+')';\n            }\n            return resu;\n        },\n\n        applySubtitlesCSSStyle = function(div, cssStyle, renderingDiv) {\n            var origin,\n                extent,\n                textOutline,\n                rootExtent,\n                cellUnit = [renderingDiv.clientWidth / cssStyle.cellResolution[0], renderingDiv.clientHeight / cssStyle.cellResolution[1]];\n\n            if (div) {\n                if (cssStyle.backgroundColor && cssStyle.backgroundColor[0] === '#') {\n                    cssStyle.backgroundColor = hex2rgba_convert(cssStyle.backgroundColor);\n                }else if (cssStyle.backgroundColor && cssStyle.backgroundColor[3] === 'a') {//detect backgroundColor with an alpha\n                    cssStyle.backgroundColor = rgbaTTMLToCss(cssStyle.backgroundColor);\n                }\n\n                if (cssStyle.color && cssStyle.color[0] === '#') {\n                    cssStyle.color = hex2rgba_convert(cssStyle.color);\n                }else if (cssStyle.color && cssStyle.color[3] === 'a') {//detect backgroundColor with an alpha\n                    cssStyle.color = rgbaTTMLToCss(cssStyle.color);\n                }\n\n                if (cssStyle.origin && cssStyle.origin[cssStyle.origin.length - 1] === '%') {\n                    origin = cssStyle.origin.split('%');\n                    div.style.left = parseInt(origin[0], 10) + '%';\n                    div.style.top = parseInt(origin[1], 10) + '%';\n                    if (cssStyle.extent && cssStyle.extent[cssStyle.extent.length - 1] === '%') {\n                        extent = cssStyle.extent.split('%');\n                        div.style.width = parseInt(extent[0], 10) + '%';\n                        div.style.height = parseInt(extent[1], 10) + '%';\n                    }\n                } else if (cssStyle.origin && cssStyle.origin[cssStyle.origin.length - 1] === 'x') {\n                    origin = cssStyle.origin.split('px');\n                    if (cssStyle.rootExtent && cssStyle.rootExtent[cssStyle.rootExtent.length - 1] === 'x') {\n                        rootExtent = cssStyle.rootExtent.split('px');\n                        var temp = (origin[0] / rootExtent[0]) * renderingDiv.clientWidth;\n                        div.style.left = temp / renderingDiv.clientWidth * 100 + '%';\n                        temp = (origin[1] / rootExtent[1]) * renderingDiv.clientHeight;\n                        div.style.top = temp / renderingDiv.clientHeight * 100 + '%';\n                        if (cssStyle.extent && cssStyle.extent[cssStyle.extent.length - 1] === 'x') {\n                            extent = cssStyle.extent.split('px');\n                            temp = (extent[0] / rootExtent[0]) * renderingDiv.clientWidth;\n                            div.style.width = temp / renderingDiv.clientWidth * 100 + '%';\n                            temp = (extent[1] / rootExtent[1]) * renderingDiv.clientHeight;\n                            div.style.height = temp / renderingDiv.clientHeight * 100 + '%';\n                        }\n                    } else {\n                        div.style.left = origin[0] + \"px\";\n                        div.style.top = origin[1] + \"px\";\n                    }\n                }else if (cssStyle.origin && cssStyle.origin[cssStyle.origin.length - 1] === 'c') {\n                    origin = cssStyle.origin.split('c');\n                    div.style.left = (origin[0] * cellUnit[0]) + \"px\";\n                    div.style.top = (origin[1] * cellUnit[1]) + \"px\";\n                    if (cssStyle.extent && cssStyle.extent[cssStyle.extent.length - 1] === 'c') {\n                        extent = cssStyle.extent.split('c');\n                        div.style.width = (extent[0] * cellUnit[0]) + \"px\";\n                        div.style.height = (extent[1] * cellUnit[1]) + \"px\";\n                    }\n                }\n\n                textOutline = computeTextOutline(cssStyle.textOutline, cellUnit, cssStyle.color);\n                div.style.webkitTextStrokeWidth = textOutline.width;\n                div.style.webkitTextStroke = textOutline.color;\n                switch (cssStyle.textAlign) {\n                    //Values in TTML : left | center | right | start | end\n                    //Values in css : left|right|center|justify|initial|inherit\n                    case 'start':\n                        div.style.justifyContent = 'flex-start';\n                        break;\n                    case 'end':\n                        div.style.justifyContent = 'flex-end';\n                        break;\n                    case 'center':\n                        div.style.justifyContent = 'center';\n                        break;\n                    case 'right':\n                        div.style.justifyContent = 'flex-end';\n                        break; \n                    case 'left':\n                        div.style.justifyContent = 'flex-start';\n                        break; \n                    default:\n                        div.style.justifyContent = 'flex-start';\n                }\n\n                switch (cssStyle.displayAlign) {\n                    //Values in TTML : before | center | after\n                    //Values in css : flex-start| center | flex-end\n                    case 'before':\n                        div.style.alignItems = 'flex-start';\n                        break;\n                    case 'center':\n                        div.style.alignItems = cssStyle.displayAlign;\n                        break;\n                    case 'after':\n                        div.style.alignItems = 'flex-end';\n                        break;                        \n                    default:\n                        div.style.alignItems = 'flex-start';\n                }\n\n                div.style.fontStyle = cssStyle.fontStyle;\n                if (cssStyle.showBackground && cssStyle.showBackground === 'whenActive') {\n                    div.style.backgroundColor = 'transparent';\n                }else {\n                    div.style.backgroundColor = cssStyle.backgroundColor;\n                }\n                div.style.color = cssStyle.color;\n                div.style.fontSize = computeFontSize(cssStyle.fontSize, cellUnit);\n                div.style.fontFamily = cssStyle.fontFamily;\n            }\n        };\n\n    return {\n        videoModel: undefined,\n\n        initialize: function(renderingDiv) {\n            ttmlDiv = renderingDiv;\n            document.addEventListener('webkitfullscreenchange', onFullScreenChange.bind(this));\n            document.addEventListener('mozfullscreenchange', onFullScreenChange.bind(this));\n            document.addEventListener('fullscreenchange', onFullScreenChange.bind(this));\n            this.videoModel.listen(\"seeking\", onSeeking.bind(this));\n        },\n\n        cleanSubtitles: function() {\n            var i = 0;\n\n            for (i = 0; i < subtitleDivTab.length; i++) {\n                removeSubtitleDiv(subtitleDivTab[i]);\n            }\n            subtitleDivTab = [];\n        },\n\n        onCueEnter: function(e) {\n            var newDiv = createSubtitleDiv();\n\n            if (e.currentTarget.style) {\n                applySubtitlesCSSStyle(newDiv, e.currentTarget.style, ttmlDiv);\n                newDiv.ttmlStyle = e.currentTarget.style;\n            }\n\n            if (e.currentTarget.type !== 'image') {\n                var p = document.createElement('p');\n                newDiv.appendChild(p);\n                p.innerText = e.currentTarget.text;\n                p.style.marginTop = 'auto';\n                if (newDiv.ttmlStyle && newDiv.ttmlStyle.showBackground && newDiv.ttmlStyle.showBackground === 'whenActive') {\n                    p.style.backgroundColor = e.currentTarget.style.backgroundColor;\n                }\n            } else {\n                var img = new Image();\n                img.style.height = 'auto';\n                img.style.width = 'auto';\n                img.src = e.currentTarget.text;\n                newDiv.appendChild(img);\n            }\n            newDiv.data = e.currentTarget.text;\n            subtitleDivTab.push(newDiv);\n        },\n\n        onCueExit: function(e) {\n            var i = 0;\n\n            for (i = 0; i < subtitleDivTab.length; i++) {\n                if ((e.currentTarget.text === subtitleDivTab[i].data) && (subtitleDivTab[i].ttmlStyle === e.currentTarget.style)) {\n                    break;\n                }\n            }\n            removeSubtitleDiv(subtitleDivTab[i]);\n            subtitleDivTab.splice(i, 1);\n        }\n    };\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Akamai Technologies nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.VTTParser = function () {\n    \"use strict\";\n\n    var REGEXP_TIMESTAMPMAP = /X-TIMESTAMP-MAP=(.+)/,\n        REGEXP_ATTRIBUTES = /\\s*(.+?)\\s*:((?:\\\".*?\\\")|.*?)(?:,|$)/g,\n        REGEXP_CUE = /(\\S*)[\\s]*-->[\\s]*(\\S*)(.*)/g,\n        REGEXP_LINEBREAK = /(?:\\r\\n|\\r|\\n)/gm,\n\n        parseTimestamp = function(stime) {\n            var timeArray = stime.split(\":\"),\n                len = timeArray.length,\n                time = 0;\n\n            for (var i = 0; i < len; i++) {\n                time += parseFloat(timeArray[i], 10) * Math.pow(60, (len-i-1));\n            }\n\n            return time;\n        },\n\n        parseTimestampMap = function (data) {\n            var match,\n                attrs,\n                name,\n                value,\n                local = null,\n                mpegts = null;\n\n            match = REGEXP_TIMESTAMPMAP.exec(data);\n\n            if (!match) {\n                return -1;\n            }\n            attrs = match[1];\n\n            while ((match = REGEXP_ATTRIBUTES.exec(attrs)) !== null) {\n                name = match[1];\n                value = match[2];\n                switch(name) {\n                    case 'MPEGTS':\n                        mpegts = parseInt(value, 10);\n                        break;\n                    case 'LOCAL':\n                        local = parseTimestamp(value);\n                }\n            }\n\n            if (local === null || mpegts === null) {\n                return -1;\n            }\n\n            // var timestampMap = this.manifestModel.getValue().timestampMap;\n            // if (!timestampMap) {\n            //     return -1;\n            // }\n\n            // var time = timestampMap.local + ((mpegts - timestampMap.mpegts) / 90000.0);\n\n            return {\n                local: local,\n                mpegts: mpegts\n            };\n        },\n\n        getTimestampOffset = function (timestampMap, request) {\n\n            if (timestampMap === -1) {\n                return 0;\n            }\n\n            var streamTimestampMap = this.manifestModel.getValue().timestampMap;\n            if (!streamTimestampMap) {\n                // If MPEGTS timestamp mapping not yet set, then consider segment start time\n                return timestampMap.local - request.startTime;\n            }\n\n            var mpegtsOffset = ((timestampMap.mpegts - streamTimestampMap.mpegts) / 90000.0);\n\n            return (timestampMap.local - streamTimestampMap.local - mpegtsOffset);\n        };\n\n    return {\n        manifestModel: undefined,\n\n        parse: function (data, request) {\n            var cues = [],\n                cue = null,\n                line,\n                cueInfo,\n                i;\n\n            var offset = getTimestampOffset.call(this, parseTimestampMap(data), request);\n            \n            var lines = data.split(REGEXP_LINEBREAK);            \n\n            for (i = 0; i < lines.length; i++) {\n                line = lines[i].trim();\n                if (line.length === 0) {\n                    continue;\n                }\n                if (lines[i].match(REGEXP_CUE)) {\n                    if (cue !== null) {\n                        cues.push(cue);\n                    }\n                    // Start of new cue\n                    cueInfo = lines[i].split(REGEXP_CUE);\n                    cue = {\n                        type: 'text',\n                        line: 80,\n                        start: parseTimestamp(cueInfo[1]) - offset,\n                        end: parseTimestamp(cueInfo[2]) - offset,\n                        // Do not set style, would need to be converted from VTT to TTML in case TTML renderer is used\n                        //style: cueInfo[3].trim(),\n                        data: ''\n                    };\n                } else if (cue !== null) {\n                    cue.data += ((cue.data.length === 0) ? '' : '\\n') + lines[i];\n                }\n            }\n            if (cue !== null) {\n                cues.push(cue);\n            }\n\n            return cues;\n        }\n    };\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.rules.AbandonRequestsRule = function() {\n    \"use strict\";\n\n    var GRACE_TIME_THRESHOLD = 0.5,\n        ABANDON_MULTIPLIER = 2;\n\n    return {\n        debug: undefined,\n        metricsExt:undefined,\n\n        name: \"AbandonRequestRule\",\n\n        execute: function(request, callback) {\n            var now = new Date().getTime(),\n                type = request.streamType,\n                elapsedTime,\n                measuredBandwidth,\n                estimatedTimeOfDownload,\n                switchRequest = new MediaPlayer.rules.SwitchRequest(MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE, MediaPlayer.rules.SwitchRequest.prototype.WEAK);\n\n                if (request.firstByteDate === null || request.aborted) {\n                    this.debug.log(\"[AbandonRequestsRule][\" + type + \"] Request has already been aborted.\");\n                    callback(switchRequest);\n                    return;\n                }\n\n                elapsedTime = (now - request.firstByteDate.getTime()) / 1000;\n\n                if (request.bytesLoaded < request.bytesTotal && elapsedTime >= (request.duration * GRACE_TIME_THRESHOLD)) {\n\n                    measuredBandwidth = request.bytesLoaded / elapsedTime;\n                    estimatedTimeOfDownload = request.bytesTotal / measuredBandwidth;\n\n                    if ((estimatedTimeOfDownload) > (request.duration * ABANDON_MULTIPLIER)) {\n                        switchRequest = new MediaPlayer.rules.SwitchRequest(0, MediaPlayer.rules.SwitchRequest.prototype.STRONG);\n                        this.debug.info(\"[AbandonRequestsRule][\" + type + \"] BW = \" + (measuredBandwidth * 8 / 1000).toFixed(3) + \" kb/s => switch to lowest quality\");\n                    }\n                }\n\n            callback(switchRequest);\n        },\n    };\n};\n\nMediaPlayer.rules.AbandonRequestsRule.prototype = {\n    constructor: MediaPlayer.rules.AbandonRequestsRule\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.rules.BaseRulesCollection = function () {\n    \"use strict\";\n\n    var rules = [],\n        adandonFragmentRules = [];\n\n    return {\n        downloadRatioRule: undefined,\n        insufficientBufferRule: undefined,\n        droppedFramesRule: undefined,\n        abandonRequestRule:undefined,\n \n        getRules: function (type) {\n            switch (type) {\n                case MediaPlayer.rules.BaseRulesCollection.prototype.QUALITY_SWITCH_RULES:\n                    return rules;\n                case MediaPlayer.rules.BaseRulesCollection.prototype.ABANDON_FRAGMENT_RULES:\n                    return adandonFragmentRules;\n                default:\n                    return null;\n            }\n        },\n\n        setup: function () {\n            rules.push(this.downloadRatioRule);\n            rules.push(this.insufficientBufferRule);\n            rules.push(this.droppedFramesRule);\n            adandonFragmentRules.push(this.abandonRequestRule);\n        }\n    };\n};\n\nMediaPlayer.rules.BaseRulesCollection.prototype = {\n    constructor: MediaPlayer.rules.BaseRulesCollection,\n    QUALITY_SWITCH_RULES: \"qualitySwitchRules\",\n    ABANDON_FRAGMENT_RULES: \"abandonFragmentRules\"\n};\n","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.rules.DownloadRatioRule = function() {\n    \"use strict\";\n\n    return {\n        debug: undefined,\n        manifestExt: undefined,\n        metricsExt: undefined,\n        manifestModel: undefined,\n        config: undefined,\n\n        name: \"DownloadRatioRule\",\n\n        checkIndex: function(current, metrics, data) {\n            var requests = this.metricsExt.getHttpRequests(metrics),\n                lastRequest = null,\n                downloadTime,\n                totalTime,\n                calculatedBandwidth,\n                currentBandwidth,\n                latencyInBandwidth,\n                switchUpRatioSafetyFactor,\n                currentRepresentation,\n                count,\n                bandwidths = [],\n                i,\n                q = MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE,\n                totalBytesLength = 0,\n                p = MediaPlayer.rules.SwitchRequest.prototype.DEFAULT;\n\n            if (data && data.hasOwnProperty('type')) {\n                latencyInBandwidth = this.config.getParamFor(data.type, \"ABR.latencyInBandwidth\", \"boolean\", true);\n                switchUpRatioSafetyFactor = this.config.getParamFor(data.type, \"ABR.switchUpRatioSafetyFactor\", \"number\", 1.5);\n                //this.debug.log(\"Checking download ratio rule...\");\n                this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] Checking download ratio rule... (current = \" + current + \")\");\n\n                if (!metrics) {\n                    this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] No metrics, bailing.\");\n                    return new MediaPlayer.rules.SwitchRequest();\n                }\n\n                // Get last valid request\n                i = requests.length - 1;\n                while (i >= 0 && lastRequest === null) {\n                    if (requests[i].tfinish && requests[i].trequest && requests[i].tresponse && requests[i].bytesLength > 0) {\n                        lastRequest = requests[i];\n                    }\n                    i--;\n                }\n\n                if (lastRequest === null) {\n                    this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] No valid requests made for this stream yet, bailing.\");\n                    return new MediaPlayer.rules.SwitchRequest();\n                }\n\n                totalTime = (lastRequest.tfinish.getTime() - lastRequest.trequest.getTime()) / 1000;\n                downloadTime = (lastRequest.tfinish.getTime() - lastRequest.tresponse.getTime()) / 1000;\n\n                if (totalTime <= 0) {\n                    this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] Don't know how long the download of the last fragment took, bailing.\");\n                    return new MediaPlayer.rules.SwitchRequest();\n                }\n\n                if (lastRequest.mediaduration === null ||\n                    lastRequest.mediaduration === undefined ||\n                    lastRequest.mediaduration <= 0 ||\n                    isNaN(lastRequest.mediaduration)) {\n                    this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] Don't know the duration of the last media fragment, bailing.\");\n                    return new MediaPlayer.rules.SwitchRequest();\n                }\n\n                totalBytesLength = lastRequest.bytesLength;\n\n                this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] DL: \" + Number(downloadTime.toFixed(3)) + \"s, Total: \" + Number(totalTime.toFixed(3)) + \"s, Length: \" + totalBytesLength);\n\n                // Take average bandwidth over 3 requests\n                count = 1;\n                while (i >= 0 && count < 3) {\n                    if (requests[i].tfinish && requests[i].trequest && requests[i].tresponse && requests[i].bytesLength > 0) {\n                        var _totalTime = (requests[i].tfinish.getTime() - requests[i].trequest.getTime()) / 1000;\n                        var _downloadTime = (requests[i].tfinish.getTime() - requests[i].tresponse.getTime()) / 1000;\n                        this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] DL: \" + Number(_downloadTime.toFixed(3)) + \"s, Total: \" + Number(_totalTime.toFixed(3)) + \"s, Length: \" + requests[i].bytesLength);\n                        totalTime += _totalTime;\n                        downloadTime += _downloadTime;\n                        totalBytesLength += requests[i].bytesLength;\n                        count += 1;\n                    }\n                    i--;\n                }\n\n                // Set length in bits\n                totalBytesLength *= 8;\n\n                calculatedBandwidth = latencyInBandwidth ? (totalBytesLength / totalTime) : (totalBytesLength / downloadTime);\n\n                this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] BW = \" + Math.round(calculatedBandwidth / 1000) + \" kb/s\");\n\n                if (isNaN(calculatedBandwidth)) {\n                    return new MediaPlayer.rules.SwitchRequest();\n                }\n\n                count = this.manifestExt.getRepresentationCount(data);\n                currentRepresentation = this.manifestExt.getRepresentationFor(current, data);\n                currentBandwidth = this.manifestExt.getBandwidth(currentRepresentation);\n                for (i = 0; i < count; i += 1) {\n                    bandwidths.push(this.manifestExt.getRepresentationBandwidth(data, i));\n                }\n                if (calculatedBandwidth <= currentBandwidth) {\n                    for (i = current - 1; i > 0; i -= 1) {\n                        if (bandwidths[i] <= calculatedBandwidth) {\n                            break;\n                        }\n                    }\n                    q = i;\n                    p = MediaPlayer.rules.SwitchRequest.prototype.WEAK;\n\n                    this.debug.info(\"[DownloadRatioRule][\" + data.type + \"] SwitchRequest: q=\" + q + \"/\" + (count - 1) + \" (\" + bandwidths[q] + \"), p=\" + p);\n                    return new MediaPlayer.rules.SwitchRequest(q, p);\n                } else {\n                    for (i = count - 1; i > current; i -= 1) {\n                        if (calculatedBandwidth > (bandwidths[i] * switchUpRatioSafetyFactor)) {\n                            //this.debug.log(\"[DownloadRatioRule][\" + data.type + \"] bw = \" + calculatedBandwidth + \" results[i] * switchUpRatioSafetyFactor =\" + (bandwidths[i] * switchUpRatioSafetyFactor) + \" with i=\" + i);\n                            break;\n                        }\n                    }\n\n                    q = i;\n                    p = MediaPlayer.rules.SwitchRequest.prototype.STRONG;\n\n                    this.debug.info(\"[DownloadRatioRule][\" + data.type + \"] SwitchRequest: q=\" + q + \"/\" + (count - 1) + \" (\" + bandwidths[q] + \"), p=\" + p);\n                    return new MediaPlayer.rules.SwitchRequest(q, p);\n                }\n            } else {\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n        }\n    };\n};\n\nMediaPlayer.rules.DownloadRatioRule.prototype = {\n    constructor: MediaPlayer.rules.DownloadRatioRule\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.rules.DroppedFramesRule = function() {\n    \"use strict\";\n\n    var MIN_ELAPSED_TIME = 1,\n        lastPlaybackQuality = null,\n        currentDroppedFrames = -1,\n        currentTotalVideoFrames = -1,\n\n        getDroppedFrames = function(playbackQuality) {\n            var elapsedTime;\n\n            if (lastPlaybackQuality === null) {\n                lastPlaybackQuality = playbackQuality;\n                return;\n            }\n\n            // Check sufficient elapsed media time to determine frame rate\n            elapsedTime = playbackQuality.mt - lastPlaybackQuality.mt;\n            if (elapsedTime < MIN_ELAPSED_TIME) {\n                return;\n            }\n\n            currentDroppedFrames = playbackQuality.droppedFrames - lastPlaybackQuality.droppedFrames;\n            currentTotalVideoFrames = playbackQuality.totalVideoFrames - lastPlaybackQuality.totalVideoFrames;\n\n            lastPlaybackQuality = playbackQuality;\n        };\n\n    return {\n        debug: undefined,\n        metricsExt: undefined,\n        manifestModel: undefined,\n        config: undefined,\n\n        name: \"DroppedFramesRule\",\n\n        checkIndex: function(current, metrics, data, playerState) {\n            var droppedFramesMaxRatio = this.config.getParamFor(data.type, \"ABR.droppedFramesMaxRatio\", \"number\", 0.30),\n                droppedFramesMinRatio = this.config.getParamFor(data.type, \"ABR.droppedFramesMinRatio\", \"number\", 0.10),\n                playbackQuality = this.metricsExt.getCurrentPlaybackQuality(metrics),\n                q = MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE,\n                p = MediaPlayer.rules.SwitchRequest.prototype.DEFAULT,\n                ratio;\n\n            if (data === null) {\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n\n            if (data.type !== \"video\") {\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n\n            if (playbackQuality === null) {\n                // No PlaybackQuality metric => start of a new stream => reset lastPlaybackQuality\n                lastPlaybackQuality = null;\n                currentDroppedFrames = currentTotalVideoFrames = -1;\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n\n            // Check if we start buffering the stream. In this case we ignore the rule and reset lastPlaybackQuality\n            if (playerState === 'buffering') {\n                lastPlaybackQuality = null;\n                currentDroppedFrames = currentTotalVideoFrames = -1;\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n\n            //this.debug.info(\"[DroppedFramesRule][\"+data.type+\"] PlaybackQuality = \" + JSON.stringify(playbackQuality));\n\n            // Determine number of dropped frames and fps\n            getDroppedFrames(playbackQuality);\n\n            if (currentDroppedFrames === -1) {\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n\n            ratio = currentDroppedFrames / currentTotalVideoFrames;\n\n            this.debug.info(\"[DroppedFramesRule][\"+data.type+\"] DroppedFrames:\" + currentDroppedFrames + \", totalVideoFrames:\" + currentTotalVideoFrames + \" => ratio = \" + ratio);\n\n            if (ratio > droppedFramesMaxRatio && current > 0) {\n                // If too much dropped frames, then switch to lower representation\n                q = current - 1;\n                p = MediaPlayer.rules.SwitchRequest.prototype.STRONG;\n            } else if (ratio > droppedFramesMinRatio) {\n                // Still some dropped frames, then stay at current quality\n                q = current;\n                p = MediaPlayer.rules.SwitchRequest.prototype.STRONG;\n            }\n\n            this.debug.info(\"[DroppedFramesRule][\" + data.type + \"] SwitchRequest: q=\" + q + \", p=\" + p);\n\n            return new MediaPlayer.rules.SwitchRequest(q, p);\n        }\n    };\n};\n\nMediaPlayer.rules.DroppedFramesRule.prototype = {\n    constructor: MediaPlayer.rules.DroppedFramesRule\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.rules.InsufficientBufferRule = function() {\n    \"use strict\";\n\n    return {\n        debug: undefined,\n        manifestExt: undefined,\n        metricsExt: undefined,\n        manifestModel: undefined,\n        config: undefined,\n        isStartBuffering: {},\n\n        name: \"InsufficientBufferRule\",\n\n        checkIndex: function(current, metrics, data, playerState) {\n            var bufferLevel = this.metricsExt.getCurrentBufferLevel(metrics),\n                minBufferTime,\n                switchLowerBufferRatio,\n                switchLowerBufferTime,\n                switchDownBufferRatio,\n                switchDownBufferTime,\n                switchUpBufferRatio,\n                switchUpBufferTime,\n                mpd,\n                q = current,\n                p = MediaPlayer.rules.SwitchRequest.prototype.DEFAULT;\n\n\n            if (data === null) {\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n\n            // Check if we start buffering the stream. In this case we ignore the rule\n            if (playerState === 'buffering') {\n                this.isStartBuffering[data.type] = true;\n            }\n\n            if (bufferLevel === null) {\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n\n            this.debug.info(\"[InsufficientBufferRule][\" + data.type + \"] Checking buffer level ... (current = \" + current +\n                \", buffer level = \" + (Math.round(bufferLevel.level * 100) / 100) +\n                \", buffering = \" + this.isStartBuffering[data.type] + \")\");\n\n\n            mpd = this.manifestExt.getMpd(this.manifestModel.getValue());\n            if (mpd) {\n                minBufferTime = this.config.getParamFor(data.type, \"BufferController.minBufferTime\", \"number\", mpd.manifest.minBufferTime);\n                switchLowerBufferRatio = this.config.getParamFor(data.type, \"ABR.switchLowerBufferRatio\", \"number\", 0.25);\n                switchLowerBufferTime = this.config.getParamFor(data.type, \"ABR.switchLowerBufferTime\", \"number\", switchLowerBufferRatio * minBufferTime);\n                switchDownBufferRatio = this.config.getParamFor(data.type, \"ABR.switchDownBufferRatio\", \"number\", 0.5);\n                switchDownBufferTime = this.config.getParamFor(data.type, \"ABR.switchDownBufferTime\", \"number\", switchDownBufferRatio * minBufferTime);\n                switchUpBufferRatio = this.config.getParamFor(data.type, \"ABR.switchUpBufferRatio\", \"number\", 0.75);\n                switchUpBufferTime = this.config.getParamFor(data.type, \"ABR.switchUpBufferTime\", \"number\", switchUpBufferRatio * minBufferTime);\n\n                if ((bufferLevel.level < switchDownBufferTime) && (this.isStartBuffering[data.type])) {\n                    return new MediaPlayer.rules.SwitchRequest();\n                } else {\n                    if (bufferLevel.level >= switchDownBufferTime) {\n                        this.isStartBuffering[data.type] = false;\n                    }\n\n                    var max = this.manifestExt.getRepresentationCount(data);\n\n                    max -= 1; // 0 based\n\n                    if (bufferLevel.level <= switchLowerBufferTime) {\n                        q = 0;\n                        p = MediaPlayer.rules.SwitchRequest.prototype.STRONG;\n                    } else if (bufferLevel.level <= switchDownBufferTime) {\n                        q = (current > 0) ? (current - 1) : 0;\n                        p = MediaPlayer.rules.SwitchRequest.prototype.DEFAULT;\n                    }\n\n                    this.debug.info(\"[InsufficientBufferRule][\" + data.type + \"] SwitchRequest: q=\" + q + \", p=\" + p);\n                    return new MediaPlayer.rules.SwitchRequest(q, p);\n\n                }\n            } else {\n                this.debug.log(\"[InsufficientBufferRule][\" + data.type + \"] Manifest not present yet\");\n                return new MediaPlayer.rules.SwitchRequest();\n            }\n        }\n    };\n};\n\nMediaPlayer.rules.InsufficientBufferRule.prototype = {\n    constructor: MediaPlayer.rules.OInsufficientBufferRule\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.rules.LimitSwitchesRule = function () {\n    \"use strict\";\n\n    /*\n     * This rule is intended to limit the number of switches that can happen.\n     * We might get into a situation where there quality is bouncing around a ton.\n     * This can create an unpleasant experience, so let the stream settle down.\n     */\n\n    var MAX_SWITCHES = 10,\n        VALIDATION_TIME = 20000,\n        WAIT_COUNT = 5,\n        waiting = 0;\n\n    return {\n        debug: undefined,\n\n        name: \"LimitSwitchesRule\",\n\n        checkIndex: function (current, metrics /*, data*/) {\n            if (waiting > 0) {\n                waiting -= 1;\n                return new MediaPlayer.rules.SwitchRequest(current, MediaPlayer.rules.SwitchRequest.prototype.STRONG);\n            }\n\n            var self = this,\n                panic = false,\n                rs,\n                now = new Date().getTime(),\n                delay,\n                i,\n                numSwitches = metrics.RepSwitchList.length;\n\n            //self.debug.log(\"Checking limit switches rule...\");\n\n            for (i = numSwitches - 1; i >= 0; i -= 1) {\n                rs = metrics.RepSwitchList[i];\n                delay = now - rs.t.getTime();\n\n                if (delay >= VALIDATION_TIME) {\n                    self.debug.log(\"Reached time limit, bailing.\");\n                    break;\n                }\n\n                if (i >= MAX_SWITCHES) {\n                    self.debug.log(\"Found too many switches within validation time, force the stream to not change.\");\n                    panic = true;\n                    break;\n                }\n            }\n\n            if (panic) {\n                self.debug.log(\"Wait some time before allowing another switch.\");\n                waiting = WAIT_COUNT;\n                return new MediaPlayer.rules.SwitchRequest(current, MediaPlayer.rules.SwitchRequest.prototype.STRONG);\n            } else {\n                return new MediaPlayer.rules.SwitchRequest(MediaPlayer.rules.SwitchRequest.prototype.NO_CHANGE, MediaPlayer.rules.SwitchRequest.prototype.STRONG);\n            }\n        }\n    };\n};\n\nMediaPlayer.rules.LimitSwitchesRule.prototype = {\n    constructor: MediaPlayer.rules.LimitSwitchesRule\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.rules.SwitchRequest = function (q, p) {\n    \"use strict\";\n    this.quality = q;\n    this.priority = p;\n\n    if (this.quality === undefined) {\n        this.quality = 999;\n    }\n\n    if (this.priority === undefined) {\n        this.priority = 0.5;\n    }\n};\n\nMediaPlayer.rules.SwitchRequest.prototype = {\n    constructor: MediaPlayer.rules.SwitchRequest,\n    NO_CHANGE: 999,\n    DEFAULT: 0.5,\n    STRONG: 1,\n    WEAK: 0\n};","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n\n/**\n * Defines the public interface for all ProtectionModel implementations.\n *\n * ProtectionModel implementations provide access to particular versions\n * of the Encrypted Media Extensions (EME) APIs that have been implemented\n * in a user agent.  Developers wishing to add support for a new EME version\n * found in a target user-agent should add a new instance of this interface\n * to the\n *\n * Applications should not need direct access to this object.  All interactions with\n * the protection system should be performed with\n * {@link MediaPlayer.dependencies.ProtectionController}\n *\n * @interface MediaPlayer.models.ProtectionModel\n */\n\nMediaPlayer.models.ProtectionModel = function() { };\n\n/**\n * Returns an array of all initialization data currently used by\n * active sessions.\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#getAllInitData\n * @returns {ArrayBuffer[]} an array of initialization data buffers\n */\n\n/**\n * Determine if the user-agent supports one of the given key systems and\n * content type configurations. Sends ENAME_KEY_SYSTEM_ACCESS_COMPLETE event\n * with a KeySystemAccess object as event data\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#requestKeySystemAccess\n * @param {Object[]} ksConfigurations array of desired key system\n * configurations in priority order (highest priority first)\n * @param {MediaPlayer.dependencies.protection.KeySystem} ksConfigurations.ks\n * the key system\n * @param {MediaPlayer.vo.protection.KeySystemConfiguration[]} ksConfigurations.configs\n * array of acceptable key system configurations\n * for this key system in priority order (highest priority first)\n */\n\n/**\n * Selects the key system to use for all future operations on this\n * ProtectionModel.  Sends ENAME_KEY_SYSTEM_SELECTED with no data\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#selectKeySystem\n * @param keySystemAccess {MediaPlayer.vo.protection.KeySystemAccess} the key\n * system access token representing a supported key system\n */\n\n/**\n * Associate this protection model with a HTMLMediaElement\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#setMediaElement\n * @param mediaElement {HTMLMediaElement} the media element to\n * which we should associate this protection model and all current\n * key sessions\n */\n\n/**\n * Creates a new key session using the given initData and type. Sends\n * ENAME_KEY_SESSION_CREATED event with MediaPlayer.vo.protection.SessionToken\n * as data.\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#createKeySession\n * @param {ArrayBuffer} initData PSSH box for the currently selected\n * key system.\n * @param {string} sessionType the desired session type.  One of \"temporary\",\n * \"persistent-license\", \"persistent-release-message\".  CDM implementations\n * are not required to support anything except \"temporary\"\n */\n\n/**\n * Update the given key session with a key (or any other message\n * intended for the CDM)\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#updateKeySession\n * @param {MediaPlayer.vo.protection.SessionToken} sessionToken the session\n * token\n * @param {ArrayBuffer} message the message that should be delivered to the CDM\n * for this session\n */\n\n/**\n * Loads the persisted key session data associated with the given sessionID\n * into a new session.  Sends ENAME_KEY_SESSION_CREATED event with\n * {@MediaPlayer.vo.protection.SessionToken} as data.\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#loadKeySession\n * @param {string} sessionID the session ID corresponding to the persisted\n * session data to be loaded\n */\n\n/**\n * Removes any persisted key session data associated with the given session.\n * Also closes the session.  Sends ENAME_KEY_SESSION_REMOVED and\n * ENAME_KEY_SESSION_CLOSED with sessionID as data\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#removeKeySession\n * @param {MediaPlayer.vo.protection.SessionToken} sessionToken the session\n * token\n */\n\n/**\n * Close the given session and release all associated keys.  Following\n * this call, the sessionToken becomes invalid.  Sends ENAME_KEY_SESSION_CLOSED\n * with sessionID as data\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#closeKeySession\n * @param sessionToken the session token\n */\n\n/**\n * Sets the certificate to be used by the CDM for encrypting messages\n *\n * @function\n * @name MediaPlayer.models.ProtectionModel#setServerCertificate\n * @param {ArrayBuffer} serverCertificate\n */\n\n/**\n * Currently selected key system.  Will be null or undefined if no key\n * system has yet been selected\n *\n * @instance\n * @name keySystem\n * @memberof MediaPlayer.models.ProtectionModel\n * @readonly\n * @type MediaPlayer.dependencies.protection.KeySystem\n */\n\n\n/**\n * Event IDs for events sent by ProtectionModel implementations. Use these\n * event names when subscribing or unsubscribing from ProtectionModel events.\n *\n * @enum {String}\n */\nMediaPlayer.models.ProtectionModel.eventList = {\n    /**\n     * Event ID for needkey/encrypted events\n     *\n     * @constant\n     */\n    ENAME_NEED_KEY: \"needkey\",\n    /**\n     * Event ID for events delivered when a key system access procedure\n     * has completed\n     *\n     * @constant\n     */\n    ENAME_KEY_SYSTEM_ACCESS_COMPLETE: \"keySystemAccessComplete\",\n    /**\n     * Event ID for events delivered when a key system selection procedure\n     * completes\n     *\n     * @constant\n     */\n    ENAME_KEY_SYSTEM_SELECTED: \"keySystemSelected\",\n    /**\n     * Event ID for events delivered when a HTMLMediaElement has been\n     * associated with the protection set\n     *\n     * @constant\n     */\n    ENAME_VIDEO_ELEMENT_SELECTED: \"videoElementSelected\",\n    /**\n     * Event ID for events delivered when a new server certificate has\n     * been delivered to the CDM\n     *\n     * @constant\n     */\n    ENAME_SERVER_CERTIFICATE_UPDATED: \"serverCertificateUpdated\",\n    /**\n     * Event ID for events delivered when the protection set receives\n     * a key message from the CDM\n     *\n     * @constant\n     */\n    ENAME_KEY_MESSAGE: \"keyMessage\",\n    /**\n     * Event ID for events delivered when a new key has been added\n     *\n     * @constant\n     * @deprecated The latest versions of the EME specification no longer\n     * use this event.  {@MediaPlayer.models.protectionModel.eventList.ENAME_KEY_STATUSES_CHANGED}\n     * is preferred.\n     */\n    ENAME_KEY_ADDED: \"keyAdded\",\n    /**\n     * Event ID for events delivered when an error is encountered by the CDM\n     * while processing a license server response message\n     *\n     * @constant\n     */\n    ENAME_KEY_ERROR: \"keyError\",\n    /**\n     * Event ID for events delivered when a new key sessions creation\n     * process has completed\n     *\n     * @constant\n     */\n    ENAME_KEY_SESSION_CREATED: \"keySessionCreated\",\n    /**\n     * Event ID for events delivered when a key session removal\n     * process has completed\n     *\n     * @constant\n     */\n    ENAME_KEY_SESSION_REMOVED: \"keySessionRemoved\",\n    /**\n     * Event ID for events delivered when a key session close\n     * process has completed\n     *\n     * @constant\n     */\n    ENAME_KEY_SESSION_CLOSED: \"keySessionClosed\",\n    /**\n     * Event ID for events delivered when the status of one or more\n     * decryption keys has changed\n     *\n     * @constant\n     */\n    ENAME_KEY_STATUSES_CHANGED: \"keyStatusesChanged\",\n    /**\n     * Event ID for events delivered when the process of shutting down\n     * a protection set has completed\n     *\n     * @constant\n     */\n    ENAME_TEARDOWN_COMPLETE: \"protectionTeardownComplete\",\n};\n\n/**\n * needkey/encrypted event\n */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.Error = function (code, message, data) {\n    \"use strict\";\n    this.code = code || null;\n    this.message = message || null;\n    this.data = data || null;\n};\n\nMediaPlayer.vo.Error.prototype = {\n    constructor: MediaPlayer.vo.Error\n};","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.Event = function () {\n    \"use strict\";\n    this.type = null; // event type/name. mandatory\n    this.sender = null; // object that fires an event. mandatory\n    this.data = null; // object that contains additional information about the event. optional\n    this.error = null; // error object. optional\n    this.timestamp = NaN; // timestamp. mandatory\n};\n\nMediaPlayer.vo.Event.prototype = {\n    constructor: MediaPlayer.vo.Event\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.models.MetricsList = function () {\n    \"use strict\";\n\n    return {\n        TcpList: [],\n        HttpList: [],\n        RepSwitchList: [],\n        BufferedSwitchList:[],\n        BufferLevel: [],\n        PlayList: [],\n        State: [],\n        DroppedFrames: [],\n        PlaybackQuality: [],\n        VideoResolution: [],\n        DVRInfo: [],\n        ManifestUpdate: []\n    };\n};\n\nMediaPlayer.models.MetricsList.prototype = {\n    constructor: MediaPlayer.models.MetricsList\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2014, Orange\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.Mp4Track = function () {\n    \"use strict\";\n\n    this.type = 'und';\n    this.trackId = 0;\n    this.timescale = 0;\n    this.duration = 0;\n    this.codecs = \"\";\n    this.codecPrivateData = \"\";\n    this.bandwidth = \"\";\n\n    // Video related fields\n    this.width = 0;\n    this.height = 0;\n\n    // Audio related fields\n    this.language = 'und';\n    this.channels = 0;\n    this.samplingRate = 0;\n\n    // Content protection\n    this.contentProtection = undefined;\n\n    // Samples description and data\n    this.samples = [];\n    this.data = null;\n};\n\nMediaPlayer.vo.Mp4Track.prototype = {\n    constructor: MediaPlayer.vo.Mp4Track\n};\n\n\nMediaPlayer.vo.Mp4Track.Sample = function () {\n    \"use strict\";\n\n    this.dts = 0;\n    this.cts = 0;\n    this.duration = 0;\n    this.flags = 0;\n    this.data = null;\n    this.size = 0;\n};\n\nMediaPlayer.vo.Mp4Track.Sample.prototype = {\n    constructor: MediaPlayer.vo.Mp4Track.Sample\n};\n\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.SegmentRequest = function () {\n    \"use strict\";\n    this.action = \"download\";\n    this.startTime = NaN;\n    this.streamType = null;\n    this.type = null;\n    this.duration = NaN;\n    this.timescale = NaN;\n    this.range = null;\n    this.url = null;\n    this.requestStartDate = null;\n    this.firstByteDate = null;\n    this.requestEndDate = null;\n    this.deferred = null;\n    this.quality = NaN;\n    this.index = NaN;\n    this.availabilityStartTime = null;\n    this.availabilityEndTime = null;\n    this.wallStartTime = null;\n};\n\nMediaPlayer.vo.SegmentRequest.prototype = {\n    constructor: MediaPlayer.vo.SegmentRequest,\n    ACTION_DOWNLOAD: \"download\",\n    ACTION_COMPLETE: \"complete\"\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.URIFragmentData = function () {\n    \"use strict\";\n    this.t = null;\n    this.xywh = null;\n    this.track = null;\n    this.id = null;\n    this.s = null;\n};\n\nMediaPlayer.vo.URIFragmentData.prototype = {\n    constructor: MediaPlayer.vo.URIFragmentData\n};\n\n\n/*\n    From Spec http://www.w3.org/TR/media-frags/\n\n    temporal (t)     - This dimension denotes a specific time range in the original media, such as \"starting at second 10, continuing until second 20\";\n    spatial  (xywh)  - this dimension denotes a specific range of pixels in the original media, such as \"a rectangle with size (100,100) with its top-left at coordinate (10,10)\";\n                       Media fragments support also addressing the media along two additional dimensions (in the advanced version defined in Media Fragments 1.0 URI (advanced)):\n    track    (track) - this dimension denotes one or more tracks in the original media, such as \"the english audio and the video track\";\n    id       (id)    - this dimension denotes a named temporal fragment within the original media, such as \"chapter 2\", and can be seen as a convenient way of specifying a temporal fragment.\n\n\n    ## Note\n    Akamai is purposing to add #s=X to the ISO standard.\n        - (X) Value would be a start time to seek to at startup instead of starting at 0 or live edge\n        - Allows for seeking back before the start time unlike a temporal clipping.\n*/","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.BufferedSwitch = function () {\n    \"use strict\";\n\n    this.mt = null;     // Media-Time | The media presentation time of the earliest access unit (out of all media content components) played out from the Representation.\n    this.to = null;     // value of Representation@id identifying the switch-to Representation.\n    this.lto = null;    // If not present, this metrics concerns the Representation as a whole. If present, lto indicates the value of SubRepresentation@level within Representation identifying the switch-to level of the Representation.\n};\n\nMediaPlayer.vo.metrics.BufferedSwitch.prototype = {\n    constructor: MediaPlayer.vo.metrics.BufferedSwitch\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.BufferLevel = function () {\n    \"use strict\";\n\n    this.t = null;      // Real-Time | Time of the measurement of the buffer level.\n    this.level = null;  // Level of the buffer in milliseconds. Indicates the playout duration for which media data of all active media components is available starting from the current playout time.\n};\n\nMediaPlayer.vo.metrics.BufferLevel.prototype = {\n    constructor: MediaPlayer.vo.metrics.BufferLevel\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.Condition = function () {\n    \"use strict\";\n\n    this.isFullScreen = null;\n    this.windowSize = null;\n    this.droppedFrames = null;\n    this.fps = null;\n    this.bandwidth = null;\n};\n\nMediaPlayer.vo.metrics.Condition.prototype = {\n    constructor: MediaPlayer.vo.metrics.Condition\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.DroppedFrames = function () {\n    \"use strict\";\n\n    this.time = null;      // Real-Time | Time of the measurement of the dropped frames.\n    this.droppedFrames = null;  // Number of dropped frames.\n};\n\nMediaPlayer.vo.metrics.DroppedFrames.prototype = {\n    constructor: MediaPlayer.vo.metrics.DroppedFrames\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Akamai Technologies\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.DVRInfo = function () {\n    \"use strict\";\n\n    this.time = null;   // Time of the measurement of the DVR info\n    this.range = null;  // DVR range\n};\n\nMediaPlayer.vo.metrics.DVRInfo.prototype = {\n    constructor: MediaPlayer.vo.metrics.DVRInfo\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.HTTPRequest = function () {\n    \"use strict\";\n\n    this.stream = null;         // type of stream (\"audio\" | \"video\" etc..)\n    this.tcpid = null;          // Identifier of the TCP connection on which the HTTP request was sent.\n    this.type = null;           // This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\n                                    // The type of the request:\n                                    // - MPD\n                                    // - XLink expansion\n                                    // - Initialization Segment\n                                    // - Index Segment\n                                    // - Media Segment\n                                    // - Bitstream Switching Segment\n                                    // - other\n    this.url = null;            // The original URL (before any redirects or failures)\n    this.actualurl = null;      // The actual URL requested, if different from above\n    this.range = null;          // The contents of the byte-range-spec part of the HTTP Range header.\n    this.trequest = null;       // Real-Time | The real time at which the request was sent.\n    this.tresponse = null;      // Real-Time | The real time at which the first byte of the response was received.\n    this.tfinish = null;        // Real-Time | The real time at which the request finshed.\n    this.responsecode = null;   // The HTTP response code.\n    this.interval = null;       // The duration of the throughput trace intervals (ms), for successful requests only.\n    this.mediaduration = null;  // The duration of the media requests, if available, in milliseconds.\n    this.trace = [];            // Throughput traces, for successful requests only.\n    this.startTime = null;      // the media start time of the segment\n    this.quality = null;        // the quality index of the segment\n    this.bytesLength = null;    // the segment bytes length\n};\n\nMediaPlayer.vo.metrics.HTTPRequest.prototype = {\n    constructor: MediaPlayer.vo.metrics.HTTPRequest\n};\n\nMediaPlayer.vo.metrics.HTTPRequest.Trace = function () {\n    \"use strict\";\n\n    /*\n     * s - Real-Time | Measurement period start.\n     * d - Measurement period duration (ms).\n     * b - List of integers counting the bytes received in each trace interval within the measurement period.\n     */\n    this.s = null;\n    this.d = null;\n    this.b = [];\n};\n\nMediaPlayer.vo.metrics.HTTPRequest.Trace.prototype = {\n    constructor : MediaPlayer.vo.metrics.HTTPRequest.Trace\n};\n","MediaPlayer.vo.metrics.ManifestUpdate = function () {\n    \"use strict\";\n\n    this.streamType = null;\n    this.type = null;                       // static|dynamic\n    this.requestTime = null;                // when this manifest update was requested\n    this.fetchTime = null;                  // when this manifest update was received\n    this.availabilityStartTime = null;\n    this.presentationStartTime = 0;      // the seek point (liveEdge for dynamic, Period[0].startTime for static)\n    this.clientTimeOffset = 0;           // the calculated difference between the server and client wall clock time\n    this.currentTime = null;                // actual element.currentTime\n    this.buffered = null;                   // actual element.ranges\n    this.latency = 0;                       // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)\n    this.periodInfo = [];\n    this.representationInfo = [];\n};\n\nMediaPlayer.vo.metrics.ManifestUpdate.PeriodInfo = function () {\n    \"use strict\";\n\n    this.id = null;         // Period@id\n    this.index = null;\n    this.start = null;      // Period@start\n    this.duration = null;   // Period@duration\n};\n\nMediaPlayer.vo.metrics.ManifestUpdate.RepresentationInfo = function () {\n    \"use strict\";\n\n    this.id = null;                         // Representation@id\n    this.index = null;\n    this.streamType = null;\n    this.periodIndex = null;\n    this.presentationTimeOffset = null;     // @presentationTimeOffset\n    this.startNumber = null;                // @startNumber\n    this.segmentInfoType = null;            // list|template|timeline\n};\n\nMediaPlayer.vo.metrics.ManifestUpdate.prototype = {\n    constructor: MediaPlayer.vo.metrics.ManifestUpdate\n};\n\nMediaPlayer.vo.metrics.ManifestUpdate.PeriodInfo.prototype = {\n    constructor: MediaPlayer.vo.metrics.ManifestUpdate.PeriodInfo\n};\n\nMediaPlayer.vo.metrics.ManifestUpdate.RepresentationInfo.prototype = {\n    constructor: MediaPlayer.vo.metrics.ManifestUpdate.RepresentationInfo\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.PlaybackQuality = function () {\n    \"use strict\";\n\n    this.t = null;                  // Real-Time | Time of the measurement of the playback quality\n    this.mt = null;                 // Media-Time | Media presentation time of the measurement of the playback quality\n    this.droppedFrames = null;      // Number of dropped frames\n    this.totalVideoFrames = null;   // Number of decoded video frames\n};\n\nMediaPlayer.vo.metrics.PlaybackQuality.prototype = {\n    constructor: MediaPlayer.vo.metrics.PlaybackQuality\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.PlayList = function () {\n    \"use strict\";\n\n    this.stream = null;     // type of stream (\"audio\" | \"video\" etc..)\n    this.start = null;      // Real-Time | Timestamp of the user action that starts the playback period...\n    this.mstart = null;     // Media-Time | Presentation time at which playout was requested by the user...\n    this.starttype = null;  // Type of user action which triggered playout\n                            //      - New playout request (e.g. initial playout or seeking)\n                            //      - Resume from pause\n                            //        - Other user request (e.g. user-requested quality change)\n                            //        - Start of a metrics collection period (hence earlier entries in the play list not collected)\n    this.trace = [];        // List of periods of continuous rendering of decoded samples.\n};\n\nMediaPlayer.vo.metrics.PlayList.Trace = function () {\n    \"use strict\";\n\n    /*\n     * representationid - The value of the Representation@id of the Representation from which the samples were taken.\n     * subreplevel      - If not present, this metrics concerns the Representation as a whole. If present, subreplevel indicates the greatest value of any Subrepresentation@level being rendered.\n     * start            - Real-Time | The time at which the first sample was rendered.\n     * mstart           - Media-Time | The presentation time of the first sample rendered.\n     * duration         - The duration of the continuously presented samples (which is the same in real time and media time). ―Continuously presented‖ means that the media clock continued to advance at the playout speed throughout the interval.\n     * playbackspeed    - The playback speed relative to normal playback speed (i.e.normal forward playback speed is 1.0).\n     * stopreason       - The reason why continuous presentation of this Representation was stopped.\n     *                    Either:\n     *                    representation switch\n     *                    rebuffering\n     *                    user request\n     *                    end of Period\n     *                    end of content\n     *                    end of a metrics collection period\n     */\n    this.representationid = null;\n    this.subreplevel = null;\n    this.start = null;\n    this.mstart = null;\n    this.duration = null;\n    this.playbackspeed = null;\n    this.stopreason = null;\n};\n\nMediaPlayer.vo.metrics.PlayList.prototype = {\n    constructor: MediaPlayer.vo.metrics.PlayList\n};\n\n/* Public Static Constants */\nMediaPlayer.vo.metrics.PlayList.INITIAL_PLAY_START_REASON = \"initial_start\";\nMediaPlayer.vo.metrics.PlayList.SEEK_START_REASON = \"seek\";\n\nMediaPlayer.vo.metrics.PlayList.Trace.prototype = {\n    constructor: MediaPlayer.vo.metrics.PlayList.Trace()\n};\n\n/* Public Static Constants */\nMediaPlayer.vo.metrics.PlayList.Trace.USER_REQUEST_STOP_REASON = \"user_request\";\nMediaPlayer.vo.metrics.PlayList.Trace.REPRESENTATION_SWITCH_STOP_REASON = \"representation_switch\";\nMediaPlayer.vo.metrics.PlayList.Trace.END_OF_CONTENT_STOP_REASON = \"end_of_content\";\nMediaPlayer.vo.metrics.PlayList.Trace.REBUFFERING_REASON = \"rebuffering\";","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.RepresentationSwitch = function () {\n    \"use strict\";\n\n    this.t = null;      // Real-Time | Time of the switch event.\n    this.mt = null;     // Media-Time | The media presentation time of the earliest access unit (out of all media content components) played out from the Representation.\n    this.to = null;     // value of Representation@id identifying the switch-to Representation.\n    this.lto = null;    // If not present, this metrics concerns the Representation as a whole. If present, lto indicates the value of SubRepresentation@level within Representation identifying the switch-to level of the Representation.\n};\n\nMediaPlayer.vo.metrics.RepresentationSwitch.prototype = {\n    constructor: MediaPlayer.vo.metrics.RepresentationSwitch\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.Session = function () {\n    \"use strict\";\n\n    this.uri = null;\n    this.loopMode = null;\n    this.endTime = null;\n    this.playerType = null;\n};\n\nMediaPlayer.vo.metrics.Session.prototype = {\n    constructor: MediaPlayer.vo.metrics.Session\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.State = function () {\n    \"use strict\";\n\n    this.t = null;      // Real-Time | Time of the event.\n    this.current = null;    // current state\n    this.position = null;    // position in the stream\n    this.reason = null;\n};\n\nMediaPlayer.vo.metrics.State.prototype = {\n    constructor: MediaPlayer.vo.metrics.State\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.TCPConnection = function () {\n    \"use strict\";\n\n    this.tcpid = null;      // Identifier of the TCP connection on which the HTTP request was sent.\n    this.dest = null;       // IP Address of the interface over which the client is receiving the TCP data.\n    this.topen = null;      // Real-Time | The time at which the connection was opened (sending time of the initial SYN or connect socket operation).\n    this.tclose = null;     // Real-Time | The time at which the connection was closed (sending or reception time of FIN or RST or close socket operation).\n    this.tconnect = null;   // Connect time in ms (time from sending the initial SYN to receiving the ACK or completion of the connect socket operation).\n};\n\nMediaPlayer.vo.metrics.TCPConnection.prototype = {\n    constructor: MediaPlayer.vo.metrics.TCPConnection\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.vo.metrics.VideoResolution = function () {\n    \"use strict\";\n\n    this.t = null;      // Real-Time | Time of the event.\n    this.mt = null;     // Media-Time | Media presentation time of the measurement of the video resolution\n    this.width = null;  // video width\n    this.height = null; // video height\n};\n\nMediaPlayer.vo.metrics.VideoResolution.prototype = {\n    constructor: MediaPlayer.vo.metrics.VideoResolution\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*jshint -W020 */\nDash = (function () {\n    \"use strict\";\n\n    return {\n        modules: {},\n        dependencies: {},\n        vo: {},\n        di: {}\n    };\n}());","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.dependencies.BaseURLExtensions = function () {\n    \"use strict\";\n\n        // From YouTube player.  Reformatted for JSLint.\n    var parseSIDX = function (ab, ab_first_byte_offset) {\n            var d = new DataView(ab),\n                sidx = {},\n                pos = 0,\n                offset,\n                time,\n                sidxEnd,\n                i,\n                ref_type,\n                ref_size,\n                ref_dur,\n                type,\n                size,\n                charCode;\n\n            while (type !== \"sidx\" && pos < d.byteLength) {\n                size = d.getUint32(pos); // subtract 8 for including the size and type\n                pos += 4;\n\n                type = \"\";\n                for (i = 0; i < 4; i += 1) {\n                    charCode = d.getInt8(pos);\n                    type += String.fromCharCode(charCode);\n                    pos += 1;\n                }\n\n                if (type !== \"moof\" && type !== \"traf\" && type !== \"sidx\") {\n                    pos += size - 8;\n                } else if (type === \"sidx\") {\n                    // reset the position to the beginning of the box...\n                    // if we do not reset the position, the evaluation\n                    // of sidxEnd to ab.byteLength will fail.\n                    pos -= 8;\n                }\n            }\n\n            sidxEnd = d.getUint32(pos, false) + pos;\n            if (sidxEnd > ab.byteLength) {\n                throw \"sidx terminates after array buffer\";\n            }\n\n            sidx.version = d.getUint8(pos + 8);\n            pos += 12;\n\n            // skipped reference_ID(32)\n            sidx.timescale = d.getUint32(pos + 4, false);\n            pos += 8;\n\n            if (sidx.version === 0) {\n                sidx.earliest_presentation_time = d.getUint32(pos, false);\n                sidx.first_offset = d.getUint32(pos + 4, false);\n                pos += 8;\n            } else {\n                // TODO(strobe): Overflow checks\n                sidx.earliest_presentation_time = utils.Math.to64BitNumber(d.getUint32(pos + 4, false), d.getUint32(pos, false));\n                //first_offset = utils.Math.to64BitNumber(d.getUint32(pos + 8, false), d.getUint32(pos + 12, false));\n                sidx.first_offset = (d.getUint32(pos + 8, false) << 32) + d.getUint32(pos + 12, false);\n                pos += 16;\n            }\n\n            sidx.first_offset += sidxEnd + (ab_first_byte_offset || 0);\n\n            // skipped reserved(16)\n            sidx.reference_count = d.getUint16(pos + 2, false);\n            pos += 4;\n\n            sidx.references = [];\n            offset = sidx.first_offset;\n            time = sidx.earliest_presentation_time;\n\n            for (i = 0; i < sidx.reference_count; i += 1) {\n                ref_size = d.getUint32(pos, false);\n                ref_type = (ref_size >>> 31);\n                ref_size = ref_size & 0x7fffffff;\n                ref_dur = d.getUint32(pos + 4, false);\n                pos += 12;\n                if (ref_size > 0) {\n                    sidx.references.push({\n                        'size': ref_size,\n                        'type': ref_type,\n                        'offset': offset,\n                        'duration': ref_dur,\n                        'time': time,\n                        'timescale': sidx.timescale\n                    });\n                }\n                offset += ref_size;\n                time += ref_dur;\n            }\n\n            if (pos !== sidxEnd) {\n                throw \"Error: final pos \" + pos + \" differs from SIDX end \" + sidxEnd;\n            }\n\n            return sidx;\n        },\n\n        parseSegments = function (data, media, offset) {\n            var parsed,\n                ref,\n                segments,\n                segment,\n                i,\n                len,\n                start,\n                end;\n\n            parsed = parseSIDX.call(this, data, offset);\n            ref = parsed.references;\n            segments = [];\n\n            for (i = 0, len = ref.length; i < len; i += 1) {\n                segment = new Dash.vo.Segment();\n                segment.duration = ref[i].duration;\n                segment.media = media;\n                segment.startTime = ref[i].time;\n                segment.timescale = ref[i].timescale;\n\n                start = ref[i].offset;\n                end = ref[i].offset + ref[i].size - 1;\n                segment.mediaRange = start + \"-\" + end;\n\n                segments.push(segment);\n            }\n\n            this.debug.log(\"Parsed SIDX box: \" + segments.length + \" segments.\");\n            return segments;\n        },\n\n        findInit = function (data, info) {\n            var deferred = Q.defer(),\n                ftyp,\n                moov,\n                start,\n                end,\n                d = new DataView(data),\n                pos = 0,\n                type = \"\",\n                size = 0,\n                bytesAvailable,\n                i,\n                c,\n                request,\n                loaded = false,\n                irange,\n                self = this;\n\n            self.debug.log(\"Searching for initialization.\");\n\n            while (type !== \"moov\" && pos < d.byteLength) {\n                size = d.getUint32(pos); // subtract 8 for including the size and type\n                pos += 4;\n\n                type = \"\";\n                for (i = 0; i < 4; i += 1) {\n                    c = d.getInt8(pos);\n                    type += String.fromCharCode(c);\n                    pos += 1;\n                }\n\n                if (type === \"ftyp\") {\n                    ftyp = pos - 8;\n                }\n                if (type === \"moov\") {\n                    moov = pos - 8;\n                }\n                if (type !== \"moov\") {\n                    pos += size - 8;\n                }\n            }\n\n            bytesAvailable = d.byteLength - pos;\n\n            if (type !== \"moov\") {\n                // Case 1\n                // We didn't download enough bytes to find the moov.\n                // TODO : Load more bytes.\n                //        Be sure to detect EOF.\n                //        Throw error is no moov is found in the entire file.\n                //        Protection from loading the entire file?\n                self.debug.log(\"Loading more bytes to find initialization.\");\n                info.range.start = 0;\n                info.range.end = info.bytesLoaded + info.bytesToLoad;\n\n                request = new XMLHttpRequest();\n\n                request.onloadend = function () {\n                    if (!loaded) {\n                        deferred.reject(\"Error loading initialization.\");\n                    }\n                };\n\n                request.onload = function () {\n                    loaded = true;\n                    info.bytesLoaded = info.range.end;\n                    findInit.call(self, request.response).then(\n                        function (segments) {\n                            deferred.resolve(segments);\n                        }\n                    );\n                };\n\n                request.onerror = function () {\n                    deferred.reject(\"Error loading initialization.\");\n                };\n\n                request.open(\"GET\", self.tokenAuthentication.addTokenAsQueryArg(info.url));\n                request.responseType = \"arraybuffer\";\n                request.setRequestHeader(\"Range\", \"bytes=\" + info.range.start + \"-\" + info.range.end);\n                request = self.tokenAuthentication.setTokenInRequestHeader(request);\n                request.send(null);\n            } else {\n                // Case 2\n                // We have the entire range, so continue.\n                start = ftyp === undefined ? moov : ftyp;\n                end = moov + size - 1;\n                irange = start + \"-\" + end;\n\n                self.debug.log(\"Found the initialization.  Range: \" + irange);\n                deferred.resolve(irange);\n            }\n\n            return deferred.promise;\n        },\n\n        loadInit = function (media) {\n            var deferred = Q.defer(),\n                request = new XMLHttpRequest(),\n                needFailureReport = true,\n                self = this,\n                info = {\n                    url: media,\n                    range: {},\n                    searching: false,\n                    bytesLoaded: 0,\n                    bytesToLoad: 1500,\n                    request: request\n                };\n\n            self.debug.log(\"Start searching for initialization.\");\n            info.range.start = 0;\n            info.range.end = info.bytesToLoad;\n\n            request.onload = function () {\n                if (request.status < 200 || request.status > 299)\n                {\n                  return;\n                }\n                needFailureReport = false;\n\n                info.bytesLoaded = info.range.end;\n                findInit.call(self, request.response, info).then(\n                    function (range) {\n                        deferred.resolve(range);\n                    },function(){\n                        deferred.reject();\n                    }\n                );\n            };\n\n            request.onloadend = request.onerror = function () {\n                if (!needFailureReport)\n                {\n                  return;\n                }\n                needFailureReport = false;\n\n                var data = {};\n                data.url = info.url;\n                data.request = request;\n\n                self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_INIT, null, data);\n                deferred.reject(request);\n            };\n\n            request.open(\"GET\", self.tokenAuthentication.addTokenAsQueryArg(info.url));\n            request.responseType = \"arraybuffer\";\n            request.setRequestHeader(\"Range\", \"bytes=\" + info.range.start + \"-\" + info.range.end);\n            request = self.tokenAuthentication.setTokenInRequestHeader(request);\n            request.send(null);\n            self.debug.log(\"Perform init search: \" + info.url);\n\n            return deferred.promise;\n        },\n\n        findSIDX = function (data, info) {\n            var deferred = Q.defer(),\n                d = new DataView(data),\n                request = new XMLHttpRequest(),\n                pos = 0,\n                type = \"\",\n                size = 0,\n                bytesAvailable,\n                sidxBytes,\n                sidxSlice,\n                sidxOut,\n                i,\n                c,\n                needFailureReport = true,\n                parsed,\n                ref,\n                loadMultiSidx = false,\n                self = this;\n\n            self.debug.log(\"Searching for SIDX box.\");\n            self.debug.log(info.bytesLoaded + \" bytes loaded.\");\n\n            while (type !== \"sidx\" && pos < d.byteLength) {\n                size = d.getUint32(pos); // subtract 8 for including the size and type\n                pos += 4;\n\n                type = \"\";\n                for (i = 0; i < 4; i += 1) {\n                    c = d.getInt8(pos);\n                    type += String.fromCharCode(c);\n                    pos += 1;\n                }\n\n                if (type !== \"sidx\") {\n                    pos += size - 8;\n                }\n            }\n\n            bytesAvailable = d.byteLength - pos;\n\n            if (type !== \"sidx\") {\n                // Case 1\n                // We didn't download enough bytes to find the sidx.\n                // TODO : Load more bytes.\n                //        Be sure to detect EOF.\n                //        Throw error is no sidx is found in the entire file.\n                //        Protection from loading the entire file?\n                deferred.reject();\n            } else if (bytesAvailable < (size - 8)) {\n                // Case 2\n                // We don't have the entire box.\n                // Increase the number of bytes to read and load again.\n                self.debug.log(\"Found SIDX but we don't have all of it.\");\n\n                info.range.start = 0;\n                info.range.end = info.bytesLoaded + (size - bytesAvailable);\n\n                request.onload = function () {\n                    if (request.status < 200 || request.status > 299)\n                    {\n                      return;\n                    }\n                    needFailureReport = false;\n\n                    info.bytesLoaded = info.range.end;\n                    findSIDX.call(self, request.response, info).then(\n                        function (segments) {\n                            deferred.resolve(segments);\n                        }\n                    );\n                };\n\n                request.onloadend = request.onerror = function () {\n                    if (!needFailureReport)\n                    {\n                      return;\n                    }\n                    needFailureReport = false;\n                    \n                    var data = {};\n                    data.url = info.url;\n                    data.request = request;\n\n                    self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_SIDX, null, data);\n                    deferred.reject(request);\n                };\n\n                request.open(\"GET\", self.tokenAuthentication.addTokenAsQueryArg(info.url));\n                request.responseType = \"arraybuffer\";\n                request.setRequestHeader(\"Range\", \"bytes=\" + info.range.start + \"-\" + info.range.end);\n                request = self.tokenAuthentication.setTokenInRequestHeader(request);\n                request.send(null);\n            } else {\n                // Case 3\n                // We have the entire box, so parse it and continue.\n                info.range.start = pos - 8;\n                info.range.end = info.range.start + size;\n\n                self.debug.log(\"Found the SIDX box.  Start: \" + info.range.start + \" | End: \" + info.range.end);\n//                sidxBytes = data.slice(info.range.start, info.range.end);\n                sidxBytes = new ArrayBuffer(info.range.end - info.range.start);\n                sidxOut = new Uint8Array(sidxBytes);\n                sidxSlice = new Uint8Array(data, info.range.start, info.range.end - info.range.start);\n                sidxOut.set(sidxSlice);\n\n                parsed = this.parseSIDX.call(this, sidxBytes, info.range.start);\n\n                // We need to check to see if we are loading multiple sidx.\n                // For now just check the first reference and assume they are all the same.\n                // TODO : Can the referenceTypes be mixed?\n                // TODO : Load them all now, or do it as needed?\n\n                ref = parsed.references;\n                if (ref !== null && ref !== undefined && ref.length > 0) {\n                    loadMultiSidx = (ref[0].type === 1);\n                }\n\n                if (loadMultiSidx) {\n                    self.debug.log(\"Initiate multiple SIDX load.\");\n\n                    var j, len, ss, se, r, funcs = [], segs;\n\n                    for (j = 0, len = ref.length; j < len; j += 1) {\n                        ss = ref[j].offset;\n                        se = ref[j].offset + ref[j].size - 1;\n                        r = ss + \"-\" + se;\n\n                        funcs.push(this.loadSegments.call(self, info.url, r));\n                    }\n\n                    Q.all(funcs).then(\n                        function (results) {\n                            segs = [];\n                            for (j = 0, len = results.length; j < len; j += 1) {\n                                segs = segs.concat(results[j]);\n                            }\n                            deferred.resolve(segs);\n                        },\n                        function (httprequest) {\n                            deferred.reject(httprequest);\n                        }\n                    );\n\n                } else {\n                    self.debug.log(\"Parsing segments from SIDX.\");\n                    deferred.resolve(parseSegments.call(self, sidxBytes, info.url, info.range.start));\n                }\n            }\n\n            return deferred.promise;\n        },\n\n        loadSegments = function (media, theRange) {\n            var deferred = Q.defer(),\n                request = new XMLHttpRequest(),\n                parts,\n                needFailureReport = true,\n                self = this,\n                info = {\n                    url: media,\n                    range: {},\n                    searching: false,\n                    bytesLoaded: 0,\n                    bytesToLoad: 1500,\n                    request: request\n                };\n\n            // We might not know exactly where the sidx box is.\n            // Load the first n bytes (say 1500) and look for it.\n            if (theRange === null) {\n                self.debug.log(\"No known range for SIDX request.\");\n                info.searching = true;\n                info.range.start = 0;\n                info.range.end = info.bytesToLoad;\n            } else {\n                parts = theRange.split(\"-\");\n                info.range.start = parseFloat(parts[0]);\n                info.range.end = parseFloat(parts[1]);\n            }\n\n            request.onload = function () {\n                if (request.status < 200 || request.status > 299)\n                {\n                  return;\n                }\n                needFailureReport = false;\n\n\n                // If we didn't know where the SIDX box was, we have to look for it.\n                // Iterate over the data checking out the boxes to find it.\n                if (info.searching) {\n                    info.bytesLoaded = info.range.end;\n                    findSIDX.call(self, request.response, info).then(\n                        function (segments) {\n                            deferred.resolve(segments);\n                        }, function(){\n                            deferred.reject();\n                        }\n                    );\n                } else {\n                    deferred.resolve(parseSegments.call(self, request.response, info.url, info.range.start));\n                }\n            };\n\n            request.onloadend = request.onerror = function () {\n                if (!needFailureReport)\n                {\n                  return;\n                }\n                needFailureReport = false;\n\n                var data = {};\n                data.url = info.url;\n                data.request = request;\n                \n                self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_SIDX, null, data);\n                deferred.reject(request);\n            };\n\n            request.open(\"GET\", self.tokenAuthentication.addTokenAsQueryArg(info.url));\n            request.responseType = \"arraybuffer\";\n            request.setRequestHeader(\"Range\", \"bytes=\" + info.range.start + \"-\" + info.range.end);\n            request = self.tokenAuthentication.setTokenInRequestHeader(request);\n            request.send(null);\n            self.debug.log(\"Perform SIDX load: \" + info.url);\n\n            return deferred.promise;\n        };\n\n    return {\n        debug: undefined,\n        errHandler: undefined,\n        tokenAuthentication:undefined,\n        loadSegments: loadSegments,\n        loadInitialization: loadInit,\n        parseSegments: parseSegments,\n        parseSIDX: parseSIDX,\n        findSIDX: findSIDX\n    };\n};\n\nDash.dependencies.BaseURLExtensions.prototype = {\n    constructor: Dash.dependencies.BaseURLExtensions\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.di.DashContext = function () {\n    \"use strict\";\n\n    return {\n        system : undefined,\n        setup : function () {\n            Dash.di.DashContext.prototype.setup.call(this);\n\n            this.system.mapClass('parser', Dash.dependencies.DashParser);\n            this.system.mapClass('indexHandler', Dash.dependencies.DashHandler);\n            this.system.mapClass('baseURLExt', Dash.dependencies.BaseURLExtensions);\n            this.system.mapClass('fragmentExt', Dash.dependencies.FragmentExtensions);\n            this.system.mapSingleton('manifestExt', Dash.dependencies.DashManifestExtensions);\n            this.system.mapSingleton('metricsExt', Dash.dependencies.DashMetricsExtensions);\n            this.system.mapSingleton('timelineConverter', Dash.dependencies.TimelineConverter);\n        }\n    };\n};\n\nDash.di.DashContext.prototype = new MediaPlayer.di.Context();\nDash.di.DashContext.prototype.constructor = Dash.di.DashContext;\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.dependencies.DashHandler = function() {\n    \"use strict\";\n\n    var index = -1,\n        requestedTime = null,\n        isDynamic,\n        type,\n\n        zeroPadToLength = function(numStr, minStrLength) {\n            while (numStr.length < minStrLength) {\n                numStr = \"0\" + numStr;\n            }\n\n            return numStr;\n        },\n\n        replaceTokenForTemplate = function(url, token, value) {\n            var startPos = 0,\n                endPos = 0,\n                tokenLen = token.length,\n                formatTag = \"%0\",\n                formatTagLen = formatTag.length,\n                formatTagPos,\n                specifier,\n                width,\n                paddedValue;\n\n            // keep looping round until all instances of <token> have been\n            // replaced. once that has happened, startPos below will be -1\n            // and the completed url will be returned.\n            while (true) {\n\n                // check if there is a valid $<token>...$ identifier\n                // if not, return the url as is.\n                startPos = url.indexOf(\"$\" + token);\n                if (startPos < 0) {\n                    return url;\n                }\n\n                // the next '$' must be the end of the identifer\n                // if there isn't one, return the url as is.\n                endPos = url.indexOf(\"$\", startPos + tokenLen);\n                if (endPos < 0) {\n                    return url;\n                }\n\n                // now see if there is an additional format tag suffixed to\n                // the identifier within the enclosing '$' characters\n                formatTagPos = url.indexOf(formatTag, startPos + tokenLen);\n                if (formatTagPos > startPos && formatTagPos < endPos) {\n\n                    specifier = url.charAt(endPos - 1);\n                    width = parseInt(url.substring(formatTagPos + formatTagLen, endPos - 1), 10);\n\n                    // support the minimum specifiers required by IEEE 1003.1\n                    // (d, i , o, u, x, and X) for completeness\n                    switch (specifier) {\n                        // treat all int types as uint,\n                        // hence deliberate fallthrough\n                        case 'd':\n                        case 'i':\n                        case 'u':\n                            paddedValue = zeroPadToLength(value.toString(), width);\n                            break;\n                        case 'x':\n                            paddedValue = zeroPadToLength(value.toString(16), width);\n                            break;\n                        case 'X':\n                            paddedValue = zeroPadToLength(value.toString(16), width).toUpperCase();\n                            break;\n                        case 'o':\n                            paddedValue = zeroPadToLength(value.toString(8), width);\n                            break;\n                        default:\n                            this.debug.log(\"Unsupported/invalid IEEE 1003.1 format identifier string in URL\");\n                            return url;\n                    }\n                } else {\n                    paddedValue = value;\n                }\n\n                url = url.substring(0, startPos) + paddedValue + url.substring(endPos + 1);\n            }\n        },\n\n        unescapeDollarsInTemplate = function(url) {\n            return url.split(\"$$\").join(\"$\");\n        },\n\n        replaceIDForTemplate = function(url, value) {\n            if (value === null || url.indexOf(\"$RepresentationID$\") === -1) {\n                return url;\n            }\n            var v = value.toString();\n            return url.split(\"$RepresentationID$\").join(v);\n        },\n\n        getNumberForSegment = function(segment, segmentIndex) {\n            return segment.representation.startNumber + segmentIndex;\n        },\n\n        getRequestUrl = function(destination, representation) {\n            var baseURL = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].BaseURL,\n            url;\n\n            if (destination === baseURL) {\n                url = destination;\n            } else if ((destination.indexOf(\"http://\") !== -1) || (destination.indexOf(\"https://\") !== -1)) {\n                url = destination;\n            } else {\n                url = baseURL + destination;\n            }\n\n            return url;\n        },\n\n        generateInitRequest = function(representation, streamType) {\n            var self = this,\n                period,\n                request = new MediaPlayer.vo.SegmentRequest(),\n                presentationStartTime;\n\n            period = representation.adaptation.period;\n\n            request.streamType = streamType;\n            request.type = \"Initialization Segment\";\n            request.url = getRequestUrl(representation.initialization, representation);\n            request.range = representation.range;\n            presentationStartTime = period.start;\n            request.availabilityStartTime = self.timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic);\n            request.availabilityEndTime = self.timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic);\n            request.quality = representation.index;\n\n            return request;\n        },\n\n        getInit = function(representation) {\n            var deferred = Q.defer(),\n                request = null,\n                url = null,\n                self = this;\n\n            if (!representation) {\n                return Q.reject(\"no represenation\");\n            }\n\n            //self.debug.log(\"Getting the initialization request.\");\n\n            if (representation.initialization) {\n                //self.debug.log(\"Got an initialization.\");\n                request = generateInitRequest.call(self, representation, type);\n                deferred.resolve(request);\n            } else {\n                // Go out and find the initialization.\n                url = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n                AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].BaseURL;\n                self.baseURLExt.loadInitialization(url).then(\n                    function(theRange) {\n                        //self.debug.log(\"Got an initialization.\");\n                        representation.range = theRange;\n                        representation.initialization = url;\n                        request = generateInitRequest.call(self, representation, type);\n                        deferred.resolve(request);\n                    },\n                    function(httprequest) {\n                        deferred.reject(httprequest);\n                    }\n                );\n            }\n\n            return deferred.promise;\n        },\n\n        isMediaFinished = function(representation) { // TODO\n            var sDuration,\n                period = representation.adaptation.period,\n                isFinished = false,\n                seg,\n                fTime;\n\n            //this.debug.log(\"Checking for stream end...\");\n            if (isDynamic) {\n                //this.debug.log(\"Live never ends! (TODO)\");\n                // TODO : Check the contents of the last box to signal end.\n                isFinished = false;\n            } else {\n                if (index < 0) {\n                    isFinished = false;\n                } else if (index < representation.availableSegmentsNumber + representation.segmentStartIndex) {\n                    seg = getSegmentByIndex(index, representation);\n\n                    if (seg) {\n                        fTime = seg.presentationStartTime - period.start;\n                        sDuration = representation.adaptation.period.duration;\n                        //this.debug.log(representation.segmentInfoType + \": \" + fTime + \" / \" + sDuration);\n                        isFinished = (fTime >= sDuration);\n                    }\n                } else {\n                    isFinished = true;\n                }\n            }\n\n            return isFinished;\n        },\n\n        getIndexBasedSegment = function(representation, index) {\n            var self = this,\n                seg,\n                duration,\n                presentationStartTime,\n                presentationEndTime;\n\n            duration = representation.segmentDuration;\n            presentationStartTime = representation.adaptation.period.start + (index * duration);\n            presentationEndTime = presentationStartTime + duration;\n\n            seg = new Dash.vo.Segment();\n\n            seg.representation = representation;\n            seg.duration = duration;\n            seg.presentationStartTime = presentationStartTime;\n\n            seg.mediaStartTime = self.timelineConverter.calcMediaTimeFromPresentationTime(seg.presentationStartTime, representation);\n\n            seg.availabilityStartTime = self.timelineConverter.calcAvailabilityStartTimeFromPresentationTime(seg.presentationStartTime, representation.adaptation.period.mpd, isDynamic);\n            seg.availabilityEndTime = self.timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic);\n\n            // at this wall clock time, the video element currentTime should be seg.presentationStartTime\n            seg.wallStartTime = self.timelineConverter.calcWallTimeForSegment(seg, isDynamic);\n\n            seg.replacementNumber = getNumberForSegment(seg, index);\n            seg.availabilityIdx = index;\n\n            //this.debug.log(\"[DashHandler][\"+type+\"] createSegment: time = \" + seg.mediaStartTime + \", availabilityIdx = \" + seg.availabilityIdx);\n\n            return seg;\n        },\n\n        getSegmentsFromTimeline = function(representation) {\n            var self = this,\n                template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate,\n            timeline = template.SegmentTimeline,\n            isAvailableSegmentNumberCalculated = representation.availableSegmentsNumber > 0,\n            maxSegmentsAhead = 10,\n            segments = [],\n            fragments,\n            frag,\n            i,\n            len,\n            j,\n            repeat,\n            repeatEndTime,\n            nextFrag,\n            time = 0,\n            availabilityIdx = -1,\n            calculatedRange,\n            hasEnoughSegments = false,\n            requiredMediaTime,\n            startIdx,\n            endIdx,\n            fTimescale,\n            createSegment = function(s) {\n                return getTimeBasedSegment.call(\n                    self,\n                    representation,\n                    time,\n                    s.d,\n                    fTimescale,\n                    template.media,\n                    s.mediaRange,\n                    availabilityIdx,\n                    s.tManifest);\n            };\n\n            fTimescale = representation.timescale;\n\n            fragments = timeline.S_asArray;\n\n            calculatedRange = decideSegmentListRangeForTimeline.call(self, representation);\n\n            // if calculatedRange exists we should generate segments that belong to this range.\n            // Otherwise generate maxSegmentsAhead segments ahead of the requested time\n            if (calculatedRange) {\n                startIdx = calculatedRange.start;\n                endIdx = calculatedRange.end;\n            } else {\n                requiredMediaTime = self.timelineConverter.calcMediaTimeFromPresentationTime(requestedTime || 0, representation);\n            }\n\n            for (i = 0, len = fragments.length; i < len; i += 1) {\n                frag = fragments[i];\n                repeat = 0;\n                if (frag.hasOwnProperty(\"r\")) {\n                    repeat = frag.r;\n                }\n\n                //For a repeated S element, t belongs only to the first segment\n                if (frag.hasOwnProperty(\"t\")) {\n                    time = frag.t;\n                }\n\n                //This is a special case: \"A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the\n                // next MPD update.\"\n                if (repeat < 0) {\n                    nextFrag = fragments[i + 1];\n                    repeatEndTime = (nextFrag && nextFrag.hasOwnProperty(\"t\")) ? (nextFrag.t / fTimescale) : representation.adaptation.period.duration;\n                    repeat = Math.ceil((repeatEndTime - time / fTimescale) / (frag.d / fTimescale)) - 1;\n                }\n\n                // if we have enough segments in the list, but we have not calculated the total number of the segments yet we\n                // should continue the loop and calc the number. Once it is calculated, we can break the loop.\n                if (hasEnoughSegments) {\n                    if (isAvailableSegmentNumberCalculated) break;\n                    availabilityIdx += repeat + 1;\n                    continue;\n                }\n\n                for (j = 0; j <= repeat; j += 1) {\n                    availabilityIdx += 1;\n\n                    if (calculatedRange) {\n                        if (availabilityIdx > endIdx) {\n                            hasEnoughSegments = true;\n                            if (isAvailableSegmentNumberCalculated) break;\n                            continue;\n                        }\n\n                        if (availabilityIdx >= startIdx) {\n                            segments.push(createSegment.call(self, frag));\n                        }\n                    } else {\n                        if (segments.length > maxSegmentsAhead) {\n                            hasEnoughSegments = true;\n                            if (isAvailableSegmentNumberCalculated) break;\n                            continue;\n                        }\n\n                        if (time / fTimescale >= (requiredMediaTime - (frag.d / fTimescale))) {\n                            segments.push(createSegment.call(self, frag));\n                        }\n                    }\n\n                    time += frag.d;\n                }\n            }\n\n            if (true/*!isAvailableSegmentNumberCalculated*/) {\n                var availabilityStartTime,\n                    availabilityEndTime,\n                    f = fragments[0];\n\n                availabilityStartTime = (f.t === undefined) ? 0 : self.timelineConverter.calcPresentationTimeFromMediaTime(f.t / fTimescale, representation);\n                availabilityEndTime = self.timelineConverter.calcPresentationTimeFromMediaTime((time - frag.d) / fTimescale, representation);\n                representation.segmentAvailabilityRange = {\n                    start: availabilityStartTime,\n                    end: availabilityEndTime\n                };\n                representation.availableSegmentsNumber = availabilityIdx + 1;\n                representation.segmentStartIndex = 0;\n            }\n\n            return Q.when(segments);\n        },\n\n        getSegmentsFromTemplate = function(representation) {\n            var segments = [],\n                self = this,\n                deferred = Q.defer(),\n                template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate,\n            duration = representation.segmentDuration,\n            segmentRange = null,\n            periodStartIdx = Math.floor(representation.adaptation.period.start / duration),\n            i,\n            startIdx,\n            endIdx,\n            seg = null,\n            start,\n            url = null;\n\n            start = representation.startNumber;\n\n            waitForAvailabilityWindow.call(self, representation).then(\n                function(availabilityWindow) {\n                    representation.segmentAvailabilityRange = availabilityWindow;\n                    segmentRange = decideSegmentListRangeForTemplate.call(self, representation);\n\n                    startIdx = segmentRange.start;\n                    endIdx = segmentRange.end;\n\n                    for (i = startIdx; i <= endIdx; i += 1) {\n\n                        seg = getIndexBasedSegment.call(\n                            self,\n                            representation,\n                            i - (isDynamic ? periodStartIdx : 0));\n\n                        seg.replacementTime = (start + i - 1) * representation.segmentDuration;\n                        url = template.media;\n                        url = replaceTokenForTemplate(url, \"Number\", seg.replacementNumber);\n                        url = replaceTokenForTemplate(url, \"Time\", seg.replacementTime);\n                        seg.media = url;\n\n                        segments.push(seg);\n                        seg = null;\n                    }\n\n                    representation.availableSegmentsNumber = periodStartIdx + Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\n                    representation.segmentStartIndex = startIdx;\n\n                    deferred.resolve(segments);\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        decideSegmentListRangeForTemplate = function(representation) {\n            var self = this,\n                periodStart = representation.adaptation.period.start,\n                duration = representation.segmentDuration,\n                minBufferTime = representation.adaptation.period.mpd.manifest.minBufferTime,\n                availabilityWindow = representation.segmentAvailabilityRange,\n                originAvailabilityTime = NaN,\n                originSegment = null,\n                currentSegmentList = representation.segments,\n                availabilityLowerLimit = 2 * duration,\n                availabilityUpperLimit = Math.max(2 * minBufferTime, 10 * duration),\n                start,\n                end,\n                range;\n\n            if (!availabilityWindow) {\n                availabilityWindow = self.timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic);\n            }\n\n            if (isDynamic && !representation.adaptation.period.mpd.isClientServerTimeSyncCompleted) {\n                start = Math.floor(availabilityWindow.start / duration);\n                end = Math.floor(availabilityWindow.end / duration);\n                range = {\n                    start: start,\n                    end: end\n                };\n                return range;\n            }\n\n            // if segments exist we should try to find the latest buffered time, which is the presentation time of the\n            // segment for the current index\n            if (currentSegmentList) {\n                originSegment = getSegmentByIndex(index, representation);\n                originAvailabilityTime = originSegment ? (originSegment.presentationStartTime - periodStart) : (index > 0 ? (index * duration) : (requestedTime - periodStart) || (currentSegmentList[0].presentationStartTime - periodStart));\n            } else {\n                // If no segments exist, but index > 0, it means that we switch to the other representation, so\n                // we should proceed from this time.\n                // Otherwise we should start from the beginning for static mpds or from the end (live edge) for dynamic mpds\n                originAvailabilityTime = (index > 0) ? (index * duration) : (isDynamic ? availabilityWindow.end : availabilityWindow.start);\n            }\n\n            // segment list should not be out of the availability window range\n            start = Math.floor(Math.max(originAvailabilityTime - availabilityLowerLimit, availabilityWindow.start) / duration);\n            end = Math.floor(Math.min(start + availabilityUpperLimit / duration, availabilityWindow.end / duration));\n\n            range = {\n                start: start,\n                end: end\n            };\n\n            return range;\n        },\n\n        decideSegmentListRangeForTimeline = function(representation) {\n            var originAvailabilityIdx = NaN,\n                currentSegmentList = representation.segments,\n                availabilityLowerLimit = 2,\n                availabilityUpperLimit = 10,\n                firstIdx = 0,\n                lastIdx = Number.POSITIVE_INFINITY,\n                start,\n                end,\n                range;\n\n            if (isDynamic && !representation.adaptation.period.mpd.isClientServerTimeSyncCompleted) {\n                range = {\n                    start: firstIdx,\n                    end: lastIdx\n                };\n                return range;\n            }\n\n            if (!isDynamic && requestedTime !== null) {\n                return null;\n            }\n\n            // if segments exist use the current index as an origin index for a new range\n            if (currentSegmentList) {\n                // if the index is negative we can't calculate the range right now\n                if (index < 0) {\n                    return null;\n                }\n                originAvailabilityIdx = index;\n            } else {\n                // If no segments exist, but index > 0, it means that we switch to the other representation, so\n                // we should proceed from this index.\n                // Otherwise we should start from the beginning for static mpds or from the end (live edge) for dynamic mpds\n                originAvailabilityIdx = (index > 0) ? index : (isDynamic ? lastIdx : firstIdx);\n            }\n\n            // segment list should not be out of the availability window range\n            start = Math.max(originAvailabilityIdx - availabilityLowerLimit, firstIdx);\n            end = Math.min(originAvailabilityIdx + availabilityUpperLimit, lastIdx);\n\n            range = {\n                start: start,\n                end: end\n            };\n\n            return range;\n        },\n\n        waitForAvailabilityWindow = function(representation) {\n            var self = this,\n                deferred = Q.defer(),\n                range,\n                waitingTime,\n                getRange = function() {\n                    range = self.timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic);\n\n                    if (range.end > 0) {\n                        deferred.resolve(range);\n                    } else {\n                        // range.end represents a time gap between the current wall-clock time and the availability time of the first segment.\n                        // A negative value means that no segments are available yet, we should wait until segments become available\n                        waitingTime = Math.abs(range.end) * 1000;\n                        setTimeout(getRange, waitingTime);\n                    }\n                };\n\n            getRange();\n\n            return deferred.promise;\n        },\n\n        getTimeBasedSegment = function(representation, time, duration, fTimescale, url, range, index, tManifest) {\n            var self = this,\n                scaledTime = time / fTimescale,\n                scaledDuration = Math.min(duration / fTimescale, representation.adaptation.period.mpd.maxSegmentDuration),\n                presentationStartTime,\n                presentationEndTime,\n                seg;\n\n            presentationStartTime = self.timelineConverter.calcPresentationTimeFromMediaTime(scaledTime, representation);\n            // ORANGE: presentationStartTime is the media time of the segment as provided in the SegmentTimeline\n            presentationStartTime = scaledTime; //self.timelineConverter.calcPresentationTimeFromMediaTime(scaledTime, representation);\n            presentationEndTime = presentationStartTime + scaledDuration;\n\n            seg = new Dash.vo.Segment();\n\n            seg.representation = representation;\n            seg.duration = scaledDuration;\n            seg.mediaStartTime = scaledTime;\n\n            seg.presentationStartTime = presentationStartTime;\n\n            // For SegmentTimeline every segment is available at mpdLoadedTime\n            seg.availabilityStartTime = representation.adaptation.period.mpd.manifest.mpdLoadedTime;\n            seg.availabilityEndTime = self.timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic);\n\n            // at this wall clock time, the video element currentTime should be seg.presentationStartTime\n            seg.wallStartTime = self.timelineConverter.calcWallTimeForSegment(seg, isDynamic);\n\n            seg.replacementTime = tManifest ? tManifest : time;\n\n            seg.replacementNumber = getNumberForSegment(seg, index);\n\n            url = replaceTokenForTemplate(url, \"Number\", seg.replacementNumber);\n            url = replaceTokenForTemplate(url, \"Time\", seg.replacementTime);\n            seg.media = url;\n            seg.mediaRange = range;\n            seg.availabilityIdx = index;\n\n            //this.debug.log(\"[DashHandler][\"+type+\"] createSegment: time = \" + seg.mediaStartTime + \", availabilityIdx = \" + seg.availabilityIdx + \", url = \" + seg.media);\n\n            return seg;\n        },\n\n        getSegmentsFromList = function(representation) {\n            var self = this,\n                segments = [],\n                deferred = Q.defer(),\n                list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList,\n            len = list.SegmentURL_asArray.length,\n            i,\n            seg,\n            s,\n            range,\n            startIdx = 0,\n            endIdx = list.SegmentURL_asArray.length,\n            start;\n\n            start = representation.startNumber;\n\n            waitForAvailabilityWindow.call(self, representation).then(\n                function(availabilityWindow) {\n                    if (!isDynamic) {\n                        range = decideSegmentListRangeForTemplate.call(self, representation);\n                        startIdx = range.start;\n                        endIdx = range.end;\n                    }\n\n                    for (i = startIdx; i < endIdx; i += 1) {\n                        s = list.SegmentURL_asArray[i];\n\n                        seg = getIndexBasedSegment.call(\n                            self,\n                            representation,\n                            i);\n\n                        seg.replacementTime = (start + i - 1) * representation.segmentDuration;\n                        seg.media = s.media;\n                        seg.mediaRange = s.mediaRange;\n                        seg.index = s.index;\n                        seg.indexRange = s.indexRange;\n\n                        // ORANGE: overwrite duration if set at segment level (HLS use case)\n                        if (s.duration) {\n                            seg.duration = s.duration;\n                            seg.presentationStartTime = seg.mediaStartTime = s.time;\n                        }\n\n                        // ORANGE: add sequence number (HLS use case)\n                        if (s.sequenceNumber !== undefined) {\n                            seg.sequenceNumber = s.sequenceNumber;\n                        }\n                        // ORANGE: add decryption info (HLS use case)\n                        if (s.decryptionInfo !== undefined) {\n                            seg.decryptionInfo = s.decryptionInfo;\n                        }\n                        //self.debug.log(\"[DashHandler][\"+type+\"] createSegment: time = \" + seg.mediaStartTime + \", availabilityIdx = \" + seg.availabilityIdx + \", url = \" + seg.media);\n\n                        segments.push(seg);\n                        seg = null;\n                    }\n                    representation.segmentAvailabilityRange = availabilityWindow;\n                    representation.availableSegmentsNumber = len;\n                    representation.segmentStartIndex = startIdx;\n                    deferred.resolve(segments);\n                });\n\n            return deferred.promise;\n        },\n\n        getSegmentsFromSource = function(representation) {\n            var self = this,\n                baseURL = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].BaseURL,\n            deferred = Q.defer(),\n            segments = [],\n            count = 0,\n            range = null,\n            s,\n            i,\n            len,\n            seg;\n\n            if (representation.indexRange) {\n                range = representation.indexRange;\n            }\n\n            this.baseURLExt.loadSegments(baseURL, range).then(\n                function(fragments) {\n                    for (i = 0, len = fragments.length; i < len; i += 1) {\n                        s = fragments[i];\n\n                        seg = getTimeBasedSegment.call(\n                            self,\n                            representation,\n                            s.startTime,\n                            s.duration,\n                            s.timescale,\n                            s.media,\n                            s.mediaRange,\n                            count);\n\n                        segments.push(seg);\n                        seg = null;\n                        count += 1;\n                    }\n\n                    representation.segmentAvailabilityRange = {\n                        start: segments[0].presentationStartTime,\n                        end: segments[len - 1].presentationStartTime\n                    };\n                    representation.availableSegmentsNumber = len;\n                    representation.segmentStartIndex = 0;\n                    deferred.resolve(segments);\n                }, function(){\n                    deferred.reject();\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        getSegments = function(representation) {\n            var segmentPromise,\n                deferred = Q.defer(),\n                self = this,\n                lastIdx;\n\n            //self.debug.log(\"[DashHandler][\"+type+\"] getSegments for representation \" + representation.id);\n            // Already figure out the segments.\n            if (!isSegmentListUpdateRequired.call(self, representation)) {\n                return Q.when(representation.segments);\n            } else {\n                if (representation.segmentInfoType === \"SegmentTimeline\") {\n                    segmentPromise = getSegmentsFromTimeline.call(self, representation);\n                } else if (representation.segmentInfoType === \"SegmentTemplate\") {\n                    segmentPromise = getSegmentsFromTemplate.call(self, representation);\n                } else if (representation.segmentInfoType === \"SegmentList\") {\n                    segmentPromise = getSegmentsFromList.call(self, representation);\n                } else {\n                    segmentPromise = getSegmentsFromSource.call(self, representation);\n                }\n\n                Q.when(segmentPromise).then(\n                    function(segments) {\n                        representation.segments = segments;\n                        lastIdx = segments.length - 1;\n                        if (isDynamic && isNaN(representation.adaptation.period.liveEdge)) {\n                            var metrics = self.metricsModel.getMetricsFor(\"stream\"),\n                                liveEdge = segments[lastIdx].presentationStartTime;\n                            // the last segment is supposed to be a live edge\n                            representation.adaptation.period.liveEdge = liveEdge;\n                            self.metricsModel.updateManifestUpdateInfo(self.metricsExt.getCurrentManifestUpdate(metrics), {\n                                presentationStartTime: liveEdge\n                            });\n                        }\n\n                        deferred.resolve(segments);\n                    }, function(){\n                        deferred.reject();\n                    }\n                );\n            }\n\n            return deferred.promise;\n        },\n\n        updateSegmentList = function(representation) {\n            var self = this,\n                deferred = Q.defer();\n\n            representation.segments = null;\n\n            self.debug.log(\"[DashHandler][\" + type + \"] updateSegmentList for representation \", representation.id);\n\n            getSegments.call(self, representation).then(\n                function(segments) {\n                    representation.segments = segments;\n                    deferred.resolve(segments);\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        getIndexForSegments = function(time, representation) {\n            var segments = representation === null ? null : representation.segments,\n                segmentLastIdx = segments === null ? 0 : segments.length - 1,\n                idx = -1,\n                frag,\n                ft,\n                fd,\n                i,\n                self = this;\n\n            self.debug.log(\"[DashHandler][\" + type + \"] getIndexForSegments for time \", time);\n\n            if (segments && segments.length > 0) {\n                for (i = segmentLastIdx; i >= 0; i--) {\n                    frag = segments[i];\n                    ft = frag.presentationStartTime;\n                    fd = frag.duration;\n                    //self.debug.log(\"[DashHandler][\"+type+\"] ft = \" + ft + \", fd = \" + fd + \", idx = \" + frag.availabilityIdx);\n                    if ((time + Dash.dependencies.DashHandler.EPSILON) >= ft &&\n                        (time - Dash.dependencies.DashHandler.EPSILON) <= (ft + fd)) {\n                        idx = frag.availabilityIdx;\n                        self.debug.log(\"[DashHandler][\" + type + \"] getIndexForSegments, idx =  \", idx);\n                        break;\n                    } else if (idx === -1 && (time - Dash.dependencies.DashHandler.EPSILON) > (ft + fd)) {\n                        // time is past the end\n                        self.debug.log(\"[DashHandler][\" + type + \"] getIndexForSegments, (past the end) idx =  \", idx);\n                        idx = isNaN(representation.segmentDuration) ? (frag.availabilityIdx + 1) : Math.floor((time - representation.adaptation.period.start) / representation.segmentDuration);\n                        //ORANGE : we have past the end, don't iterate for nothing\n                        break;\n                    }\n                }\n            }\n\n            if (idx === -1) {\n                if (!isNaN(representation.segmentDuration)) {\n                    self.debug.log(\"[DashHandler][\" + type + \"] getIndexForSegments, (segment duration) idx =  \", idx);\n                    idx = Math.floor((time - representation.adaptation.period.start) / representation.segmentDuration);\n                } else if (segments && segments.length > 0 && time < segments[0].presentationStartTime) {\n                    self.debug.log(\"[DashHandler][\" + type + \"] getIndexForSegments, (before start) idx =  \", idx);\n                    idx = 0;\n                } else {\n                    self.debug.log(\"[DashHandler][\" + type + \"] Couldn't figure out segment for time: \" + time);\n                }\n            }\n\n            /*\n            if (segments && segments.length > 0) {\n                idx = 0;\n                ft = segments[0].startTime / segments[0].timescale;\n                frag = null;\n\n                while (ft <= time && (idx + 1) < segments.length) {\n                    frag = segments[idx];\n                    ft += frag.duration / frag.timescale;\n                    idx += 1;\n                }\n                idx -= 1;\n            }\n            */\n\n            return Q.when(idx);\n        },\n\n        getSegmentByIndex = function(index, representation) {\n            if (!representation || !representation.segments) {\n                return null;\n            }\n\n            var ln = representation.segments.length,\n                seg,\n                i;\n\n            for (i = 0; i < ln; i += 1) {\n                seg = representation.segments[i];\n\n                if (seg.availabilityIdx === index) {\n                    return seg;\n                }\n            }\n\n            return null;\n        },\n\n        // ORANGE: HLS use case, get next segment from sequence number\n        getNextSegmentBySequenceNumber = function(sn, representation) {\n            if (!representation || !representation.segments) {\n                return null;\n            }\n\n            var ln = representation.segments.length,\n                seg,\n                i;\n\n            for (i = 0; i < ln; i += 1) {\n                seg = representation.segments[i];\n\n                if ((seg.sequenceNumber !== undefined) && (seg.sequenceNumber === sn)) {\n                    if (i < (ln - 1)) {\n                        return representation.segments[i + 1];\n                    }\n                    return null;\n                }\n            }\n\n            return null;\n        },\n\n        isSegmentListUpdateRequired = function(representation) {\n            var updateRequired = false,\n                segments = representation.segments,\n                upperIdx,\n                lowerIdx,\n                upperTime,\n                lowerTime;\n\n            if (!segments || segments.length === 0) {\n                updateRequired = true;\n            } else {\n                if (requestedTime !== null) {\n                    lowerTime = segments[0].presentationStartTime;\n                    upperTime = segments[segments.length - 1].presentationStartTime;\n                    updateRequired = (requestedTime < lowerTime) || (requestedTime > upperTime);\n                } else {\n                    lowerIdx = segments[0].availabilityIdx;\n                    upperIdx = segments[segments.length - 1].availabilityIdx;\n                    updateRequired = (index < lowerIdx) || (index > upperIdx);\n                }\n            }\n\n            return updateRequired;\n        },\n\n        getRequestForSegment = function(segment) {\n            if (segment === null || segment === undefined) {\n                return null;\n            }\n\n            var request = new MediaPlayer.vo.SegmentRequest(),\n                representation = segment.representation,\n                bandwidth = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].bandwidth,\n            url;\n\n            url = getRequestUrl(segment.media, representation);\n            url = replaceTokenForTemplate(url, \"Number\", segment.replacementNumber);\n            url = replaceTokenForTemplate(url, \"Time\", segment.replacementTime);\n            url = replaceTokenForTemplate(url, \"Bandwidth\", bandwidth);\n            url = replaceIDForTemplate(url, representation.id);\n            url = unescapeDollarsInTemplate(url);\n\n            request.streamType = type;\n            request.type = \"Media Segment\";\n            request.url = url;\n            request.range = segment.mediaRange;\n            request.startTime = segment.presentationStartTime;\n            request.duration = segment.duration;\n            request.timescale = representation.timescale;\n            request.availabilityStartTime = segment.availabilityStartTime;\n            request.availabilityEndTime = segment.availabilityEndTime;\n            request.wallStartTime = segment.wallStartTime;\n            request.quality = representation.index;\n            request.index = segment.availabilityIdx;\n            // ORANGE: add sequence number (HLS use case)\n            if (segment.sequenceNumber !== undefined) {\n                request.sequenceNumber = segment.sequenceNumber;\n            }\n            // ORANGE: add decryption info (HLS use case)\n            if (segment.decryptionInfo !== undefined) {\n                request.decryptionInfo = segment.decryptionInfo;\n            }\n\n            return request;\n        },\n\n        getForTime = function(representation, time) {\n            var deferred,\n                request,\n                segment,\n                self = this;\n\n            if (!representation) {\n                return Q.reject(\"no representation\");\n            }\n\n            requestedTime = time;\n            index = -1;\n\n            self.debug.log(\"[DashHandler][\" + type + \"] Getting the request for time: \" + time);\n\n            deferred = Q.defer();\n\n            getSegments.call(self, representation).then(\n                function( /*segments*/ ) {\n                    var segmentsPromise;\n\n                    //self.debug.log(\"Got segments.\");\n                    //self.debug.log(segments);\n                    //self.debug.log(\"Got a list of segments, so dig deeper.\");\n                    segmentsPromise = getIndexForSegments.call(self, time, representation);\n                    return segmentsPromise;\n                }, function(){deferred.reject();}\n            ).then(\n                function(newIndex) {\n                    self.debug.log(\"[DashHandler][\" + type + \"] Index for time \" + time + \" is \" + newIndex);\n                    index = newIndex;\n\n                    return Q.when(isMediaFinished.call(self, representation));\n                }\n            ).then(\n                function(finished) {\n                    var requestForSegment = null;\n\n                    //self.debug.log(\"Stream finished? \" + finished);\n                    if (finished) {\n                        request = new MediaPlayer.vo.SegmentRequest();\n                        request.action = request.ACTION_COMPLETE;\n                        request.index = index;\n                        self.debug.log(\"[DashHandler][\" + type + \"] Signal complete.\");\n                        self.debug.log(request);\n                        deferred.resolve(request);\n                    } else {\n                        segment = getSegmentByIndex(index, representation);\n                        requestForSegment = getRequestForSegment.call(self, segment);\n                    }\n\n                    return Q.when(requestForSegment);\n                }\n            ).then(\n                function(request) {\n                    //self.debug.log(\"Got a request.\");\n                    //self.debug.log(request);\n                    deferred.resolve(request);\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        getNext = function(representation) {\n            var deferred,\n                request,\n                segment,\n                finished,\n                self = this;\n\n            if (!representation) {\n                return Q.reject(\"no represenation\");\n            }\n\n            //self.debug.log(\"Getting the next request.\");\n\n            if (index === -1) {\n                throw \"You must call getSegmentRequestForTime first.\";\n            }\n\n            requestedTime = null;\n            index += 1;\n\n            deferred = Q.defer();\n\n            self.debug.log(\"[DashHandler][\" + type + \"] Getting the next request => index = \" + index);\n\n            finished = isMediaFinished.call(self, representation);\n            //self.debug.log(\"Stream finished? \" + finished);\n            if (finished) {\n                request = new MediaPlayer.vo.SegmentRequest();\n                request.action = request.ACTION_COMPLETE;\n                request.index = index;\n                self.debug.log(\"[DashHandler][\" + type + \"] Signal complete.\");\n                //self.debug.log(request);\n                deferred.resolve(request);\n            } else {\n                getSegments.call(self, representation).then(\n                    function( /*segments*/ ) {\n                        var segmentsPromise;\n\n                        //self.debug.log(\"Got segments.\");\n                        //self.debug.log(segments);\n                        segment = getSegmentByIndex(index, representation);\n                        segmentsPromise = getRequestForSegment.call(self, segment);\n                        return Q.when(segmentsPromise);\n                    }\n                ).then(\n                    function(request) {\n                        //self.debug.log(\"Got a request.\");\n                        //self.debug.log(request);\n                        deferred.resolve(request);\n                    }\n                );\n            }\n\n            return deferred.promise;\n        },\n\n        // ORANGE: HLS use case, get next request from sequence number\n        getNextFromSN = function(representation, sn) {\n            var deferred,\n                request,\n                segment,\n                finished,\n                self = this;\n\n            if (!representation) {\n                return Q.reject(\"no represenation\");\n            }\n\n            //self.debug.log(\"Getting the next request.\");\n\n            if (index === -1) {\n                throw \"You must call getSegmentRequestForTime first.\";\n            }\n\n            requestedTime = null;\n            index += 1;\n\n            deferred = Q.defer();\n\n            self.debug.log(\"[DashHandler][\" + type + \"] Getting the next request => sn = \" + sn);\n\n            getSegments.call(self, representation).then(\n                function( /*segments*/ ) {\n                    finished = isMediaFinished.call(self, representation);\n                    //self.debug.log(\"Stream finished? \" + finished);\n                    if (finished) {\n                        request = new MediaPlayer.vo.SegmentRequest();\n                        request.action = request.ACTION_COMPLETE;\n                        request.index = index;\n                        self.debug.log(\"[DashHandler][\" + type + \"] Signal complete.\");\n                        //self.debug.log(request);\n                        deferred.resolve(request);\n                    } else {\n                        segment = getNextSegmentBySequenceNumber(sn, representation);\n                        if (segment === null) {\n                            deferred.resolve(null);\n                        } else {\n                            index = segment.availabilityIdx;\n                            var requestForSegment = getRequestForSegment.call(self, segment);\n                            //self.debug.log(\"Got a request.\");\n                            //self.debug.log(request);\n                            deferred.resolve(requestForSegment);\n                        }\n                    }\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        getSegmentCountForDuration = function(representation, requiredDuration, bufferedDuration) {\n            var self = this,\n                remainingDuration = Math.max(requiredDuration - bufferedDuration, 0),\n                deferred = Q.defer(),\n                segmentDuration,\n                segmentCount = 0;\n\n            if (!representation) {\n                return Q.reject(\"no represenation\");\n            }\n\n            self.debug.log(\"[DashHandler][\" + type + \"] getSegmentCountForDuration\");\n\n            getSegments.call(self, representation).then(\n                function(segments) {\n                    segmentDuration = segments[0].duration;\n                    segmentCount = Math.ceil(remainingDuration / segmentDuration);\n                    deferred.resolve(segmentCount);\n                },\n                function() {\n                    deferred.resolve(0);\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        getCurrentTime = function(representation) {\n            var self = this,\n                time,\n                bufferedIndex,\n                deferred = Q.defer();\n\n            if (!representation) {\n                return Q.reject(\"no represenation\");\n            }\n\n            bufferedIndex = index;\n\n            getSegments.call(self, representation).then(\n                function(segments) {\n                    if (bufferedIndex < 0) {\n                        time = self.timelineConverter.calcPresentationStartTime(representation.adaptation.period);\n                    } else {\n                        bufferedIndex = bufferedIndex < segments[0].availabilityIdx ? segments[0].availabilityIdx : Math.min(segments[segments.length - 1].availabilityIdx, bufferedIndex);\n                        time = getSegmentByIndex(bufferedIndex, representation).presentationStartTime;\n                        self.debug.log(\"[DashHandler][\" + type + \"] getSegmentByIndex, index = \" + bufferedIndex + \" => time = \" + time);\n                    }\n\n                    self.debug.log(\"[DashHandler][\" + type + \"] getCurrentTime => \", time);\n                    deferred.resolve(time);\n                },\n                function() {\n                    deferred.reject();\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        getIFrameRequest = function( /*request*/ ) {\n            //TBD\n        },\n\n        getFragmentInfoRequest = function( /*request*/ ) {\n            //TBD\n        };\n\n    return {\n        debug: undefined,\n        baseURLExt: undefined,\n        metricsModel: undefined,\n        metricsExt: undefined,\n        manifestModel: undefined,\n        manifestExt: undefined,\n        timelineConverter: undefined,\n        capabilities: undefined,\n        videoModel: undefined,\n\n        getType: function() {\n            return type;\n        },\n\n        setType: function(value) {\n            type = value;\n        },\n\n        getIsDynamic: function() {\n            return isDynamic;\n        },\n        setIsDynamic: function(value) {\n            isDynamic = value;\n        },\n\n        getInitRequest: getInit,\n        getSegmentRequestForTime: getForTime,\n        getNextSegmentRequest: getNext,\n        // ORANGE: HLS use case, get next request from sequence number\n        getNextSegmentRequestFromSN: getNextFromSN,\n        getCurrentTime: getCurrentTime,\n        getSegmentCountForDuration: getSegmentCountForDuration,\n        updateSegmentList: updateSegmentList,\n        getIFrameRequest: getIFrameRequest,\n        getFragmentInfoRequest: getFragmentInfoRequest\n    };\n};\n\nDash.dependencies.DashHandler.EPSILON = 0.003;\n\nDash.dependencies.DashHandler.prototype = {\n    constructor: Dash.dependencies.DashHandler\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nDash.dependencies.DashManifestExtensions = function() {\n    \"use strict\";\n    this.timelineConverter = undefined;\n};\n\nDash.dependencies.DashManifestExtensions.prototype = {\n    constructor: Dash.dependencies.DashManifestExtensions,\n\n    isInteger: Number.isInteger || function (value) {\n        return typeof value === 'number' &&\n            isFinite(value) &&\n            Math.floor(value) === value;\n    },\n\n    getIsType: function(adaptation, type, mimeTypes) {\n        \"use strict\";\n        var i, j,\n            found = false,\n            col,\n            representation;\n\n        if (!adaptation) {\n            return false;\n        }\n\n        if (adaptation.type === undefined) {\n            adaptation.type = null;\n        }\n\n        col = adaptation.ContentComponent_asArray;\n\n        if (col) {\n            // Check contentType attribute at adaptation level\n            for (i = 0; i < adaptation.ContentComponent_asArray.length && !found; i++) {\n                if (adaptation.ContentComponent_asArray[i].contentType === type) {\n                    adaptation.type = type;\n                    found = true;\n                }\n            }\n        }\n\n        // Check mimeType attribute at adaptation level\n        if (!found) {\n            if (adaptation.mimeType) {\n                for (i = 0; i < mimeTypes.length && !found; i++) {\n                    if (adaptation.mimeType.indexOf(mimeTypes[i]) !== -1) {\n                        adaptation.type = type;\n                        found = true;\n                    }\n                }\n            }\n        }\n\n        // Check mimeType attribute at representation level\n        if (!found) {\n            for (i = 0; i < adaptation.Representation_asArray.length && !found; i++) {\n                representation = adaptation.Representation_asArray[i];\n                for (j = 0; j < mimeTypes.length && !found; j++) {\n                    if (representation.mimeType.indexOf(mimeTypes[j]) !== -1) {\n                        adaptation.type = type;\n                        found = true;\n                    }\n                }\n            }\n        }\n\n        return found;\n    },\n\n    getIsVideo: function(adaptation) {\n        return this.getIsType(adaptation, \"video\", [\"video\"]);\n    },\n\n    getIsAudio: function(adaptation) {\n        return this.getIsType(adaptation, \"audio\", [\"audio\"]);\n    },\n\n    getIsText: function(adaptation) {\n        return this.getIsType(adaptation, \"text\", [\"vtt\", \"ttml\", \"application/mp4\"]);\n    },\n\n    // ORANGE: added application/ttml+xml+mp4 for Smoothstreaming subtitles (ttml+xml encapsulated in mp4 binary form)\n    getIsTextTrack: function(type) {\n        return (type === \"text/vtt\" || type === \"application/ttml+xml\" || type === \"application/ttml+xml+mp4\" || type === \"application/mp4\");\n    },\n\n    getIsMain: function( /*adaptation*/ ) {\n        \"use strict\";\n        // TODO : Check \"Role\" node.\n        // TODO : Use this somewhere.\n        return false;\n    },\n\n    processAdaptation: function(adaptation) {\n        \"use strict\";\n        if (adaptation.Representation_asArray !== undefined && adaptation.Representation_asArray !== null) {\n            adaptation.Representation_asArray.sort(function(a, b) {\n                return a.bandwidth - b.bandwidth;\n            });\n        }\n\n        return adaptation;\n    },\n\n    getDataForId: function(id, manifest, periodIndex) {\n        \"use strict\";\n        var adaptations = manifest.Period_asArray[periodIndex].AdaptationSet_asArray,\n            i,\n            len;\n\n        for (i = 0, len = adaptations.length; i < len; i += 1) {\n            if (adaptations[i].hasOwnProperty(\"id\") && adaptations[i].id === id) {\n                return adaptations[i];\n            }\n        }\n\n        return null;\n    },\n\n    getDataForIndex: function(index, manifest, periodIndex) {\n        \"use strict\";\n        var adaptations;\n\n        if (manifest && periodIndex >= 0) {\n            adaptations = manifest.Period_asArray[periodIndex].AdaptationSet_asArray;\n\n            if (adaptations && adaptations.length > 0 && !isNaN(index)) {\n                return adaptations[index];\n            }\n        }\n\n        return [];\n    },\n\n    getIndex: function(adaptation, manifest) {\n        var periods = manifest.Period_asArray,\n            adaptations,\n            i,\n            j;\n\n        for (i = 0; i < periods.length; i += 1) {\n            adaptations = periods[i].AdaptationSet_asArray;\n            for (j = 0; j < adaptations.length; j += 1) {\n                if (adaptations[j] === adaptation) {\n                    return j;\n                }\n            }\n        }\n\n        return -1;\n    },\n\n    getDataIndex: function(data, manifest, periodIndex) {\n        \"use strict\";\n\n        var adaptations,\n            i,\n            len;\n\n        if (manifest && periodIndex >= 0) {\n            adaptations = manifest.Period_asArray[periodIndex].AdaptationSet_asArray;\n\n            // ORANGE : compare data with id or string representation to avoid reference error due to manifest refresh\n            if (data.id) {\n                for (i = 0, len = adaptations.length; i < len; i += 1) {\n                    if (adaptations[i].id && adaptations[i].id === data.id) {\n                        return i;\n                    }\n                }\n            } else {\n                var strData = JSON.stringify(data);\n                var strAdapt;\n                for (i = 0, len = adaptations.length; i < len; i += 1) {\n                    strAdapt = JSON.stringify(adaptations[i]);\n                    if (strAdapt === strData) {\n                        return i;\n                    }\n                }\n            }\n        }\n\n        return -1;\n    },\n\n    getVideoData: function(manifest, periodIndex) {\n        \"use strict\";\n        //return null;\n        //------------------------------------\n        var adaptations,\n            i;\n\n        if (!manifest || periodIndex < 0) {\n            return null;\n        }\n\n        adaptations = manifest.Period_asArray[periodIndex].AdaptationSet_asArray;\n\n        if (adaptations.length === 0) {\n            return null;\n        }\n\n        for (i = 0; i < adaptations.length; i += 1) {\n            if (this.getIsVideo(adaptations[i])) {\n                return adaptations[i];\n            }\n        }\n\n        return null;\n    },\n\n    getTextDatas: function(manifest, periodIndex) {\n        \"use strict\";\n        //return null;\n        //------------------------------------\n        var adaptations,\n            datas = [],\n            i;\n\n        if (!manifest || periodIndex < 0) {\n            return datas;\n        }\n\n        adaptations = manifest.Period_asArray[periodIndex].AdaptationSet_asArray;\n\n        if (adaptations.length === 0) {\n            return datas;\n        }\n\n        for (i = 0; i < adaptations.length; i += 1) {\n            if (this.getIsText(adaptations[i])) {\n                datas.push(adaptations[i]);\n            }\n        }\n\n        return datas;\n    },\n\n    getAudioDatas: function(manifest, periodIndex) {\n        \"use strict\";\n        //------------------------------------\n        var adaptations,\n            datas = [],\n            i;\n\n        // return datas;\n\n        if (!manifest || periodIndex < 0) {\n            return datas;\n        }\n\n        adaptations = manifest.Period_asArray[periodIndex].AdaptationSet_asArray;\n\n        if (adaptations.length === 0) {\n            return datas;\n        }\n\n        for (i = 0; i < adaptations.length; i += 1) {\n            if (this.getIsAudio(adaptations[i])) {\n                datas.push(adaptations[i]);\n            }\n        }\n\n        return datas;\n    },\n\n    getSpecificAudioData: function(manifest, periodIndex, language) {\n        \"use strict\";\n        var i,\n            datas;\n\n\n        if (!manifest || periodIndex < 0) {\n            return null;\n        }\n\n        datas = this.getAudioDatas(manifest, periodIndex);\n        if (datas.length === 0) {\n            return null;\n        }\n\n        for (i = 0; i < datas.length; i += 1) {\n            if (datas[i].lang === language) {\n                return this.processAdaptation(datas[i]);\n            }\n        }\n\n        //if the specific language has not been found, return the first one.\n        return this.processAdaptation(datas[0]);\n    },\n\n    getSpecificTextData: function(manifest, periodIndex, language) {\n        \"use strict\";\n        var i,\n            datas;\n\n        if (!manifest || periodIndex < 0) {\n            return null;\n        }\n\n        datas = this.getTextDatas(manifest, periodIndex);\n        if (datas.length === 0) {\n            return null;\n        }\n\n        for (i = 0; i < datas.length; i += 1) {\n            if (datas[i].lang === language) {\n                return this.processAdaptation(datas[i]);\n            }\n        }\n\n        return this.processAdaptation(datas[0]);\n    },\n\n    getCodec: function(adaptation) {\n        \"use strict\";\n        var i = 0,\n            representation,\n            codec = null;\n\n        while ((codec === null) && (i < adaptation.Representation_asArray.length)) {\n            representation = adaptation.Representation_asArray[i];\n            codec = this.getCodecForRepresentation(representation);\n            i++;\n        }\n\n        return codec;\n    },\n\n    getCodecForRepresentation: function(representation) {\n        \"use strict\";\n        if (representation.codecs === null || representation.codecs === \"\") {\n            return null;\n        }\n        return (representation.mimeType + ';codecs=\"' + representation.codecs + '\"');\n    },\n\n    getMimeType: function(data) {\n        \"use strict\";\n        return data.Representation_asArray[0].mimeType;\n    },\n\n    getKID: function(data) {\n        \"use strict\";\n\n        if (!data || !data.hasOwnProperty(\"cenc:default_KID\")) {\n            return null;\n        }\n        return data[\"cenc:default_KID\"];\n    },\n\n    getContentProtectionData: function(data) {\n        \"use strict\";\n        if (!data || !data.hasOwnProperty(\"ContentProtection_asArray\") || data.ContentProtection_asArray.length === 0) {\n            return null;\n        }\n        return data.ContentProtection_asArray;\n    },\n\n    getIsDynamic: function(manifest) {\n        \"use strict\";\n        var isDynamic = false,\n            LIVE_TYPE = \"dynamic\";\n\n        if (manifest && manifest.hasOwnProperty(\"type\")) {\n            isDynamic = (manifest.type === LIVE_TYPE);\n        }\n\n        return isDynamic;\n    },\n\n    getIsDVR: function(manifest) {\n        \"use strict\";\n        var isDynamic = this.getIsDynamic(manifest),\n            containsDVR,\n            isDVR;\n\n        containsDVR = !isNaN(manifest.timeShiftBufferDepth);\n        isDVR = (isDynamic && containsDVR);\n\n        return isDVR;\n    },\n\n    getIsOnDemand: function(manifest) {\n        \"use strict\";\n        var isOnDemand = false;\n\n        if (manifest.profiles && manifest.profiles.length > 0) {\n            isOnDemand = (manifest.profiles.indexOf(\"urn:mpeg:dash:profile:isoff-on-demand:2011\") !== -1);\n        }\n\n        return isOnDemand;\n    },\n\n    getIsStartOver: function(manifest) {\n        \"use strict\";\n        var isStartOver = false;\n\n        if (manifest && manifest.hasOwnProperty(\"startOver\")) {\n            isStartOver = (manifest.startOver === true);\n        }\n\n        return isStartOver;\n    },\n\n    getDuration: function(manifest) {\n        var mpdDuration;\n\n        //@mediaPresentationDuration specifies the duration of the entire Media Presentation.\n        //If the attribute is not present, the duration of the Media Presentation is unknown.\n        if (manifest && manifest.hasOwnProperty(\"mediaPresentationDuration\")) {\n            mpdDuration = manifest.mediaPresentationDuration;\n        } else {\n            mpdDuration = Number.POSITIVE_INFINITY;\n        }\n\n        return mpdDuration;\n    },\n\n    getBandwidth: function(representation) {\n        \"use strict\";\n        return representation && representation.bandwidth ? representation.bandwidth : NaN;\n    },\n\n    getRefreshDelay: function(manifest) {\n        \"use strict\";\n        var delay = NaN,\n            minDelay = 2;\n\n        if (manifest.hasOwnProperty(\"minimumUpdatePeriod\")) {\n            delay = Math.max(parseFloat(manifest.minimumUpdatePeriod), minDelay);\n        }\n\n        return delay;\n    },\n\n    getRepresentationCount: function(adaptation) {\n        \"use strict\";\n        if (adaptation) {\n            return adaptation.Representation_asArray.length;\n        }\n\n        return null;\n    },\n\n    getRepresentationFor: function(index, data) {\n        \"use strict\";\n        return data && data.Representation_asArray && data.Representation_asArray.length > 0 &&\n            this.isInteger(index) && index < data.Representation_asArray.length ? data.Representation_asArray[index] : null;\n    },\n\n    getRepresentationsForAdaptation: function(manifest, adaptation) {\n        var a,\n            representations = [],\n            representation,\n            initialization,\n            segmentInfo,\n            r;\n\n        if (manifest && adaptation) {\n            a = this.processAdaptation(manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index]);\n\n            for (var i = 0; i < a.Representation_asArray.length; i += 1) {\n                r = a.Representation_asArray[i];\n                representation = new Dash.vo.Representation();\n                representation.index = i;\n                representation.adaptation = adaptation;\n\n                if (r.hasOwnProperty(\"id\")) {\n                    representation.id = r.id;\n                }\n\n                if (r.hasOwnProperty(\"SegmentBase\")) {\n                    segmentInfo = r.SegmentBase;\n                    representation.segmentInfoType = \"SegmentBase\";\n                } else if (r.hasOwnProperty(\"SegmentList\")) {\n                    segmentInfo = r.SegmentList;\n                    representation.segmentInfoType = \"SegmentList\";\n                    representation.useCalculatedLiveEdgeTime = true;\n                } else if (r.hasOwnProperty(\"SegmentTemplate\")) {\n                    segmentInfo = r.SegmentTemplate;\n\n                    if (segmentInfo.hasOwnProperty(\"SegmentTimeline\")) {\n                        representation.segmentInfoType = \"SegmentTimeline\";\n                    } else {\n                        representation.segmentInfoType = \"SegmentTemplate\";\n                    }\n\n                    if (segmentInfo.hasOwnProperty(\"initialization\")) {\n                        representation.initialization = segmentInfo.initialization.split(\"$Bandwidth$\")\n                            .join(r.bandwidth).split(\"$RepresentationID$\").join(r.id);\n                    }\n                } else {\n                    segmentInfo = r.BaseURL;\n                    representation.segmentInfoType = \"BaseURL\";\n                }\n\n                if (segmentInfo.hasOwnProperty(\"Initialization\")) {\n                    initialization = segmentInfo.Initialization;\n                    if (initialization.hasOwnProperty(\"sourceURL\")) {\n                        representation.initialization = initialization.sourceURL;\n                    } else if (initialization.hasOwnProperty(\"range\")) {\n                        representation.initialization = r.BaseURL;\n                        representation.range = initialization.range;\n                    }\n                } else if (r.hasOwnProperty(\"mimeType\") && this.getIsTextTrack(r.mimeType) && !representation.initialization) {\n                    representation.initialization = r.BaseURL;\n                    representation.range = 0;\n                }\n\n                if (segmentInfo.hasOwnProperty(\"timescale\")) {\n                    representation.timescale = segmentInfo.timescale;\n                }\n                if (segmentInfo.hasOwnProperty(\"duration\")) {\n                    // TODO according to the spec @maxSegmentDuration specifies the maximum duration of any Segment in any Representation in the Media Presentation\n                    // It is also said that for a SegmentTimeline any @d value shall not exceed the value of MPD@maxSegmentDuration, but nothing is said about\n                    // SegmentTemplate @duration attribute. We need to find out if @maxSegmentDuration should be used instead of calculated duration if the the duration\n                    // exceeds @maxSegmentDuration\n                    //representation.segmentDuration = Math.min(segmentInfo.duration / representation.timescale, adaptation.period.mpd.maxSegmentDuration);\n                    representation.segmentDuration = segmentInfo.duration / representation.timescale;\n                }\n                if (segmentInfo.hasOwnProperty(\"startNumber\")) {\n                    representation.startNumber = segmentInfo.startNumber;\n                }\n                if (segmentInfo.hasOwnProperty(\"indexRange\")) {\n                    representation.indexRange = segmentInfo.indexRange;\n                }\n                if (segmentInfo.hasOwnProperty(\"presentationTimeOffset\")) {\n                    representation.presentationTimeOffset = segmentInfo.presentationTimeOffset / representation.timescale;\n                }\n\n                representation.MSETimeOffset = this.timelineConverter.calcMSETimeOffset(representation);\n                representations.push(representation);\n            }\n        }\n\n        return representations;\n    },\n\n    getAdaptationsForPeriod: function(manifest, period) {\n        var p = manifest === null ? null : manifest.Period_asArray[period.index],\n            adaptations = [],\n            adaptationSet;\n\n        if (p) {\n            for (var i = 0; i < p.AdaptationSet_asArray.length; i += 1) {\n                adaptationSet = new Dash.vo.AdaptationSet();\n                adaptationSet.index = i;\n                adaptationSet.period = period;\n                adaptations.push(adaptationSet);\n            }\n        }\n\n        return adaptations;\n    },\n\n    getRegularPeriods: function(manifest, mpd) {\n        var periods = [],\n            isDynamic = this.getIsDynamic(manifest),\n            i,\n            len,\n            p1 = null,\n            p = null,\n            vo1 = null,\n            vo = null;\n\n        for (i = 0, len = manifest.Period_asArray.length; i < len; i += 1) {\n            p = manifest.Period_asArray[i];\n\n            // If the attribute @start is present in the Period, then the\n            // Period is a regular Period and the PeriodStart is equal\n            // to the value of this attribute.\n            if (p.hasOwnProperty(\"start\")) {\n                vo = new Dash.vo.Period();\n                vo.start = p.start;\n            }\n            // If the @start attribute is absent, but the previous Period\n            // element contains a @duration attribute then then this new\n            // Period is also a regular Period. The start time of the new\n            // Period PeriodStart is the sum of the start time of the previous\n            // Period PeriodStart and the value of the attribute @duration\n            // of the previous Period.\n            else if (p1 !== null && p.hasOwnProperty(\"duration\")) {\n                vo = new Dash.vo.Period();\n                vo.start = vo1.start + vo1.duration;\n                vo.duration = p.duration;\n            }\n            // If (i) @start attribute is absent, and (ii) the Period element\n            // is the first in the MPD, and (iii) the MPD@type is 'static',\n            // then the PeriodStart time shall be set to zero.\n            else if (i === 0 && !isDynamic) {\n                vo = new Dash.vo.Period();\n                vo.start = 0;\n            }\n\n            // The Period extends until the PeriodStart of the next Period.\n            // The difference between the PeriodStart time of a Period and\n            // the PeriodStart time of the following Period.\n            if (vo1 !== null && isNaN(vo1.duration)) {\n                vo1.duration = vo.start - vo1.start;\n            }\n\n            if (vo !== null && p.hasOwnProperty(\"id\")) {\n                vo.id = p.id;\n            }\n\n            if (vo !== null && p.hasOwnProperty(\"duration\")) {\n                vo.duration = p.duration;\n            }\n\n            if (vo !== null) {\n                vo.index = i;\n                vo.mpd = mpd;\n                periods.push(vo);\n            }\n\n            p1 = p;\n            p = null;\n            vo1 = vo;\n            vo = null;\n        }\n\n        if (periods.length === 0) {\n            return periods;\n        }\n\n        mpd.checkTime = this.getCheckTime(manifest, periods[0]);\n\n        // The last Period extends until the end of the Media Presentation.\n        // The difference between the PeriodStart time of the last Period\n        // and the mpd duration\n        if (vo1 !== null && isNaN(vo1.duration)) {\n            vo1.duration = this.getEndTimeForLastPeriod(mpd) - vo1.start;\n        }\n\n        return periods;\n    },\n\n    getMpd: function(manifest) {\n        var mpd = new Dash.vo.Mpd();\n\n        if (manifest) {\n            mpd.manifest = manifest;\n\n            if (manifest.hasOwnProperty(\"availabilityStartTime\")) {\n                mpd.availabilityStartTime = new Date(manifest.availabilityStartTime.getTime());\n            } else {\n                mpd.availabilityStartTime = new Date(manifest.mpdLoadedTime.getTime());\n            }\n\n            if (manifest.hasOwnProperty(\"availabilityEndTime\")) {\n                mpd.availabilityEndTime = new Date(manifest.availabilityEndTime.getTime());\n            }\n\n            if (manifest.hasOwnProperty(\"suggestedPresentationDelay\")) {\n                mpd.suggestedPresentationDelay = manifest.suggestedPresentationDelay;\n            }\n\n            if (manifest.hasOwnProperty(\"timeShiftBufferDepth\")) {\n                mpd.timeShiftBufferDepth = manifest.timeShiftBufferDepth;\n            }\n\n            if (manifest.hasOwnProperty(\"maxSegmentDuration\")) {\n                mpd.maxSegmentDuration = manifest.maxSegmentDuration;\n            }\n\n            return mpd;\n        }\n\n        return null;\n    },\n\n    getFetchTime: function(manifest, period) {\n        // FetchTime is defined as the time at which the server processes the request for the MPD from the client.\n        // TODO The client typically should not use the time at which it actually successfully received the MPD, but should\n        // take into account delay due to MPD delivery and processing. The fetch is considered successful fetching\n        // either if the client obtains an updated MPD or the client verifies that the MPD has not been updated since the previous fetching.\n        var fetchTime = this.timelineConverter.calcPresentationTimeFromWallTime(manifest.mpdLoadedTime, period);\n\n        return fetchTime;\n    },\n\n    getCheckTime: function(manifest, period) {\n        var checkTime = NaN;\n\n        // If the MPD@minimumUpdatePeriod attribute in the client is provided, then the check time is defined as the\n        // sum of the fetch time of this operating MPD and the value of this attribute,\n        // i.e. CheckTime = FetchTime + MPD@minimumUpdatePeriod.\n        if (manifest.hasOwnProperty(\"minimumUpdatePeriod\")) {\n            checkTime = this.getFetchTime(manifest, period) + manifest.minimumUpdatePeriod;\n        }\n\n        return checkTime;\n    },\n\n    getEndTimeForLastPeriod: function(mpd) {\n        var periodEnd;\n\n        // if the MPD@mediaPresentationDuration attribute is present, then PeriodEndTime is defined as the end time of the Media Presentation.\n        // if the MPD@mediaPresentationDuration attribute is not present, then PeriodEndTime is defined as FetchTime + MPD@minimumUpdatePeriod\n\n        if (mpd.manifest.mediaPresentationDuration) {\n            periodEnd = mpd.manifest.mediaPresentationDuration;\n        } else if (!isNaN(mpd.checkTime)) {\n            // in this case the Period End Time should match CheckTime\n            periodEnd = mpd.checkTime;\n        } else {\n            return new Error(\"Must have @mediaPresentationDuration or @minimumUpdatePeriod on MPD or an explicit @duration on the last period.\");\n        }\n\n        return periodEnd;\n    },\n\n    getEventsForPeriod: function(manifest, period) {\n        var periodArray = manifest === null ? null : manifest.Period_asArray,\n            eventStreams = periodArray === null ? null : periodArray[period.index].EventStream_asArray,\n            events = [];\n\n        if (eventStreams) {\n            for (var i = 0; i < eventStreams.length; i += 1) {\n                var eventStream = new Dash.vo.EventStream();\n                eventStream.period = period;\n                eventStream.timescale = 1;\n\n                if (eventStreams[i].hasOwnProperty(\"schemeIdUri\")) {\n                    eventStream.schemeIdUri = eventStreams[i].schemeIdUri;\n                } else {\n                    throw \"Invalid EventStream. SchemeIdUri has to be set\";\n                }\n                if (eventStreams[i].hasOwnProperty(\"timescale\")) {\n                    eventStream.timescale = eventStreams[i].timescale;\n                }\n                if (eventStreams[i].hasOwnProperty(\"value\")) {\n                    eventStream.value = eventStreams[i].value;\n                }\n                for (var j = 0; j < eventStreams[i].Event_asArray.length; j += 1) {\n                    var event = new Dash.vo.Event();\n                    event.presentationTime = 0;\n                    event.eventStream = eventStream;\n\n                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(\"presentationTime\")) {\n                        event.presentationTime = eventStreams[i].Event_asArray[j].presentationTime;\n                    }\n                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(\"duration\")) {\n                        event.duration = eventStreams[i].Event_asArray[j].duration;\n                    }\n                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(\"id\")) {\n                        event.id = eventStreams[i].Event_asArray[j].id;\n                    }\n                    events.push(event);\n                }\n            }\n        }\n\n        return events;\n    },\n\n    getEventStreamForAdaptationSet: function(data) {\n\n        var eventStreams = [],\n            inbandStreams;\n\n        if (data) {\n            inbandStreams = data.InbandEventStream_asArray;\n\n            if (inbandStreams) {\n                for (var i = 0; i < inbandStreams.length; i += 1) {\n                    var eventStream = new Dash.vo.EventStream();\n                    eventStream.timescale = 1;\n\n                    if (inbandStreams[i].hasOwnProperty(\"schemeIdUri\")) {\n                        eventStream.schemeIdUri = inbandStreams[i].schemeIdUri;\n                    } else {\n                        throw \"Invalid EventStream. SchemeIdUri has to be set\";\n                    }\n                    if (inbandStreams[i].hasOwnProperty(\"timescale\")) {\n                        eventStream.timescale = inbandStreams[i].timescale;\n                    }\n                    if (inbandStreams[i].hasOwnProperty(\"value\")) {\n                        eventStream.value = inbandStreams[i].value;\n                    }\n                    eventStreams.push(eventStream);\n                }\n            }\n        }\n\n        return eventStreams;\n    },\n\n    getEventStreamForRepresentation: function(data, representation) {\n\n        var eventStreams = [],\n            inbandStreams;\n\n        if (data && representation) {\n\n            inbandStreams = data.Representation_asArray[representation.index].InbandEventStream_asArray;\n\n            if (inbandStreams) {\n                for (var i = 0; i < inbandStreams.length; i++) {\n                    var eventStream = new Dash.vo.EventStream();\n                    eventStream.timescale = 1;\n                    eventStream.representation = representation;\n\n                    if (inbandStreams[i].hasOwnProperty(\"schemeIdUri\")) {\n                        eventStream.schemeIdUri = inbandStreams[i].schemeIdUri;\n                    } else {\n                        throw \"Invalid EventStream. SchemeIdUri has to be set\";\n                    }\n                    if (inbandStreams[i].hasOwnProperty(\"timescale\")) {\n                        eventStream.timescale = inbandStreams[i].timescale;\n                    }\n                    if (inbandStreams[i].hasOwnProperty(\"value\")) {\n                        eventStream.value = inbandStreams[i].value;\n                    }\n                    eventStreams.push(eventStream);\n                }\n            }\n        }\n\n        return eventStreams;\n\n    },\n\n    getRepresentationBandwidth: function(adaptation, index) {\n        return this.getBandwidth(this.getRepresentationFor(index, adaptation));\n    }\n\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.dependencies.DashMetricsExtensions = function() {\n    \"use strict\";\n    var findRepresentationIndexInPeriodArray = function(periodArray, representationId) {\n            var period,\n                adaptationSet,\n                adaptationSetArray,\n                representation,\n                representationArray,\n                periodArrayIndex,\n                adaptationSetArrayIndex,\n                representationArrayIndex;\n\n            for (periodArrayIndex = 0; periodArrayIndex < periodArray.length; periodArrayIndex = periodArrayIndex + 1) {\n                period = periodArray[periodArrayIndex];\n                adaptationSetArray = period.AdaptationSet_asArray;\n                for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                    adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                    representationArray = adaptationSet.Representation_asArray;\n                    for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                        representation = representationArray[representationArrayIndex];\n                        if (representationId === representation.id) {\n                            return representationArrayIndex;\n                        }\n                    }\n                }\n            }\n\n            return -1;\n        },\n\n        findRepresentionInPeriodArray = function(periodArray, representationId) {\n            var period,\n                adaptationSet,\n                adaptationSetArray,\n                representation,\n                representationArray,\n                periodArrayIndex,\n                adaptationSetArrayIndex,\n                representationArrayIndex;\n\n            for (periodArrayIndex = 0; periodArrayIndex < periodArray.length; periodArrayIndex = periodArrayIndex + 1) {\n                period = periodArray[periodArrayIndex];\n                adaptationSetArray = period.AdaptationSet_asArray;\n                for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                    adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                    representationArray = adaptationSet.Representation_asArray;\n                    for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                        representation = representationArray[representationArrayIndex];\n                        if (representationId === representation.id) {\n                            return representation;\n                        }\n                    }\n                }\n            }\n\n            return null;\n        },\n\n        adaptationIsType = function(adaptation, bufferType) {\n            var found = false;\n\n            // TODO : HACK ATTACK\n            // Below we call getIsVideo and getIsAudio and then check the adaptation set for a 'type' property.\n            // getIsVideo and getIsAudio are adding this 'type' property and SHOULD NOT BE.\n            // This method expects getIsVideo and getIsAudio to be sync, but they are async (returns a promise).\n            // This is a bad workaround!\n            // The metrics extensions should have every method use promises.\n\n            if (bufferType === \"video\") {\n                //found = this.manifestExt.getIsVideo(adaptation);\n                this.manifestExt.getIsVideo(adaptation);\n                if (adaptation.type === \"video\") {\n                    found = true;\n                }\n            } else if (bufferType === \"audio\") {\n                //found = this.manifestExt.getIsAudio(adaptation); // TODO : Have to be sure it's the *active* audio track.\n                this.manifestExt.getIsAudio(adaptation);\n                if (adaptation.type === \"audio\") {\n                    found = true;\n                }\n            } else {\n                found = false;\n            }\n\n            return found;\n        },\n\n        findMaxBufferIndex = function(periodArray, bufferType) {\n            var period,\n                adaptationSet,\n                adaptationSetArray,\n                representationArray,\n                periodArrayIndex,\n                adaptationSetArrayIndex;\n\n            for (periodArrayIndex = 0; periodArrayIndex < periodArray.length; periodArrayIndex = periodArrayIndex + 1) {\n                period = periodArray[periodArrayIndex];\n                adaptationSetArray = period.AdaptationSet_asArray;\n                for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                    adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                    representationArray = adaptationSet.Representation_asArray;\n                    if (adaptationIsType.call(this, adaptationSet, bufferType)) {\n                        return representationArray.length;\n                    }\n                }\n            }\n\n            return -1;\n        },\n\n        getBandwidthForRepresentation = function(representationId) {\n            var self = this,\n                manifest = self.manifestModel.getValue(),\n                representation,\n                periodArray = manifest === null ? null : manifest.Period_asArray;\n\n            if (periodArray) {\n                representation = findRepresentionInPeriodArray.call(self, periodArray, representationId);\n\n                if (representation === null) {\n                    return null;\n                }\n\n                return representation.bandwidth;\n            }\n\n            return null;\n        },\n\n        getIndexForRepresentation = function(representationId) {\n            var self = this,\n                manifest = self.manifestModel.getValue(),\n                representationIndex,\n                periodArray = manifest === null ? null : manifest.Period_asArray;\n\n            if (periodArray) {\n                representationIndex = findRepresentationIndexInPeriodArray.call(self, periodArray, representationId);\n                return representationIndex;\n            }\n\n            return null;\n        },\n\n        getMaxIndexForBufferType = function(bufferType) {\n            var self = this,\n                manifest = self.manifestModel.getValue(),\n                maxIndex,\n                periodArray = manifest === null ? null : manifest.Period_asArray;\n\n            if (periodArray) {\n                maxIndex = findMaxBufferIndex.call(this, periodArray, bufferType);\n                return maxIndex;\n            }\n\n            return null;\n        },\n\n        getCurrentRepresentationSwitch = function(metrics) {\n            if (metrics === null) {\n                return null;\n            }\n\n            var repSwitch = metrics.RepSwitchList,\n                repSwitchLength,\n                repSwitchLastIndex,\n                currentRepSwitch;\n\n            if (repSwitch === null || repSwitch.length <= 0) {\n                return null;\n            }\n\n            repSwitchLength = repSwitch.length;\n            repSwitchLastIndex = repSwitchLength - 1;\n\n            currentRepSwitch = repSwitch[repSwitchLastIndex];\n            return currentRepSwitch;\n        },\n\n        getCurrentBufferLevel = function(metrics) {\n            if (metrics === null) {\n                return null;\n            }\n\n            var bufferLevel = metrics.BufferLevel,\n                bufferLevelLength,\n                bufferLevelLastIndex,\n                currentBufferLevel;\n\n            if (bufferLevel === null || bufferLevel.length <= 0) {\n                return null;\n            }\n\n            bufferLevelLength = bufferLevel.length;\n            bufferLevelLastIndex = bufferLevelLength - 1;\n\n            currentBufferLevel = bufferLevel[bufferLevelLastIndex];\n            return currentBufferLevel;\n        },\n\n        getCurrentHttpRequest = function(metrics) {\n            if (metrics === null) {\n                return null;\n            }\n\n            var httpList = metrics.HttpList,\n                httpListLength,\n                httpListLastIndex,\n                currentHttpList = null;\n\n            if (httpList === null || httpList.length <= 0) {\n                return null;\n            }\n\n            httpListLength = httpList.length;\n            httpListLastIndex = httpListLength - 1;\n\n            // ORANGE: if only 1 item, then was ignored\n            //while (httpListLastIndex > 0) {\n            while (httpListLastIndex >= 0) {\n                if (httpList[httpListLastIndex].responsecode !== null) {\n                    currentHttpList = httpList[httpListLastIndex];\n                    break;\n                }\n                httpListLastIndex -= 1;\n            }\n            return currentHttpList;\n        },\n\n        getHttpRequests = function(metrics) {\n            if (metrics === null) {\n                return [];\n            }\n\n            return !!metrics.HttpList ? metrics.HttpList : [];\n        },\n\n        getCurrentDroppedFrames = function(metrics) {\n            if (metrics === null) {\n                return null;\n            }\n\n            var droppedFrames = metrics.DroppedFrames,\n                droppedFramesLength,\n                droppedFramesLastIndex,\n                currentDroppedFrames;\n\n            if (droppedFrames === null || droppedFrames.length <= 0) {\n                return null;\n            }\n\n            droppedFramesLength = droppedFrames.length;\n            droppedFramesLastIndex = droppedFramesLength - 1;\n            currentDroppedFrames = droppedFrames[droppedFramesLastIndex];\n\n            return currentDroppedFrames;\n        },\n\n        getCurrentPlaybackQuality = function(metrics) {\n\n            if (metrics === null) {\n                return null;\n            }\n\n            var playbackQuality = metrics.PlaybackQuality;\n\n            if (playbackQuality === null || playbackQuality.length <= 0) {\n                return null;\n            }\n\n            return playbackQuality[playbackQuality.length-1];\n        },\n\n        getCurrentDVRInfo = function(metrics) {\n\n            if (metrics === null) {\n                return null;\n            }\n\n            var dvrInfo = metrics.DVRInfo,\n                dvrInfoLastIndex,\n                curentDVRInfo = null;\n\n            if (dvrInfo === null || dvrInfo.length <= 0) {\n                return null;\n            }\n\n            dvrInfoLastIndex = dvrInfo.length - 1;\n            curentDVRInfo = dvrInfo[dvrInfoLastIndex];\n\n            return curentDVRInfo;\n        },\n\n        getCurrentManifestUpdate = function(metrics) {\n            if (metrics === null) {\n                return null;\n            }\n\n            var manifestUpdate = metrics.ManifestUpdate,\n                ln,\n                lastIdx,\n                currentManifestUpdate;\n\n            if (manifestUpdate === null || manifestUpdate.length <= 0) {\n                return null;\n            }\n\n            ln = manifestUpdate.length;\n            lastIdx = ln - 1;\n\n            currentManifestUpdate = manifestUpdate[lastIdx];\n\n            return currentManifestUpdate;\n        };\n\n    return {\n        manifestModel: undefined,\n        manifestExt: undefined,\n        getBandwidthForRepresentation: getBandwidthForRepresentation,\n        getIndexForRepresentation: getIndexForRepresentation,\n        getMaxIndexForBufferType: getMaxIndexForBufferType,\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n        getCurrentBufferLevel: getCurrentBufferLevel,\n        getCurrentHttpRequest: getCurrentHttpRequest,\n        getHttpRequests: getHttpRequests,\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\n        getCurrentPlaybackQuality: getCurrentPlaybackQuality,\n        getCurrentDVRInfo: getCurrentDVRInfo,\n        getCurrentManifestUpdate: getCurrentManifestUpdate\n    };\n};\n\nDash.dependencies.DashMetricsExtensions.prototype = {\n    constructor: Dash.dependencies.DashMetricsExtensions\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.dependencies.DashParser = function () {\n    \"use strict\";\n\n    var SECONDS_IN_YEAR = 365 * 24 * 60 * 60,\n        SECONDS_IN_MONTH = 30 * 24 * 60 * 60, // not precise!\n        SECONDS_IN_DAY = 24 * 60 * 60,\n        SECONDS_IN_HOUR = 60 * 60,\n        SECONDS_IN_MIN = 60,\n        MINUTES_IN_HOUR = 60,\n        MILLISECONDS_IN_SECONDS = 1000,\n        durationRegex = /^P(([\\d.]*)Y)?(([\\d.]*)M)?(([\\d.]*)D)?T?(([\\d.]*)H)?(([\\d.]*)M)?(([\\d.]*)S)?/,\n        datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+-])([0-9]{2})([0-9]{2}))?/,\n        numericRegex = /^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$/,\n        matchers = [\n            {\n                type: \"duration\",\n                test: function (str) {\n                    return durationRegex.test(str);\n                },\n                converter: function (str) {\n                    //str = \"P10Y10M10DT10H10M10.1S\";\n                    var match = durationRegex.exec(str);\n                    return (parseFloat(match[2] || 0) * SECONDS_IN_YEAR +\n                            parseFloat(match[4] || 0) * SECONDS_IN_MONTH +\n                            parseFloat(match[6] || 0) * SECONDS_IN_DAY +\n                            parseFloat(match[8] || 0) * SECONDS_IN_HOUR +\n                            parseFloat(match[10] || 0) * SECONDS_IN_MIN +\n                            parseFloat(match[12] || 0));\n                }\n            },\n            {\n                type: \"datetime\",\n                test: function (str) {\n                    return datetimeRegex.test(str);\n                },\n                converter: function (str) {\n                    var match = datetimeRegex.exec(str),\n                        utcDate;\n                    // If the string does not contain a timezone offset different browsers can interpret it either\n                    // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\n                    // all browsers\n                    utcDate = Date.UTC(\n                        parseInt(match[1], 10),\n                        parseInt(match[2], 10)-1, // months start from zero\n                        parseInt(match[3], 10),\n                        parseInt(match[4], 10),\n                        parseInt(match[5], 10),\n                        (match[6] && parseInt(match[6], 10) || 0),\n                        (match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS) || 0);\n                    // If the date has timezone offset take it into account as well\n                    if (match[9] && match[10]) {\n                        var timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\n                        utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\n                    }\n\n                    return new Date(utcDate);\n                }\n            },\n            {\n                type: \"numeric\",\n                test: function (str) {\n                    return numericRegex.test(str);\n                },\n                converter: function (str) {\n                    return parseFloat(str);\n                }\n            }\n        ],\n\n        getCommonValuesMap = function () {\n            var adaptationSet,\n                representation,\n                subRepresentation,\n                common;\n\n            common = [\n                {\n                    name: 'profiles',\n                    merge: false\n                },\n                {\n                    name: 'width',\n                    merge: false\n                },\n                {\n                    name: 'height',\n                    merge: false\n                },\n                {\n                    name: 'sar',\n                    merge: false\n                },\n                {\n                    name: 'frameRate',\n                    merge: false\n                },\n                {\n                    name: 'audioSamplingRate',\n                    merge: false\n                },\n                {\n                    name: 'mimeType',\n                    merge: false\n                },\n                {\n                    name: 'segmentProfiles',\n                    merge: false\n                },\n                {\n                    name: 'codecs',\n                    merge: false\n                },\n                {\n                    name: 'maximumSAPPeriod',\n                    merge: false\n                },\n                {\n                    name: 'startsWithSap',\n                    merge: false\n                },\n                {\n                    name: 'maxPlayoutRate',\n                    merge: false\n                },\n                {\n                    name: 'codingDependency',\n                    merge: false\n                },\n                {\n                    name: 'scanType',\n                    merge: false\n                },\n                {\n                    name: 'FramePacking',\n                    merge: true\n                },\n                {\n                    name: 'AudioChannelConfiguration',\n                    merge: true\n                },\n                {\n                    name: 'ContentProtection',\n                    merge: true\n                }\n            ];\n\n            adaptationSet = {};\n            adaptationSet.name = \"AdaptationSet\";\n            adaptationSet.isRoot = false;\n            adaptationSet.isArray = true;\n            adaptationSet.parent = null;\n            adaptationSet.children = [];\n            adaptationSet.properties = common;\n\n            representation = {};\n            representation.name = \"Representation\";\n            representation.isRoot = false;\n            representation.isArray = true;\n            representation.parent = adaptationSet;\n            representation.children = [];\n            representation.properties = common;\n            adaptationSet.children.push(representation);\n\n            subRepresentation = {};\n            subRepresentation.name = \"SubRepresentation\";\n            subRepresentation.isRoot = false;\n            subRepresentation.isArray = true;\n            subRepresentation.parent = representation;\n            subRepresentation.children = [];\n            subRepresentation.properties = common;\n            representation.children.push(subRepresentation);\n\n            return adaptationSet;\n        },\n\n        getSegmentValuesMap = function () {\n            var period,\n                adaptationSet,\n                representation,\n                common;\n\n            common = [\n                {\n                    name: 'SegmentBase',\n                    merge: true\n                },\n                {\n                    name: 'SegmentTemplate',\n                    merge: true\n                },\n                {\n                    name: 'SegmentList',\n                    merge: true\n                }\n            ];\n\n            period = {};\n            period.name = \"Period\";\n            period.isRoot = false;\n            period.isArray = true;\n            period.parent = null;\n            period.children = [];\n            period.properties = common;\n\n            adaptationSet = {};\n            adaptationSet.name = \"AdaptationSet\";\n            adaptationSet.isRoot = false;\n            adaptationSet.isArray = true;\n            adaptationSet.parent = period;\n            adaptationSet.children = [];\n            adaptationSet.properties = common;\n            period.children.push(adaptationSet);\n\n            representation = {};\n            representation.name = \"Representation\";\n            representation.isRoot = false;\n            representation.isArray = true;\n            representation.parent = adaptationSet;\n            representation.children = [];\n            representation.properties = common;\n            adaptationSet.children.push(representation);\n\n            return period;\n        },\n\n        getBaseUrlValuesMap = function () {\n            var mpd,\n                period,\n                adaptationSet,\n                representation,\n                common;\n\n            common = [\n                {\n                    name: 'BaseURL',\n                    merge: true,\n                    mergeFunction: function (parentValue, childValue) {\n                        var mergedValue;\n\n                        // child is absolute, don't merge\n                        if (childValue.indexOf(\"http://\") === 0) {\n                            mergedValue = childValue;\n                        } else {\n                            mergedValue = parentValue + childValue;\n                        }\n\n                        return mergedValue;\n                    }\n                }\n            ];\n\n            mpd = {};\n            mpd.name = \"mpd\";\n            mpd.isRoot = true;\n            mpd.isArray = true;\n            mpd.parent = null;\n            mpd.children = [];\n            mpd.properties = common;\n\n            period = {};\n            period.name = \"Period\";\n            period.isRoot = false;\n            period.isArray = true;\n            period.parent = null;\n            period.children = [];\n            period.properties = common;\n            mpd.children.push(period);\n\n            adaptationSet = {};\n            adaptationSet.name = \"AdaptationSet\";\n            adaptationSet.isRoot = false;\n            adaptationSet.isArray = true;\n            adaptationSet.parent = period;\n            adaptationSet.children = [];\n            adaptationSet.properties = common;\n            period.children.push(adaptationSet);\n\n            representation = {};\n            representation.name = \"Representation\";\n            representation.isRoot = false;\n            representation.isArray = true;\n            representation.parent = adaptationSet;\n            representation.children = [];\n            representation.properties = common;\n            adaptationSet.children.push(representation);\n\n            return mpd;\n        },\n\n        getDashMap = function () {\n            var result = [];\n\n            result.push(getCommonValuesMap());\n            result.push(getSegmentValuesMap());\n            result.push(getBaseUrlValuesMap());\n\n            return result;\n        },\n\n        internalParse = function (data, baseUrl) {\n            //this.debug.log(\"Doing parse.\");\n\n            var manifest,\n                converter = new X2JS(matchers, '', true),\n                iron = new ObjectIron(getDashMap()),\n                start = new Date(),\n                json = null,\n                ironed = null;\n\n            try {\n                //this.debug.log(\"Converting from XML.\");\n                manifest = converter.xml_str2json(data);\n                json = new Date();\n\n                if (!manifest.hasOwnProperty(\"BaseURL\")) {\n                    //this.debug.log(\"Setting baseURL: \" + baseUrl);\n                    manifest.BaseURL = baseUrl;\n                } else {\n                    // Setting manifest's BaseURL to the first BaseURL\n                    manifest.BaseURL = manifest.BaseURL_asArray[0];\n\n                    if (manifest.BaseURL.toString().indexOf(\"http\") !== 0) {\n                        manifest.BaseURL = baseUrl + manifest.BaseURL;\n                    }\n                }\n\n                //this.debug.log(\"Flatten manifest properties.\");\n                iron.run(manifest);\n                ironed = new Date();\n\n                this.debug.log(\"Parsing complete: ( xml2json: \" + (json.getTime() - start.getTime()) + \"ms, objectiron: \" + (ironed.getTime() - json.getTime()) + \"ms, total: \" + ((ironed.getTime() - start.getTime()) / 1000) + \"s)\");\n \n            } catch (e) {\n                return Q.reject(null);\n            }\n\n            return Q.when(manifest);\n        };\n\n    return {\n        debug: undefined,\n        parse: internalParse\n    };\n};\n\nDash.dependencies.DashParser.prototype = {\n    constructor: Dash.dependencies.DashParser\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.dependencies.FragmentExtensions = function () {\n    \"use strict\";\n\n    var parseTFDT = function (ab) {\n            var d = new DataView(ab),\n                pos = 0,\n                base_media_decode_time,\n                version,\n                size,\n                type,\n                i,\n                c;\n\n            while (type !== \"tfdt\" && pos < d.byteLength) {\n                size = d.getUint32(pos); // subtract 8 for including the size and type\n                pos += 4;\n\n                type = \"\";\n                for (i = 0; i < 4; i += 1) {\n                    c = d.getInt8(pos);\n                    type += String.fromCharCode(c);\n                    pos += 1;\n                }\n\n                if (type !== \"moof\" && type !== \"traf\" && type !== \"tfdt\") {\n                    pos += size - 8;\n                }\n            }\n\n            if (pos === d.byteLength) {\n                throw \"Error finding live offset.\";\n            }\n\n            version = d.getUint8(pos);\n\n            this.debug.log(\"position: \" + pos);\n\n            if (version === 0) {\n                pos += 4;\n                base_media_decode_time = d.getUint32(pos, false);\n            } else {\n                pos += size - 16;\n                base_media_decode_time = utils.Math.to64BitNumber(d.getUint32(pos + 4, false), d.getUint32(pos, false));\n            }\n\n            return {\n                'version' : version,\n                'base_media_decode_time' : base_media_decode_time\n            };\n        },\n\n        parseSIDX = function (ab) {\n            var d = new DataView(ab),\n                pos = 0,\n                version,\n                timescale,\n                earliest_presentation_time,\n                i,\n                type,\n                size,\n                charCode;\n\n            while (type !== \"sidx\" && pos < d.byteLength) {\n                size = d.getUint32(pos); // subtract 8 for including the size and type\n                pos += 4;\n\n                type = \"\";\n                for (i = 0; i < 4; i += 1) {\n                    charCode = d.getInt8(pos);\n                    type += String.fromCharCode(charCode);\n                    pos += 1;\n                }\n\n                if (type !== \"moof\" && type !== \"traf\" && type !== \"sidx\") {\n                    pos += size - 8;\n                } else if (type === \"sidx\") {\n                    // reset the position to the beginning of the box...\n                    // if we do not reset the position, the evaluation\n                    // of sidxEnd to ab.byteLength will fail.\n                    pos -= 8;\n                }\n            }\n\n            version = d.getUint8(pos + 8);\n            pos += 12;\n\n            // skipped reference_ID(32)\n            timescale = d.getUint32(pos + 4, false);\n            pos += 8;\n\n            if (version === 0) {\n                earliest_presentation_time = d.getUint32(pos, false);\n            } else {\n                earliest_presentation_time = utils.Math.to64BitNumber(d.getUint32(pos + 4, false), d.getUint32(pos, false));\n            }\n\n            return Q.when({\n                'earliestPresentationTime' : earliest_presentation_time,\n                'timescale' : timescale\n            });\n        },\n\n        loadFragment = function (media) {\n            var deferred = Q.defer(),\n                request = new XMLHttpRequest(),\n                url,\n                loaded = false,\n                errorStr,\n                parsed;\n\n            url = media;\n\n            request.onloadend = function () {\n                if (!loaded) {\n                    errorStr = \"Error loading fragment: \" + url;\n                    deferred.reject(errorStr);\n                }\n            };\n\n            request.onload = function () {\n                loaded = true;\n                parsed = parseTFDT(request.response);\n                deferred.resolve(parsed);\n            };\n\n            request.onerror = function () {\n                errorStr = \"Error loading fragment: \" + url;\n                deferred.reject(errorStr);\n            };\n\n            request.open(\"GET\", url);\n            request.responseType = \"arraybuffer\";\n            request.send(null);\n\n            return deferred.promise;\n        };\n\n    return {\n        debug : undefined,\n        loadFragment : loadFragment,\n        parseTFDT : parseTFDT,\n        parseSIDX : parseSIDX\n    };\n};\n\nDash.dependencies.FragmentExtensions.prototype = {\n    constructor: Dash.dependencies.FragmentExtensions\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.dependencies.TimelineConverter = function() {\n    \"use strict\";\n\n    var clientServerTimeShift = 0,\n\n        calcAvailabilityTimeFromPresentationTime = function(presentationTime, mpd, isDynamic, calculateEnd) {\n            var availabilityTime = NaN;\n\n            if (calculateEnd) {\n                //@timeShiftBufferDepth specifies the duration of the time shifting buffer that is guaranteed\n                // to be available for a Media Presentation with type 'dynamic'.\n                // When not present, the value is infinite.\n                if (isDynamic && (mpd.timeShiftBufferDepth !== Number.POSITIVE_INFINITY)) {\n                    availabilityTime = new Date(mpd.availabilityStartTime.getTime() + ((presentationTime + mpd.timeShiftBufferDepth) * 1000));\n                } else {\n                    availabilityTime = mpd.availabilityEndTime;\n                }\n            } else {\n                if (isDynamic) {\n                    availabilityTime = new Date(mpd.availabilityStartTime.getTime() + (presentationTime * 1000));\n                } else {\n                    // in static mpd, all segments are available at the same time\n                    availabilityTime = mpd.availabilityStartTime;\n                }\n            }\n\n            return availabilityTime;\n        },\n\n        calcAvailabilityStartTimeFromPresentationTime = function(presentationTime, mpd, isDynamic) {\n            return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic);\n        },\n\n        calcAvailabilityEndTimeFromPresentationTime = function(presentationTime, mpd, isDynamic) {\n            return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic, true);\n        },\n\n        calcPresentationStartTime = function(period) {\n            var presentationStartTime,\n                isDynamic = period.mpd.manifest.type === \"dynamic\",\n                //ORANGE: fix bug on not updating URIFragmentDataVO\n                startTimeOffset = parseInt(this.uriQueryFragModel.getURIFragmentData().s, 10);\n\n            if (isDynamic) {\n\n                if (!isNaN(startTimeOffset) && startTimeOffset > 1262304000) {\n\n                    presentationStartTime = startTimeOffset - (period.mpd.availabilityStartTime.getTime() / 1000);\n\n                    if (presentationStartTime > period.liveEdge ||\n                        presentationStartTime < (period.liveEdge - period.mpd.timeShiftBufferDepth)) {\n\n                        presentationStartTime = null;\n                    }\n                }\n                presentationStartTime = presentationStartTime || period.liveEdge;\n\n            } else {\n                if (!isNaN(startTimeOffset) && startTimeOffset < period.duration && startTimeOffset >= 0) {\n                    presentationStartTime = startTimeOffset;\n                } else {\n                    presentationStartTime = period.start;\n                }\n            }\n\n            return presentationStartTime;\n        },\n\n        calcPresentationTimeFromWallTime = function(wallTime, period) {\n            return ((wallTime.getTime() - period.mpd.availabilityStartTime.getTime()) / 1000);\n        },\n\n        calcPresentationTimeFromMediaTime = function(mediaTime, representation) {\n            var presentationOffset = representation.presentationTimeOffset;\n\n            return mediaTime - presentationOffset;\n        },\n\n        calcMediaTimeFromPresentationTime = function(presentationTime, representation) {\n            var presentationOffset = representation.presentationTimeOffset;\n\n            return (presentationOffset + presentationTime);\n        },\n\n        calcWallTimeForSegment = function(segment, isDynamic) {\n            var suggestedPresentationDelay,\n                displayStartTime,\n                wallTime;\n\n            if (isDynamic) {\n                suggestedPresentationDelay = segment.representation.adaptation.period.mpd.suggestedPresentationDelay;\n                displayStartTime = segment.presentationStartTime + suggestedPresentationDelay;\n                wallTime = new Date(segment.availabilityStartTime.getTime() + (displayStartTime * 1000));\n            }\n\n            return wallTime;\n        },\n\n        calcActualPresentationTime = function(representation, currentTime, isDynamic) {\n            var self = this,\n                //periodStart = representation.adaptation.period.start,\n                availabilityWindow = self.calcSegmentAvailabilityRange(representation, isDynamic),\n                actualTime;\n\n            // ORANGE: confusion to resolve between availabilityWindow.start and periodStart.\n            // (in MSS case, periodStart is set to availabilityWindow.start)\n            //if ((currentTime >= (availabilityWindow.start + periodStart)) && (currentTime <= (availabilityWindow.end + periodStart))) {\n            if ((currentTime >= (availabilityWindow.start)) && (currentTime <= (availabilityWindow.end))) {\n                return currentTime;\n            }\n\n            actualTime = Math.max(availabilityWindow.end - representation.adaptation.period.mpd.manifest.minBufferTime * 2, availabilityWindow.start);\n\n            return actualTime;\n        },\n\n        calcSegmentAvailabilityRange = function(representation, isDynamic) {\n            var duration = representation.segmentDuration,\n                start = 0,\n                end = representation.adaptation.period.duration,\n                range = {\n                    start: start,\n                    end: end\n                },\n                checkTime,\n                now;\n\n            if (!isDynamic) {\n                return range;\n            }\n\n            if ((!representation.adaptation.period.mpd.isClientServerTimeSyncCompleted || isNaN(duration)) && representation.segmentAvailabilityRange) {\n                return representation.segmentAvailabilityRange;\n            }\n\n            checkTime = representation.adaptation.period.mpd.checkTime;\n            now = calcPresentationTimeFromWallTime(new Date((new Date().getTime()) + clientServerTimeShift), representation.adaptation.period);\n            //the Media Segment list is further restricted by the CheckTime together with the MPD attribute\n            // MPD@timeShiftBufferDepth such that only Media Segments for which the sum of the start time of the\n            // Media Segment and the Period start time falls in the interval [NOW- MPD@timeShiftBufferDepth - @duration, min(CheckTime, NOW)] are included.\n            start = Math.max((now - representation.adaptation.period.mpd.timeShiftBufferDepth), 0);\n            checkTime += (clientServerTimeShift / 1000);\n            end = isNaN(checkTime) ? now : Math.min(checkTime, now);\n            range = {\n                start: start,\n                end: end\n            };\n\n            return range;\n        },\n\n        /*liveEdgeFound = function(expectedLiveEdge, actualLiveEdge, period) {\n            if (period.mpd.isClientServerTimeSyncCompleted) return;\n\n            // the difference between expected and actual live edge time is supposed to be a difference between client\n            // and server time as well\n            period.mpd.clientServerTimeShift = actualLiveEdge - expectedLiveEdge;\n            period.mpd.isClientServerTimeSyncCompleted = true;\n            clientServerTimeShift = period.mpd.clientServerTimeShift * 1000;\n        },*/\n\n        calcMSETimeOffset = function(representation) {\n            var presentationOffset = representation.presentationTimeOffset;\n\n            return (-presentationOffset);\n        };\n\n    return {\n        system: undefined,\n        debug: undefined,\n        uriQueryFragModel: undefined,\n\n        setup: function() {\n            //this.system.mapHandler(\"liveEdgeFound\", undefined, liveEdgeFound.bind(this));\n        },\n\n        calcAvailabilityStartTimeFromPresentationTime: calcAvailabilityStartTimeFromPresentationTime,\n        calcAvailabilityEndTimeFromPresentationTime: calcAvailabilityEndTimeFromPresentationTime,\n        calcPresentationTimeFromWallTime: calcPresentationTimeFromWallTime,\n        calcPresentationTimeFromMediaTime: calcPresentationTimeFromMediaTime,\n        calcPresentationStartTime: calcPresentationStartTime,\n        calcActualPresentationTime: calcActualPresentationTime,\n        calcMediaTimeFromPresentationTime: calcMediaTimeFromPresentationTime,\n        calcSegmentAvailabilityRange: calcSegmentAvailabilityRange,\n        calcWallTimeForSegment: calcWallTimeForSegment,\n        calcMSETimeOffset: calcMSETimeOffset\n    };\n};\n\nDash.dependencies.TimelineConverter.prototype = {\n    constructor: Dash.dependencies.TimelineConverter\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.vo.AdaptationSet = function () {\n    \"use strict\";\n    this.period = null;\n    this.index = -1;\n};\n\nDash.vo.AdaptationSet.prototype = {\n    constructor: Dash.vo.AdaptationSet\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Fraunhofer Fokus\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.vo.Event = function () {\n    \"use strict\";\n    this.duration = NaN;\n    this.presentationTime = NaN;\n    this.id = NaN;\n    this.messageData = \"\";\n    this.eventStream = null;\n    this.presentationTimeDelta = NaN; // Specific EMSG Box paramater\n\n};\n\nDash.vo.Event.prototype = {\n    constructor: Dash.vo.Event\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Fraunhofer Fokus\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.vo.EventStream = function () {\n    \"use strict\";\n    this.adaptionSet = null;\n    this.representation = null;\n    this.period = null;\n    this.timescale = 1;\n    this.value = \"\";\n    this.schemeIdUri = \"\";\n};\n\nDash.vo.EventStream.prototype = {\n    constructor: Dash.vo.EventStream\n};\n","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.vo.Mpd = function () {\n    \"use strict\";\n    this.manifest = null;\n    this.suggestedPresentationDelay = 0;\n    this.availabilityStartTime = null;\n    this.availabilityEndTime = Number.POSITIVE_INFINITY;\n    this.timeShiftBufferDepth = Number.POSITIVE_INFINITY;\n    this.maxSegmentDuration = Number.POSITIVE_INFINITY;\n    this.checkTime = NaN;\n    this.clientServerTimeShift = 0;\n    this.isClientServerTimeSyncCompleted = false;\n};\n\nDash.vo.Mpd.prototype = {\n    constructor: Dash.vo.Mpd\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.vo.Period = function () {\n    \"use strict\";\n    this.id = null;\n    this.index = -1;\n    this.duration = NaN;\n    this.start = NaN;\n    this.mpd = null;\n    this.liveEdge = NaN;\n};\n\nDash.vo.Period.prototype = {\n    constructor: Dash.vo.Period\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.vo.Representation = function () {\n    \"use strict\";\n    this.id = null;\n    this.index = -1;\n    this.adaptation = null;\n    this.segmentInfoType = null;\n    this.initialization = null;\n    this.segmentDuration = NaN;\n    this.timescale = 1;\n    this.startNumber = 1;\n    this.indexRange = null;\n    this.range = null;\n    this.presentationTimeOffset = 0;\n    // Set the source buffer timeOffset to this\n    this.MSETimeOffset = NaN;\n    this.segmentAvailabilityRange = null;\n    this.availableSegmentsNumber = 0;\n};\n\nDash.vo.Representation.prototype = {\n    constructor: Dash.vo.Representation\n};","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nDash.vo.Segment = function () {\n    \"use strict\";\n    this.indexRange = null;\n    this.index = null;\n    this.mediaRange = null;\n    this.media = null;\n    this.duration = NaN;\n    // this is the time that should be inserted into the media url\n    this.replacementTime = null;\n    // this is the number that should be inserted into the media url\n    this.replacementNumber = NaN;\n    // This is supposed to match the time encoded in the media Segment\n    this.mediaStartTime = NaN;\n    // When the source buffer timeOffset is set to MSETimeOffset this is the \n    // time that will match the seekTarget and video.currentTime\n    this.presentationStartTime = NaN;\n    // Do not schedule this segment until \n    this.availabilityStartTime = NaN;\n    // Ignore and  discard this segment after\n    this.availabilityEndTime = NaN;\n    // The index of the segment inside the availability window\n    this.availabilityIdx = NaN;\n    // For dynamic mpd's, this is the wall clock time that the video   \n    // element currentTime should be presentationStartTime\n    this.wallStartTime = NaN;\n    this.representation = null;\n};\n\nDash.vo.Segment.prototype = {\n    constructor: Dash.vo.Segment\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2014, Orange\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n * \n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/*jshint -W020 */\nHls = (function () {\n    \"use strict\";\n\n    return {\n        dependencies: {}\n    };\n}());","/*\n * The copyright in this software is being made available under the BSD License, included below. This software may be subject to other third party and contributor rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Digital Primates\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Digital Primates nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nHls.dependencies.HlsStream = function() {\n    \"use strict\";\n\n    var REQUEST_PARAMS = {\n        stream: {\n            responseType: 'arraybuffer',\n            contentType: 'application/octet-stream'\n        },\n        text: {\n            responseType: 'text',\n            contentType: 'application/x-www-form-urlencoded'\n        },\n    };\n\n    var subtitlesEnabled = false,\n        autoPlay = true,\n        initialized = false,\n        errored = false,\n\n        protectionData,\n        licenseRequest = null,\n\n        // Events listeners\n        endedListener,\n        loadedmetadataListener,\n        loadeddataListener,\n        playListener,\n        pauseListener,\n        errorListener,\n        seekingListener,\n        seekedListener,\n        timeupdateListener,\n        waitingListener,\n        durationchangeListener,\n        progressListener,\n        ratechangeListener,\n        canplayListener,\n        playingListener,\n        loadstartListener,\n\n        needKeyListener,\n        keyMessageListener,\n        keyAddedListener,\n        keyErrorListener,\n\n        // Audio/text languages\n        defaultAudioLang = 'und',\n        defaultSubtitleLang = 'und',\n\n        // Initial start time\n        initialStartTime = -1,\n\n        play = function() {\n            if (!initialized) {\n                return;\n            }\n\n            this.debug.info(\"[Stream] Play.\");\n            this.videoModel.play();\n        },\n\n        pause = function() {\n            this.debug.info(\"[Stream] Pause.\");\n            this.videoModel.pause();\n        },\n\n        seek = function(time/*, autoplay*/) {\n            if (!initialized) {\n                //this.debug.info(\"[Stream] (seek) not initialized\");\n                return;\n            }\n\n            this.debug.info(\"[Stream] Seek: \" + time);\n\n            this.videoModel.setCurrentTime(time);\n        },\n\n        onLoadedMetadata = function() {\n            this.debug.info(\"[Stream] <video> loadedmetadata event\");\n            this.metricsModel.addMetaData();\n            this.metricsModel.addState(\"video\", \"buffering\", this.getVideoModel().getCurrentTime());\n        },\n\n        onLoadedData = function() {\n            this.debug.info(\"[Stream] <video> loadeddata event\");\n            this.setAudioLang(defaultAudioLang);\n            this.enableSubtitles(subtitlesEnabled);\n        },\n\n        onCanPlay = function() {\n            this.debug.info(\"[Stream] <video> canplay event\");\n            if (autoPlay) {\n                this.videoModel.play();\n            }\n        },\n\n        onPlaying = function() {\n            this.debug.info(\"[Stream] <video> playing event\");\n            this.metricsModel.addState(\"video\", \"playing\", this.getVideoModel().getCurrentTime());\n        },\n\n        onLoadStart = function() {\n            this.debug.info(\"[Stream] <video> loadstart event\");\n        },\n\n        onPlay = function() {\n            this.debug.info(\"[Stream] <video> play event\");\n\n            this.metricsModel.addPlayList(\"video\", new Date().getTime(), this.videoModel.getCurrentTime(), \"play\");\n        },\n\n        onEnded = function() {\n            this.debug.info(\"[Stream] <video> ended event\");\n            //add stopped state metric with reason = 1 : end of stream\n            this.metricsModel.addState(\"video\", \"stopped\", this.videoModel.getCurrentTime(), 1);\n        },\n\n        onPause = function() {\n            this.debug.info(\"[Stream] <video> pause event\");\n            this.metricsModel.addState(\"video\", \"paused\", this.videoModel.getCurrentTime());\n            this.metricsModel.addPlayList(\"video\", new Date().getTime(), this.videoModel.getCurrentTime(), \"pause\");\n        },\n\n        onError = function(event) {\n            var error = event.target.error,\n                code,\n                message = \"[Stream] <video> error: \";\n\n            if (error.code === -1) {\n                // not an error!\n                return;\n            }\n\n            switch (error.code) {\n                case 1:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_ABORTED;\n                    message += \"[HLS] The fetching process for the media resource was aborted by the user\";\n                    break;\n                case 2:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_NETWORK;\n                    message += \"[HLS] A network error has caused the user agent to stop fetching the media resource\";\n                    break;\n                case 3:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_DECODE;\n                    message += \"[HLS] An error has occurred in the decoding of the media resource\";\n                    break;\n                case 4:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_SRC_NOT_SUPPORTED;\n                    message += \"[HLS] The media could not be loaded, either because the server or network failed or because the format is not supported\";\n                    break;\n                case 5:\n                    code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_ENCRYPTED;\n                    message += \"[HLS] The encrypted media stream could not be played\";\n                    break;\n            }\n\n            errored = true;\n\n            this.errHandler.sendError(code, message);\n        },\n\n        onSeeking = function() {\n            this.debug.info(\"[Stream] <video> seeking event: \" + this.videoModel.getCurrentTime());\n            this.metricsModel.addState(\"video\", \"seeking\", this.videoModel.getCurrentTime());\n            this.metricsModel.addPlayList('video', new Date().getTime(), this.getVideoModel().getCurrentTime(), MediaPlayer.vo.metrics.PlayList.SEEK_START_REASON);\n        },\n\n        onSeeked = function() {\n            // this.debug.info(\"[Stream] <video> seeked event\");\n        },\n\n        onProgress = function() {\n            // this.debug.info(\"[Stream] <video> progress event\");\n        },\n\n        onTimeupdate = function() {\n            this.debug.info(\"[Stream] <video> timeupdate event: \" + this.videoModel.getCurrentTime());\n        },\n\n        onWaiting = function() {\n            this.debug.info(\"[Stream] <video> waiting event\");\n            if (!this.getVideoModel().isSeeking()) {\n                this.metricsModel.addState(\"video\", \"buffering\", this.getVideoModel().getCurrentTime());\n            }\n        },\n\n        onDurationchange = function() {\n            this.debug.info(\"[Stream] <video> durationchange event: \" + this.videoModel.getDuration());\n        },\n\n        onRatechange = function() {\n            this.debug.info(\"[Stream] <video> ratechange event: \" + this.videoModel.getPlaybackRate());\n        },\n\n        getKsProtectionData = function(ks) {\n            if (!protectionData) {\n                return null;\n            }\n            return protectionData[ks];\n        },\n\n        stringToArray = function (string) {\n            var buffer = new ArrayBuffer(string.length * 2); // 2 bytes for each char\n            var array = new Uint16Array(buffer);\n            for (var i = 0; i < string.length; i++) {\n                array[i] = string.charCodeAt(i);\n            }\n            return array;\n        },\n\n        extractContentId = function (initData) {\n            var contentId = String.fromCharCode.apply(null, new Uint16Array(initData.buffer));\n\n            var parts = contentId.split(\"//\");\n            if (parts.length != 2) {\n              throw \"Invalid content key format\";\n            }\n\n            return parts[1];\n        },\n\n        getCertificate = function () {\n            var protData = getKsProtectionData('com.apple.fps.1_0');\n            if (!protData || !protData.serverCertificate) {\n                return new Uint8Array(0);\n            }\n            return BASE64.decodeArray(protData.serverCertificate);\n        },\n\n        concatInitDataIdAndCertificate = function (initData, id, cert) {\n            if (typeof id == \"string\")\n                id = stringToArray(id);\n\n            // layout is [initData][4 byte: idLength][idLength byte: id][4 byte:certLength][certLength byte: cert]\n            var offset = 0;\n            var buffer = new ArrayBuffer(initData.byteLength + 4 + id.byteLength + 4 + cert.byteLength);\n            var dataView = new DataView(buffer);\n\n            var initDataArray = new Uint8Array(buffer, offset, initData.byteLength);\n            initDataArray.set(initData);\n            offset += initDataArray.byteLength;\n\n            dataView.setUint32(offset, id.byteLength, true);\n            offset += 4;\n\n            var idArray = new Uint16Array(buffer, offset, id.length);\n            idArray.set(id);\n            offset += idArray.byteLength;\n\n            dataView.setUint32(offset, cert.byteLength, true);\n            offset += 4;\n\n            var certArray = new Uint8Array(buffer, offset, cert.byteLength);\n            certArray.set(cert);\n\n            return new Uint8Array(buffer, 0, buffer.byteLength);\n        },\n\n        processLicenseMessage = function (session, type, message) {\n\n            if (type === 'text') {\n                message = String.fromCharCode.apply(null, message);\n                message = 'spc=' + BASE64.encodeASCII(message) + '&assetId=' + encodeURIComponent(session.contentId);\n            }\n\n            return message;\n        },\n\n        sendLicenseRequest = function (session, type, url, body) {\n            var self = this,\n                needFailureReport = true,\n\n            licenseRequest = new XMLHttpRequest();\n            licenseRequest.responseType = REQUEST_PARAMS[type].responseType;\n            licenseRequest.session = session;\n\n            licenseRequest.onload = function() {\n\n                if (this.status < 200 || this.status > 299) {\n                    return;\n                }\n\n                if (this.status === 200 && this.readyState === 4) {\n                    self.debug.log(\"[DRM] Received license response\");\n                    needFailureReport = false;\n                    processLicenseResponse(this, type);\n                    // this.session.update(new Uint8Array(licenseRequest.response));\n                }\n            };\n\n            licenseRequest.onerror = licenseRequest.onloadend = function() {\n                if (!needFailureReport) {\n                    licenseRequest = null;\n                    return;\n                }\n                needFailureReport = false;\n\n                // Raise error only if request has not been aborted by reset\n                if (!this.aborted) {\n                    self.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_LICENSER_ERROR,\"License request failed\", {url: url, status: this.status, error: this.response});\n                }\n                licenseRequest = null;\n            };\n\n            licenseRequest.open('POST', url, true);\n            licenseRequest.setRequestHeader('Content-Type', REQUEST_PARAMS[type].contentType);\n            licenseRequest.send(body);\n        },\n\n        processLicenseResponse = function (request, type) {\n            var key;\n\n            if (type === 'text') {\n                // Response can be of the form: '\\n<ckc>base64encoded</ckc>\\n', so trim the excess:\n                key = request.responseText.trim();\n                if (key.substr(0, 5) === '<ckc>' && key.substr(-6) === '</ckc>')\n                    key = key.slice(5,-6);\n                key = BASE64.decodeArray(key);\n            } else {\n                key = new Uint8Array(request.response);\n            }\n\n            request.session.update(key);\n        },\n\n        getKeyError = function(event) {\n            var code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR,\n                msg = \"MediakeyError\";\n\n            if (event.errorCode) {\n                switch (event.errorCode.code) {\n                    case 1:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_UNKNOWN;\n                        msg = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n                        break;\n                    case 2:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_CLIENT;\n                        msg = \"The Key System could not be installed or updated.\";\n                        break;\n                    case 3:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_SERVICE;\n                        msg = \"The message passed into update indicated an error from the license service.\";\n                        break;\n                    case 4:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_OUTPUT;\n                        msg = \"There is no available output device with the required characteristics for the content protection system.\";\n                        break;\n                    case 5:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_HARDWARECHANGE;\n                        msg += \"A hardware configuration change caused a content protection error.\";\n                        break;\n                    case 6:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_DOMAIN;\n                        msg = \"An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.\";\n                        break;\n                    default:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_UNKNOWN;\n                        msg = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n                        break;\n                }\n            } else {\n                code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_UNKNOWN;\n                msg = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n            }\n            if (event.systemCode) {\n                msg += \"  (System Code = \" + event.systemCode + \")\";\n            }\n            return new MediaPlayer.vo.protection.KeyError(code, msg);\n        },\n\n        onNeedKey = function(e) {\n            this.debug.info(\"[Stream] <video> needkey event\", e);\n\n            var video = this.videoModel.getElement(),\n                contentId = extractContentId(e.initData),\n                certificate = getCertificate();\n\n            var initData = concatInitDataIdAndCertificate(e.initData, contentId, certificate);\n\n            var mediaKeys = new WebKitMediaKeys('com.apple.fps.1_0');\n            video.webkitSetMediaKeys(mediaKeys);\n            var session = video.webkitKeys.createSession('video/mp4', initData);\n\n            if (!session)\n                throw \"Could not create key session\";\n\n            if (session.error) {\n                this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_NO_SESSION,\n                    \"Failed to create key session\", {code: session.error.code, systemCode: session.error.systemCode});\n            }\n\n            session.contentId = contentId;\n\n            session.addEventListener(\"webkitkeymessage\", keyMessageListener, false);\n            session.addEventListener(\"webkitkeyadded\", keyAddedListener, false);\n            session.addEventListener(\"webkitkeyerror\", keyErrorListener, false);\n        },\n\n        onKeyMessage = function(e) {\n\n            this.debug.info(\"[Stream] keymessage event\", e);\n\n            var session = e.target,\n                message = e.message,\n                type;\n\n            var protData = getKsProtectionData('com.apple.fps.1_0');\n            if (!protData || !protData.laURL) {\n                this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_URL_LICENSER_UNKNOWN, \"No license server URL specified\");\n                return;\n            }\n\n            type = (protData && protData.requestType && protData.requestType === 'text') ? 'text' : 'stream';\n\n            message = processLicenseMessage(session, type, message);\n            sendLicenseRequest.call(this, session, type, protData.laURL, message);\n        },\n\n        onKeyAdded = function(e) {\n            this.debug.info(\"[Stream] keyadded event\", e);\n        },\n\n        onKeyError = function(e) {\n            this.debug.info(\"[Stream] keyerror event\", e);\n            var error = getKeyError(e);\n            this.errHandler.sendError(error.code, error.msg);\n        };\n\n    return {\n        system: undefined,\n        videoModel: undefined,\n        capabilities: undefined,\n        debug: undefined,\n        metricsExt: undefined,\n        errHandler: undefined,\n        metricsModel: undefined,\n        eventBus: undefined,\n        notify: undefined,\n\n        setup: function() {\n\n            playListener = onPlay.bind(this);\n            pauseListener = onPause.bind(this);\n            errorListener = onError.bind(this);\n            seekingListener = onSeeking.bind(this);\n            seekedListener = onSeeked.bind(this);\n            progressListener = onProgress.bind(this);\n            ratechangeListener = onRatechange.bind(this);\n            timeupdateListener = onTimeupdate.bind(this);\n            waitingListener = onWaiting.bind(this);\n            durationchangeListener = onDurationchange.bind(this);\n            loadedmetadataListener = onLoadedMetadata.bind(this);\n            loadeddataListener = onLoadedData.bind(this);\n            canplayListener = onCanPlay.bind(this);\n            playingListener = onPlaying.bind(this);\n            loadstartListener = onLoadStart.bind(this);\n\n            needKeyListener = onNeedKey.bind(this);\n            keyMessageListener = onKeyMessage.bind(this);\n            keyAddedListener = onKeyAdded.bind(this);\n            keyErrorListener = onKeyError.bind(this);\n\n            endedListener = onEnded.bind(this);\n        },\n\n        load: function(url) {\n            this.videoModel.setSource(url);\n        },\n\n        setVideoModel: function(value) {\n            this.videoModel = value;\n            this.videoModel.listen(\"play\", playListener);\n            this.videoModel.listen(\"pause\", pauseListener);\n            this.videoModel.listen(\"error\", errorListener);\n            this.videoModel.listen(\"seeking\", seekingListener);\n            this.videoModel.listen(\"seeked\", seekedListener);\n            this.videoModel.listen(\"timeupdate\", timeupdateListener);\n            this.videoModel.listen(\"waiting\", waitingListener);\n            this.videoModel.listen(\"durationchange\", durationchangeListener);\n            this.videoModel.listen(\"progress\", progressListener);\n            this.videoModel.listen(\"ratechange\", ratechangeListener);\n            this.videoModel.listen(\"loadedmetadata\", loadedmetadataListener);\n            this.videoModel.listen(\"loadeddata\", loadeddataListener);\n            this.videoModel.listen(\"ended\", endedListener);\n            this.videoModel.listen(\"canplay\", canplayListener);\n            this.videoModel.listen(\"playing\", playingListener);\n            this.videoModel.listen(\"loadstart\", loadstartListener);\n\n            this.videoModel.listen(\"webkitneedkey\", needKeyListener);\n        },\n\n        reset: function() {\n            this.debug.info(\"[Stream] Reset\");\n\n            pause.call(this);\n\n            // Abort license request\n            if (licenseRequest) {\n                licenseRequest.aborted = true;\n                licenseRequest.abort();\n            }\n\n            this.videoModel.unlisten(\"play\", playListener);\n            this.videoModel.unlisten(\"pause\", pauseListener);\n            this.videoModel.unlisten(\"error\", errorListener);\n            this.videoModel.unlisten(\"seeking\", seekingListener);\n            this.videoModel.unlisten(\"seeked\", seekedListener);\n            this.videoModel.unlisten(\"timeupdate\", timeupdateListener);\n            this.videoModel.unlisten(\"waiting\", waitingListener);\n            this.videoModel.unlisten(\"durationchange\", durationchangeListener);\n            this.videoModel.unlisten(\"progress\", progressListener);\n            this.videoModel.unlisten(\"ratechange\", ratechangeListener);\n            this.videoModel.unlisten(\"loadedmetadata\", loadedmetadataListener);\n            this.videoModel.unlisten(\"loadeddata\", loadeddataListener);\n            this.videoModel.unlisten(\"ended\", endedListener);\n            this.videoModel.unlisten(\"canplay\", canplayListener);\n            this.videoModel.unlisten(\"playing\", playingListener);\n            this.videoModel.unlisten(\"loadstart\", loadstartListener);\n\n            this.videoModel.unlisten(\"webkitneedkey\", needKeyListener);\n\n            this.debug.info(\"[Stream] Reset source\");\n            this.videoModel.setSource(null);\n            this.videoModel = null;\n\n            return Q.when(true);\n        },\n\n\n        setProtectionData: function(protData) {\n            protectionData = protData;\n        },\n\n        setInitialStartTime: function(startTime) {\n            var time = parseFloat(startTime);\n            if (!isNaN(time)) {\n                initialStartTime = time;\n            }\n        },\n\n        getAudioTracks: function() {\n            var audioTracks = [],\n                tracks = this.getVideoModel().getElement().audioTracks;\n            if (tracks.length === 0) {\n                return [];\n            }\n\n            for (var i = 0; i < tracks.length; i++) {\n                audioTracks.push({\n                    type: 'audio',\n                    id: tracks[i].id,\n                    lang: tracks[i].language\n                });\n            }\n            // this.debug.log('[Stream] audio track: ' + JSON.stringify(audioTracks));\n            return audioTracks;\n        },\n\n        setAudioLang: function(lang) {\n            this.debug.log('[Stream] Set audio lang: ' + lang);\n            var tracks = this.getVideoModel().getElement().audioTracks;\n            if (tracks.length === 0) {\n                return;\n            }\n            for (var i = 0; i < tracks.length; i++) {\n                if (lang === tracks[i].language) {\n                    tracks[i].enabled = true;\n                }\n            }\n        },\n\n        setAudioTrack: function(audioTrack) {\n            this.debug.log('[Stream] Set audio track: ' + audioTrack.lang);\n            var tracks = this.getVideoModel().getElement().audioTracks;\n            if (tracks.length === 0) {\n                return;\n            }\n            for (var i = 0; i < tracks.length; i++) {\n                if (audioTrack.id === tracks[i].id &&\n                    audioTrack.lang === tracks[i].language) {\n                    tracks[i].enabled = true;\n                }\n            }\n        },\n\n        getSelectedAudioTrack: function() {\n            var tracks = this.getVideoModel().getElement().audioTracks;\n            for (var i = 0; i < tracks.length; i++) {\n                if (tracks[i].enabled) {\n                    return {\n                        type: 'audio',\n                        id: tracks[i].id,\n                        lang: tracks[i].language\n                    };\n                }\n            }\n            return null;\n        },\n\n        getSubtitleTracks: function() {\n            var textTracks = [],\n                tracks = this.getVideoModel().getElement().textTracks;\n            if (tracks.length === 0) {\n                return [];\n            }\n\n            for (var i = 0; i < tracks.length; i++) {\n                textTracks.push({\n                    type: 'text',\n                    id: tracks[i].label,\n                    lang: tracks[i].language\n                });\n            }\n            // this.debug.log('[Stream] text track: ' + JSON.stringify(textTracks));\n            return textTracks;\n        },\n\n        enableSubtitles: function(enabled) {\n            subtitlesEnabled = enabled;\n            var tracks = this.getVideoModel().getElement().textTracks;\n            if (tracks.length === 0) {\n                return;\n            }\n\n            if (enabled) {\n                this.debug.log('[Stream] Set subtitle lang: ' + defaultSubtitleLang);\n            }\n\n            var found = false;\n            for (var i = 0; i < tracks.length; i++) {\n                if (enabled && defaultSubtitleLang === tracks[i].language) {\n                    tracks[i].mode = 'showing';\n                    found = true;\n                } else {\n                    tracks[i].mode = 'hidden';\n                }\n            }\n\n            if (enabled && !found) {\n                tracks[0].mode = \"showing\";\n            }\n        },\n\n        setSubtitleTrack: function(subtitleTrack) {\n            this.debug.log('[Stream] Set subtitle track: ' + subtitleTrack.lang);\n            var tracks = this.getVideoModel().getElement().textTracks;\n            if (tracks.length === 0) {\n                return;\n            }\n            for (var i = 0; i < tracks.length; i++) {\n                if (subtitleTrack.id === tracks[i].label &&\n                    subtitleTrack.lang === tracks[i].language) {\n                    tracks[i].mode = 'showing';\n                }\n            }\n        },\n\n        getSelectedSubtitleTrack: function() {\n            var tracks = this.getVideoModel().getElement().textTracks;\n            for (var i = 0; i < tracks.length; i++) {\n                if (tracks[i].mode === 'showing') {\n                    return {\n                        type: 'text',\n                        id: tracks[i].label,\n                        lang: tracks[i].language\n                    };\n                }\n            }\n            return null;\n        },\n\n        initProtection: function(/*protectionCtrl*/) {},\n\n        getVideoModel: function() {\n            return this.videoModel;\n        },\n\n        setAutoPlay: function(value) {\n            autoPlay = value;\n        },\n\n        setDefaultAudioLang: function(language) {\n            defaultAudioLang = language;\n        },\n\n        setDefaultSubtitleLang: function(language) {\n            defaultSubtitleLang = language;\n        },\n\n        getAutoPlay: function() {\n            return autoPlay;\n        },\n\n        getDuration: function() {\n            return this.videoModel.getDuration();\n        },\n\n        // Used by StreamController for periods transitions => NA\n        getStartTime: function() {return 0;},\n\n        getPeriodIndex: function() {return 0;},\n\n        getId: function() {return '';},\n\n        // Used by StreamController to compose streams => NA\n        getPeriodInfo: function() {return null;},\n\n        // Not used/called\n        getMinbufferTime: function() {return 0;},\n\n        // Not called since no DVR window range (see MediaPlayer::seek)\n        getLiveDelay: function() {return -1;},\n\n        // Not supported\n        startEventController: function() {},\n        resetEventController: function() {},\n\n        // Not supported\n        setTrickModeSpeed: function(/*speed*/) {},\n        getTrickModeSpeed: function() {return -1;},\n\n        // Used by StreamController to compose streams => NA\n        updateData: function() {},\n\n        play: play,\n        seek: seek,\n        pause: pause\n    };\n};\n\nHls.dependencies.HlsStream.prototype = {\n    constructor: Hls.dependencies.HlsStream\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n * \n * Copyright (c) 2014, Orange\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n * \n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n /*jshint -W020 */\nMss = (function () {\n    \"use strict\";\n\n    return {\n        dependencies: {}\n    };\n}());","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.copyMethods = function(clazz) {\n    var rslt = new clazz();\n    rslt.parent = {};\n    for (var key in rslt) {\n        rslt.parent[key] = rslt[key];\n    }\n\n    rslt.setup = function() {\n        for (var att in this.parent) {\n            if (this.parent[att] === undefined) {\n                this.parent[att] = this[att];\n            }\n        }\n    };\n\n    return rslt;\n};\n"," /*\n  * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n  * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n  *\n  * Copyright (c) 2014, Orange\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n  * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n  * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n  * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n  *\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n MediaPlayer.utils.DOMParser = function() {\n     \"use strict\";\n\n     var _parser = null,\n         _xmlDoc = null;\n\n     return {\n         getAllSpecificNodes: function(mainNode, nodeName) {\n             var i = 0,\n                 id,\n                 querySelectorResult,\n                 returnTab = [];\n\n             if (mainNode) {\n                 querySelectorResult = mainNode.querySelectorAll(nodeName);\n                 if (querySelectorResult) {\n                     for (i = 0; i < querySelectorResult.length; i++) {\n                         id = this.getAttributeValue(querySelectorResult[i], 'xml:id');\n                         if (id) {\n                             returnTab[id] = querySelectorResult[i].attributes;\n                             if (querySelectorResult[i].childNodes.length > 0) {\n                                 returnTab[id].childNodes = querySelectorResult[i].childNodes;\n                             }\n                         }\n                     }\n                 }\n             }\n\n             return returnTab;\n         },\n\n         getAttributeName: function(node, attrValue) {\n             var returnValue = [],\n                 domAttribute = null,\n                 i = 0,\n                 attribList = null;\n\n             if (node && node.attributes) {\n                 attribList = node.attributes;\n                 if (attribList) {\n                     for (i = 0; i < attribList.length; i++) {\n                         domAttribute = attribList[i];\n                         if (domAttribute.value === attrValue) {\n                             returnValue.push(domAttribute.name);\n                         }\n                     }\n                 }\n             }\n\n             return returnValue;\n         },\n\n         getTextNodesIn: function(nodeParent) {\n             var textNodes = [],\n                 i = 0,\n                 nodes = null,\n                 node = null,\n                 nodeType = null;\n\n             if (nodeParent) {\n                 nodes = nodeParent.childNodes;\n                 for (i = 0; i < nodes.length; i++) {\n                     node = nodes[i];\n                     nodeType = node.nodeType;\n                     /*ELEMENT_NODE == 1 ( element node )\n                     ATTRIBUTE_NODE == 2 ( node attribute )\n                     TEXT_NODE == 3 ( text node )\n                     CDATA_SECTION_NODE == 4 ( CDATA section node )\n                     ENTITY_REFERENCE_NODE == 5 ( node reference to an entity )\n                     ENTITY_NODE == 6 ( Feature node )\n                     PROCESSING_INSTRUCTION_NODE == 7 ( processing instruction node )\n                     COMMENT_NODE == 8 ( comment node )\n                     DOCUMENT_NODE == 9 ( document node )\n                     DOCUMENT_TYPE_NODE == 10 ( Document Type node )\n                     DOCUMENT_FRAGMENT_NODE == 11 ( node document fragment )\n                     NOTATION_NODE == 12 ( node notation )*/\n                     if (nodeType == 3) {\n                         textNodes.push(node);\n                     } else if (nodeType == 1 || nodeType == 9 || nodeType == 11) {\n                         textNodes = textNodes.concat(this.getTextNodesIn(node));\n                     }\n                 }\n             }\n             return textNodes;\n         },\n\n         getAttributeValue: function(node, attrName, namespace) {\n             var returnValue = null;\n\n             if (node && typeof node.getAttribute == 'function') {\n                 returnValue = node.getAttribute(attrName);\n                 if (returnValue === null && namespace) {\n                     returnValue = node.getAttributeNS(namespace, attrName);\n                 }\n             }\n\n             return returnValue;\n         },\n\n         getChildNode: function(nodeParent, childName) {\n             var i = 0,\n                 element;\n\n             if (nodeParent && nodeParent.childNodes) {\n                 for (i = 0; i < nodeParent.childNodes.length; i++) {\n                     element = nodeParent.childNodes[i];\n                     if (element.nodeName === childName) {\n                         return element;\n                     }\n                     element = undefined;\n                 }\n             }\n\n             return element;\n         },\n\n         getChildNodes: function(nodeParent, childName) {\n             var i = 0,\n                 element = [];\n\n             if (nodeParent && nodeParent.childNodes) {\n                 for (i = 0; i < nodeParent.childNodes.length; i++) {\n                     if (nodeParent.childNodes[i].nodeName === childName) {\n                         element.push(nodeParent.childNodes[i]);\n                     }\n                 }\n             }\n\n             return element;\n         },\n\n         createXmlTree: function(xmlDocStr) {\n             if (window.DOMParser) {\n                 try {\n                     if (!_parser) {\n                         _parser = new window.DOMParser();\n                     }\n\n                     _xmlDoc = _parser.parseFromString(xmlDocStr, \"text/xml\");\n                     if (_xmlDoc.getElementsByTagName('parsererror').length > 0) {\n                         throw new Error('Error parsing XML');\n                     }\n                 } catch (e) {\n                     _xmlDoc = null;\n                 }\n             }\n             return _xmlDoc;\n         }\n     };\n };","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n* UTF-16 (LE or BE)\n*\n* RFC2781: UTF-16, an encoding of ISO 10646\n*\n* @link http://www.ietf.org/rfc/rfc2781.txt\n* @private\n* @ignore\n*/\nMediaPlayer.utils.isUTF16 = function (data) {\n   var i = 0;\n   var len = data && data.length;\n   var pos = null;\n   var b1, b2, next, prev;\n\n   if (len < 2) {\n       if (data[0] > 0xFF) {\n           return false;\n       }\n   } else {\n       b1 = data[0];\n       b2 = data[1];\n       if (b1 === 0xFF && // BOM (little-endian)\n           b2 === 0xFE) {\n           return true;\n       }\n       if (b1 === 0xFE && // BOM (big-endian)\n           b2 === 0xFF) {\n           return true;\n       }\n\n       for (; i < len; i++) {\n           if (data[i] === 0x00) {\n               pos = i;\n               break;\n           } else if (data[i] > 0xFF) {\n               return false;\n           }\n       }\n\n       if (pos === null) {\n           return false; // Non ASCII\n       }\n\n       next = data[pos + 1]; // BE\n       if (next !== void 0 && next > 0x00 && next < 0x80) {\n           return true;\n       }\n\n       prev = data[pos - 1]; // LE\n       if (prev !== void 0 && prev > 0x00 && prev < 0x80) {\n           return true;\n       }\n   }\n\n   return false;\n};\n","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMediaPlayer.utils.ObjectIron = function (map) {\n\n    var lookup;\n\n    // create a list of top level items to search for\n    lookup = [];\n    for (var i = 0, len = map.length; i < len; i += 1) {\n        if (map[i].isRoot) {\n            lookup.push(\"root\");\n        } else {\n            lookup.push(map[i].name);\n        }\n    }\n\n    var mergeValues = function (parentItem, childItem) {\n            var name;\n            if (parentItem === null || childItem === null) {\n                return;\n            }\n\n            for (name in parentItem) {\n                if (parentItem.hasOwnProperty(name)) {\n                    if (!childItem.hasOwnProperty(name)) {\n                        childItem[name] = parentItem[name];\n                    }\n                }\n            }\n        },\n\n        mapProperties = function (properties, parent, child) {\n            var i,\n                len,\n                property,\n                parentValue,\n                childValue;\n\n            if (properties === null || properties.length === 0) {\n                return;\n            }\n\n            for (i = 0, len = properties.length; i < len; i += 1) {\n                property = properties[i];\n\n                if (parent.hasOwnProperty(property.name)) {\n                    if (child.hasOwnProperty(property.name)) {\n                        // check to see if we should merge\n                        if (property.merge) {\n                           parentValue = parent[property.name];\n                           childValue = child[property.name];\n\n                            // complex objects; merge properties\n                            if (typeof parentValue === 'object' && typeof childValue === 'object') {\n                                mergeValues(parentValue, childValue);\n                            }\n                            // simple objects; merge them together\n                            else {\n                                if (property.mergeFunction !== null) {\n                                    child[property.name] = property.mergeFunction(parentValue, childValue);\n                                } else {\n                                    child[property.name] = parentValue + childValue;\n                                }\n                            }\n                        }\n                    } else {\n                        // just add the property\n                        child[property.name] = parent[property.name];\n                    }\n                }\n            }\n        },\n\n        mapItem = function (obj, node) {\n            var item = obj,\n                i,\n                len,\n                v,\n                len2,\n                array,\n                childItem,\n                childNode;\n\n            if (obj.transformFunc) {\n                node = obj.transformFunc(node);\n            }\n\n            if (item.children === null || item.children.length === 0) {\n                return node;\n            }\n\n            for (i = 0, len = item.children.length; i < len; i += 1) {\n                childItem = item.children[i];\n                var itemMapped = null;\n                if (node.hasOwnProperty(childItem.name)) {\n                    if (childItem.isArray) {\n                        array = node[childItem.name + \"_asArray\"];\n                        for (v = 0, len2 = array.length; v < len2; v += 1) {\n                            childNode = array[v];\n                            mapProperties(item.properties, node, childNode);\n                            //copy result in source object\n                            itemMapped = mapItem(childItem, childNode);\n                            node[childItem.name + \"_asArray\"][v] = itemMapped;\n                            node[childItem.name][v] =  itemMapped;\n                        }\n                    } else {\n                        childNode = node[childItem.name];\n                        mapProperties(item.properties, node, childNode);\n                        //copy result in source object\n                        itemMapped = mapItem(childItem, childNode);\n                        node[childItem.name] = itemMapped;\n                        node[childItem.name + \"_asArray\"] =  [itemMapped];\n                    }\n                }\n            }\n            return node;\n        },\n\n        performMapping = function (source) {\n            var i,\n                len,\n                pi,\n                pp,\n                item,\n                node,\n                array;\n\n            if (source === null) {\n                return source;\n            }\n\n            if (typeof source !== 'object') {\n                return source;\n            }\n\n            // first look to see if anything cares about the root node\n            for (i = 0, len = lookup.length; i < len; i += 1) {\n                if (lookup[i] === \"root\") {\n                    item = map[i];\n                    node = source;\n                    source = mapItem(item, node);\n                    // node == source;\n                }\n            }\n\n            // iterate over the objects and look for any of the items we care about\n            for (pp in source) {\n                if (source.hasOwnProperty(pp)) {\n                    pi = lookup.indexOf(pp);\n                    if (pi !== -1) {\n                        item = map[pi];\n\n                        if (item.isArray) {\n                            array = source[pp + \"_asArray\"];\n                            for (i = 0, len = array.length; i < len; i += 1) {\n                                node = array[i];\n                                source[pp][i] = mapItem(item, node);\n                                source[pp + \"_asArray\"][i] = mapItem(item, node);\n                            }\n                        } else {\n                            node = source[pp];\n                            source[pp] = mapItem(item, node);\n                            source[pp + \"_asArray\"] = [mapItem(item, node)];\n                        }\n                    }\n                    // now check this to see if he has any of the properties we care about\n                    source[pp] = performMapping(source[pp]);\n                }\n            }\n\n            return source;\n        };\n\n    return {\n        run: performMapping\n    };\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nMediaPlayer.dependencies.protection.CommonEncryption = {\n\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param cpArray array of content protection elements\n     * @returns the Common Encryption content protection element or\n     * null if one was not found\n     */\n    findCencContentProtection: function(cpArray) {\n        var retVal = null,\n            i = 0,\n            cp;\n        for (i = 0; i < cpArray.length; ++i) {\n            cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === \"urn:mpeg:dash:mp4protection:2011\" &&\n                cp.value.toLowerCase() === \"cenc\")\n                retVal = cp;\n        }\n        return retVal;\n    },\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param pssh {ArrayBuffer} the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    getPSSHData: function(pssh) {\n        var offset = 8, // Box size and type fields\n            view = new DataView(pssh),\n            // Read version\n            version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    },\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer} The PSSH box data corresponding to the given key system\n     * or null if a valid association could not be found.\n     */\n    getPSSHForKeySystem: function(keySystem, initData) {\n        var psshList = MediaPlayer.dependencies.protection.CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    },\n\n    /**\n     * Parse a standard common encryption PSSH which contains a sinmple\n     * base64-encoding of the init data\n     *\n     * @param cpData the ContentProtection element\n     * @returns {ArrayBuffer} the init data or null if not found\n     */\n    parseInitDataFromContentProtection: function(cpData) {\n        if (cpData && (\"pssh\" in cpData)) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    },\n\n    readBytes: function(buf, pos, nbBytes) {\n        var value = 0,\n            i = 0;\n\n        for (i = 0; i < nbBytes; i++) {\n            value = value << 8;\n            value = value + buf[pos];\n            pos++;\n        }\n        return value;\n    },\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param data {ArrayBuffer} the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {object} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    parsePSSHList: function(data) {\n\n        if (data === null)\n            return [];\n\n        var dv = new DataView(data);\n        var done = false;\n        var pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        var byteCursor = 0;\n        while (!done) {\n\n            var size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            var boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            var i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    },\n\n\n    /**\n     * Returns list of {MediaPlayer.vo.protection.KeySystemConfiguration}\n     * (see: https://w3c.github.io/encrypted-media/#idl-def-MediaKeySystemConfiguration)\n     *\n     * @param {object} videoCodec contains relevant info about video codec\n     * @param {object} audioCodec contains relevant info about audio codec\n     * @param {String} sessionType the session type like \"temporary\" or \"persistent-license\"\n     * @returns {Array} list of {MediaPlayer.vo.protection.KeySystemConfiguration}\n     */\n    getKeySystemConfigurations: function(videoCodec, audioCodec, sessionType) {\n        var audioCapabilities = [],\n            videoCapabilities = [];\n        if (videoCodec) {\n            videoCapabilities.push(new MediaPlayer.vo.protection.MediaCapability(videoCodec));\n        }\n        if (audioCodec) {\n            audioCapabilities.push(new MediaPlayer.vo.protection.MediaCapability(audioCodec));\n        }\n        return [new MediaPlayer.vo.protection.KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, \"optional\", (sessionType === \"temporary\") ? \"optional\" : \"required\", [sessionType])];\n    }\n};","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link MediaPlayer.dependencies.ProtectionExtensions}.\n *\n * @class MediaPlayer.dependencies.ProtectionController\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n */\n\n// Define ArrayBuffer.isView method in case it is not defined\nif (!ArrayBuffer.isView) {\n    ArrayBuffer.isView = function(data) {\n        return data && data.buffer instanceof ArrayBuffer;\n    };\n}\n\nif (!ArrayBuffer.prototype.slice) {\n    ArrayBuffer.prototype.slice = function(begin, end) {\n        var len = this.byteLength,\n            length,\n            target,\n            targetArray;\n        begin = (begin | 0) || 0;\n        end = end === (void 0) ? len : (end | 0);\n\n        // Handle negative values.\n        if (begin < 0) {\n            begin = Math.max(begin + len, 0);\n        }\n        if (end < 0) {\n            end = Math.max(end + len, 0);\n        }\n\n        if (len === 0 || begin >= len || begin >= end) {\n            return new ArrayBuffer(0);\n        }\n\n        length = Math.min(len - begin, end - begin);\n        target = new ArrayBuffer(length);\n        targetArray = new Uint8Array(target);\n        targetArray.set(new Uint8Array(this, begin, length));\n        return target;\n    };\n}\n\nMediaPlayer.dependencies.ProtectionController = function() {\n    \"use strict\";\n\n    var keySystems = null,\n        pendingNeedKeyData = [],\n        //audioInfo,\n        //videoInfo,\n        audioCodec,\n        videoCodec,\n        protDataSet,\n        xhrLicense = null,\n        initialized = false,\n\n        getProtData = function(keySystem) {\n            var protData = null,\n                keySystemString = keySystem.systemString;\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n            return protData;\n        },\n\n        selectKeySystem = function(supportedKS, fromManifest) {\n\n            var self = this,\n                sessionType,\n                // Build our request object for requestKeySystemAccess\n                requestedKeySystems = [],\n                keySystemsInfo = [],\n                ksIdx,\n                ksAccess,\n                i = 0,\n                ksSelected,\n                keySystemAccess;\n\n            if (this.keySystem) {\n                // We have a key system\n                for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                    if (this.keySystem === supportedKS[ksIdx].ks) {\n                        sessionType = supportedKS[ksIdx].ks.sessionType;\n                        requestedKeySystems.push({\n                            ks: supportedKS[ksIdx].ks,\n                            configs: supportedKS[ksIdx].ks.getKeySystemConfigurations(videoCodec, audioCodec, sessionType)\n                        });\n                        // Key system info in case of error\n                        keySystemsInfo.push({\n                            schemeIdURI: supportedKS[ksIdx].ks.schemeIdURI,\n                            systemString: supportedKS[ksIdx].ks.systemString\n                        });\n\n                        // Ensure that we would be granted key system access using the key\n                        // system and codec information\n                        ksAccess = {};\n                        ksAccess[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE] = function(event) {\n                            self.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, ksAccess);\n                            if (event.error) {\n                                //if (!fromManifest) {\n                                self.debug.log(\"[DRM] KeySystem Access Denied! -- \" + event.error);\n                                self.eventBus.dispatchEvent({\n                                    type: MediaPlayer.dependencies.ProtectionController.events.KEY_SYSTEM_SELECTED,\n                                    error: \"[DRM] KeySystem Access Denied! -- \" + event.error\n                                });\n                                //}\n                            } else {\n                                self.debug.log(\"[DRM] KeySystem Access Granted\");\n                                self.eventBus.dispatchEvent({\n                                    type: MediaPlayer.dependencies.ProtectionController.events.KEY_SYSTEM_SELECTED,\n                                    data: event.data\n                                });\n                                self.createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                            }\n                        };\n                        this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, ksAccess, undefined, true);\n                        this.protectionModel.requestKeySystemAccess(requestedKeySystems);\n                        break;\n                    }\n                }\n            } else if (this.keySystem === undefined) {\n                // First time through, so we need to select a key system\n                this.keySystem = null;\n                pendingNeedKeyData.push(supportedKS);\n\n                // Add all key systems to our request list since we have yet to select a key system\n                for (i = 0; i < supportedKS.length; i++) {\n                    sessionType = supportedKS[i].ks.sessionType;\n                    requestedKeySystems.push({\n                        ks: supportedKS[i].ks,\n                        configs: supportedKS[i].ks.getKeySystemConfigurations(videoCodec, audioCodec, sessionType)\n                    });\n                    // Key system info in case of error\n                    keySystemsInfo.push({\n                        schemeIdURI: supportedKS[i].ks.schemeIdURI,\n                        systemString: supportedKS[i].ks.systemString\n                    });\n                }\n\n                ksSelected = {};\n\n                ksSelected[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE] = function(event) {\n                    if (!self.protectionModel) {\n                        return;\n                    }\n                    self.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, ksSelected);\n                    if (event.error) {\n                        self.debug.log(\"[DRM] KeySystem Access Denied! -- \" + event.error);\n                        self.keySystem = undefined;\n                        self.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED, ksSelected);\n                        if (!fromManifest) {\n                            self.eventBus.dispatchEvent({\n                                type: MediaPlayer.dependencies.ProtectionController.events.KEY_SYSTEM_SELECTED,\n                                error: \"[DRM] KeySystem Access Denied! -- \" + event.error\n                            });\n                        }\n                        self.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                            new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYSYSERR_ACCESS_DENIED, \"No KeySystem/CDM available\", {keySystems: keySystemsInfo}));\n                    } else {\n                        keySystemAccess = event.data;\n                        self.debug.log(\"[DRM] KeySystem Access (\" + keySystemAccess.keySystem.systemString + \") Granted!  Selecting key system...\");\n                        self.protectionModel.selectKeySystem(keySystemAccess);\n                    }\n                };\n                ksSelected[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED] = function(event) {\n                    if (!self.protectionModel) {\n                        return;\n                    }\n                    self.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED, ksSelected);\n                    if (!event.error) {\n                        self.debug.log(\"[DRM] KeySystem selected => create key session\");\n                        self.keySystem = self.protectionModel.keySystem;\n                        self.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_KEY_SYSTEM_SELECTED, keySystemAccess);\n                        self.eventBus.dispatchEvent({\n                            type: MediaPlayer.dependencies.ProtectionController.events.KEY_SYSTEM_SELECTED,\n                            data: keySystemAccess\n                        });\n                        for (i = 0; i < pendingNeedKeyData.length; i++) {\n                            for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                                if (self.keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                    self.createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        self.keySystem = undefined;\n                        if (!fromManifest) {\n                            self.eventBus.dispatchEvent({\n                                type: MediaPlayer.dependencies.ProtectionController.events.KEY_SYSTEM_SELECTED,\n                                error: \"[DRM] Error selecting key system! -- \" + event.error\n                            });\n                        }\n                        self.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                            new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYSYSERR_ACCESS_DENIED, \"No KeySystem/CDM available\", {keySystems: keySystemsInfo}));\n\n                    }\n                };\n                this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED, ksSelected, undefined, true);\n                this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, ksSelected, undefined, true);\n\n                this.protectionModel.requestKeySystemAccess(requestedKeySystems);\n            } else {\n                // We are in the process of selecting a key system, so just save the data\n                pendingNeedKeyData.push(supportedKS);\n            }\n        },\n\n        /*sendLicenseRequestCompleteEvent = function(data) {\n            this.eventBus.dispatchEvent({\n                type: MediaPlayer.dependencies.ProtectionController.events.LICENSE_REQUEST_COMPLETE,\n                data: data\n            });\n        },*/\n\n        onKeyMessage = function(e) {\n            var self = this,\n                licenseMessage = null,\n                keyMessage,\n                messageType;\n\n            keyMessage = e.data;\n            messageType = (keyMessage.messageType) ? keyMessage.messageType : \"license-request\";\n            this.debug.log(\"[DRM] Key message: type = \" + messageType);\n\n            // Dispatch event to applications indicating we received a key message\n            this.eventBus.dispatchEvent({\n                type: MediaPlayer.dependencies.ProtectionController.events.KEY_MESSAGE,\n                data: keyMessage\n            });\n\n            var message = keyMessage.message,\n                sessionToken = keyMessage.sessionToken,\n                protData = getProtData(this.keySystem),\n                keySystemString = this.keySystem.systemString,\n                licenseServerData = this.protectionExt.getLicenseServer(this.keySystem, protData, messageType),\n                needFailureReport = true/*,\n                eventData = {\n                    sessionToken: sessionToken,\n                    messageType: messageType\n                }*/;\n\n            // Ensure message from CDM is not empty\n            if (!message || message.byteLength === 0) {\n                this.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                    new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_NO_CHALLENGE, \"Empty key message from CDM\"));\n                return;\n            }\n\n            // Message not destined for license server\n            if (!licenseServerData) {\n                this.debug.log(\"[DRM] License server request not required for this message (type = \" + e.data.messageType + \").  Session ID = \" + sessionToken.getSessionID());\n                return;\n            }\n\n            // Perform any special handling for ClearKey\n            if (this.protectionExt.isClearKey(this.keySystem)) {\n                var clearkeys = this.protectionExt.processClearKeyLicenseRequest(protData, message);\n                if (clearkeys) {\n                    this.debug.log(\"[DRM] ClearKey license request handled by application!\");\n                    this.protectionModel.updateKeySession(sessionToken, clearkeys);\n                    return;\n                }\n            }\n\n            // All remaining key system scenarios require a request to a remote license server\n            xhrLicense = new XMLHttpRequest();\n\n            // Determine license server URL\n            var url = null;\n            if (protData) {\n                if (protData.serverURL) {\n                    var serverURL = protData.serverURL;\n                    if (typeof serverURL === \"string\" && serverURL !== \"\") {\n                        url = serverURL;\n                    } else if (typeof serverURL === \"object\" && serverURL.hasOwnProperty(messageType)) {\n                        url = serverURL[messageType];\n                    }\n                } else if (protData.laURL && protData.laURL !== \"\") { // TODO: Deprecated!\n                    url = protData.laURL;\n                }\n            }\n\n            if (url === null) {\n                url = this.keySystem.getLicenseServerURLFromInitData(MediaPlayer.dependencies.protection.CommonEncryption.getPSSHData(sessionToken.initData));\n                if (!url) {\n                    url = e.data.defaultURL;\n                }\n            }\n            // Possibly update or override the URL based on the message\n            url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n            this.debug.log(\"[DRM] Licenser server url: \" + url);\n\n            // Ensure valid license server URL\n            if (!url) {\n                this.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                    new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_URL_LICENSER_UNKNOWN, \"No license server URL specified\"));\n                return;\n            }\n\n            xhrLicense.open(licenseServerData.getHTTPMethod(messageType), url, true);\n            xhrLicense.responseType = licenseServerData.getResponseType(keySystemString, messageType);\n            xhrLicense.onload = function() {\n\n                if (this.status < 200 || this.status > 299) {\n                    return;\n                }\n\n                if (this.status === 200 && this.readyState === 4) {\n                    self.debug.log(\"[DRM] Received license response\");\n                    needFailureReport = false;\n                    licenseMessage = licenseServerData.getLicenseMessage(this.response, keySystemString, messageType);\n                    if (licenseMessage !== null) {\n                        needFailureReport = false;\n                        self.protectionModel.updateKeySession(sessionToken, licenseMessage);\n                    } else {\n                        needFailureReport = true;\n                    }\n                }\n            };\n\n            xhrLicense.onerror = xhrLicense.onloadend = function() {\n                if (!needFailureReport) {\n                    xhrLicense = null;\n                    return;\n                }\n                needFailureReport = false;\n\n                // send error only if request has  not been aborted by reset\n                if (!this.aborted) {\n                    self.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                        new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_LICENSER_ERROR, \"License request failed\", {\n                            url: url,\n                            status: this.status,\n                            error: (this.response && this.response !== null) ? licenseServerData.getErrorResponse(this.response) : \"\"\n                        }));\n                }\n                xhrLicense = null;\n            };\n\n            // Set optional XMLHttpRequest headers from protection data and message\n            var updateHeaders = function(headers) {\n                var key;\n                if (headers) {\n                    for (key in headers) {\n                        if ('authorization' === key.toLowerCase()) {\n                            xhrLicense.withCredentials = true;\n                        }\n                        xhrLicense.setRequestHeader(key, headers[key]);\n                    }\n                }\n            };\n            if (protData) {\n                updateHeaders(protData.httpRequestHeaders);\n            }\n            updateHeaders(this.keySystem.getRequestHeadersFromMessage(message));\n\n            // Set withCredentials property from protData\n            if (protData && protData.withCredentials) {\n                xhrLicense.withCredentials = true;\n            }\n\n            this.debug.log(\"[DRM] Send license request\");\n            var licenseRequest = this.keySystem.getLicenseRequestFromMessage(message);\n            if (licenseRequest === null) {\n                this.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                    new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_NO_CHALLENGE, \"No license challenge from CDM key message\"));\n            }\n            xhrLicense.send(licenseRequest);\n        },\n\n        onNeedKey = function(event) {\n\n            var self = this,\n                abInitData,\n                supportedKS;\n\n            self.debug.log(\"[DRM] onNeedKey, initDataType = \" + event.data.initDataType);\n\n            // Ignore non-cenc initData\n            if (event.data.initDataType !== \"cenc\") {\n                self.debug.log(\"[DRM] Only 'cenc' initData is supported!  Ignoring initData of type: \" + event.data.initDataType);\n                return;\n            }\n\n            // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n            // Convert to ArrayBuffer\n            abInitData = event.data.initData;\n            if (ArrayBuffer.isView(abInitData)) {\n                abInitData = abInitData.buffer;\n            }\n\n            // If key system has already been selected and initData already seen, then do nothing\n            if (this.keySystem) {\n                var initDataForKS = MediaPlayer.dependencies.protection.CommonEncryption.getPSSHForKeySystem(this.keySystem, abInitData);\n                var currentInitData = this.protectionModel.getAllInitData();\n                for (var i = 0; i < currentInitData.length; i++) {\n                    if (this.protectionExt.initDataEquals(initDataForKS, currentInitData[i])) {\n                        this.debug.log(\"[DRM] Ignoring initData because we have already seen it!\");\n                        return;\n                    }\n                }\n            }\n\n            supportedKS = this.protectionExt.getSupportedKeySystems(abInitData);\n            if (supportedKS.length === 0) {\n                self.debug.log(\"[DRM] Received needkey event with initData, but we don't support any of the key systems!\");\n                return;\n            }\n\n            selectKeySystem.call(this, supportedKS, false);\n        },\n\n        onServerCertificateUpdated = function(event) {\n            if (!event.error) {\n                this.debug.log(\"[DRM] License server certificate successfully updated\");\n            } else {\n                this.debug.error(\"[DRM] Failed to set license server certificate\");\n                this.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                    new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_SERVER_CERTIFICATE, \"Failed to set server certificate\", event.error));\n            }\n        },\n\n        onKeySessionCreated = function(event) {\n            if (!event.error) {\n                this.debug.log(\"[DRM] Session created.  SessionID = \" + event.data.getSessionID());\n            } else {\n                this.debug.error(\"[DRM] Failed to create key session\");\n                this.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                    new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYMESSERR_NO_SESSION, \"Failed to create key session\", event.error));\n            }\n        },\n\n        onKeyAdded = function( /*event*/ ) {\n            this.debug.log(\"[DRM] Key added\");\n        },\n\n        onKeyError = function(event) {\n            this.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                new MediaPlayer.vo.Error(event.data.code, event.data.message, event.data.data));\n        },\n\n        onKeySessionClosed = function(event) {\n            if (!event.error) {\n                this.debug.log(\"[DRM] Session closed. SessionID = \" + event.data);\n            } else {\n                this.debug.warn(\"[DRM] Failed to close session\");\n            }\n        },\n\n        onKeySessionRemoved = function(event) {\n            if (!event.error) {\n                this.debug.log(\"[DRM] Session removed. SessionID = \" + event.data);\n            } else {\n                this.debug.warn(\"[DRM] Failed to remove session\");\n            }\n        },\n\n        onKeyStatusesChanged = function(event) {\n            if (!event.error) {\n                this.debug.log(\"[DRM] Key statuses changed. statuses = \" + event.data);\n            } else {\n                this.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                    new MediaPlayer.vo.Error(event.error.code, event.error.message, event.error.data));\n            }\n        };\n\n    return {\n        system: undefined,\n        debug: undefined,\n        notify: undefined,\n        subscribe: undefined,\n        unsubscribe: undefined,\n        protectionExt: undefined,\n        keySystem: undefined,\n\n        setup: function() {\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_MESSAGE] = onKeyMessage.bind(this);\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_NEED_KEY] = onNeedKey.bind(this);\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_SERVER_CERTIFICATE_UPDATED] = onServerCertificateUpdated.bind(this);\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ADDED] = onKeyAdded.bind(this);\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ERROR] = onKeyError.bind(this);\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED] = onKeySessionCreated.bind(this);\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CLOSED] = onKeySessionClosed.bind(this);\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_REMOVED] = onKeySessionRemoved.bind(this);\n            this[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_STATUSES_CHANGED] = onKeyStatusesChanged.bind(this);\n\n            keySystems = this.protectionExt.getKeySystems();\n            this.protectionModel = this.system.getObject(\"protectionModel\");\n            this.protectionModel.init();\n\n            this.eventBus = this.system.getObject(\"eventBus\");\n\n            // Subscribe to events\n            this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_SERVER_CERTIFICATE_UPDATED, this);\n            this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ADDED, this);\n            this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ERROR, this);\n            this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, this);\n            this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CLOSED, this);\n            this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_REMOVED, this);\n            this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_MESSAGE, this);\n            this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_STATUSES_CHANGED, this);\n        },\n\n        /**\n         * Initialize this protection system with a given manifest and optional audio\n         * and video stream information.\n         *\n         * @param {Object} manifest the json version of the manifest XML document for the\n         * desired content.  Applications can download their manifest using\n         * {@link MediaPlayer#retrieveManifest}\n         * @param {MediaPlayer.vo.StreamInfo} [aInfo] audio stream information\n         * @param {MediaPlayer.vo.StreamInfo} [vInfo] video stream information\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         * @todo This API will change when we have better support for allowing applications\n         * to select different adaptation sets for playback.  Right now it is clunky for\n         * applications to create {@link MediaPlayer.vo.StreamInfo} with the right information,\n         */\n        init: function(contentProtection, aCodec, vCodec) {\n            var supportedKS;\n            // TODO: We really need to do much more here... We need to be smarter about knowing\n            // which adaptation sets for which we have initialized, including the default key ID\n            // value from the ContentProtection elements so we know whether or not we still need to\n            // select key systems and acquire keys.\n            if (!initialized) {\n\n                this.debug.log(\"[DRM] Initialize ProtectionController (\" + vCodec + \", \" + aCodec + \")\");\n\n                audioCodec = aCodec;\n                videoCodec = vCodec;\n\n                // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n                // and video will be the same.  Just use one valid MediaInfo object\n                supportedKS = this.protectionExt.getSupportedKeySystemsFromContentProtection(contentProtection);\n                if (supportedKS && supportedKS.length > 0) {\n                    selectKeySystem.call(this, supportedKS, true);\n                }\n\n                initialized = true;\n            }\n        },\n\n        /**\n         * ProtectionController Event Listener\n         *\n         * @callback MediaPlayer.dependencies.ProtectionController~eventListener\n         * @param {Object} event The event.  See the documentation for ProtectionController\n         * APIs to see what events are fired by each API call\n         */\n\n        /**\n         * Add a listener for ProtectionController events\n         *\n         * @param type the event ID\n         * @param {MediaPlayer.dependencies.ProtectionController~eventListener} listener\n         * the event listener to add\n         * @see MediaPlayer.dependencies.ProtectionController.events\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         */\n        addEventListener: function(type, listener) {\n            this.eventBus.addEventListener(type, listener);\n        },\n\n        /**\n         * Remove a listener for ProtectionController events\n         *\n         * @param type the event ID associated with the listener to rmove\n         * @param {MediaPlayer.dependencies.ProtectionController~eventListener} listener\n         * the event listener to remove\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         */\n        removeEventListener: function(type, listener) {\n            this.eventBus.removeEventListener(type, listener);\n        },\n\n        /**\n         * Destroys all protection data associated with this protection set.  This includes\n         * deleting all key sessions.  In the case of persistent key sessions, the sessions\n         * will simply be unloaded and not deleted.  Additionally, if this protection set is\n         * associated with a HTMLMediaElement, it will be detached from that element.\n         *\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         */\n        teardown: function() {\n            var self = this;\n\n            // abort request if xhrLicense is different from null\n            if (xhrLicense) {\n                xhrLicense.aborted = true;\n                xhrLicense.abort();\n            }\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_MESSAGE, this);\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_SERVER_CERTIFICATE_UPDATED, this);\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ADDED, this);\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ERROR, this);\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, this);\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CLOSED, this);\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_REMOVED, this);\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_MESSAGE, this);\n            this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_STATUSES_CHANGED, this);\n\n            this.keySystem = undefined;\n\n            this.setMediaElement(null).then(function() {\n                self.protectionModel.teardown();\n                self.protectionModel = undefined;\n            });\n        },\n\n        /**\n         * Create a new key session associated with the given initialization data from\n         * the MPD or from the PSSH box in the media\n         *\n         * @param {ArrayBuffer} initData the initialization data\n         * @param {Uint8Array} cdmData the custom data to provide to licenser\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         * @fires MediaPlayer.dependencies.ProtectionController#KeySessionCreated\n         * @todo In older versions of the EME spec, there was a one-to-one relationship between\n         * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n         * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n         * to come up to speed with the latest EME standard\n         */\n        createKeySession: function(initData, cdmData) {\n\n            var initDataForKS = MediaPlayer.dependencies.protection.CommonEncryption.getPSSHForKeySystem(this.keySystem, initData),\n                i = 0,\n                currentInitData;\n            if (initDataForKS) {\n\n                this.debug.log('[DRM] create key session for initData:', String.fromCharCode.apply(null, new Uint8Array(initDataForKS)));\n\n                // Check for duplicate initData\n                currentInitData = this.protectionModel.getAllInitData();\n                for (i = 0; i < currentInitData.length; i++) {\n                    if (this.protectionExt.initDataEquals(initDataForKS, currentInitData[i])) {\n                        this.debug.log(\"[DRM] Ignoring initData because we have already seen it!\");\n                        return;\n                    }\n                }\n                try {\n                    this.protectionModel.createKeySession(initDataForKS, this.keySystem.sessionType, cdmData);\n                } catch (ex) {\n                    this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, null, {\n                        reason: \"Create key session raised en exception\",\n                        error: new MediaPlayer.vo.Error(ex.code, ex.name, ex.message)\n                    });\n                }\n            } else {\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, null, {\n                    reason: \"needkey/encrypted event contains no initData corresponding to that key system \" + this.keySystem.systemString,\n                    error: null\n                });\n            }\n        },\n\n        /**\n         * Loads a key session with the given session ID from persistent storage.  This\n         * essentially creates a new key session\n         *\n         * @param {string} sessionID\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         * @fires MediaPlayer.dependencies.ProtectionController#KeySessionCreated\n         */\n        loadKeySession: function(sessionID) {\n            this.protectionModel.loadKeySession(sessionID);\n        },\n\n        /**\n         * Removes the given key session from persistent storage and closes the session\n         * as if {@link MediaPlayer.dependencies.ProtectionController#closeKeySession}\n         * was called\n         *\n         * @param {MediaPlayer.vo.protection.SessionToken} sessionToken the session\n         * token\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         * @fires MediaPlayer.dependencies.ProtectionController#KeySessionRemoved\n         * @fires MediaPlayer.dependencies.ProtectionController#KeySessionClosed\n         */\n        removeKeySession: function(sessionToken) {\n            this.protectionModel.removeKeySession(sessionToken);\n        },\n\n        /**\n         * Closes the key session and releases all associated decryption keys.  These\n         * keys will no longer be available for decrypting media\n         *\n         * @param {MediaPlayer.vo.protection.SessionToken} sessionToken the session\n         * token\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         * @fires MediaPlayer.dependencies.ProtectionController#KeySessionClosed\n         */\n        closeKeySession: function(sessionToken) {\n            this.protectionModel.closeKeySession(sessionToken);\n        },\n\n        /**\n         * Sets a server certificate for use by the CDM when signing key messages\n         * intended for a particular license server.  This will fire\n         * an error event if a key system has not yet been selected.\n         *\n         * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n         * certificate\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         * @fires MediaPlayer.dependencies.ProtectionController#ServerCertificateUpdated\n         */\n        setServerCertificate: function(serverCertificate) {\n            this.protectionModel.setServerCertificate(serverCertificate);\n        },\n\n        /**\n         * Associate this protection system with the given HTMLMediaElement.  This\n         * causes the system to register for needkey/encrypted events from the given\n         * element and provides a destination for setting of MediaKeys\n         *\n         * @param {HTMLMediaElement} element the media element to which the protection\n         * system should be associated\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         */\n        setMediaElement: function(element) {\n            if (element) {\n                this.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_NEED_KEY, this);\n            } else if (element === null) {\n                this.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_NEED_KEY, this);\n            }\n            return this.protectionModel.setMediaElement(element);\n        },\n\n        /**\n         * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n         * \"persistent-license\".  Default is \"temporary\".\n         *\n         * @param {String} sessionType the session type\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         */\n        setSessionType: function(sessionType) {\n            if (this.keysystem) {\n                this.keySystem.sessionType = sessionType;\n            }\n        },\n\n        /**\n         * Attach KeySystem-specific data to use for license acquisition with EME\n         *\n         * @param {Object} data an object containing property names corresponding to\n         * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n         * being instances of {@link MediaPlayer.vo.protection.ProtectionData}\n         * @memberof MediaPlayer.dependencies.ProtectionController\n         * @instance\n         */\n        setProtectionData: function(data) {\n            protDataSet = data;\n            this.protectionExt.init(data);\n        }\n    };\n};\n\n/**\n * Key system selection event\n *\n * @event MediaPlayer.dependencies.ProtectionController#KeySystemSelected\n * @type {Object}\n * @property {MediaPlayer.vo.protection.KeySystemAccess} data key system\n * access object that describes the selected key system and associated\n * audio/video codecs and CDM capabilities.  May be null if an error occurred\n * @property {string} error if not null, an error occurred and this object\n * will contain an informative error string describing the failure\n */\n\n/**\n * Key session creation event\n *\n * @event MediaPlayer.dependencies.ProtectionController#KeySessionCreated\n * @type {Object}\n * @property {MediaPlayer.vo.protection.SessionToken} data the session token\n * that can be used to access certain properties of the session.  Also\n * required for other ProtectionController APIs that act on key sessions.\n * @property {string} error if not null, an error occurred and this object\n * will contain an informative error string describing the failure\n */\n\n/**\n * Key session removed event\n *\n * @event MediaPlayer.dependencies.ProtectionController#KeySessionRemoved\n * @type {Object}\n * @property {string} data the session ID of the session that was removed\n * from persistent storage\n * @property {string} error if not null, an error occurred and this object\n * will contain an informative error string describing the failure\n */\n\n/**\n * Key session closed event\n *\n * @event MediaPlayer.dependencies.ProtectionController#KeySessionClosed\n * @type {Object}\n * @property {string} data the session ID of the session that was closed\n * @property {string} error if not null, an error occurred and this object\n * will contain an informative error string describing the failure\n */\n\n/**\n * Server certificate updated event\n *\n * @event MediaPlayer.dependencies.ProtectionController#ServerCertificateUpdated\n * @type {Object}\n * @property {Object} data unused for this event.  The server certificate update\n * was is successful if the \"error\" property of this event is null or undefined\n * @property {string} error if not null, an error occurred and this object\n * will contain an informative error string describing the failure\n */\n\n/**\n * License request completed event\n *\n * @event MediaPlayer.dependencies.ProtectionController#LicenseRequestComplete\n * @type {Object}\n * @property {Object} data The event data.  This data will be provided regardless\n * of the success/failure status of the event\n * @property {MediaPlayer.vo.protection.SessionToken} data.sessionToken session token\n * associated with this license response.  Will never be null, even in error cases.\n * @property {String} data.messageType the message type associated with this request.\n * Supported message types can be found\n * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n * @property {string} error if not null, an error occurred and this object\n * will contain an informative error string describing the failure\n */\n\n/**\n * Events names for events sent by ProtectionController.  Use these event\n * names when subscribing or unsubscribing from ProtectionController events\n *\n * @enum {String}\n * @see MediaPlayer.dependencies.ProtectionController#addEventListener\n */\nMediaPlayer.dependencies.ProtectionController.events = {\n    /**\n     * Event ID for events delivered when a key system selection procedure\n     * has completed\n     *\n     * @constant\n     */\n    KEY_SYSTEM_SELECTED: \"keySystemSelected\",\n    /**\n     * Event ID for events delivered when the protection set receives\n     * a key message from the CDM\n     *\n     * @constant\n     */\n    SERVER_CERTIFICATE_UPDATED: \"serverCertificateUpdated\",\n    /**\n     * Event ID for events delivered when a new key has been added\n     *\n     * @constant\n     * @deprecated The latest versions of the EME specification no longer\n     * use this event. {@MediaPlayer.dependencies.ProtectionController.events.KEY_STATUSES_CHANGED}\n     * is preferred.\n     */\n    KEY_ADDED: \"keyAdded\",\n    /**\n     * Event ID for events delivered when a new key sessions creation\n     * process has completed\n     *\n     * @constant\n     */\n    KEY_SESSION_CREATED: \"keySessionCreated\",\n    /**\n     * Event ID for events delivered when a key session removal\n     * process has completed\n     *\n     * @constant\n     */\n    KEY_SESSION_REMOVED: \"keySessionRemoved\",\n    /**\n     * Event ID for events delivered when a key session close\n     * process has completed\n     *\n     * @constant\n     */\n    KEY_SESSION_CLOSED: \"keySessionClosed\",\n    /**\n     * Event ID for events delivered when the status of one or more\n     * decryption keys has changed\n     *\n     * @constant\n     */\n    KEY_STATUSES_CHANGED: \"keyStatusesChanged\",\n    /**\n     * Event ID for events delivered when the protection system receives\n     * a key message from the CDM\n     *\n     * @constant\n     */\n    KEY_MESSAGE: \"keyMessage\",\n    /**\n     * Event ID for events delivered when a license request procedure\n     * has completed\n     *\n     * @constant\n     */\n    LICENSE_REQUEST_COMPLETE: \"licenseRequestComplete\"\n};\n\nMediaPlayer.dependencies.ProtectionController.eventList = {\n    ENAME_PROTECTION_ERROR: \"protectionError\",\n    ENAME_KEY_SYSTEM_SELECTED: \"keySystemSelected\"\n};\n\nMediaPlayer.dependencies.ProtectionController.prototype = {\n    constructor: MediaPlayer.dependencies.ProtectionController\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Media protection functionality that can be modified/overridden by applications\n *\n * @class MediaPlayer.dependencies.ProtectionExtensions\n */\nMediaPlayer.dependencies.ProtectionExtensions = function () {\n    \"use strict\";\n\n    this.system = undefined;\n    this.debug = undefined;\n    this.keySystems = [];\n\n    this.clearkeyKeySystem = undefined;\n};\n\nMediaPlayer.dependencies.ProtectionExtensions.prototype = {\n    constructor: MediaPlayer.dependencies.ProtectionExtensions,\n\n    /**\n     * Setup the key systems available in the player\n     */\n    setup: function() {\n        var keySystem;\n\n        // PlayReady\n        keySystem = this.system.getObject(\"ksPlayReady\");\n        this.keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = this.system.getObject(\"ksWidevine\");\n        this.keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = this.system.getObject(\"ksClearKey\");\n        this.keySystems.push(keySystem);\n        this.clearkeyKeySystem = keySystem;\n    },\n\n    /**\n     * Initialize the available key systems\n     *\n     * @param protectionDataSet object that contains 0 or more ProtectionData\n     * objects.  Each one is identified by an attribute name equal to\n     * to the unique key system string for the DRM to which it is intended\n     */\n    init: function(protectionDataSet) {\n        var getProtectionData = function(keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < this.keySystems.length; i++) {\n            var keySystem = this.keySystems[i];\n            keySystem.init(getProtectionData(keySystem.systemString));\n        }\n    },\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {MediaPlayer.dependencies.protection.KeySystem[]} a prioritized\n     * list of key systems\n     */\n    getKeySystems: function() {\n        return this.keySystems;\n    },\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {MediaPlayer.dependencies.protection.KeySystem} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     */\n    getKeySystemBySystemString: function(systemString) {\n        for (var i = 0; i < this.keySystems.length; i++) {\n            if (this.keySystems[i].systemString === systemString) {\n                return this.keySystems[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     */\n    isClearKey: function(keySystem) {\n        return (keySystem === this.clearkeyKeySystem);\n    },\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param initData1 {ArrayBuffer} first initData\n     * @param initData2 {ArrayBuffer} second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     */\n    initDataEquals: function(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            var data1 = new Uint8Array(initData1),\n                data2 = new Uint8Array(initData2);\n            for (var j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns a set of supported key systems and CENC intialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Object[]} cps array of content protection elements parsed\n     * from the manifest\n     * @returns {Object[]} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @returns {MediaPlayer.dependencies.protection.KeySystem} Object.ks the key\n     * system identified by the ContentProtection element\n     * @returns {ArrayBuffer} Object.initData the initialization data parsed\n     * from the ContentProtection element\n     */\n    getSupportedKeySystemsFromContentProtection: function(cps) {\n        var cp, ks, ksIdx, cpIdx, supportedKS = [];\n\n        if (cps) {\n            for(ksIdx = 0; ksIdx < this.keySystems.length; ++ksIdx) {\n                ks = this.keySystems[ksIdx];\n                for(cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n\n                        //this.debug.log(\"[DRM] Supported key systems: \" + ks.systemString + \" (\" + ks.schemeIdURI + \")\");\n\n                        // Look for DRM-specific ContentProtection\n                        var initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: this.keySystems[ksIdx],\n                                initData: initData,\n                                cdmData: ks.getCDMData()\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    },\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @returns {Object[]} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @returns {MediaPlayer.dependencies.protection.KeySystem} Object.ks the key\n     * system\n     * @returns {ArrayBuffer} Object.initData the initialization data\n     * associated with the key system\n     */\n    getSupportedKeySystems: function(initData) {\n        var ksIdx, supportedKS = [],\n                pssh = MediaPlayer.dependencies.protection.CommonEncryption.parsePSSHList(initData);\n\n        this.debug.log(\"[DRM] Get supported key systems from init data\");\n\n        for (ksIdx = 0; ksIdx < this.keySystems.length; ++ksIdx) {\n            if (this.keySystems[ksIdx].uuid in pssh) {\n                //this.debug.log(\"[DRM] Add supported key system: \" + this.keySystems[ksIdx].systemString);\n                supportedKS.push({\n                    ks: this.keySystems[ksIdx],\n                    initData: pssh[this.keySystems[ksIdx].uuid],\n                    cdmData: this.keySystems[ksIdx].getCDMData()\n                });\n            }\n        }\n        return supportedKS;\n    },\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {MediaPlayer.vo.protection.ProtectionData} protData protection data to use for the\n     * request\n     * @param {String} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @return {MediaPlayer.dependencies.protection.servers.LicenseServer} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     *\n     */\n    getLicenseServer: function(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === \"license-release\" || messageType == \"individualization-request\") {\n            return null;\n        }\n\n        var licenseServerData = null;\n        if (protData && protData.hasOwnProperty(\"drmtoday\")) {\n            licenseServerData = this.system.getObject(\"serverDRMToday\");\n        } else if (keySystem.systemString === \"com.widevine.alpha\") {\n            licenseServerData = this.system.getObject(\"serverWidevine\");\n        } else if (keySystem.systemString === \"com.microsoft.playready\") {\n            licenseServerData = this.system.getObject(\"serverPlayReady\");\n        } else if (keySystem.systemString === \"org.w3.clearkey\") {\n            licenseServerData = this.system.getObject(\"serverClearKey\");\n        }\n\n        return licenseServerData;\n    },\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {MediaPlayer.vo.protection.ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {MediaPlayer.vo.protection.ClearKeyKeySet} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     */\n    processClearKeyLicenseRequest: function(protData, message) {\n        try {\n            return MediaPlayer.dependencies.protection.KeySystem_ClearKey.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            this.log(\"Failed to retrieve clearkeys from ProtectionData\");\n            return null;\n        }\n    },\n\n    /**\n     * Select a key system by using the priority-ordered key systems supported\n     * by the player and the key systems supported by the content\n     *\n     * @param {Object[]} supportedKS supported key systems\n     * @param {MediaPlayer.dependencies.ProtectionController} protectionController\n     * @param {MediaPlayer.vo.MediaInfo} videoInfo video media information\n     * @param {MediaPlayer.vo.MediaInfo} audioInfo audio media information\n     */\n    //autoSelectKeySystem: function(supportedKS, protectionController, videoInfo, audioInfo) {\n    autoSelectKeySystem: function(supportedKS, protectionController, videoCodec, audioCodec) {\n\n        this.debug.log(\"[DRM] Auto select key system: \");\n        this.debug.log(\"[DRM] ---- video codec = \" + videoCodec);\n        this.debug.log(\"[DRM] ---- audio codec = \" + audioCodec);\n\n        // Does the initData contain a key system supported by the player?\n        if (supportedKS.length === 0) {\n            throw new Error(\"DRM system for this content not supported by the player!\");\n        }\n\n        var audioCapabilities = [], videoCapabilities = [];\n        if (videoCodec) {\n            videoCapabilities.push(new MediaPlayer.vo.protection.MediaCapability(videoCodec));\n        }\n        if (audioCodec) {\n            audioCapabilities.push(new MediaPlayer.vo.protection.MediaCapability(audioCodec));\n        }\n        var ksConfig = new MediaPlayer.vo.protection.KeySystemConfiguration(audioCapabilities, videoCapabilities);\n        var requestedKeySystems = [];\n        for (var i = 0; i < supportedKS.length; i++) {\n            requestedKeySystems.push({ ks: supportedKS[i].ks, configs: [ksConfig] });\n        }\n\n        // Since ProtectionExtensions is a singleton, we need to create an IIFE to wrap the\n        // event callback and save the values of protectionModel and protectionController.\n        var self = this;\n        (function(protCtrl) {\n\n            // Callback object for KEY_SYSTEM_ACCESS_COMPLETE event\n            var cbObj = {};\n\n            // Subscribe for event and then perform request\n            cbObj[MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE] = function(event) {\n                protCtrl.protectionModel.unsubscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, this);\n                if (!event.error) {\n                    var keySystemAccess = event.data;\n                    self.debug.log(\"[DRM] KeySystem Access Granted (\" + keySystemAccess.keySystem.systemString + \")!\");\n                    protCtrl.selectKeySystem(keySystemAccess);\n                } else {\n                    self.debug.log(event.error);\n                    protCtrl.notify(MediaPlayer.dependencies.ProtectionController.eventList.ENAME_PROTECTION_ERROR,\n                        new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYSYSERR_ACCESS_DENIED, \"[DRM] KeySystem Access Denied! -- \" + event.error, null));\n                }\n            };\n\n            protCtrl.protectionModel.subscribe(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, cbObj);\n            protCtrl.requestKeySystemAccess(requestedKeySystems);\n\n        })(protectionController);\n    }\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements MediaPlayer.models.ProtectionModel\n * @class\n */\nMediaPlayer.models.ProtectionModel_01b = function () {\n\n    var videoElement = null,\n\n        // API names object selected for this user agent\n        api = null,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions = [],\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions = [],\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        createEventHandler = function() {\n            var self = this;\n            return {\n                handleEvent: function(event) {\n                    var sessionToken = null;\n                    switch (event.type) {\n\n                        case api.needkey:\n                            var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_NEED_KEY,\n                                new MediaPlayer.vo.protection.NeedKey(initData, \"cenc\"));\n                            break;\n\n                        case api.keyerror:\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken) {\n                                sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                            }\n\n                            if (sessionToken) {\n                                var code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR,\n                                    msg = \"MediakeyError\";\n                                switch (event.errorCode.code) {\n                                    case 1:\n                                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_UNKNOWN;\n                                        msg += \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n                                        break;\n                                    case 2:\n                                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_CLIENT;\n                                        msg += \"The Key System could not be installed or updated.\";\n                                        break;\n                                    case 3:\n                                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_SERVICE;\n                                        msg += \"The message passed into update indicated an error from the license service.\";\n                                        break;\n                                    case 4:\n                                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_OUTPUT;\n                                        msg += \"There is no available output device with the required characteristics for the content protection system.\";\n                                        break;\n                                    case 5:\n                                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_HARDWARECHANGE;\n                                        msg += \"A hardware configuration change caused a content protection error.\";\n                                        break;\n                                    case 6:\n                                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_DOMAIN;\n                                        msg += \"An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.\";\n                                        break;\n                                }\n                                if (event.systemCode) {\n                                    msg += \"  (System Code = \" + event.systemCode + \")\";\n                                }\n                                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ERROR, new MediaPlayer.vo.protection.KeyError(code, msg));\n                            } else {\n                                self.log(\"No session token found for key error\");\n                            }\n                            break;\n\n                        case api.keyadded:\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken) {\n                                sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                            }\n\n                            if (sessionToken) {\n                                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ADDED, sessionToken);\n                            } else {\n                                self.log(\"No session token found for key added\");\n                            }\n                            break;\n\n                        case api.keymessage:\n\n                            // If this CDM does not support session IDs, we will be limited\n                            // to a single session\n                            moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                            // SessionIDs supported\n                            if (moreSessionsAllowed) {\n\n                                // Attempt to find an uninitialized token with this sessionID\n                                sessionToken = findSessionByID(sessions, event.sessionId);\n                                if (!sessionToken && pendingSessions.length > 0) {\n\n                                    // This is the first message for our latest session, so set the\n                                    // sessionID and add it to our list\n                                    sessionToken = pendingSessions.shift();\n                                    sessions.push(sessionToken);\n                                    sessionToken.sessionID = event.sessionId;\n                                }\n                            } else if (pendingSessions.length > 0) { // SessionIDs not supported\n\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n\n                                if (pendingSessions.length !== 0) {\n                                    self.errHandler.mediaKeyMessageError(\"Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!\");\n                                }\n                            }\n\n                            if (sessionToken) {\n                                var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                                // For ClearKey, the spec mandates that you pass this message to the\n                                // addKey method, so we always save it to the token since there is no\n                                // way to tell which key system is in use\n                                sessionToken.keyMessage = message;\n\n                                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_MESSAGE,\n                                    new MediaPlayer.vo.protection.KeyMessage(sessionToken, message, event.defaultURL));\n                            } else {\n                                self.log(\"No session token found for key message\");\n                            }\n                            break;\n                    }\n                }\n            };\n        },\n        eventHandler = null,\n\n        /**\n         * Helper function to retrieve the stored session token based on a given\n         * sessionID value\n         *\n         * @param sessionArray {Array} the array of sessions to search\n         * @param sessionID the sessionID to search for\n         * @returns {*} the session token with the given sessionID\n         */\n        findSessionByID = function(sessionArray, sessionID) {\n\n            if (!sessionID || !sessionArray) {\n                return null;\n            } else {\n                var len = sessionArray.length;\n                for (var i = 0; i < len; i++) {\n                    if (sessionArray[i].sessionID === sessionID) {\n                        return sessionArray[i];\n                    }\n                }\n                return null;\n            }\n        },\n\n        removeEventListeners = function() {\n            videoElement.removeEventListener(api.keyerror, eventHandler);\n            videoElement.removeEventListener(api.needkey, eventHandler);\n            videoElement.removeEventListener(api.keymessage, eventHandler);\n            videoElement.removeEventListener(api.keyadded, eventHandler);\n        };\n\n    return {\n        system: undefined,\n        log: undefined,\n        errHandler: undefined,\n        notify: undefined,\n        subscribe: undefined,\n        unsubscribe: undefined,\n        protectionExt: undefined,\n        keySystem: null,\n\n        setup: function() {\n            eventHandler = createEventHandler.call(this);\n        },\n\n        /**\n         * Initialize this protection model\n         */\n        init: function() {\n            var tmpVideoElement = document.createElement(\"video\");\n            api = MediaPlayer.models.ProtectionModel_01b.detect(tmpVideoElement);\n        },\n\n        teardown: function() {\n            if (videoElement) {\n                removeEventListeners();\n            }\n            for (var i = 0; i < sessions.length; i++) {\n                this.closeKeySession(sessions[i]);\n            }\n            this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE);\n        },\n\n        getAllInitData: function() {\n            var i, retVal = [];\n            for (i = 0; i < pendingSessions.length; i++) {\n                retVal.push(pendingSessions[i].initData);\n            }\n            for (i = 0; i < sessions.length; i++) {\n                retVal.push(sessions[i].initData);\n            }\n            return retVal;\n        },\n\n        requestKeySystemAccess: function(ksConfigurations) {\n            var ve = videoElement;\n            if (!ve) { // Must have a video element to do this capability tests\n                ve = document.createElement(\"video\");\n            }\n\n            // Try key systems in order, first one with supported key system configuration\n            // is used\n            var found = false;\n            for (var ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n                var systemString = ksConfigurations[ksIdx].ks.systemString;\n                var configs = ksConfigurations[ksIdx].configs;\n                var supportedAudio = null;\n                var supportedVideo = null;\n\n                // Try key system configs in order, first one with supported audio/video\n                // is used\n                for (var configIdx = 0; configIdx < configs.length; configIdx++) {\n                    //var audios = configs[configIdx].audioCapabilities;\n                    var videos = configs[configIdx].videoCapabilities;\n\n                    // Look for supported audio container/codecs\n                    /*\n                    if (audios && audios.length !== 0) {\n                        supportedAudio = []; // Indicates that we have a requested audio config\n                        for (var audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                            if (ve.canPlayType(audios[audioIdx].contentType, systemString) !== \"\") {\n                                supportedAudio.push(audios[audioIdx]);\n                            }\n                        }\n                    }\n                    */\n\n                    // Look for supported video container/codecs\n                    if (videos && videos.length !== 0) {\n                        supportedVideo = []; // Indicates that we have a requested video config\n                        for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                            if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== \"\") {\n                                supportedVideo.push(videos[videoIdx]);\n                            }\n                        }\n                    }\n\n                    // No supported audio or video in this configuration OR we have\n                    // requested audio or video configuration that is not supported\n                    if ((!supportedAudio && !supportedVideo) ||\n                            (supportedAudio && supportedAudio.length === 0) ||\n                            (supportedVideo && supportedVideo.length === 0)) {\n                        continue;\n                    }\n\n                    // This configuration is supported\n                    found = true;\n                    var ksConfig = new MediaPlayer.vo.protection.KeySystemConfiguration(supportedAudio, supportedVideo);\n                    var ks = this.protectionExt.getKeySystemBySystemString(systemString);\n                    var ksAccess = new MediaPlayer.vo.protection.KeySystemAccess(ks, ksConfig);\n                    this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE,\n                            ksAccess);\n                    break;\n                }\n            }\n            if (!found) {\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE,\n                        null, \"Key system access denied! -- No valid audio/video content configurations detected!\");\n            }\n        },\n\n        selectKeySystem: function(keySystemAccess) {\n            this.keySystem = keySystemAccess.keySystem;\n            this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED);\n        },\n\n        setMediaElement: function(mediaElement) {\n            if (videoElement === mediaElement) {\n                return;\n            }\n\n            // Replacing the previous element\n            if (videoElement) {\n                removeEventListeners();\n            }\n\n            videoElement = mediaElement;\n\n            // Only if we are not detaching from the existing element\n            if (videoElement) {\n                videoElement.addEventListener(api.keyerror, eventHandler);\n                videoElement.addEventListener(api.needkey, eventHandler);\n                videoElement.addEventListener(api.keymessage, eventHandler);\n                videoElement.addEventListener(api.keyadded, eventHandler);\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_VIDEO_ELEMENT_SELECTED);\n            }\n\n            return Q.when();\n        },\n\n        createKeySession: function(initData /*, keySystemType */) {\n\n            if (!this.keySystem) {\n                throw new Error(\"Can not create sessions until you have selected a key system\");\n            }\n\n            // Determine if creating a new session is allowed\n            if (moreSessionsAllowed || sessions.length === 0) {\n\n                var newSession = { // Implements MediaPlayer.vo.protection.SessionToken\n                    sessionID: null,\n                    initData: initData,\n\n                    getSessionID: function() {\n                        return this.sessionID;\n                    },\n\n                    getExpirationTime: function() {\n                        return NaN;\n                    },\n\n                    getSessionType: function() {\n                        return \"temporary\";\n                    }\n                };\n                pendingSessions.push(newSession);\n\n                // Send our request to the CDM\n                videoElement[api.generateKeyRequest](this.keySystem.systemString, new Uint8Array(initData));\n\n                return newSession;\n\n            } else {\n                throw new Error(\"Multiple sessions not allowed!\");\n            }\n\n        },\n\n        updateKeySession: function(sessionToken, message) {\n            var sessionID = sessionToken.sessionID;\n            if (!this.protectionExt.isClearKey(this.keySystem)) {\n                // Send our request to the CDM\n                videoElement[api.addKey](this.keySystem.systemString,\n                        new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n            } else {\n                // For clearkey, message is a MediaPlayer.vo.protection.ClearKeyKeySet\n                for (var i = 0; i < message.keyPairs.length; i++) {\n                    videoElement[api.addKey](this.keySystem.systemString,\n                            message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n                }\n            }\n        },\n\n        closeKeySession: function(sessionToken) {\n            // Send our request to the CDM\n            videoElement[api.cancelKeyRequest](this.keySystem.systemString, sessionToken.sessionID);\n        },\n\n        setServerCertificate: function(/*serverCertificate*/) { /* Not supported */ },\n\n        loadKeySession: function(/*sessionID*/) { /* Not supported */ },\n\n        removeKeySession: function(/*sessionToken*/) { /* Not supported */ },\n\n        checkIfEncrypted: function() { /* Not supported */ }\n    };\n};\n\nMediaPlayer.models.ProtectionModel_01b.prototype = {\n    constructor: MediaPlayer.models.ProtectionModel_01b\n};\n\n// Defines the supported 0.1b API variations\nMediaPlayer.models.ProtectionModel_01b.APIs = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: \"generateKeyRequest\",\n        addKey: \"addKey\",\n        cancelKeyRequest: \"cancelKeyRequest\",\n\n        // Events\n        needkey: \"needkey\",\n        keyerror: \"keyerror\",\n        keyadded: \"keyadded\",\n        keymessage: \"keymessage\"\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: \"webkitGenerateKeyRequest\",\n        addKey: \"webkitAddKey\",\n        cancelKeyRequest: \"webkitCancelKeyRequest\",\n\n        // Events\n        needkey: \"webkitneedkey\",\n        keyerror: \"webkitkeyerror\",\n        keyadded: \"webkitkeyadded\",\n        keymessage: \"webkitkeymessage\"\n    }\n];\n\n/**\n * Detects presence of EME v0.1b APIs\n *\n * @param videoElement {HTMLMediaElement} the media element that will be\n * used for detecting APIs\n * @returns an API object that is used when initializing the ProtectionModel\n * instance, or null if this EME version is not supported\n */\nMediaPlayer.models.ProtectionModel_01b.detect = function(videoElement) {\n    var apis = MediaPlayer.models.ProtectionModel_01b.APIs;\n    for (var i = 0; i < apis.length; i++) {\n        var api = apis[i];\n        if (typeof videoElement[api.generateKeyRequest] !== 'function') {\n            continue;\n        }\n        if (typeof videoElement[api.addKey] !== 'function') {\n            continue;\n        }\n        if (typeof videoElement[api.cancelKeyRequest] !== 'function') {\n            continue;\n        }\n        return api;\n    }\n\n    return null;\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements MediaPlayer.models.ProtectionModel\n * @class\n */\nMediaPlayer.models.ProtectionModel_3Feb2014 = function () {\n\n    var videoElement = null,\n        mediaKeys = null,\n        keySystemAccess = null,\n        boundDoSetKeys = null,\n\n        // API names object selected for this user agent\n        api = null,\n\n        // Session list\n        sessions = [],\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        createEventHandler = function() {\n            var self = this;\n            return {\n                handleEvent: function(event) {\n                    switch (event.type) {\n\n                        case api.needkey:\n                            if (event.initData) {\n                                var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_NEED_KEY,\n                                        new MediaPlayer.vo.protection.NeedKey(initData, \"cenc\"));\n                            }\n                            break;\n                    }\n                }\n            };\n        },\n        eventHandler = null,\n\n        // IE11 does not let you set MediaKeys until it has entered a certain\n        // readyState, so we need this logic to ensure we don't set the keys\n        // too early\n        setMediaKeys = function() {\n            var doSetKeys = function() {\n                videoElement.removeEventListener(\"loadedmetadata\", boundDoSetKeys);\n                videoElement[api.setMediaKeys](mediaKeys);\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_VIDEO_ELEMENT_SELECTED);\n            };\n            if (videoElement.readyState >= 1) {\n                doSetKeys.call(this);\n            } else {\n                boundDoSetKeys = doSetKeys.bind(this);\n                videoElement.addEventListener(\"loadedmetadata\", boundDoSetKeys);\n            }\n\n        },\n\n        getKeyError = function(event) {\n            var code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR,\n                msg = \"MediakeyError\";\n\n            if (event.errorCode) {\n                switch (event.errorCode.code) {\n                    case 1:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_UNKNOWN;\n                        msg = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n                        break;\n                    case 2:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_CLIENT;\n                        msg = \"The Key System could not be installed or updated.\";\n                        break;\n                    case 3:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_SERVICE;\n                        msg = \"The message passed into update indicated an error from the license service.\";\n                        break;\n                    case 4:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_OUTPUT;\n                        msg = \"There is no available output device with the required characteristics for the content protection system.\";\n                        break;\n                    case 5:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_HARDWARECHANGE;\n                        msg += \"A hardware configuration change caused a content protection error.\";\n                        break;\n                    case 6:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_DOMAIN;\n                        msg = \"An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.\";\n                        break;\n                    default:\n                        code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_UNKNOWN;\n                        msg = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";\n                        break;\n                }\n            } else {\n                code = MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_UNKNOWN;\n                msg = \"An unspecified error occurred. This value is used for errors that don't match any of the other codes.\";                \n            }\n            if (event.systemCode) {\n                msg += \"  (System Code = \" + event.systemCode + \")\";\n            }\n            return new MediaPlayer.vo.protection.KeyError(code, msg);\n        },\n\n        // Function to create our session token objects which manage the EME\n        // MediaKeySession and session-specific event handler\n        createSessionToken = function(keySession, initData) {\n            var self = this;\n            return { // Implements MediaPlayer.vo.protection.SessionToken\n                session: keySession,\n                initData: initData,\n\n                // This is our main event handler for all desired MediaKeySession events\n                // These events are translated into our API-independent versions of the\n                // same events\n                handleEvent: function(event) {\n                    switch (event.type) {\n\n                        case api.error:\n                            self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ERROR, getKeyError(event));\n                            break;\n\n                        case api.message:\n                            var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                            self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_MESSAGE,\n                                    new MediaPlayer.vo.protection.KeyMessage(this, message, event.destinationURL));\n                            break;\n\n                        case api.ready:\n                            self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ADDED, this);\n                            break;\n\n                        case api.close:\n                            self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CLOSED, this.getSessionID());\n                            break;\n                    }\n                },\n\n                getSessionID: function() {\n                    return this.session.sessionId;\n                },\n\n                getExpirationTime: function() {\n                    return NaN;\n                },\n\n                getSessionType: function() {\n                    return \"temporary\";\n                }\n            };\n        };\n\n    return {\n        system: undefined,\n        notify: undefined,\n        subscribe: undefined,\n        unsubscribe: undefined,\n        protectionExt: undefined,\n        debug: undefined,\n        keySystem: null,\n\n        setup: function() {\n            eventHandler = createEventHandler.call(this);\n        },\n\n        /**\n         * Initialize this protection model\n         */\n        init: function() {\n            var tmpVideoElement = document.createElement(\"video\");\n            api = MediaPlayer.models.ProtectionModel_3Feb2014.detect(tmpVideoElement);\n        },\n\n        teardown: function() {\n            try {\n                for (var i = 0; i < sessions.length; i++) {\n                    this.closeKeySession(sessions[i]);\n                }\n                if (videoElement) {\n                    videoElement.removeEventListener(api.needkey, eventHandler);\n                }\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE);\n            } catch (error) {\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE,\n                        null, \"Error tearing down key sessions and MediaKeys! -- \" + error.message);\n            }\n        },\n\n        getAllInitData: function() {\n            var retVal = [];\n            for (var i = 0; i < sessions.length; i++) {\n                retVal.push(sessions[i].initData);\n            }\n            return retVal;\n        },\n\n        requestKeySystemAccess: function(ksConfigurations) {\n\n            // Try key systems in order, first one with supported key system configuration\n            // is used\n            var found = false;\n            for (var ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n                var systemString = ksConfigurations[ksIdx].ks.systemString;\n                var configs = ksConfigurations[ksIdx].configs;\n                var supportedAudio = null;\n                var supportedVideo = null;\n\n                this.debug.log(\"[DRM][3Feb2014] Request access for key system \" + systemString);\n\n                // Try key system configs in order, first one with supported audio/video\n                // is used\n                for (var configIdx = 0; configIdx < configs.length; configIdx++) {\n                    var audios = configs[configIdx].audioCapabilities;\n                    var videos = configs[configIdx].videoCapabilities;\n\n                    // Look for supported audio container/codecs\n                    if (audios && audios.length !== 0) {\n                        supportedAudio = []; // Indicates that we have a requested audio config\n                        for (var audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                            if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                                //this.debug.log(\"[DRM][3Feb2014] audio codec supported: \" + audios[audioIdx].contentType);\n                                supportedAudio.push(audios[audioIdx]);\n                            }\n                        }\n                    }\n\n                    // Look for supported video container/codecs\n                    if (videos && videos.length !== 0) {\n                        supportedVideo = []; // Indicates that we have a requested video config\n                        for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                            if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                                //this.debug.log(\"[DRM][3Feb2014] video codec supported: \" + videos[audioIdx].contentType);\n                                supportedVideo.push(videos[videoIdx]);\n                            }\n                        }\n                    }\n\n                    // No supported audio or video in this configuration OR we have\n                    // requested audio or video configuration that is not supported\n                    if ((!supportedAudio && !supportedVideo) ||\n                            (supportedAudio && supportedAudio.length === 0) ||\n                            (supportedVideo && supportedVideo.length === 0)) {\n                        continue;\n                    }\n\n                    // This configuration is supported\n                    found = true;\n                    var ksConfig = new MediaPlayer.vo.protection.KeySystemConfiguration(supportedAudio, supportedVideo);\n                    var ks = this.protectionExt.getKeySystemBySystemString(systemString);\n                    var ksAccess = new MediaPlayer.vo.protection.KeySystemAccess(ks, ksConfig);\n                    this.debug.log(\"[DRM][3Feb2014] configuration supported = audio:\" + JSON.stringify(supportedAudio) + \", video:\" + JSON.stringify(supportedVideo));\n                    this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE,\n                            ksAccess);\n                    break;\n                }\n            }\n            if (!found) {\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE,\n                        null, \"[DRM][3Feb2014] Key system access denied! -- No valid audio/video content configurations detected!\");\n            }\n        },\n\n        selectKeySystem: function(ksAccess) {\n            this.debug.log(\"[DRM][3Feb2014] Select key system \" + ksAccess.keySystem.systemString);\n            try {\n                mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n                this.keySystem = ksAccess.keySystem;\n                keySystemAccess = ksAccess;\n                if (videoElement) {\n                    setMediaKeys.call(this);\n                }\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED);\n\n            } catch (error) {\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED,\n                        null, \"Error selecting keys system (\" + this.keySystem.systemString + \")! Could not create MediaKeys -- TODO\");\n            }\n        },\n\n        setMediaElement: function(mediaElement) {\n            if (videoElement === mediaElement)\n                return;\n\n            // Replacing the previous element\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n                videoElement.removeEventListener(\"loadedmetadata\", boundDoSetKeys);\n            }\n\n            videoElement = mediaElement;\n\n            // Only if we are not detaching from the existing element\n            if (videoElement) {\n                //videoElement.addEventListener(api.needkey, eventHandler);\n                if (mediaKeys) {\n                    setMediaKeys.call(this);\n                }\n            }\n\n            return Q.when();\n        },\n\n        createKeySession: function(initData, sessionType, cdmData) {\n\n            if (!this.keySystem || !mediaKeys || !keySystemAccess) {\n                throw new Error(\"Can not create sessions until you have selected a key system\");\n            }\n\n            this.debug.log(\"[DRM][3Feb2014] Create key session\");\n\n            // Use the first video capability for the contentType.\n            // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n            var contentType = keySystemAccess.ksConfiguration.videoCapabilities[0].contentType;\n            var session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n            var sessionToken = createSessionToken.call(this, session, initData);\n\n            // Add all event listeners\n            session.addEventListener(api.error, sessionToken);\n            session.addEventListener(api.message, sessionToken);\n            session.addEventListener(api.ready, sessionToken);\n            session.addEventListener(api.close, sessionToken);\n\n            // Add to our session list\n            sessions.push(sessionToken);\n\n            this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, sessionToken);\n        },\n\n        updateKeySession: function(sessionToken, message) {\n\n            var session = sessionToken.session;\n\n            this.debug.log(\"[DRM][3Feb2014] Update key session\");\n\n            if (!this.protectionExt.isClearKey(this.keySystem)) {\n                // Send our request to the key session\n                session.update(new Uint8Array(message));\n            } else {\n                // For clearkey, message is a MediaPlayer.vo.protection.ClearKeyKeySet\n                session.update(new Uint8Array(message.toJWK()));\n            }\n        },\n\n        /**\n         * Close the given session and release all associated keys.  Following\n         * this call, the sessionToken becomes invalid\n         *\n         * @param sessionToken the session token\n         */\n        closeKeySession: function(sessionToken) {\n\n            this.debug.log(\"[DRM][3Feb2014] Close key session, token = \" + sessionToken.session.sessionId);\n\n            var session = sessionToken.session;\n\n            // Remove event listeners\n            session.removeEventListener(api.error, sessionToken);\n            session.removeEventListener(api.message, sessionToken);\n            session.removeEventListener(api.ready, sessionToken);\n            session.removeEventListener(api.close, sessionToken);\n\n            // Remove from our session list\n            for (var i = 0; i < sessions.length; i++) {\n                if (sessions[i] === sessionToken) {\n                    sessions.splice(i,1);\n                    break;\n                }\n            }\n\n            // Send our request to the key session\n            session[api.release]();\n        },\n\n        setServerCertificate: function(/*serverCertificate*/) { /* Not supported */ },\n\n        loadKeySession: function(/*sessionID*/) { /* Not supported */ },\n\n        removeKeySession: function(/*sessionToken*/) { /* Not supported */ },\n\n        checkIfEncrypted: function() { /* Not supported */ }\n\n    };\n};\n\n// Defines the supported 3Feb2014 API variations\nMediaPlayer.models.ProtectionModel_3Feb2014.APIs = [\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: \"msSetMediaKeys\",\n\n        // MediaKeys\n        MediaKeys: \"MSMediaKeys\",\n\n        // MediaKeySession\n        release: \"close\",\n\n        // Events\n        needkey: \"msneedkey\",\n        error: \"mskeyerror\",\n        message: \"mskeymessage\",\n        ready: \"mskeyadded\",\n        close: \"mskeyclose\"\n    },\n    \n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: \"setMediaKeys\",\n\n        // MediaKeys\n        MediaKeys: \"MediaKeys\",\n\n        // MediaKeySession\n        release: \"close\",\n\n        // Events\n        needkey: \"needkey\",\n        error: \"keyerror\",\n        message: \"keymessage\",\n        ready: \"keyadded\",\n        close: \"keyclose\"\n    }\n];\n\n/**\n * Detects presence of EME v3Feb2014 APIs\n *\n * @param videoElement {HTMLMediaElement} the media element that will be\n * used for detecting APIs\n * @returns {Object} an API object that is used when initializing the\n * ProtectionModel instance or null if this EME version is not supported\n */\nMediaPlayer.models.ProtectionModel_3Feb2014.detect = function(videoElement) {\n    var apis = MediaPlayer.models.ProtectionModel_3Feb2014.APIs;\n    for (var i = 0; i < apis.length; i++) {\n        var api = apis[i];\n        if (typeof videoElement[api.setMediaKeys] !== 'function') {\n            continue;\n        }\n        if (typeof window[api.MediaKeys] !== 'function')  {\n            continue;\n        }\n        return api;\n    }\n\n    return null;\n};\n\nMediaPlayer.models.ProtectionModel_3Feb2014.prototype = {\n    constructor: MediaPlayer.models.ProtectionModel_3Feb2014\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements MediaPlayer.models.ProtectionModel\n * @class\n */\nMediaPlayer.models.ProtectionModel_21Jan2015 = function () {\n\n    var videoElement = null,\n        mediaKeys = null,\n        eventHandler = null,\n\n        // Session list\n        sessions = [],\n\n        arrayToHexString = function (array) {\n\n            var str = \"[\",\n                i;\n\n            for (i = 0; i < array.length; i++) {\n                str += \"0x\" + array[i].toString(16);\n                if (i < (array.length - 1)) {\n                    str += \",\";\n                }\n            }\n\n            str += \"]\";\n\n            return str;\n        },\n\n        requestKeySystemAccessInternal = function(ksConfigurations, idx) {\n            var self = this;\n\n            if (navigator.requestMediaKeySystemAccess === undefined ||\n                typeof navigator.requestMediaKeySystemAccess !== 'function') {\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, null, \"Insecure origins are not allowed\");\n                return;\n            }\n\n            (function(i) {\n                var keySystem = ksConfigurations[i].ks;\n                var configs = ksConfigurations[i].configs;\n                self.debug.log(\"[DRM][PM_21Jan2015] requestMediaKeySystemAccess: \" + keySystem.systemString);\n                navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function(mediaKeySystemAccess) {\n\n                    // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                    var configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                            mediaKeySystemAccess.getConfiguration() : null;\n                    var keySystemAccess = new MediaPlayer.vo.protection.KeySystemAccess(keySystem, configuration);\n                    keySystemAccess.mksa = mediaKeySystemAccess;\n                    self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, keySystemAccess);\n                }).catch(function() {\n                    if (++i < ksConfigurations.length) {\n                        requestKeySystemAccessInternal.call(self, ksConfigurations, i);\n                    } else {\n                        self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_ACCESS_COMPLETE, null, \"Key system access denied!\");\n                    }\n                });\n            })(idx);\n        },\n\n        closeKeySessionInternal = function(sessionToken) {\n            var session = sessionToken.session;\n            // Remove event listeners\n            session.removeEventListener(\"keystatuseschange\", sessionToken);\n            session.removeEventListener(\"message\", sessionToken);\n\n            // Send our request to the key session\n            return session.close();\n        },\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        createEventHandler = function() {\n            var self = this;\n            return {\n                session : null,\n\n                handleEvent: function(event) {\n                    switch (event.type) {\n                        case \"encrypted\":\n                            self.debug.log(\"[DRM][PM_21Jan2015] 'encrypted' event\");\n                            if (event.initData) {\n                                var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_NEED_KEY,\n                                        new MediaPlayer.vo.protection.NeedKey(initData, \"cenc\"));\n                            }\n                            break;\n                        case \"waitingforkey\":\n                            self.debug.log(\"[DRM][PM_21Jan2015] 'waitingforkey' event\");\n                            if (this.session !== null && this.session.usable) {\n                                // Widevine CDM doesn't raised error if keys don't match\n                                // The unique way to check if the received license is valid is to track this event and raise an error\n                                // this.session = null;\n                                this.session.usable = false;\n                                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ERROR,\n                                    new MediaPlayer.vo.protection.KeyError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_ENCRYPTED, \"Media is encrypted and no valid key is available\"));\n                            }\n                        break;\n                    }\n                }\n            };\n        },\n\n        removeSession = function(token) {\n            // Remove from our session list\n            for (var i = 0; i < sessions.length; i++) {\n                if (sessions[i] === token) {\n                    sessions.splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        // Function to create our session token objects which manage the EME\n        // MediaKeySession and session-specific event handler\n        createSessionToken = function(session, initData, sessionType) {\n            var self = this,\n                setSessionUsable = function (session, usable) {\n                    for (var i = 0; i < sessions.length; i++) {\n                        if (sessions[i].session === session) {\n                            sessions[i].usable = usable;\n                            break;\n                        }\n                    }\n                };\n\n            var token = { // Implements MediaPlayer.vo.protection.SessionToken\n                session: session,\n                initData: initData,\n                usable: false,\n\n                // This is our main event handler for all desired MediaKeySession events\n                // These events are translated into our API-independent versions of the\n                // same events\n                handleEvent: function(event) {\n\n                    switch (event.type) {\n\n                        case \"keystatuseschange\":\n                            self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_STATUSES_CHANGED, this);\n\n                            event.target.keyStatuses.forEach(function() {\n                                // has Edge and Chrome implement different version of keystatues, param are not on same order\n                                var status, keyId;\n                                if (arguments && arguments.length > 0) {\n                                    if (arguments[0]) {\n                                        if (typeof arguments[0] === 'string') {\n                                            status = arguments[0];\n                                        } else {\n                                            keyId = arguments[0];\n                                        }\n                                    }\n\n                                    if (arguments[1]) {\n                                        if (typeof arguments[1] === 'string') {\n                                            status = arguments[1];\n                                        } else {\n                                            keyId = arguments[1];\n                                        }\n                                    }\n                                }\n                                self.debug.log(\"[DRM][PM_21Jan2015] status = \" + status + \" for KID \" + arrayToHexString(new Uint8Array(keyId)));\n                                switch (status) {\n                                    case \"expired\":\n                                        setSessionUsable(event.target, false);\n                                        self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_STATUSES_CHANGED, null,\n                                            new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_EXPIRED, \"License has expired\", null));\n                                        break;\n                                    case \"output-restricted\":\n                                        setSessionUsable(event.target, false);\n                                        self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_STATUSES_CHANGED, null,\n                                            new MediaPlayer.vo.Error(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR_OUTPUT,\n                                                                     \"There is no available output device with the required characteristics for the content protection system\",\n                                                                     null));\n                                        break;\n                                    case \"usable\":\n                                        setSessionUsable(event.target, true);\n                                        // Check 'waitinfforkey' event in case the received license does not apply to current content\n                                        videoElement.addEventListener(\"waitingforkey\", eventHandler);\n                                        break;\n\n                                    //case \"status-pending\":\n                                    default:\n                                        self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_STATUSES_CHANGED,\n                                            {status:status, keyId: keyId});\n                                }\n                            });\n\n                            break;\n\n                        case \"message\":\n                            self.debug.log(\"[DRM][PM_21Jan2015] 'message' event: \", event);\n                            var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                            self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_MESSAGE,\n                                    new MediaPlayer.vo.protection.KeyMessage(this, message, undefined, event.messageType));\n                            break;\n                    }\n                },\n\n                getSessionID: function() {\n                    return this.session.sessionId;\n                },\n\n                getExpirationTime: function() {\n                    return this.session.expiration;\n                },\n\n                getKeyStatuses: function() {\n                    return this.session.keyStatuses;\n                },\n\n                getSessionType: function() {\n                    return sessionType;\n                }\n            };\n\n            // Add all event listeners\n            session.addEventListener(\"keystatuseschange\", token);\n            session.addEventListener(\"message\", token);\n\n            // Register callback for session closed Promise\n            session.closed.then(function () {\n                removeSession(token);\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CLOSED,\n                        token.getSessionID());\n            });\n\n            // Add to our session list\n            sessions.push(token);\n\n            return token;\n        };\n\n    return {\n        system: undefined,\n        notify: undefined,\n        subscribe: undefined,\n        unsubscribe: undefined,\n        protectionExt: undefined,\n        keySystem: null,\n        config: null,\n        debug: null,\n\n        setup: function() {\n            eventHandler = createEventHandler.call(this);\n        },\n\n        /**\n         * Initialize this protection model\n         */\n        init: function() {\n            eventHandler.session = null;\n        },\n\n        teardown: function() {\n            var session,\n                nbSessions = sessions.length,\n                i,\n                self = this;\n\n            this.debug.log(\"[DRM][PM_21Jan2015] Teardown\");\n\n            if (!this.config.getParam(\"Protection.licensePersistence\", \"boolean\", false)) {\n                // If license persistence is not enabled, then close sessions and release/delete MediaKeys instance\n                // Called when we are done closing a session.\n                var done = function(session) {\n                    self.debug.log(\"[DRM][PM_21Jan2015] Session closed\");\n                    removeSession(session);\n                    if (i >= (nbSessions - 1)) {\n                        mediaKeys = null;\n                        self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE);\n                    }\n                };\n\n                if (nbSessions === 0) {\n                    mediaKeys = null;\n                    this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE);\n                    return;\n                }\n\n                for (i = 0; i < nbSessions; i++) {\n                    session = sessions[i];\n                    (function (s) {\n                        self.debug.log(\"[DRM][PM_21Jan2015] Close session \" + session.getSessionID());\n                        // Override closed promise resolver\n                        session.session.closed.then(function () {\n                            done(s);\n                        });\n                        // Close the session and handle errors, otherwise promise resolver above will be called\n                        closeKeySessionInternal(session).catch(function () {\n                            done(s);\n                        });\n                    })(session);\n                }\n            } else {\n                // If license persistence is enabled, then keep usable sessions data and MediaKeys instance\n                for (i = 0; i < sessions.length; i++) {\n                    session = sessions[i];\n                    if (!session.usable) {\n                       sessions.splice(i, 1);\n                       i--;\n                    }\n                }\n                this.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_TEARDOWN_COMPLETE);\n            }\n        },\n\n        getAllInitData: function() {\n            var retVal = [];\n            for (var i = 0; i < sessions.length; i++) {\n                retVal.push(sessions[i].initData);\n            }\n            return retVal;\n        },\n\n        requestKeySystemAccess: function(ksConfigurations) {\n            requestKeySystemAccessInternal.call(this, ksConfigurations, 0);\n        },\n\n        selectKeySystem: function(keySystemAccess) {\n\n            var self = this;\n\n            self.debug.log(\"[DRM][PM_21Jan2015] Select key system, create new MediaKeys\");\n\n            // In case of license persistence we do not reset MediaKeys instance\n            if (mediaKeys !== null) {\n                self.debug.log(\"[DRM][PM_21Jan2015] MediaKeys already created\");\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED);\n                return;\n            }\n\n            keySystemAccess.mksa.createMediaKeys().then(function(mkeys) {\n                self.keySystem = keySystemAccess.keySystem;\n                mediaKeys = mkeys;\n                if (videoElement) {\n                    videoElement.setMediaKeys(mediaKeys).then(\n                        function () {\n                            var serverCertificate = self.keySystem.getServerCertificate();\n                            if (serverCertificate) {\n                                // The server certificate must be set before creating any MediaKeySession\n                                self.setServerCertificate(serverCertificate).then(function() {\n                                    self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED);\n                                    videoElement.addEventListener(\"encrypted\", eventHandler);\n                                });\n                            } else {\n                                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED);\n                                videoElement.addEventListener(\"encrypted\", eventHandler);\n                            }\n                        }\n                    );\n                }\n            }).catch(function() {\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SYSTEM_SELECTED,\n                        null, \"Error selecting keys system (\" + keySystemAccess.keySystem.systemString + \")! Could not create MediaKeys -- TODO\");\n\n            });\n        },\n\n        setMediaElement: function(mediaElement) {\n            var self = this,\n                deferred = Q.defer();\n\n            if (videoElement === mediaElement) {\n                deferred.resolve();\n                return deferred.promise;\n            }\n\n            if (videoElement) {\n                videoElement.removeEventListener(\"encrypted\", eventHandler);\n                videoElement.removeEventListener(\"waitingforkey\", eventHandler);\n                if (videoElement.setMediaKeys) {\n                    videoElement.setMediaKeys(null).then(\n                        function () {\n                            self.debug.log(\"[DRM][PM_21Jan2015] Successfully detached MediaKeys from video element\");\n                            deferred.resolve();\n                        },\n                        function (e) {\n                            self.debug.error(\"[DRM][PM_21Jan2015] Failed to detach MediaKeys from video element: \" + e);\n                            deferred.resolve();\n                        }\n                    );\n                } else {\n                    deferred.resolve();\n                }\n            }\n\n            videoElement = mediaElement;\n\n            if (videoElement) {\n                if (mediaKeys && videoElement.setMediaKeys) {\n                    videoElement.addEventListener(\"encrypted\", eventHandler);\n                    videoElement.setMediaKeys(mediaKeys);\n                }\n            }\n\n            return deferred.promise;\n        },\n\n        setServerCertificate: function(serverCertificate) {\n            if (!this.keySystem || !mediaKeys) {\n                throw new Error(\"Can not set server certificate until you have selected a key system\");\n            }\n\n            this.debug.log(\"[DRM][PM_21Jan2015] Set server certificate\");\n\n            var self = this,\n                deferred = Q.defer();\n\n            mediaKeys.setServerCertificate(serverCertificate).then(function() {\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_SERVER_CERTIFICATE_UPDATED);\n                deferred.resolve();\n            }).catch(function(error) {\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_SERVER_CERTIFICATE_UPDATED,\n                        null, \"Error updating server certificate -- \" + error.name);\n                deferred.reject();\n            });\n\n            return deferred.promise;\n        },\n\n        createKeySession: function(initData, sessionType) {\n\n            if (!this.keySystem || !mediaKeys) {\n                throw new Error(\"Can not create sessions until you have selected a key system\");\n            }\n\n            this.debug.log(\"[DRM][PM_21Jan2015] Create key session, type = \" + sessionType);\n            this.debug.log(\"[DRM][PM_21Jan2015] initData = \" + String.fromCharCode.apply(null, new Uint8Array(initData)));\n\n            var session = mediaKeys.createSession(sessionType);\n            var sessionToken = createSessionToken.call(this, session, initData, sessionType);\n\n            // Generate initial key request\n            var self = this;\n            session.generateRequest(\"cenc\", initData).then(function() {\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, sessionToken);\n            }).catch(function(ex) {\n                removeSession(sessionToken);\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, null, {\n                    reason: \"Failed to generate key request\",\n                    error: new MediaPlayer.vo.Error(ex.code, ex.name, ex.message)\n                });\n            });\n        },\n\n        updateKeySession: function(sessionToken, message) {\n\n            var session = sessionToken.session;\n\n            // Send our request to the key session\n            var self = this;\n\n            self.debug.log(\"[DRM][PM_21Jan2015] Update key session. SessionID = \" + session.sessionId);\n\n            if (this.protectionExt.isClearKey(this.keySystem)) {\n                message = message.toJWK();\n            }\n            session.update(message)\n            .then(function() {\n                eventHandler.session = sessionToken;\n            })\n            .catch(function (ex) {\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_ERROR,\n                    new MediaPlayer.vo.protection.KeyError(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_KEYERR, \"Error while providing license to the CDM\", ex));\n            });\n        },\n\n        loadKeySession: function(sessionID) {\n            if (!this.keySystem || !mediaKeys) {\n                throw new Error(\"Can not load sessions until you have selected a key system\");\n            }\n\n            this.debug.log(\"[DRM][PM_21Jan2015] Load key session. SessionID = \" + sessionID);\n\n            var session = mediaKeys.createSession();\n\n            // Load persisted session data into our newly created session object\n            var self = this;\n            session.load(sessionID).then(function (success) {\n                if (success) {\n                    var sessionToken = createSessionToken.call(this, session);\n                    self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, sessionToken);\n                } else {\n                    self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, null, {\n                        reason: \"Failed to load session \" + sessionID,\n                        error: null\n                    });\n                }\n            }).catch(function (ex) {\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CREATED, {\n                    reason: \"Failed to load session \" + sessionID,\n                    error: new MediaPlayer.vo.Error(ex.code, ex.name, ex.message)\n                });\n            });\n        },\n\n        removeKeySession: function(sessionToken) {\n\n            var session = sessionToken.session;\n\n            this.debug.log(\"[DRM][PM_21Jan2015] Remove key session. SessionID = \" + sessionToken.getSessionID());\n\n            var self = this;\n            session.remove().then(function () {\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_REMOVED,\n                    sessionToken.getSessionID());\n            }, function (error) {\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_REMOVED,\n                    null, \"Error removing session (\" + sessionToken.getSessionID() + \"). \" + error.name);\n            });\n        },\n\n        closeKeySession: function(sessionToken) {\n\n            this.debug.log(\"[DRM][PM_21Jan2015] Close key session. SessionID = \" + sessionToken.getSessionID());\n\n            // Send our request to the key session\n            var self = this;\n            closeKeySessionInternal(sessionToken).catch(function(error) {\n                removeSession(sessionToken);\n                self.notify(MediaPlayer.models.ProtectionModel.eventList.ENAME_KEY_SESSION_CLOSED,\n                        null, \"Error closing session (\" + sessionToken.getSessionID() + \") \" + error.name);\n            });\n        },\n\n        checkIfEncrypted: function() { /* Not supported */ }\n    };\n};\n\n/**\n * Detects presence of EME v21Jan2015 APIs\n *\n * @param videoElement {HTMLMediaElement} the media element that will be\n * used for detecting API support\n * @returns {Boolean} true if support was detected, false otherwise\n */\nMediaPlayer.models.ProtectionModel_21Jan2015.detect = function(videoElement) {\n    if (videoElement.onencrypted === undefined ||\n        videoElement.mediaKeys === undefined) {\n        return false;\n    }\n\n    if (window.MSMediaKeys) {\n        return false;\n    }\n\n    // Do not check requestMediaKeySystemAccess function since it can be disable on insecure origins\n    // if (navigator.requestMediaKeySystemAccess === undefined ||\n    //     typeof navigator.requestMediaKeySystemAccess !== 'function') {\n    //     return false;\n    // }\n\n    return true;\n};\n\nMediaPlayer.models.ProtectionModel_21Jan2015.prototype = {\n    constructor: MediaPlayer.models.ProtectionModel_21Jan2015\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Defines the public interface for all Key Systems (DRMs) supported\n * by the player.\n *\n * @interface\n */\n\nMediaPlayer.dependencies.protection.KeySystem = function() {};\n\n/**\n * Key system name string (e.g. 'org.w3.clearkey')\n *\n * @instance\n * @name systemString\n * @memberof MediaPlayer.dependencies.protection.KeySystem\n * @readonly\n * @type String\n */\n\n/**\n * Key system UUID in the form '01234567-89ab-cdef-0123-456789abcdef'\n *\n * @instance\n * @name uuid\n * @memberof MediaPlayer.dependencies.protection.KeySystem\n * @readonly\n * @type String\n */\n\n/**\n * The scheme ID URI for this key system in the form\n * 'urn:uuid:01234567-89ab-cdef-0123-456789abcdef' as used\n * in DASH ContentProtection elements\n *\n * @instance\n * @name schemeIdURI\n * @memberof MediaPlayer.dependencies.protection.KeySystem\n * @readonly\n * @type String\n */\n\n\n/**\n * The sessionType used for the CDM\n *\n * @instance\n * @name sessionType\n * @memberof MediaPlayer.dependencies.protection.KeySystem\n * @readonly\n * @type String\n */\n\n/**\n * Parse DRM-specific init data from the ContentProtection\n * element.\n *\n * @function\n * @name MediaPlayer.dependencies.protection.KeySystem#getInitData\n * @param {Object} contentProtection the json-style contentProtection\n * object representing the ContentProtection element parsed from the\n * MPD XML document.\n * @returns {ArrayBuffer} EME initialization data\n */\n\n/**\n * For some key systems, the CDM message contains HTTP headers that\n * can be parsed by the application and attached to the license request.\n * Returns a header object with key/value pairs as object properties/values\n *\n * @function\n * @name MediaPlayer.dependencies.protection.KeySystem#getRequestHeadersFromMessage\n * @param {ArrayBuffer} message the CDM message\n * @returns {?Object} headers object with header names as the object property\n * names and header values as the corresponding object property values.  Return\n * null if no such headers were found or if the mechanism is not supported by\n * this key system\n */\n\n/**\n * For some key systems, the CDM message contains more than just the\n * license request data.  This method will pull the license request from\n * the CDM message, if necessary.\n *\n * @function\n * @name MediaPlayer.dependencies.protection.KeySystem#getKeySystemConfigurations\n * @param {object} videoInfo contains relevant info about video (mimeType, codec)\n * @param {object} audioInfo contains relevant info about audio (mimeType, codec)\n * @param {String} sessionType the session type like \"temporary\" or \"persistent-license\"\n * @returns {Array} list of {MediaPlayer.vo.protection.KeySystemConfiguration}\n *\n\n * @function\n * @name MediaPlayer.dependencies.protection.KeySystem#getLicenseRequestFromMessage\n * @param message {ArrayBuffer} the CDM message\n * @returns {Uint8Array} the license request message as will be passed to\n * XMLHttpRequest.send()\n */\n\n/**\n * Returns a license server URL as parsed from key system initialization data (PSSH).\n *\n * @function\n * @name MediaPlayer.dependencies.protection.KeySystem#getLicenseServerURLFromInitData\n * @param initData {ArrayBuffer} the initialization data.  This is just the \"Data\" field\n * from the PSSH box definition\n * @returns {?string} The license server URL or null if URL is not available in initData\n */\n\n/**\n * Returns specific CDM (custom) data.\n *\n * @function\n * @name MediaPlayer.dependencies.protection.KeySystem#getCDMData\n * @returns {ArrayBuffer} the CDM (custom) data\n */\n\n /**\n * Returns the server certificate.\n *\n * @function\n * @name MediaPlayer.dependencies.protection.KeySystem#getServerCertificate\n * @returns {ArrayBuffer} the server certificate\n */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Adobe Access DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\nMediaPlayer.dependencies.protection.KeySystem_Access = function() {\n    \"use strict\";\n};\n\nMediaPlayer.dependencies.protection.KeySystem_Access.prototype = {\n    constructor: MediaPlayer.dependencies.protection.KeySystem_Access\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nMediaPlayer.dependencies.protection.KeySystem_ClearKey = function() {\n    \"use strict\";\n\n    var keySystemStr = \"org.w3.clearkey\",\n        keySystemUUID = \"1077efec-c0b2-4d02-ace3-3c1e52e2fb4b\",\n        protData;\n\n    return {\n\n        system: undefined,\n        schemeIdURI: \"urn:uuid:\" + keySystemUUID,\n        systemString: keySystemStr,\n        uuid: keySystemUUID,\n        sessionType:\"temporary\",\n\n        init: function(protectionData){\n            protData = protectionData;\n        },\n\n        getInitData: MediaPlayer.dependencies.protection.CommonEncryption.parseInitDataFromContentProtection,\n\n        getKeySystemConfigurations: MediaPlayer.dependencies.protection.CommonEncryption.getKeySystemConfigurations,\n\n        getRequestHeadersFromMessage: function(/*message*/) { return null; },\n\n        getLicenseRequestFromMessage: function(message) { return new Uint8Array(message); },\n\n        getLicenseServerURLFromInitData: function(/*initData*/) { return null; },\n\n        getCDMData: function () {return null;},\n\n        getServerCertificate: function () { return null; },\n    };\n};\n\nMediaPlayer.dependencies.protection.KeySystem_ClearKey.prototype = {\n    constructor: MediaPlayer.dependencies.protection.KeySystem_ClearKey\n};\n\n/**\n * Returns desired clearkeys (as specified in the CDM message) from protection data\n *\n * @param {MediaPlayer.vo.protection.ProtectionData} protData the protection data\n * @param {ArrayBuffer} message the ClearKey CDM message\n * @returns {MediaPlayer.vo.protection.ClearKeyKeySet} the key set or null if none found\n * @throws {Error} if a keyID specified in the CDM message was not found in the\n * protection data\n * @memberof MediaPlayer.dependencies.protection.KeySystem_ClearKey\n */\nMediaPlayer.dependencies.protection.KeySystem_ClearKey.getClearKeysFromProtectionData = function(protData, message) {\n    var clearkeySet = null;\n    if (protData) {\n        // ClearKey is the only system that does not require a license server URL, so we\n        // handle it here when keys are specified in protection data\n        var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n        var keyPairs = [];\n        for (var i = 0; i < jsonMsg.kids.length; i++) {\n            var clearkeyID = jsonMsg.kids[i],\n                    clearkey = (protData.clearkeys.hasOwnProperty(clearkeyID)) ? protData.clearkeys[clearkeyID] : null;\n            if (!clearkey) {\n                throw new Error(\"[DRM] ClearKey keyID (\" + clearkeyID + \") is not known!\");\n            }\n            // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n            keyPairs.push(new MediaPlayer.vo.protection.KeyPair(clearkeyID, clearkey));\n        }\n        clearkeySet = new MediaPlayer.vo.protection.ClearKeyKeySet(keyPairs);\n    }\n    return clearkeySet;\n};\n\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\nMediaPlayer.dependencies.protection.KeySystem_PlayReady = function() {\n    \"use strict\";\n\n    var keySystemStr = \"com.microsoft.playready\",\n        keySystemUUID = \"9a04f079-9840-4286-ab92-e65be0885f95\",\n        PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>',\n        protData,\n\n        getRequestHeaders = function(message) {\n            var msg,\n                xmlDoc,\n                headers = {},\n                data = (message instanceof ArrayBuffer) ? message : message.buffer,\n                dataview = MediaPlayer.utils.isUTF16(new Uint8Array(data)) ? new Uint16Array(data) : new Uint8Array(data),\n                headerNameList,\n                headerValueList,\n                i = 0;\n\n            msg = String.fromCharCode.apply(null, dataview);\n            xmlDoc = this.domParser.createXmlTree(msg);\n\n            headerNameList = xmlDoc.getElementsByTagName(\"name\");\n            headerValueList = xmlDoc.getElementsByTagName(\"value\");\n            for (i = 0; i < headerNameList.length; i += 1) {\n                headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n            }\n            // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n            // this is NOT w3c conform and license servers may reject the request!\n            // -> rename it to proper w3c definition!\n            if (headers.hasOwnProperty('Content')) {\n                headers['Content-Type'] = headers.Content;\n                delete headers.Content;\n            }\n\n            // Some versions of the PlayReady CDM do not return headers at all, which means the Content-Type\n            // does not get set and most license servers will just refuse the license request.\n            // -> set it manually if is missing.\n            if (!headers.hasOwnProperty('Content-Type')) {\n                headers['Content-Type'] = 'text/xml; charset=utf-8';\n            }\n\n            return headers;\n        },\n\n        getLicenseRequest = function(message) {\n            var msg,\n                xmlDoc,\n                licenseRequest = null,\n                data = (message instanceof ArrayBuffer) ? message : message.buffer,\n                dataview = MediaPlayer.utils.isUTF16(new Uint8Array(data)) ? new Uint16Array(data) : new Uint8Array(data),\n                Challenge;\n\n            msg = String.fromCharCode.apply(null, dataview);\n\n            xmlDoc = this.domParser.createXmlTree(msg);\n\n            if (xmlDoc.getElementsByTagName(\"Challenge\")[0]) {\n                Challenge = xmlDoc.getElementsByTagName(\"Challenge\")[0].childNodes[0].nodeValue;\n                if (Challenge) {\n                    licenseRequest = BASE64.decode(Challenge);\n                }\n            }\n            if (!licenseRequest) {\n                // Some versions of the PlayReady CDM do not return the Microsoft-specified XML structure\n                // but just return the raw license request. If we can't extract the license request, let's\n                // assume it is the latter and just return the whole message.\n                licenseRequest = msg;\n            }\n            return licenseRequest;\n        },\n\n        getLicenseServerURL = function(initData) {\n            if (initData) {\n                var data = new DataView(initData),\n                        numRecords = data.getUint16(4, true),\n                        offset = 6,\n                        i = 0,\n                        recordType,\n                        recordLength,\n                        recordData,\n                        record,\n                        xmlDoc,\n                        laurl,\n                        luiurl;\n\n                for (i = 0; i < numRecords; i++) {\n                    // Parse the PlayReady Record header\n                    recordType = data.getUint16(offset, true);\n                    offset += 2;\n                    recordLength = data.getUint16(offset, true);\n                    offset += 2;\n                    if (recordType !== 0x0001) {\n                        offset += recordLength;\n                        continue;\n                    }\n\n                    recordData = initData.slice(offset, offset+recordLength);\n                    record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                    xmlDoc = this.domParser.createXmlTree(record);\n\n                    // First try <LA_URL>\n                    if (xmlDoc.getElementsByTagName(\"LA_URL\")[0]) {\n                        laurl = xmlDoc.getElementsByTagName(\"LA_URL\")[0].childNodes[0].nodeValue;\n                        if (laurl) {\n                            return laurl;\n                        }\n                    }\n\n                    // Optionally, try <LUI_URL>\n                    if (xmlDoc.getElementsByTagName(\"LUI_URL\")[0]) {\n                        luiurl = xmlDoc.getElementsByTagName(\"LUI_URL\")[0].childNodes[0].nodeValue;\n                        if (luiurl) {\n                            return luiurl;\n                        }\n                    }\n                }\n            }\n\n            return null;\n\n        },\n\n        parseInitDataFromContentProtection = function(cpData) {\n            // * desc@ getInitData\n            // *   generate PSSH data from PROHeader defined in MPD file\n            // *   PSSH format:\n            // *   size (4)\n            // *   box type(PSSH) (8)\n            // *   Protection SystemID (16)\n            // *   protection system data size (4) - length of decoded PROHeader\n            // *   decoded PROHeader data from MPD file\n            var byteCursor = 0,\n                PROSize,\n                PSSHSize,\n                PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00 ]), //'PSSH' 8 bytes\n                playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]),\n                uint8arraydecodedPROHeader = null,\n                PSSHBoxBuffer,\n                PSSHBox,\n                PSSHData;\n\n            // Handle common encryption PSSH\n            if (\"pssh\" in cpData) {\n                return MediaPlayer.dependencies.protection.CommonEncryption.parseInitDataFromContentProtection(cpData);\n            }\n            // Handle native MS PlayReady ContentProtection elements\n            if (\"pro\" in cpData) {\n                uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n            }\n            else if (\"prheader\" in cpData) {\n                uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n            }\n            else {\n                return null;\n            }\n\n            PROSize = uint8arraydecodedPROHeader.length;\n            PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n            PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n            PSSHBox = new Uint8Array(PSSHBoxBuffer);\n            PSSHData = new DataView(PSSHBoxBuffer);\n\n            PSSHData.setUint32(byteCursor, PSSHSize);\n            byteCursor += 0x4;\n\n            PSSHBox.set(PSSHBoxType, byteCursor);\n            byteCursor += PSSHBoxType.length;\n\n            PSSHBox.set(playreadySystemID, byteCursor);\n            byteCursor += playreadySystemID.length;\n\n            PSSHData.setUint32(byteCursor, PROSize);\n            byteCursor += 0x4;\n\n            PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n            byteCursor += PROSize;\n\n            return PSSHBox.buffer;\n        },\n\n        doGetCDMData = function () {\n            var customData,\n                cdmData,\n                cdmDataBytes,\n                i;\n\n            if (protData && protData.cdmData) {\n\n                // Convert custom data into multibyte string\n                customData = [];\n                for (i = 0; i < protData.cdmData.length; ++i) {\n                    customData.push(protData.cdmData.charCodeAt(i));\n                    customData.push(0);\n                }\n                customData = String.fromCharCode.apply(null, customData);\n\n                // Encode in Base 64 the custom data string\n                customData = BASE64.encode(customData);\n\n                // Initialize CDM data with Base 64 encoded custom data\n                // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n                cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n                // Convert CDM data into multibyte characters\n                cdmDataBytes = [];\n                for (i = 0; i < cdmData.length; ++i) {\n                    cdmDataBytes.push(cdmData.charCodeAt(i));\n                    cdmDataBytes.push(0);\n                }\n\n                return new Uint8Array(cdmDataBytes).buffer;\n            }\n\n            return null;\n        };\n\n    return {\n\n        schemeIdURI: \"urn:uuid:\" + keySystemUUID,\n        systemString: keySystemStr,\n        uuid: keySystemUUID,\n        notify: undefined,\n        subscribe: undefined,\n        unsubscribe: undefined,\n        domParser: undefined,\n        /*sessionType:\"persistent-license\",*/\n        sessionType:\"temporary\",\n\n        init: function(protectionData){\n            if(protectionData){\n                protData = protectionData;\n                if(protData.sessionType){\n                    this.sessionType = protData.sessionType;\n                }\n            }\n        },\n\n        getInitData: parseInitDataFromContentProtection,\n\n        getKeySystemConfigurations: MediaPlayer.dependencies.protection.CommonEncryption.getKeySystemConfigurations,\n\n        getRequestHeadersFromMessage: getRequestHeaders,\n\n        getLicenseRequestFromMessage: getLicenseRequest,\n\n        getLicenseServerURLFromInitData: getLicenseServerURL,\n\n        getCDMData: doGetCDMData,\n\n        getServerCertificate: function () { return null; },\n\n    };\n};\n\nMediaPlayer.dependencies.protection.KeySystem_PlayReady.prototype = {\n    constructor: MediaPlayer.dependencies.protection.KeySystem_PlayReady\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\nMediaPlayer.dependencies.protection.KeySystem_Widevine = function() {\n    \"use strict\";\n\n    var keySystemStr = \"com.widevine.alpha\",\n        keySystemUUID = \"edef8ba9-79d6-4ace-a3c8-27dcd51d21ed\",\n        protData = null,\n\n        doGetInitData = function(cpData) {\n            return MediaPlayer.dependencies.protection.CommonEncryption.parseInitDataFromContentProtection(cpData);\n        },\n\n        doGetKeySystemConfigurations = function(videoCodec, audioCodec, sessionType) {\n            var ksConfigurations = MediaPlayer.dependencies.protection.CommonEncryption.getKeySystemConfigurations(videoCodec, audioCodec, sessionType);\n            if (protData) {\n                if (protData.audioRobustness) {\n                    ksConfigurations[0].audioCapabilities[0].robustness = protData.audioRobustness;\n                }\n                if (protData.videoRobustness) {\n                    ksConfigurations[0].videoCapabilities[0].robustness = protData.videoRobustness;\n                }\n            }\n            return ksConfigurations;\n        },\n\n        doGetServerCertificate = function() {\n            if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                return BASE64.decodeArray(protData.serverCertificate).buffer;\n            }\n            return null;\n        };\n\n    return {\n\n        schemeIdURI: \"urn:uuid:\" + keySystemUUID,\n        systemString: keySystemStr,\n        uuid: keySystemUUID,\n        sessionType: \"temporary\",\n\n        init: function(protectionData) {\n            if (protectionData) {\n                protData = protectionData;\n                if (protData.sessionType) {\n                    this.sessionType = protData.sessionType;\n                }\n            }\n        },\n\n        getInitData: doGetInitData,\n\n        getKeySystemConfigurations: doGetKeySystemConfigurations,\n\n        getRequestHeadersFromMessage: function(/*message*/) { return null; },\n\n        getLicenseRequestFromMessage: function(message) { return new Uint8Array(message); },\n\n        getLicenseServerURLFromInitData: function(/*initData*/) { return null; },\n\n        getCDMData: function() { return null; },\n\n        getServerCertificate: doGetServerCertificate\n\n    };\n};\n\nMediaPlayer.dependencies.protection.KeySystem_Widevine.prototype = {\n    constructor: MediaPlayer.dependencies.protection.KeySystem_Widevine\n};","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements MediaPlayer.dependencies.protection.servers.LicenseServer\n * @class\n */\nMediaPlayer.dependencies.protection.servers.ClearKey = function() {\n    \"use strict\";\n\n    return {\n\n        getServerURLFromMessage: function(url, message /*, messageType*/ ) {\n            // Build ClearKey server query string\n            var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message))),\n                i = 0;\n            url += \"/?\";\n            for (i = 0; i < jsonMsg.kids.length; i++) {\n                url += jsonMsg.kids[i] + \"&\";\n            }\n            url = url.substring(0, url.length - 1);\n            return url;\n        },\n\n        getHTTPMethod: function( /*messageType*/ ) {\n            return 'GET';\n        },\n\n        getResponseType: function( /*keySystemStr*/ ) {\n            return 'json';\n        },\n\n        getLicenseMessage: function(serverResponse /*, keySystemStr, messageType*/ ) {\n            var i, keyPairs = [],\n                keypair,\n                keyid,\n                key;\n            if (!serverResponse.hasOwnProperty(\"keys\")) {\n                return null;\n            }\n\n            for (i = 0; i < serverResponse.keys.length; i++) {\n                keypair = serverResponse.keys[i];\n                keyid = keypair.kid.replace(/=/g, \"\");\n                key = keypair.k.replace(/=/g, \"\");\n                keyPairs.push(new MediaPlayer.vo.protection.KeyPair(keyid, key));\n            }\n            return new MediaPlayer.vo.protection.ClearKeyKeySet(keyPairs);\n        },\n\n        getErrorResponse: function(serverResponse/*, keySystemStr, messageType*/) {\n            return {\n                code: 0,\n                name: \"UnknownError\",\n                message: String.fromCharCode.apply(null, new Uint8Array(serverResponse))\n            };\n        }\n    };\n};\n\nMediaPlayer.dependencies.protection.servers.ClearKey.prototype = {\n    constructor: MediaPlayer.dependencies.protection.servers.ClearKey\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements MediaPlayer.dependencies.protection.servers.LicenseServer\n * @class\n */\nMediaPlayer.dependencies.protection.servers.DRMToday = function() {\n    \"use strict\";\n\n    var keySystems = {\n        \"com.widevine.alpha\": {\n            responseType: \"json\",\n            getLicenseMessage: function(response) {\n                return BASE64.decodeArray(response.license);\n            },\n            getErrorResponse: function(response) {\n                return response;\n            }\n        },\n        \"com.microsoft.playready\": {\n            responseType: \"arraybuffer\",\n            getLicenseMessage: function(response) {\n                return response;\n            },\n            getErrorResponse: function(response) {\n                return String.fromCharCode.apply(null, new Uint8Array(response));\n            }\n        }\n    };\n\n    return {\n\n        getServerURLFromMessage: function(url /*, message, messageType*/) { return url; },\n\n        getHTTPMethod: function(/*messageType*/) { return 'POST'; },\n\n        getResponseType: function(keySystemStr/*, messageType*/) {\n            return keySystems[keySystemStr].responseType;\n        },\n\n        getLicenseMessage: function(serverResponse, keySystemStr/*, messageType*/) {\n            return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n        },\n\n        getErrorResponse: function(serverResponse, keySystemStr/*, messageType*/) {\n            return {\n                code: 0,\n                name: \"UnknownError\",\n                message: keySystems[keySystemStr].getErrorResponse(serverResponse)\n            };\n        }\n    };\n};\n\nMediaPlayer.dependencies.protection.servers.DRMToday.prototype = {\n    constructor: MediaPlayer.dependencies.protection.servers.DRMToday\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Defines the public interface for license server implementations supported\n * by the player.\n *\n * Different license servers have different requirements regarding the methods\n * used to request DRM licenses.  Things like request headers, license response\n * formats (for both error and success cases) need to be customized for a\n * specific server implementation\n *\n * License servers handle requests for more than just initial license retrieval.\n * Each API takes a parameter which describes the message type as supported by\n * the Encrypted Media Extensions.\n *\n * @interface\n */\n\nMediaPlayer.dependencies.protection.servers.LicenseServer = function() {};\n\n/**\n * Returns a new or updated license server URL based on the requirements of the\n * license server and possibly from information passed in the CDM license message\n *\n * @function\n * @name MediaPlayer.dependencies.protection.servers.LicenseServer#getServerURLFromMessage\n * @param {?string} url the initially established URL (from ProtectionData or initData)\n * @param {ArrayBuffer} message the CDM message which may be needed to generate the license\n * requests URL\n * @param {String} messageType the message type associated with this request.  Supported\n * message types can be found {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n * @returns {string} the URL to use in license requests\n */\n\n/**\n * Returns the HTTP method to be used (i.e. \"GET\", \"POST\", etc.) in\n * XMLHttpRequest.open().\n *\n * @function\n * @name MediaPlayer.dependencies.protection.servers.LicenseServer#getHTTPMethod\n * @param {String} messageType the message type associated with this request.  Supported\n * message types can be found {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n * @returns {string} the HTTP method\n */\n\n/**\n * Returns the response type to set for XMLHttpRequest.responseType\n *\n * @function\n * @name MediaPlayer.dependencies.protection.servers.LicenseServer#getResponseType\n * @param {string} keySystemStr the key system string representing the key system\n * associated with a license request.  Multi-DRM license servers may have different\n * response types depending on the key system.\n * @param {String} messageType the message type associated with this request.  Supported\n * message types can be found {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n * @returns {string} the response type\n */\n\n/**\n * Parses the license server response for any message intended for\n * the CDM.\n *\n * @function\n * @name MediaPlayer.dependencies.protection.servers.LicenseServer#getLicenseMessage\n * @param {Object} serverResponse the response as returned in XMLHttpRequest.response\n * @param {string} keySystemStr the key system string representing the key system\n * associated with a license request.\n * @param {String} messageType the message type associated with this request.  Supported\n * message types can be found {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n * @returns {ArrayBuffer} message that will be sent to the CDM or null if no CDM message\n * was present in the response.\n */\n\n/**\n * Parses the license server response during error conditions and returns a\n * string to display for debugging purposes\n *\n * @function\n * @name MediaPlayer.dependencies.protection.servers.LicenseServer#getErrorResponse\n * @param {Object} serverResponse the server response\n * @param {String} messageType the message type associated with this request.  Supported\n * message types can be found {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n * @returns {string} an error message that indicates the reason for the failure\n */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements MediaPlayer.dependencies.protection.servers.LicenseServer\n * @class\n */\nMediaPlayer.dependencies.protection.servers.PlayReady = function() {\n    \"use strict\";\n\n    var decodeUtf8 = function(arrayBuffer) {\n            var result = \"\",\n                i = 0,\n                c = 0,\n                c2 = 0,\n                c3 = 0,\n                data = new Uint8Array(arrayBuffer);\n\n            // If we have a BOM skip it\n            if (data.length >= 3 && data[0] === 0xef && data[1] === 0xbb && data[2] === 0xbf) {\n                i = 3;\n            }\n\n            while (i < data.length) {\n                c = data[i];\n\n                if (c < 128) {\n                    result += String.fromCharCode(c);\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    if (i + 1 >= data.length) {\n                        throw \"UTF-8 Decode failed. Two byte character was truncated.\";\n                    }\n                    c2 = data[i + 1];\n                    result += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                    i += 2;\n                } else {\n                    if (i + 2 >= data.length) {\n                        throw \"UTF-8 Decode failed. Multi byte character was truncated.\";\n                    }\n                    c2 = data[i + 1];\n                    c3 = data[i + 2];\n                    result += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                    i += 3;\n                }\n            }\n            return result;\n        },\n\n        parseServerResponse = function(serverResponse) {\n            var stringResponse = decodeUtf8(serverResponse),\n                xmlDoc = this.domParser.createXmlTree(stringResponse),\n                enveloppe = xmlDoc ? this.domParser.getChildNode(xmlDoc, \"soap:Envelope\") : null,\n                body = enveloppe ? this.domParser.getChildNode(enveloppe, \"soap:Body\") : null,\n                fault = body ? this.domParser.getChildNode(body, \"soap:Fault\") : null;\n\n            if (fault) {\n                return null;\n            }\n\n            return serverResponse;\n        },\n\n        parseErrorResponse = function(serverResponse) {\n            var stringResponse = decodeUtf8(serverResponse),\n                xmlDoc = this.domParser.createXmlTree(stringResponse),\n                enveloppe = xmlDoc ? this.domParser.getChildNode(xmlDoc, \"soap:Envelope\") : null,\n                body = enveloppe ? this.domParser.getChildNode(enveloppe, \"soap:Body\") : null,\n                fault = body ? this.domParser.getChildNode(body, \"soap:Fault\") : null,\n                detail = fault ? this.domParser.getChildNode(fault, \"detail\") : null,\n                exception = detail ? this.domParser.getChildNode(detail, \"Exception\") : null,\n                node = null,\n                faultstring = \"\",\n                statusCode = \"\",\n                message = \"\",\n                idStart = -1,\n                idEnd = -1;\n\n            if (fault === null) {\n                return {\n                    code: 0,\n                    name: \"UnknownError\",\n                    message: String.fromCharCode.apply(null, new Uint8Array(serverResponse))\n                };\n            }\n\n            node = this.domParser.getChildNode(fault, \"faultstring\").firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = this.domParser.getChildNode(exception, \"StatusCode\");\n                statusCode = node ? node.firstChild.nodeValue : null;\n\n                node = this.domParser.getChildNode(exception, \"Message\");\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n            }\n\n            return {\n                code: statusCode,\n                name: faultstring,\n                message: message ? message.substring(idStart, idEnd) : \"\"\n            };\n        };\n\n    return {\n        domParser: undefined,\n\n        getServerURLFromMessage: function(url /*, message, messageType*/) { return url; },\n\n        getHTTPMethod: function(/*messageType*/) { return 'POST'; },\n\n        getResponseType: function(/*keySystemStr, messageType*/) { return 'arraybuffer'; },\n\n        getLicenseMessage: function(serverResponse/*, keySystemStr, messageType*/) {\n            return parseServerResponse.call(this, serverResponse);\n        },\n\n        getErrorResponse: function(serverResponse/*, keySystemStr, messageType*/) {\n            return parseErrorResponse.call(this, serverResponse);\n        }\n    };\n};\n\nMediaPlayer.dependencies.protection.servers.PlayReady.prototype = {\n    constructor: MediaPlayer.dependencies.protection.servers.PlayReady\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nMediaPlayer.dependencies.protection.servers.Widevine = function() {\n    \"use strict\";\n\n    return {\n\n        getServerURLFromMessage: function(url /*, message, messageType*/) { return url; },\n\n        getHTTPMethod: function(/*messageType*/) { return 'POST'; },\n\n        getResponseType: function(/*keySystemStr, messageType*/) { return 'arraybuffer'; },\n\n        getLicenseMessage: function(serverResponse/*, keySystemStr, messageType*/) {\n            return serverResponse;\n        },\n\n        getErrorResponse: function(serverResponse/*, keySystemStr, messageType*/) {\n            return {\n                code: 0,\n                name: \"UnknownError\",\n                message: String.fromCharCode.apply(null, new Uint8Array(serverResponse))\n            };\n        }\n    };\n};\n\nMediaPlayer.dependencies.protection.servers.Widevine.prototype = {\n    constructor: MediaPlayer.dependencies.protection.servers.Widevine\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * A collection of ClearKey encryption keys with an (optional) associated\n * type\n *\n * @param keyPairs {MediaPlayer.vo.protection.KeyPair[]} array of key pairs\n * @param type the type of keys in this set.  One of either 'persistent'\n * or 'temporary'.  Can also be null or undefined.\n * @constructor\n */\nMediaPlayer.vo.protection.ClearKeyKeySet = function(keyPairs, type) {\n    if (type && type !== \"persistent\" && type !== \"temporary\")\n        throw new Error(\"Invalid ClearKey key set type!  Must be one of 'persistent' or 'temporary'\");\n    this.keyPairs = keyPairs;\n    this.type = type;\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    this.toJWK = function() {\n        var i, numKeys = this.keyPairs.length,\n            jwk = {};\n        jwk.keys = [];\n        for (i = 0; i < numKeys; i++) {\n            var key = {\n                kty: \"oct\",\n                alg: \"A128KW\",\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        var jwkString = JSON.stringify(jwk);\n        var len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        var buf = new ArrayBuffer(len);\n        var bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    };\n};\n\nMediaPlayer.vo.protection.ClearKeyKeySet.prototype = {\n    constructor: MediaPlayer.vo.protection.ClearKeyKeySet\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * EME-independent KeyError\n *\n * @param sessionToken the key session to which this error is associated\n * @param errorString an informational error message\n * @class\n * @deprecated Newest versions of EME APIs will not use this error object\n */\nMediaPlayer.vo.protection.KeyError = function(code, message, data) {\n    \"use strict\";\n    this.code = code;\n    this.message = message;\n    this.data = data;\n};\n\nMediaPlayer.vo.protection.KeyError.prototype = {\n    constructor: MediaPlayer.vo.protection.KeyError\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * EME-independent KeyMessage\n *\n * @param {MediaPlayer.vo.protection.SessionToken} sessionToken the session\n * to which the key message is associated\n * @param {ArrayBuffer} message the key message\n * @param [defaultURL] license acquisition URL provided by the CDM\n * @param [messageType] the message type.  One of \"license-request\",\n * \"license-renewal\", \"license-release\", \"individualization-request\"\n * @constructor\n */\nMediaPlayer.vo.protection.KeyMessage = function(sessionToken, message, defaultURL, messageType) {\n    \"use strict\";\n    this.sessionToken = sessionToken;\n    this.message = message;\n    this.defaultURL = defaultURL;\n    this.messageType = messageType;\n};\n\nMediaPlayer.vo.protection.KeyMessage.prototype = {\n    constructor: MediaPlayer.vo.protection.KeyMessage\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Represents a 128-bit keyID and 128-bit encryption key\n *\n * @param keyID {String} 128-bit key ID, base64 encoded, with no padding\n * @param key {String} 128-bit encryption key, base64 encoded, with no padding\n * @constructor\n */\nMediaPlayer.vo.protection.KeyPair = function(keyID, key) {\n    \"use strict\";\n    this.keyID = keyID;\n    this.key = key;\n};\n\nMediaPlayer.vo.protection.KeyPair.prototype = {\n    constructor: MediaPlayer.vo.protection.KeyPair\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n *\n * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n * @param {MediaPlayer.vo.protection.KeySystemConfiguration} ksConfiguration the\n * subset of configurations passed to the key system access request that are supported\n * by this user agent\n * @constructor\n */\nMediaPlayer.vo.protection.KeySystemAccess = function(keySystem, ksConfiguration) {\n    this.keySystem = keySystem;\n    this.ksConfiguration = ksConfiguration;\n};\n\nMediaPlayer.vo.protection.KeySystemAccess.prototype = {\n    constructor: MediaPlayer.vo.protection.KeySystemAccess\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n *\n * @param {MediaPlayer.vo.protection.MediaCapability[]} audioCapabilities\n * @param {MediaPlayer.vo.protection.MediaCapability[]} videoCapabilities\n * @param {string} [distinctiveIdentifier]\n * @param {string} [persistentState]\n * @constructor\n */\nMediaPlayer.vo.protection.KeySystemConfiguration = function(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n    this.initDataTypes = [ \"cenc\" ];\n    this.audioCapabilities = audioCapabilities;\n    this.videoCapabilities = videoCapabilities;\n    this.distinctiveIdentifier = distinctiveIdentifier;\n    this.persistentState = persistentState;\n    this.sessionTypes = sessionTypes;\n};\n\nMediaPlayer.vo.protection.KeySystemConfiguration.prototype = {\n    constructor: MediaPlayer.vo.protection.KeySystemConfiguration\n};","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Event indicating the receipt of a response from a license server\n *\n * @param message {Uint8Array} license response message\n * @param requestData a request-specific data object\n * @constructor\n */\nMediaPlayer.vo.protection.LicenseRequestComplete = function(message, requestData) {\n    \"use strict\";\n    this.message = message;\n    this.requestData = requestData;\n};\n\nMediaPlayer.vo.protection.LicenseRequestComplete.prototype = {\n    constructor: MediaPlayer.vo.protection.LicenseRequestComplete\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * A media capability\n *\n * @param {string} contentType MIME type and codecs (RFC6386)\n * @param {string} [robustness]\n * @constructor\n */\nMediaPlayer.vo.protection.MediaCapability = function(contentType, robustness) {\n    this.contentType = contentType;\n    this.robustness = robustness;\n};\n\nMediaPlayer.vo.protection.MediaCapability.prototype = {\n    constructor: MediaPlayer.vo.protection.MediaCapability\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * EME-independent NeedKey\n *\n * @param initData the initialization data\n * @param [initDataType] initialization data type\n * @constructor\n */\nMediaPlayer.vo.protection.NeedKey = function(initData, initDataType) {\n    this.initData = initData;\n    this.initDataType = initDataType;\n};\n\nMediaPlayer.vo.protection.NeedKey.prototype = {\n    constructor: MediaPlayer.vo.protection.NeedKey\n};\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Data used to customize KeySystems and override default or CDM-provided\n * values\n *\n * @param {string} laURL a license acquisition URL to use with this key system\n * @param {Object} httpRequestHeaders headers to add to the http request\n * @param {Object} bearerToken\n * @param {Object} clearkeys defines a set of clear keys that are available to\n * the key system.  Object properties are base64-encoded keyIDs (with no padding).\n * Corresponding property values are keys, base64-encoded (no padding).\n * @constructor\n */\nMediaPlayer.vo.protection.ProtectionData = function(laURL, httpRequestHeaders, bearerToken, clearkeys) {\n    this.laURL = laURL;\n    this.httpRequestHeaders = httpRequestHeaders;\n    this.bearerToken = bearerToken;\n    this.clearkeys = clearkeys;\n};\n\nMediaPlayer.vo.protection.ProtectionData.prototype = {\n    constructor: MediaPlayer.vo.protection.ProtectionData\n};","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * All session tokens returns by ProtectionModel implementations\n * are guaranteed to contain initialization data and optionally\n * session IDs\n *\n * @constructor\n */\nMediaPlayer.models.SessionToken = function () {\n    \"use strict\";\n};\n\nMediaPlayer.models.SessionToken.prototype = {\n\n    /**\n     * The initialization data used to create this session\n     *\n     * {Uint8Array} initialization data\n     */\n    initData: null,\n\n    /**\n     * The unique session ID designated to this session\n     *\n     * @return {string} the session ID or the empty string if the implementation\n     * does not support session IDs or the sessionID has not yet been established\n     */\n    getSessionID: function() { return \"\"; },\n\n    /**\n     * The time, in milliseconds since 01 January, 1970 UTC, after which\n     * the key(s) in the session will no longer be usable to decrypt\n     * media data, or NaN if no such time exists\n     *\n     * @returns {Number} the expiration time\n     */\n    getExpirationTime: function() { return NaN; },\n\n    /**\n     * Returns a read-only map of key IDs known to the session to the\n     * current status of the associated key.\n     *\n     * @returns {maplike<BufferSource,MediaKeyStatus>}\n     */\n    getKeyStatuses: function() { return null; }\n};\n\n\n\n","/**\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\nHls.dependencies.AES = function() {\n\n    /**\n    * Schedule out an AES key for both encryption and decryption. This\n    * is a low-level class. Use a cipher mode to do bulk encryption.\n    *\n    * @constructor\n    * @param key {Array} The key as an array of 4, 6 or 8 words.\n    */\n    this.init = function (key) {\n\n        /**\n         * The expanded S-box and inverse S-box tables. These will be computed\n         * on the client so that we don't have to send them down the wire.\n         *\n         * There are two tables, _tables[0] is for encryption and\n         * _tables[1] is for decryption.\n         *\n         * The first 4 sub-tables are the expanded S-box with MixColumns. The\n         * last (_tables[01][4]) is the S-box itself.\n         *\n         * @private\n         */\n        this._tables = [[[],[],[],[],[]],[[],[],[],[],[]]];\n\n        this._precompute.call(this);\n\n        var i, j, tmp,\n        encKey, decKey,\n        sbox = this._tables[0][4], decTable = this._tables[1],\n        keyLen = key.length, rcon = 1;\n\n        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n            throw new Error('Invalid aes key size=' + keyLen);\n        }\n\n        encKey = key.slice(0);\n        decKey = [];\n        this._key = [encKey, decKey];\n\n        // schedule encryption keys\n        for (i = keyLen; i < 4 * keyLen + 28; i++) {\n            tmp = encKey[i-1];\n\n            // apply sbox\n            if (i%keyLen === 0 || (keyLen === 8 && i%keyLen === 4)) {\n                tmp = sbox[tmp>>>24]<<24 ^ sbox[tmp>>16&255]<<16 ^ sbox[tmp>>8&255]<<8 ^ sbox[tmp&255];\n\n                // shift rows and add rcon\n                if (i%keyLen === 0) {\n                    tmp = tmp<<8 ^ tmp>>>24 ^ rcon<<24;\n                    rcon = rcon<<1 ^ (rcon>>7)*283;\n                }\n            }\n\n            encKey[i] = encKey[i-keyLen] ^ tmp;\n        }\n\n        // schedule decryption keys\n        for (j = 0; i; j++, i--) {\n            tmp = encKey[j&3 ? i : i - 4];\n            if (i<=4 || j<4) {\n                decKey[j] = tmp;\n            } else {\n                decKey[j] = decTable[0][sbox[tmp>>>24]] ^\n                decTable[1][sbox[tmp>>16  & 255]] ^\n                decTable[2][sbox[tmp>>8   & 255]] ^\n                decTable[3][sbox[tmp      & 255]];\n            }\n        }\n    };\n\n    /**\n    * Expand the S-box tables.\n    *\n    * @private\n    */\n    this._precompute = function () {\n        var encTable = this._tables[0], decTable = this._tables[1],\n            sbox = encTable[4], sboxInv = decTable[4],\n            i, x, xInv, d=[], th=[], x2, x4, x8, s, tEnc, tDec;\n\n        // Compute double and third tables\n        for (i = 0; i < 256; i++) {\n            th[( d[i] = i<<1 ^ (i>>7)*283 )^i]=i;\n        }\n\n        for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n            // Compute sbox\n            s = xInv ^ xInv<<1 ^ xInv<<2 ^ xInv<<3 ^ xInv<<4;\n            s = s>>8 ^ s&255 ^ 99;\n            sbox[x] = s;\n            sboxInv[s] = x;\n\n            // Compute MixColumns\n            x8 = d[x4 = d[x2 = d[x]]];\n            tDec = x8*0x1010101 ^ x4*0x10001 ^ x2*0x101 ^ x*0x1010100;\n            tEnc = d[s]*0x101 ^ s*0x1010100;\n\n            for (i = 0; i < 4; i++) {\n                encTable[i][x] = tEnc = tEnc<<24 ^ tEnc>>>8;\n                decTable[i][s] = tDec = tDec<<24 ^ tDec>>>8;\n            }\n        }\n\n        // Compactify. Considerable speedup on Firefox.\n        for (i = 0; i < 5; i++) {\n            encTable[i] = encTable[i].slice(0);\n            decTable[i] = decTable[i].slice(0);\n        }\n    };\n\n    /**\n    * Decrypt 16 bytes, specified as four 32-bit words.\n    * @param encrypted0 {number} the first word to decrypt\n    * @param encrypted1 {number} the second word to decrypt\n    * @param encrypted2 {number} the third word to decrypt\n    * @param encrypted3 {number} the fourth word to decrypt\n    * @param out {Int32Array} the array to write the decrypted words\n    * into\n    * @param offset {number} the offset into the output array to start\n    * writing results\n    * @return {Array} The plaintext.\n    */\n    this.decrypt = function (encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n        var key = this._key[1],\n            // state variables a,b,c,d are loaded with pre-whitened data\n            a = encrypted0 ^ key[0],\n            b = encrypted3 ^ key[1],\n            c = encrypted2 ^ key[2],\n            d = encrypted1 ^ key[3],\n            a2, b2, c2,\n\n            nInnerRounds = key.length / 4 - 2, // key.length === 2 ?\n            i,\n            kIndex = 4,\n            table = this._tables[1],\n\n            // load up the tables\n            table0    = table[0],\n            table1    = table[1],\n            table2    = table[2],\n            table3    = table[3],\n            sbox  = table[4];\n\n        // Inner rounds. Cribbed from OpenSSL.\n        for (i = 0; i < nInnerRounds; i++) {\n            a2 = table0[a>>>24] ^ table1[b>>16 & 255] ^ table2[c>>8 & 255] ^ table3[d & 255] ^ key[kIndex];\n            b2 = table0[b>>>24] ^ table1[c>>16 & 255] ^ table2[d>>8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n            c2 = table0[c>>>24] ^ table1[d>>16 & 255] ^ table2[a>>8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n            d  = table0[d>>>24] ^ table1[a>>16 & 255] ^ table2[b>>8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n            kIndex += 4;\n            a=a2; b=b2; c=c2;\n        }\n\n        // Last round.\n        for (i = 0; i < 4; i++) {\n            out[(3 & -i) + offset] =\n            sbox[a>>>24      ]<<24 ^\n            sbox[b>>16  & 255]<<16 ^\n            sbox[c>>8   & 255]<<8  ^\n            sbox[d      & 255]     ^\n            key[kIndex++];\n            a2=a; a=b; b=c; c=d; d=a2;\n        }\n    };\n};\n\nHls.dependencies.AES.prototype = {\n    constructor: Hls.dependencies.AES\n};\n\nHls.dependencies.AES128Decrypter = function(key, iv) {\n    \"use strict\";\n\n    this.key = key;\n    this.iv = iv;\n\n    /**\n    * Convert network-order (big-endian) bytes into their little-endian\n    * representation.\n    */\n    this.ntoh = function(word) {\n        return (word << 24) |\n               ((word & 0xff00) << 8) |\n               ((word & 0xff0000) >> 8) |\n               (word >>> 24);\n    };\n\n    /**\n    * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n    * @param encrypted {Uint8Array} the encrypted bytes\n    * @param key {Uint32Array} the bytes of the decryption key\n    * @param initVector {Uint32Array} the initialization vector (IV) to\n    * use for the first round of CBC.\n    * @return {Uint8Array} the decrypted bytes\n    *\n    * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n    * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n    * @see https://tools.ietf.org/html/rfc2315\n    */\n    this.doDecrypt = function(encrypted, key, initVector) {\n        var\n            // word-level access to the encrypted bytes\n            encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2),\n\n            decipher = new Hls.dependencies.AES(),\n\n            // byte and word-level access for the decrypted output\n            decrypted = new Uint8Array(encrypted.byteLength),\n            decrypted32 = new Int32Array(decrypted.buffer),\n\n            // temporary variables for working with the IV, encrypted, and\n            // decrypted data\n            init0, init1, init2, init3,\n            encrypted0, encrypted1, encrypted2, encrypted3,\n\n            // iteration variable\n            wordIx;\n\n        decipher.init(Array.prototype.slice.call(key));\n\n        // pull out the words of the IV to ensure we don't modify the\n        // passed-in reference and easier access\n        init0 = ~~initVector[0];\n        init1 = ~~initVector[1];\n        init2 = ~~initVector[2];\n        init3 = ~~initVector[3];\n\n        // decrypt four word sequences, applying cipher-block chaining (CBC)\n        // to each decrypted block\n        for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n            // convert big-endian (network order) words into little-endian\n            // (javascript order)\n            encrypted0 = ~~this.ntoh(encrypted32[wordIx]);\n            encrypted1 = ~~this.ntoh(encrypted32[wordIx + 1]);\n            encrypted2 = ~~this.ntoh(encrypted32[wordIx + 2]);\n            encrypted3 = ~~this.ntoh(encrypted32[wordIx + 3]);\n\n            // decrypt the block\n            decipher.decrypt(encrypted0,\n                encrypted1,\n                encrypted2,\n                encrypted3,\n                decrypted32,\n                wordIx);\n\n            // XOR with the IV, and restore network byte-order to obtain the\n            // plaintext\n            decrypted32[wordIx]     = this.ntoh(decrypted32[wordIx] ^ init0);\n            decrypted32[wordIx + 1] = this.ntoh(decrypted32[wordIx + 1] ^ init1);\n            decrypted32[wordIx + 2] = this.ntoh(decrypted32[wordIx + 2] ^ init2);\n            decrypted32[wordIx + 3] = this.ntoh(decrypted32[wordIx + 3] ^ init3);\n\n            // setup the IV for the next round\n            init0 = encrypted0;\n            init1 = encrypted1;\n            init2 = encrypted2;\n            init3 = encrypted3;\n        }\n\n        return decrypted;\n    };\n\n    this.localDecrypt = function(encrypted, key, initVector, decrypted) {\n        var bytes = this.doDecrypt(encrypted,\n            key,\n            initVector);\n            decrypted.set(bytes, encrypted.byteOffset);\n    };\n\n    this.decrypt = function(encrypted) {\n        var step = 4 * 8000,\n            //encrypted32 = new Int32Array(encrypted.buffer),\n            encrypted32 = new Int32Array(encrypted),\n            decrypted = new Uint8Array(encrypted.byteLength),\n            i = 0;\n\n        // split up the encryption job and do the individual chunks asynchronously\n        var key = this.key;\n        var initVector = this.iv;\n        this.localDecrypt(encrypted32.subarray(i, i + step), key, initVector, decrypted);\n\n        for (i = step; i < encrypted32.length; i += step) {\n            initVector = new Uint32Array([\n                this.ntoh(encrypted32[i - 4]),\n                this.ntoh(encrypted32[i - 3]),\n                this.ntoh(encrypted32[i - 2]),\n                this.ntoh(encrypted32[i - 1])\n            ]);\n            this.localDecrypt(encrypted32.subarray(i, i + step), key, initVector, decrypted);\n        }\n\n        return decrypted;\n    };\n};\n\nHls.dependencies.AES128Decrypter.prototype = {\n    constructor: Hls.dependencies.AES128Decrypter\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nHls.dependencies.HlsDemux = function() {\n    \"use strict\";\n\n    var _appendArray = function(array1, array2) {\n        var tmp = new Uint8Array(array1.byteLength + array2.byteLength);\n        tmp.set(array1, 0);\n        tmp.set(array2, array1.byteLength);\n        return tmp;\n    };\n\n    // List of considered H.264 NALU types\n    var H264_NALU_TYPES = [1, 5, 6];\n\n    var trackIdCounter = 1,\n        pidToTrack = [],\n        tracks = [],\n        baseDts = -1,\n        dtsOffset = -1,\n\n        getTsPacket = function(data, offset, pid, pusi) {\n            var i = offset,\n                tsPacket;\n\n            while (i < data.length) {\n                tsPacket = new mpegts.ts.TsPacket();\n                tsPacket.parse(data.subarray(i, i + mpegts.ts.TsPacket.prototype.TS_PACKET_SIZE));\n\n                //this.debug.log(\"[HlsDemux] TS packet: pid=\" + tsPacket.getPid() + \", pusi = \" + tsPacket.getPusi());\n\n                if ((tsPacket.getPid() === pid) && ((pusi === undefined) || (tsPacket.getPusi() === pusi))) {\n                    return {\n                        offset: i,\n                        packet: tsPacket\n                    };\n                }\n\n                i += mpegts.ts.TsPacket.prototype.TS_PACKET_SIZE;\n            }\n\n            return null;\n        },\n\n        checkTsPacket = function(data) {\n            var tsPacket = new mpegts.ts.TsPacket();\n            return tsPacket.checkSyncWord(data.subarray(0, mpegts.ts.TsPacket.prototype.TS_PACKET_SIZE));\n        },\n\n        getPAT = function(data) {\n            var tsPacket = getTsPacket.call(this, data, 0, mpegts.ts.TsPacket.prototype.PAT_PID);\n\n            if (tsPacket === null) {\n                return null;\n            }\n\n            var pat = new mpegts.si.PAT();\n            pat.parse(tsPacket.packet.getPayload());\n\n            return pat;\n        },\n\n        getPMT = function(data, pid) {\n            var tsPacket = getTsPacket.call(this, data, 0, pid);\n\n            if (tsPacket === null) {\n                return null;\n            }\n\n            var pmt = new mpegts.si.PMT();\n            pmt.parse(tsPacket.packet.getPayload());\n\n            return pmt;\n        },\n\n        demuxTsPacket = function(data) {\n            var tsPacket,\n                pid,\n                track,\n                sample = null,\n                sampleData = null,\n                pesPacket;\n\n            tsPacket = new mpegts.ts.TsPacket();\n            tsPacket.parse(data);\n\n            // If packet has only adaptation field, then ignore\n            if (tsPacket.hasAdaptationFieldOnly()) {\n                return;\n            }\n\n            // Get PID and corresponding track\n            pid = tsPacket.getPid();\n            track = pidToTrack[pid];\n            if (!track) {\n                return;\n            }\n\n            // PUSI => start storing new AU\n            if (tsPacket.getPusi()) {\n\n                // Parse PES header\n                pesPacket = new mpegts.pes.PesPacket();\n                pesPacket.parse(tsPacket.getPayload());\n\n                // Store new access unit\n                sample = new MediaPlayer.vo.Mp4Track.Sample();\n                sample.cts = pesPacket.getPts().getValue();\n                sample.dts = (pesPacket.getDts() !== null) ? pesPacket.getDts().getValue() : sample.cts;\n                sample.size = 0;\n                sample.duration = 0;\n                sample.subSamples = [];\n\n                if (baseDts === -1) {\n                    baseDts = sample.dts;\n                }\n\n                // Store original MPEG2TS timestamp to help determining offset between absolute samples timestamps and MPEG2TS timestamps (see WebVTT parser)\n                sample.mpegTimestamp = sample.cts;\n\n                sample.dts -= baseDts;\n                sample.cts -= baseDts;\n\n                sample.dts += dtsOffset;\n                sample.cts += dtsOffset;\n\n                //this.debug.log(\"[HlsDemux][\" + track.type + \"] dts = \" + sample.dts + \", cts = \" + sample.cts);\n\n                // Store payload of PES packet as a subsample\n                sampleData = pesPacket.getPayload();\n\n                // Set sample flags\n                if (track.type === \"audio\") {\n                    sample.flags = 0x01000000; // sample_depends_on = 1, other flags = 0\n                }\n                if (track.type === \"video\" && (track.streamType.search('H.264') !== -1)) {\n                    // In case of H.264 stream, check if the sample is an IDR sample\n                    // If IDR: sample_depends_on = 2, sample_is_non_sync_sample = false\n                    // If non-IDR: sample_depends_on = 1, sample_is_non_sync_sample = true\n                    sample.flags = mpegts.h264.isIDR(sampleData) ? 0x02000000 : 0x01010000;\n                }\n\n                sample.subSamples.push(sampleData);\n\n                if (sample.dts >= 0) {\n                     track.samples.push(sample);\n                } else {\n                    // Check A/V desynchronisation\n                    var offset = Math.abs(sample.dts) / 90000;\n                    if (offset > 10) {\n                        throw {\n                            name: MediaPlayer.dependencies.ErrorHandler.prototype.HLS_DEMUX_ERROR,\n                            message: \"A/V desynchronization (\" + Math.round(offset) + \" s.)\"\n                        };\n                    }\n                }\n            } else if (track.samples.length > 0) {\n                // Get currently buffered access unit\n                sample = track.samples[track.samples.length - 1];\n\n                // Store payload of TS packet as a subsample\n                sample.subSamples.push(tsPacket.getPayload());\n            }\n        },\n\n        postProcess = function(track) {\n            var sample,\n                length = 0,\n                offset = 0,\n                subSamplesLength,\n                i, s;\n\n            if (track.samples.length === 0) {\n                return;\n            }\n\n            // Determine total length of track samples data\n            // Set samples duration and size\n            for (i = 0; i < track.samples.length; i++) {\n                subSamplesLength = 0;\n                sample = track.samples[i];\n\n                for (s = 0; s < sample.subSamples.length; s++) {\n                    subSamplesLength += sample.subSamples[s].length;\n                }\n\n                if (i > 0) {\n                    track.samples[i - 1].duration = track.samples[i].dts - track.samples[i - 1].dts;\n                }\n\n                sample.size = subSamplesLength;\n                length += subSamplesLength;\n            }\n            track.samples[track.samples.length - 1].duration = track.samples[track.samples.length - 2].duration;\n\n            // Allocate track data\n            track.data = new Uint8Array(length);\n\n            track.dataCTS = [];\n\n            for (i = 0; i < track.samples.length; i++) {\n                sample = track.samples[i];\n\n                // In case of ADTS, for each input sample (i.e. PES packet), we store the CTS (=PTS)\n                // in order to set the correct timestamp to each AAC frames after ADTS demultiplexing (see demuxADTS()),\n                // and then get around missing frames in input stream\n                if (track.streamType.search('ADTS') !== -1) {\n                    track.dataCTS[offset] = sample.cts;\n                }\n\n                // Copy all sub-sample parts into track data\n                for (s = 0; s < sample.subSamples.length; s++) {\n                    track.data.set(sample.subSamples[s], offset);\n                    offset += sample.subSamples[s].length;\n                }\n            }\n\n            // In case of H.264 stream, convert bytestream to MP4 format (NALU size field instead of start codes)\n            if (track.streamType.search('H.264') !== -1) {\n                convertH264Frames.call(this, track);\n            }\n\n            // In case of AAC-ADTS stream, demultiplex ADTS frames into AAC frames\n            // (Demultiplexing is performed on the whole segment data in case ADTS packets are not aligned\n            // on PES packets)\n            if (track.streamType.search('ADTS') !== -1) {\n                demuxADTS.call(this, track);\n            }\n\n            // Patch first frame timestamp and duration in case of missing frames at the end of the previous segment\n            if (track.previousCts && track.previousDuration) {\n                sample = track.samples[0];\n                var gap = sample.cts - (track.previousCts + track.previousDuration);\n                if (gap > 0 && gap < track.timescale) {\n                    sample.cts -= gap;\n                    sample.dts -= gap;\n                    sample.duration += gap;\n                    this.debug.log(\"[HlsDemux][\" + track.type + \"] Patch sample duration, cts = \" + (sample.cts / 90000).toFixed(3) + \", duration = \" + (sample.duration / 90000).toFixed(3));\n                }\n            }\n\n        },\n\n        convertH264Frames = function(track) {\n            var sample,\n                nalu,\n                totalLength,\n                data,\n                offset,\n                i, n;\n\n            // Parse all NALUs and determine total data length according to filtered NALUs\n            totalLength = 0;\n            offset = 0;\n            for (i = 0; i < track.samples.length; i++) {\n                sample = track.samples[i];\n                sample.nalus = mpegts.h264.parseNALUs(track.data.subarray(offset, offset + sample.size));\n                for (n = 0; n < sample.nalus.length; n++) {\n                    nalu = sample.nalus[n];\n                    // this.debug.log(\"[HlsDemux][\" + track.type + \"] H264 NALU, type = \" + nalu.type + \", size = \" + nalu.size + \" - write: \" + (H264_NALU_TYPES.indexOf(nalu.type) !== -1));\n                    if (H264_NALU_TYPES.indexOf(nalu.type) !== -1) {\n                        // Set NALU offset relative to whole data array\n                        nalu.offset += offset;\n                        totalLength += 4 + sample.nalus[n].size; // 4 = NALUSize field length\n                    } else {\n                        // Remove NALU\n                        sample.nalus.splice(n, 1);\n                        n--;\n                    }\n                }\n                offset += sample.size;\n            }\n\n            // Allocate new data\n            data = new Uint8Array(totalLength);\n\n            // Copy all NALUs from each sample (AU) into output data\n            offset = 0;\n            for (i = 0; i < track.samples.length; i++) {\n                sample = track.samples[i];\n                sample.size = 0;\n                for (n = 0; n < sample.nalus.length; n++) {\n                    nalu = sample.nalus[n];\n                    data[offset++] = (nalu.size & 0xFF000000) >> 24;\n                    data[offset++] = (nalu.size & 0x00FF0000) >> 16;\n                    data[offset++] = (nalu.size & 0x0000FF00) >> 8;\n                    data[offset++] = (nalu.size & 0x000000FF);\n                    data.set(track.data.subarray(nalu.offset, nalu.offset + nalu.size), offset);\n                    offset += nalu.size;\n                    sample.size += 4 + nalu.size;\n                }\n            }\n\n            // Replace track data with converted H.264 frames\n            track.data = data;\n        },\n\n        demuxADTS = function(track) {\n            var aacFrames,\n                aacSamples = [],\n                length,\n                offset,\n                data,\n                sample,\n                cts,\n                duration,\n                i;\n\n            // Parse AAC-ADTS access units and get AAC frames description\n            aacFrames = mpegts.aac.parseADTS(track.data, track.dataCTS);\n\n            // And determine total length of AAC frames\n            length = 0;\n            for (i = 0; i < aacFrames.length; i++) {\n                length += aacFrames[i].length;\n            }\n\n            // Allocate new data section that will contains all AAC frames\n            data = new Uint8Array(length);\n\n            // Store first sample info\n            cts = track.samples[0].cts;\n\n            // Determine sample duration\n            duration = track.timescale * 1024.0 / track.samplingRate;\n\n            // Copy AAC frames data and create AAC samples\n            offset = 0;\n            for (i = 0; i < aacFrames.length; i++) {\n                // Create sample\n                sample = new MediaPlayer.vo.Mp4Track.Sample();\n\n                // Set CTS according to ADTS frame CTS (=PES CTS) or according to sample duration\n                sample.cts = sample.dts = (aacFrames[i].cts ? aacFrames[i].cts : cts);\n                sample.size = aacFrames[i].length;\n                sample.duration = duration;\n                sample.flags = 0x01000000; // sample_depends_on = 1, other flags = 0\n\n                // Store original MPEG2TS timestamp to help determining offset between absolute samples timestamps and MPEG2TS timestamps (see WebVTT parser)\n                if (aacSamples.length === 0) {\n                    sample.mpegTimestamp = track.samples[0].mpegTimestamp;\n                }\n\n                aacSamples.push(sample);\n\n                // Update cts for next frame\n                cts = sample.cts + duration;\n\n                // Update previous sample duration in case of missing frames\n                if (i > 0) {\n                    aacSamples[i - 1].duration = aacSamples[i].cts - aacSamples[i - 1].cts;\n                    if (aacSamples[i - 1].duration > duration) {\n                        this.debug.log(\"[HlsDemux][\" + track.type + \"] Patch sample duration, cts = \" + (aacSamples[i - 1].cts / 90000).toFixed(3) + \", duration = \" + (aacSamples[i - 1].duration / 90000).toFixed(3));\n                    }\n                }\n\n                // Copy AAC frame data\n                data.set(track.data.subarray(aacFrames[i].offset, aacFrames[i].offset + aacFrames[i].length), offset);\n                offset += aacFrames[i].length;\n            }\n\n            // Replace track data\n            track.data = data;\n\n            // Replace track's AAC-ADTS samples by demultiplexed AAC samples\n            track.samples = aacSamples;\n        },\n\n        arrayToHexString = function(array) {\n            var str = \"\",\n                i = 0,\n                h = 0;\n\n            for (i = 0; i < array.length; i++) {\n                h = array[i].toString(16);\n                if (h.length < 2) {\n                    h = \"0\" + h;\n                }\n                str += h;\n            }\n            return str;\n        },\n\n        doReset = function() {\n            this.debug.log(\"[HlsDemux] Reset\");\n            // pat = null;\n            // pmt = null;\n            trackIdCounter = 1;\n            pidToTrack = [];\n            tracks = [];\n            baseDts = -1;\n            dtsOffset = -1;\n        },\n\n\n        getTrackCodecInfo = function(data, track) {\n            var tsPacket,\n                pesPacket,\n                esBytes,\n                sequenceHeader,\n                nalHeader,\n                codecPrivateData,\n                objectType,\n                samplingFrequencyIndex;\n\n            // Get first TS packet containing start of a PES/sample\n            tsPacket = getTsPacket.call(this, data, 0, track.pid, true);\n\n            // We have no packet of track's PID , need some more packets to get track info\n            if (tsPacket === null) {\n                // We throw an error since the <video> element will raise a MEDIA_ERR_SRC_NOT_SUPPORTED error\n                // when pushing the initialization segment\n                throw {\n                    name: MediaPlayer.dependencies.ErrorHandler.prototype.HLS_DEMUX_ERROR,\n                    message: \"No packets for track \" + track.type\n                };\n            }\n\n            // Get PES packet\n            pesPacket = new mpegts.pes.PesPacket();\n            pesPacket.parse(tsPacket.packet.getPayload());\n            esBytes = pesPacket.getPayload();\n\n            // H264\n            if (track.streamType.search('H.264') !== -1) {\n                sequenceHeader = mpegts.h264.getSequenceHeader(esBytes);\n\n                while (sequenceHeader === null) {\n                    tsPacket = getTsPacket.call(this, data, (tsPacket.offset + mpegts.ts.TsPacket.prototype.TS_PACKET_SIZE), track.pid, false);\n                    esBytes = _appendArray(esBytes, tsPacket.packet.getPayload());\n                    sequenceHeader = mpegts.h264.getSequenceHeader(esBytes);\n                }\n\n                track.codecPrivateData = arrayToHexString(sequenceHeader.bytes);\n                track.codecs = \"avc1.\";\n\n                // Extract from the CodecPrivateData field the hexadecimal representation of the following\n                // three bytes in the sequence parameter set NAL unit.\n                // => Find the SPS nal header\n                nalHeader = /00000001[0-9]7/.exec(track.codecPrivateData);\n                if (nalHeader && nalHeader[0]) {\n                    // => Take the 6 characters after the SPS nalHeader (if it exists)\n                    track.codecs += track.codecPrivateData.substr(track.codecPrivateData.indexOf(nalHeader[0]) + 10, 6);\n                }\n\n                // Extract width and height from SPS\n                track.width = sequenceHeader.width;\n                track.height = sequenceHeader.height;\n                this.debug.log(\"[HlsDemux] width  = \" + track.width);\n                this.debug.log(\"[HlsDemux] height = \" + track.height);\n            }\n\n            // AAC\n            if (track.streamType.search('AAC') !== -1) {\n                codecPrivateData = mpegts.aac.getAudioSpecificConfig(esBytes);\n                objectType = (codecPrivateData[0] & 0xF8) >> 3;\n                track.codecPrivateData = arrayToHexString(codecPrivateData);\n                track.codecs = \"mp4a.40.\" + objectType;\n\n                samplingFrequencyIndex = (codecPrivateData[0] & 0x07) << 1 | (codecPrivateData[1] & 0x80) >> 7;\n                track.samplingRate = mpegts.aac.SAMPLING_FREQUENCY[samplingFrequencyIndex];\n                track.channels = (codecPrivateData[1] & 0x78) >> 3;\n                track.bandwidth = 0;\n                /* code for HE AAC v2 to be tested\n                var arr16 = new Uint16Array(2);\n                arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                arr16[1] = (codecPrivateData[2] << 8) + codecPrivateData[3];\n                //convert decimal to hex value\n                var codecPrivateDataHex = arr16[0].toString(16)+arr16[1].toString(16);\n                track.codecPrivateData = codecPrivateDataHex.toUpperCase();*/\n            }\n\n            this.debug.log(\"[HlsDemux] codecs = \" + track.codecs);\n            this.debug.log(\"[HlsDemux] codecPrivateData = \" + track.codecPrivateData);\n        },\n\n        doGetTracks = function(data) {\n            var i = 0,\n                pat,\n                pmt,\n                es,\n                pid,\n                track,\n                streamTypeDesc;\n\n            // First, check that packet is really a TS packet\n            if( !checkTsPacket.call(this,data) ) {\n                throw {\n                    name: MediaPlayer.dependencies.ErrorHandler.prototype.HLS_INVALID_PACKET_ERROR,\n                    message: \"Failed to demux, packet is invalid, missing SYNC byte\"\n                };\n            }\n\n            // Get PSI (PAT, PMT)\n            pat = getPAT.call(this, data);\n            if (pat === null) {\n                throw {\n                    name: MediaPlayer.dependencies.ErrorHandler.prototype.HLS_DEMUX_ERROR,\n                    message: \"Failed to demux, missing signalization (PAT)\"\n                };\n            }\n\n            pmt = getPMT.call(this, data, pat.getPmtPid());\n            if (pmt === null) {\n                throw {\n                    name: MediaPlayer.dependencies.ErrorHandler.prototype.HLS_DEMUX_ERROR,\n                    message: \"Failed to demux, missing signalization (PMT)\"\n                };\n            }\n\n            // Create a track for each elementary stream\n            for (i = 0; i < pmt.m_listOfComponents.length; i++) {\n                es = pmt.m_listOfComponents[i];\n                pid = es.m_elementary_PID;\n\n                track = pidToTrack[pid];\n\n                if (!track) {\n                    // Create new track\n                    track = new MediaPlayer.vo.Mp4Track();\n                    track.timescale = mpegts.Pts.prototype.SYSTEM_CLOCK_FREQUENCY;\n                    track.pid = pid;\n\n                    // Get elemantary stream type\n                    streamTypeDesc = pmt.gStreamTypes[es.m_stream_type];\n                    if (streamTypeDesc === null) {\n                        this.debug.log(\"[HlsDemux] Stream Type \" + es.m_stream_type + \" unknown!\");\n                        continue;\n                    }\n\n                    // Determine track type\n                    track.streamType = streamTypeDesc.name;\n                    switch (streamTypeDesc.value) {\n                        case 0xE0:\n                            track.type = \"video\";\n                            break;\n                        case 0xC0:\n                            track.type = \"audio\";\n                            break;\n                        case 0xFC:\n                            track.type = \"data\";\n                            break;\n                        default:\n                            track.type = \"und\";\n                    }\n                }\n\n                // Get/update track codec details\n                getTrackCodecInfo.call(this, data, track);\n                if (track.codecs === \"\") {\n                    throw {\n                        name: MediaPlayer.dependencies.ErrorHandler.prototype.HLS_DEMUX_ERROR,\n                        message: \"Failed to get codec information for track \" + track.type\n                    };\n                }\n\n                if (!pidToTrack[pid]) {\n                    // Set trackId\n                    track.trackId = trackIdCounter;\n                    trackIdCounter++;\n                    this.debug.log(\"[HlsDemux] Add track: type = \" + track.type + \", PID = \" + track.pid + \", trackId = \" + track.trackId);\n                    tracks.push(track);\n                    pidToTrack[pid] = track;\n                }\n            }\n\n            return tracks;\n        },\n\n        doDemux = function(data, request) {\n            var track,\n                i = 0,\n                firstDts = -1,\n                offset;\n\n            if (dtsOffset === -1) {\n                dtsOffset = request.startTime * 90000;\n                this.debug.log(\"[HlsDemux] Media start time = \" + dtsOffset + \" (\" + request.startTime + \")\");\n            }\n\n            this.debug.log(\"[HlsDemux] Demux chunk, size = \" + data.length + \", nb packets = \" + Math.round(data.length / mpegts.ts.TsPacket.prototype.TS_PACKET_SIZE));\n\n            // Get PAT, PMT and tracks information if not yet received\n            doGetTracks.call(this, data);\n\n            // Clear current tracks' data\n            for (i = 0; i < tracks.length; i++) {\n                track = tracks[i];\n\n                // Store last sample timestamp and duration (in case of lost/missing samples)\n                if (track.samples.length > 0) {\n                    track.previousCts = track.samples[track.samples.length - 1].cts;\n                    track.previousDuration = track.samples[track.samples.length - 1].duration;\n                }\n\n                tracks[i].samples = [];\n                tracks[i].data = null;\n            }\n\n            // Parse and demux TS packets\n            i = 0;\n            while (i < data.length) {\n                if ((i + mpegts.ts.TsPacket.prototype.TS_PACKET_SIZE) > data.length) {\n                    this.debug.log(\"[HlsDemux] Demux chunk, residual bytes = \" + (data.length - i));\n                    break;\n                }\n                demuxTsPacket.call(this, data.subarray(i, i + mpegts.ts.TsPacket.prototype.TS_PACKET_SIZE));\n                i += mpegts.ts.TsPacket.prototype.TS_PACKET_SIZE;\n            }\n\n            // Re-assemble samples from sub-samples\n            //this.debug.log(\"[HlsDemux] Demux: baseDts = \" + baseDts + \", dtsOffset = \" + dtsOffset);\n            for (i = 0; i < tracks.length; i++) {\n                track = tracks[i];\n\n                if (track.samples.length === 0) {\n                    continue;\n                }\n\n                postProcess.call(this, track);\n\n                this.debug.log(\"[HlsDemux][\" + track.type + \"] Demux: 1st PTS = \" + track.samples[0].dts + \" (\" + (track.samples[0].dts / 90000) + \")\");\n\n                // Check tracks desynchronization (if > 10 sec)\n                firstDts = Math.max(firstDts, track.samples[0].dts);\n                offset = Math.abs(track.samples[0].dts - firstDts) / 90000;\n                if (offset > 10) {\n                    throw {\n                        name: MediaPlayer.dependencies.ErrorHandler.prototype.HLS_DEMUX_ERROR,\n                        message: \"A/V desynchronization (\" + Math.round(offset) + \" s.)\"\n                    };\n                }\n            }\n\n            var _tracks = [];\n            for (i = 0; i < tracks.length; i++) {\n                if (tracks[i].samples.length > 0) {\n                    _tracks.push(tracks[i]);\n                }\n            }\n\n            return _tracks;\n        };\n\n    return {\n        debug: undefined,\n\n        reset: doReset,\n        getTracks: doGetTracks,\n        demux: doDemux\n    };\n};\n\nHls.dependencies.HlsDemux.prototype = {\n    constructor: Hls.dependencies.HlsDemux\n};\n","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nHls.dependencies.HlsFragmentController = function () {\n    \"use strict\";\n\n    var decryptionInfos = {},\n\n        generateMediaSegment = function (data, request) {\n            var i = 0,\n                // Demultiplex HLS chunk to get samples\n                tracks = rslt.hlsDemux.demux(new Uint8Array(data), request);\n\n            // Update fragment start time (=tfdt)\n            for (i = 0; i < tracks.length; i += 1) {\n\n                if (!rslt.manifestModel.getValue().timestampMap && tracks[i].samples[0].mpegTimestamp) {\n                    rslt.manifestModel.getValue().timestampMap = {\n                        local: tracks[i].samples[0].cts / 90000.0,\n                        mpegts: tracks[i].samples[0].mpegTimestamp\n                    };\n                }\n            }\n\n            // Generate init (moov) and media segment (moof)\n            return rslt.mp4Processor.generateInitMediaSegment(tracks);\n        },\n\n        createInitializationVector = function (segmentNumber) {\n            var uint8View = new Uint8Array(16),\n                i = 0;\n\n            for (i = 12; i < 16; i++) {\n                uint8View[i] = (segmentNumber >> 8 * (15 - i)) & 0xff;\n            }\n\n            return uint8View;\n        },\n\n        decrypt = function (data, decryptionInfo) {\n\n            var t = new Date();\n\n            var view = new DataView(decryptionInfo.key.buffer);\n            var key = new Uint32Array([\n                view.getUint32(0),\n                view.getUint32(4),\n                view.getUint32(8),\n                view.getUint32(12)\n            ]);\n\n            view = new DataView(createInitializationVector(decryptionInfo.iv).buffer);\n            var iv = new Uint32Array([\n                view.getUint32(0),\n                view.getUint32(4),\n                view.getUint32(8),\n                view.getUint32(12)\n            ]);\n\n            var decrypter = new Hls.dependencies.AES128Decrypter(key, iv);\n            rslt.debug.log(\"[HlsFragmentController] decrypted chunk (\" + (((new Date()).getTime() - t.getTime()) / 1000).toFixed(3) + \"s.)\");\n\n            return decrypter.decrypt(data);\n        },\n\n        loadDecryptionKey = function (decryptionInfo) {\n            var deferred = Q.defer();\n\n            this.debug.log(\"[HlsFragmentController]\", \"Load decryption key: \" + decryptionInfo.uri);\n            var xhr = new MediaPlayer.dependencies.XHRLoader();\n            // Do not retry for encrypted key, we assume the key file has to be present if playlist if present\n            xhr.initialize('arraybuffer', 0, 0);\n            xhr.load(decryptionInfo.uri).then(\n                function (request) {\n                    decryptionInfo.key = new Uint8Array(request.response);\n                    deferred.resolve();\n                },\n                function (request) {\n                    if (!request || request.aborted) {\n                        deferred.reject();\n                    } else {\n                        deferred.reject({\n                            name: MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_MANIFEST,\n                            message: \"Failed to download HLS decryption key\",\n                            data: {\n                                url: decryptionInfo.uri,\n                                status: request.status\n                            }\n                        });\n                    }\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        decryptSegment = function (bytes, request) {\n            var deferred = Q.defer(),\n                decryptionInfo,\n                self = this;\n\n            if (!request.decryptionInfo || request.decryptionInfo.method === \"NONE\") {\n                deferred.resolve(bytes);\n                return deferred.promise;\n            }\n\n            // check if decryption key has not been already downloaded\n            // if (!manifest.decryptionInfos) {\n            //     manifest.decryptionInfos = {};\n            // }\n            decryptionInfo = decryptionInfos[request.decryptionInfo.uri];\n            if (decryptionInfo) {\n                deferred.resolve(decrypt.call(this, bytes, decryptionInfo));\n            } else {\n                decryptionInfo = request.decryptionInfo;\n                loadDecryptionKey.call(this, decryptionInfo).then(\n                    function () {\n\n                        // check key\n                        if (decryptionInfo.key && decryptionInfo.key.byteLength !== 16) {\n                            return deferred.reject({\n                                name: MediaPlayer.dependencies.ErrorHandler.prototype.HLS_INVALID_KEY_ERROR,\n                                message: \"Invalid HLS key - Key length (\" + decryptionInfo.key.byteLength + \") does not respect specification\"\n                            });\n                        }\n                        decryptionInfos[decryptionInfo.uri] = decryptionInfo;\n                        deferred.resolve(decrypt.call(self, bytes, decryptionInfo));\n                    },\n                    function (e) {\n                        deferred.reject(e);\n                    }\n                );\n            }\n\n            return deferred.promise;\n        };\n\n    var rslt = MediaPlayer.utils.copyMethods(MediaPlayer.dependencies.FragmentController);\n\n    rslt.manifestModel = undefined;\n    rslt.hlsDemux = undefined;\n    rslt.mp4Processor = undefined;\n\n    rslt.process = function (bytes, request /*, representation*/ ) {\n        var deferred = Q.defer(),\n            result = null;\n\n        if ((bytes === null) || (bytes === undefined) || (bytes.byteLength === 0)) {\n            deferred.resolve(null);\n            return deferred.promise;\n        }\n\n        if (!request || (request.type !== \"Media Segment\")) {\n            deferred.resolve(null);\n            return deferred.promise;\n        }\n\n        // If text track (WebVTT), then do not process segment\n        if (request.streamType === 'text') {\n            deferred.resolve(bytes);\n            return deferred.promise;\n        }\n\n        // Decrypt the segment if encrypted\n        decryptSegment.call(rslt, bytes, request).then(function (data) {\n            //console.saveBinArray(data, request.url.substring(request.url.lastIndexOf('/') + 1));\n            try {\n                // First check stream has not been reset while decrypting the chunk\n                if (!rslt.manifestModel.getValue()) {\n                    deferred.resolve(null);\n                } else {\n                    // Generate media segment (moof) from demultiplexed MPEG2-TS chunk\n                    result = generateMediaSegment(data, request);\n                    rslt.sequenceNumber++;\n                    deferred.resolve(result);\n                }\n            } catch (e) {\n                deferred.reject(e);\n            }\n        }, function (e) {\n            deferred.reject(e);\n        });\n\n        //return result;\n        return deferred.promise;\n    };\n\n    return rslt;\n};\n\nHls.dependencies.HlsFragmentController.prototype = {\n    constructor: Hls.dependencies.HlsFragmentController\n};\n","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nHls.dependencies.HlsHandler = function() {\n    \"use strict\";\n    var getInit = function(representation) {\n        var period = null,\n            self = this,\n            presentationStartTime = null,\n            deferred = Q.defer(),\n            manifest,\n            isDynamic,\n            request;\n\n        //Mss.dependencies.MssHandler.prototype.getInitRequest.call(this,quality,data).then(onGetInitRequestSuccess);\n        // get the period and startTime\n        period = representation.adaptation.period;\n        presentationStartTime = period.start;\n\n        manifest = rslt.manifestModel.getValue();\n        isDynamic = rslt.manifestExt.getIsDynamic(manifest);\n\n        request = new MediaPlayer.vo.SegmentRequest();\n\n        request.streamType = rslt.getType();\n        request.type = \"Initialization Segment\";\n        request.url = null;\n        request.data = 1; //used to activate Loaded event in BufferControler\n        request.range = representation.range;\n        request.availabilityStartTime = self.timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic);\n        request.availabilityEndTime = self.timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic);\n\n        request.quality = representation.index;\n        deferred.resolve(request);\n        return deferred.promise;\n    };\n\n    var rslt = MediaPlayer.utils.copyMethods(Dash.dependencies.DashHandler);\n\n    rslt.getInitRequest = getInit;\n\n    return rslt;\n};\n\nHls.dependencies.HlsHandler.prototype = {\n    constructor: Hls.dependencies.HlsHandler\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nHls.dependencies.HlsParser = function() {\n    var REGEXP_EXTXSTREAMINF = /#EXT-X-STREAM-INF:([^\\n\\r]*)[\\r\\n]+([^\\r\\n]+)/g,\n        REGEXP_EXTXMEDIA = /#EXT-X-MEDIA:(.*)/g,\n        REGEXP_EXTXMEDIASEQUENCE = '(?:#(EXT-X-MEDIA-SEQUENCE):*(\\\\d+))',\n        REGEXP_EXTXTARGETDURATION = '(?:#(EXT-X-TARGETDURATION):*(\\\\d+))',\n        REGEXP_EXTXPROGRAMDATETIME = '(?:#(EXT-X-PROGRAM-DATE-TIME):*(.+))',\n        REGEXP_EXTXKEY = '(?:#(EXT-X-KEY):(.+))',\n        REGEXP_EXTXINF = '(?:#(EXTINF):*(\\\\d+(?:\\\\.\\\\d+)?)(?:,(.*))?[\\r\\n]*(.*))',\n        REGEXP_EXTXENDLIST = '(?:#(EXT-X-ENDLIST))',\n        REGEXP_ATTRIBUTES = /\\s*(.+?)\\s*=((?:\\\".*?\\\")|.*?)(?:,|$)/g,\n        REGEXP_PLAYLIST = new RegExp('(?:' +\n                                     REGEXP_EXTXMEDIASEQUENCE + '|' +\n                                     REGEXP_EXTXTARGETDURATION + '|' +\n                                     REGEXP_EXTXPROGRAMDATETIME + '|' +\n                                     REGEXP_EXTXKEY + '|' +\n                                     REGEXP_EXTXINF + '|' +\n                                     REGEXP_EXTXENDLIST +\n                                     ')', 'g'),\n        DEFAULT_RETRY_ATTEMPTS = 2,\n        DEFAULT_RETRY_INTERVAL = 500,\n        retryAttempts = DEFAULT_RETRY_ATTEMPTS,\n        retryInterval = DEFAULT_RETRY_INTERVAL,\n        xhrLoader,\n\n        getTagAttributes = function (attributes) {\n            var attrs = {},\n                match, name, value;\n\n            while ((match = REGEXP_ATTRIBUTES.exec(attributes)) !== null) {\n                name = match[1];\n                value = match[2].replace(/\"/g, ''); // Remove '\"' characters\n                attrs[name] = value;\n            }\n            return attrs;\n        },\n\n        getAbsoluteURI = function(uri, baseUrl) {\n            if ((uri.indexOf(\"http://\") === 0) ||\n                (uri.indexOf(\"https://\") === 0)) {\n                return uri;\n            }\n\n            return baseUrl + uri;\n        },\n\n        getVariantStreams = function(manifest) {\n            var streams = [], stream,\n                match, attrs,\n                codecs, audioCodec, videoCodec,\n                resolution, width, height,\n                i;\n\n            while ((match = REGEXP_EXTXSTREAMINF.exec(manifest)) !== null) {\n                attrs = getTagAttributes(match[1]);\n\n                codecs = attrs['CODECS'] || '';\n\n                codecs = codecs.split(',');\n                audioCodec = videoCodec = '';\n                for (i = 0; i < codecs.length; i++) {\n                    if (codecs[i].indexOf('avc1') !== -1) {\n                        videoCodec = codecs[i];\n                    } else {\n                        audioCodec = codecs[i];\n                    }\n                }\n\n                resolution = attrs['RESOLUTION'] || '0x0';\n                resolution = resolution.split('x');\n                width = parseInt(resolution[0], 10);\n                height = parseInt(resolution[1], 10);\n\n                stream = {\n                    programId: attrs['PROGRAM-ID'] || '',\n                    bandwidth: parseInt(attrs['BANDWIDTH'] || '0', 10),\n                    audioCodec: audioCodec,\n                    videoCodec: videoCodec,\n                    width: width,\n                    height: height,\n                    audioId: attrs['AUDIO'] || '',\n                    subtitlesId: attrs['SUBTITLES'] || '',\n                    uri: match[2]\n                };\n                streams.push(stream);\n            }\n            return streams;\n        },\n\n        getMedias = function(manifest) {\n            var medias = [],\n                match, attrs, type, media;\n\n            while ((match = REGEXP_EXTXMEDIA.exec(manifest)) !== null) {\n                attrs = getTagAttributes(match[1]);\n                // Ignore if type attribute is not set\n                type = (attrs['TYPE'] || '').toLowerCase();\n                if (type.length === 0) {\n                    break;\n                }\n                media = {\n                    type: type,\n                    groupId: attrs['GROUP-ID'] || '',\n                    name: type + (attrs['NAME'] ? ('_' + attrs['NAME']) : ''),\n                    language: attrs['LANGUAGE'] || '',\n                    autoSelect: attrs['AUTO-SELECT'] === 'YES' ? true : false,\n                    default: attrs['SUTITLES'] === 'YES' ? true : false,\n                    uri: attrs['URI'] || ''\n                };\n                medias.push(media);\n            }\n            return medias;\n        },\n\n        removeSegments = function(segments, sequenceNumber) {\n            for (var i = 0; i < segments.length; i++) {\n                if (segments[i].sequenceNumber < sequenceNumber) {\n                    segments.shift();\n                    i--;\n                } else {\n                    break;\n                }\n            }\n        },\n\n        parsePlaylist = function(manifest, representation, adaptation) {\n            var segmentList,\n                segments,\n                segment,\n                initialization,\n                decryptionInfo = null,\n                duration = 0,\n                sequenceNumber = 0,\n                programDateTime = null,\n                i;\n\n            // Check playlist header\n            if (!manifest || (manifest && manifest.length < 0)) {\n                return false;\n            }\n\n            // this.debug.log(manifest);\n\n            if (manifest.indexOf('#EXTM3U') !== 0) {\n                return false;\n            }\n\n            segmentList = representation['SegmentList'];\n            if (!segmentList) {\n                // Initialize SegmentList\n                segmentList = {\n                    name: 'SegmentList',\n                    isRoot: false,\n                    isArray: false,\n                    // children: [],\n                    duration: 0,\n                    startNumber: 0,\n                    timescale: 1,\n                    BaseURL: representation.BaseURL,\n                    SegmentURL_asArray: []\n                };\n                representation['SegmentList'] = segmentList;\n            }\n\n            segments = segmentList.SegmentURL_asArray;\n\n            // Set representation duration, by default set to  (=\"dynamic\")\n            representation.duration = Infinity;\n\n            var match, tag, attrs;\n\n            while ((match = REGEXP_PLAYLIST.exec(manifest)) !== null) {\n                match = match.filter(function(n) { return (n !== undefined); });\n                tag = match[1];\n\n                switch (tag) {\n                    case 'EXT-X-MEDIA-SEQUENCE':\n                        sequenceNumber = parseInt(match[2]);\n                        segmentList.startNumber = sequenceNumber;\n                        break;\n                    case 'EXT-X-TARGETDURATION':\n                        segmentList.duration = parseInt(match[2]);\n                        break;\n                    case 'EXT-X-KEY':\n                        attrs = getTagAttributes(match[2]);\n                        decryptionInfo = {\n                            method: attrs['METHOD'] || 'NONE',\n                            uri: getAbsoluteURI(attrs['URI'], segmentList.BaseURL),\n                            iv: attrs['IV']\n                        };\n                        break;\n                    case 'EXTINF':\n                        segment = {\n                            name: \"SegmentURL\",\n                            isRoot: false,\n                            isArray: true,\n                            media: getAbsoluteURI(match[4], segmentList.BaseURL),\n                            sequenceNumber: sequenceNumber,\n                            time: (segments.length === 0) ? 0 : segments[segments.length - 1].time + segments[segments.length - 1].duration,\n                            duration: parseFloat(match[2]),\n                            decryptionInfo: decryptionInfo\n                        };\n\n                        if (segment.decryptionInfo && !segment.decryptionInfo.iv) {\n                            segment.decryptionInfo.iv = segment.sequenceNumber;\n                        }\n\n                        if (segments.length === 0 || segment.sequenceNumber > segments[segments.length-1].sequenceNumber) {\n                            segments.push(segment);\n                        }\n                        sequenceNumber++;\n                        duration += segment.duration;\n\n                        if (programDateTime) {\n                            segment.programDateTime = programDateTime;\n                            programDateTime += (segment.duration * 1000);\n                        }\n\n                        break;\n                    case 'EXT-X-ENDLIST':\n                        representation.duration = duration;\n                        break;\n                    case 'EXT-X-PROGRAM-DATE-TIME':\n                        programDateTime = Date.parse(match[2]);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            // Remove segments from previous playlist\n            removeSegments(segments, segmentList.startNumber);\n\n            // Correct segments timeline according to previous segment list (in case of variant stream switching)\n            if (adaptation.segments && adaptation.segments.length > 0) {\n                // Align segment list according to sequence number\n                removeSegments(segments, adaptation.segments[0].sequenceNumber);\n                if (segments.length > 0) {\n                    removeSegments(adaptation.segments, segments[0].sequenceNumber);\n                    if (adaptation.segments.length > 0) {\n                        if (segments[0].time !== adaptation.segments[0].time) {\n                            segments[0].time = adaptation.segments[0].time;\n                            for (i = 1; i < segments.length; i++) {\n                                segments[i].time = segments[i - 1].time + segments[i - 1].duration;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // segment list from manifest may be empty (or shifted/desynchronized from previous playlists)\n            if (segments.length === 0) {\n                return true;\n            }\n\n            adaptation.segments = segments;\n\n            var range = {\n                start: segments[0].time,\n                end: segments[segments.length - 1].time + segments[segments.length - 1].duration\n            };\n\n            if (programDateTime) {\n                range.programStart = segments[0].programDateTime;\n                range.programEnd = segments[segments.length - 1].programDateTime + segments[segments.length - 1].duration;\n            }\n\n            if (adaptation.contentType === 'video') {\n                this.metricsModel.addDVRInfo('video', new Date(), range);\n            }\n\n            // Set initialization segment info\n            initialization = {\n                name: \"Initialization\",\n                sourceURL: representation.SegmentList.SegmentURL_asArray[0].media\n            };\n            representation.SegmentList.Initialization = initialization;\n\n            // PATCH Live = VOD\n            //representation.duration = duration;\n\n            return true;\n        },\n\n        postProcess = function(manifest, quality) {\n            var deferred = Q.defer(),\n                period = manifest.Period_asArray[0],\n                // Consider video AdaptationSet (always the 1st one)\n                adaptationSet = period.AdaptationSet_asArray[0],\n                // Consider representation of current and downloaded quality\n                representation = adaptationSet.Representation_asArray[quality],\n                request = new MediaPlayer.vo.SegmentRequest(),\n                manifestDuration,\n                mpdLoadedTime,\n                maxSequenceNumber,\n                i, j, k;\n\n            period.start = 0; //segmentTimes[adaptationSet.Representation_asArray[0].SegmentList.startNumber];\n\n            // Copy duration from first representation's duration\n            adaptationSet.duration = representation.duration;\n            period.duration = representation.duration;\n\n            if (representation.duration !== Infinity) {\n                manifest.mediaPresentationDuration = representation.duration;\n            }\n\n            // Set manifest type, \"static\" vs \"dynamic\"\n            manifest.type = (representation.duration === Infinity) ? \"dynamic\" : \"static\";\n\n            manifestDuration = representation.SegmentList.duration * representation.SegmentList.SegmentURL_asArray.length;\n\n            // Dynamic use case\n            if (manifest.type === \"dynamic\") {\n                // Set availabilityStartTime property\n                mpdLoadedTime = new Date();\n                manifest.availabilityStartTime = new Date(mpdLoadedTime.getTime() - (manifestDuration * 1000));\n\n                // Set timeshift buffer depth\n                manifest.timeShiftBufferDepth = manifestDuration;\n            }\n\n            // Set minBufferTime\n            manifest.minBufferTime = representation.SegmentList.duration * 3; //MediaPlayer.dependencies.BufferExtensions.DEFAULT_MIN_BUFFER_TIME\n\n            // Align segment lists of all adaptations\n            maxSequenceNumber = Math.max.apply(null, period.AdaptationSet_asArray.map(function(adaptation) {\n                var repIndex = quality > adaptation.Representation_asArray.length ? 0 : quality;\n                return adaptation.Representation_asArray[repIndex].SegmentList.startNumber;\n            }));\n            for (i = 0; i < period.AdaptationSet_asArray.length; i++) {\n                var adaptation = period.AdaptationSet_asArray[i];\n                for (j = 0; j < adaptation.Representation_asArray.length; j++) {\n                    if (adaptation.Representation_asArray[j].SegmentList) {\n                        var segments = adaptation.Representation_asArray[j].SegmentList.SegmentURL_asArray;\n                        if (segments.length > 0 && segments[0].sequenceNumber < maxSequenceNumber) {\n                            removeSegments(segments, maxSequenceNumber);\n                            if (segments.length > 0) {\n                                segments[0].time = 0;\n                                for (k = 1; k < segments.length; k++) {\n                                    segments[k].time = segments[k - 1].time + segments[k - 1].duration;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Download initialization data (PSI, IDR...) of 1st representation to obtain codec information\n            representation = adaptationSet.Representation_asArray[quality];\n            request.type = \"Initialization Segment\";\n            request.url = representation.SegmentList.Initialization.sourceURL;\n\n            var onLoaded = function(representation, response) {\n\n                // Parse initialization data to obtain codec information\n                var tracks = this.hlsDemux.getTracks(new Uint8Array(response.data)),\n                    i = 0;\n\n                representation.codecs = \"\";\n                for (i = 0; i < tracks.length; i++) {\n                    representation.codecs += tracks[i].codecs;\n                    if (i < (tracks.length - 1)) {\n                        representation.codecs += \",\";\n                    }\n                }\n\n                deferred.resolve();\n            };\n\n            var onError = function() {\n                deferred.resolve();\n            };\n\n            if (representation.codecs === \"\") {\n                this.debug.log(\"[HlsParser]\", \"Load initialization segment: \" + request.url);\n                this.fragmentLoader.load(request).then(onLoaded.bind(this, representation), onError.bind(this));\n            } else {\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        },\n\n        parseBaseUrl = function(url) {\n            var base = null;\n\n            if (url.indexOf(\"/\") !== -1) {\n                if (url.indexOf(\"?\") !== -1) {\n                    url = url.substring(0, url.indexOf(\"?\"));\n                }\n                base = url.substring(0, url.lastIndexOf(\"/\") + 1);\n            }\n\n            return base;\n        },\n\n        updatePlaylist = function(representation, adaptation) {\n            var self = this,\n                deferred = Q.defer();\n\n            this.debug.log(\"[HlsParser]\", \"Load playlist manifest: \" + representation.url);\n            xhrLoader = new MediaPlayer.dependencies.XHRLoader();\n            xhrLoader.initialize('text', retryAttempts, retryInterval);\n            xhrLoader.load(representation.url).then(\n                function (request) {\n                    if (parsePlaylist.call(self, request.response, representation, adaptation)) {\n                        deferred.resolve();\n                    } else {\n                        deferred.reject({\n                            name: MediaPlayer.dependencies.ErrorHandler.prototype.MANIFEST_ERR_PARSE,\n                            message: \"Failed to parse variant stream playlist\",\n                            data: {\n                                url: representation.url\n                            }\n                        });\n                    }\n                },\n                function(request) {\n                    if (!request || request.aborted) {\n                        deferred.reject();\n                    } else {\n                        deferred.reject({\n                            name: MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_MANIFEST,\n                            message: \"Failed to download variant stream playlist\",\n                            data: {\n                                url: representation.url,\n                                status: request.status\n                            }\n                        });\n                    }\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        processManifest = function(manifest, baseUrl) {\n            var self = this,\n                deferred = Q.defer(),\n                mpd,\n                period,\n                adaptationsSets = [],\n                adaptationSet,\n                representations,\n                representation,\n                representationId = 0,\n                streams = [],\n                stream,\n                medias = [],\n                media,\n                quality,\n                playlistDefers = [],\n                i = 0;\n\n            if (manifest.indexOf('#EXTM3U') !== 0) {\n                this.debug.error(\"[HlsParser] no stream in HLS manifest\");\n                deferred.reject();\n                return deferred.promise;\n            }\n\n            // MPD\n            mpd = {};\n            mpd.name = \"M3U\";\n            mpd.isRoot = true;\n            mpd.isArray = true;\n            mpd.parent = null;\n            // mpd.children = [];\n            mpd.BaseURL = baseUrl;\n\n            mpd.profiles = \"urn:mpeg:dash:profile:isoff-live:2011\";\n            mpd.type = \"static\"; // Updated in postProcess()\n\n            // PERIOD\n            period = {};\n            period.name = \"Period\";\n            period.isRoot = false;\n            period.isArray = false;\n            period.parent = mpd;\n            period.duration = 0; // To be set at variant playlist parsing\n            period.BaseURL = mpd.BaseURL;\n\n            mpd.Period = period;\n            mpd.Period_asArray = [period];\n\n            // ADAPTATION SET\n            adaptationsSets = [];\n            period.AdaptationSet = adaptationsSets;\n            period.AdaptationSet_asArray = adaptationsSets;\n\n            // Get variant streams\n            streams = getVariantStreams(manifest);\n\n            if (streams.length === 0) {\n                this.debug.error(\"[HlsParser] No stream in HLS manifest\");\n                deferred.reject();\n                return deferred.promise;\n            }\n\n            // Sort streams by bandwidth\n            streams.sort(function(a, b) {\n                return a.bandwidth - b.bandwidth;\n            });\n\n            // Create AdaptationSet and a representation for each variant stream\n            adaptationSet = {\n                name: \"AdaptationSet\",\n                isRoot: false,\n                isArray: true,\n                id: \"video\",\n                lang: \"\",\n                contentType: \"video\",\n                mimeType: \"video/mp4\",\n                maxWidth: 0,\n                maxHeight: 0,\n                BaseURL: period.BaseURL\n            };\n\n            representations = [];\n            for (i = 0; i < streams.length; i++) {\n                stream = streams[i];\n                // Do not consider representation with bandwidth <= 64K which corresponds to audio only variant stream\n                if (stream.bandwidth <= 64000) {\n                    break;\n                }\n                representation = {\n                    name: \"Representation\",\n                    isRoot: false,\n                    isArray: true,\n                    id: representationId.toString(),\n                    mimeType: \"video/mp4\",\n                    // Consider audio codec only if no alternate track for audio\n                    codecs: (stream.videoCodec.length > 0) ? (stream.audioId.length > 0 ? stream.videoCodec : (stream.videoCodec + ',' + stream.audioCodec)) : \"\",\n                    bandwidth: stream.bandwidth,\n                    width: stream.width,\n                    height: stream.height,\n                    url: getAbsoluteURI(stream.uri, adaptationSet.BaseURL)\n                };\n                representation.BaseURL = parseBaseUrl(representation.url);\n                representations.push(representation);\n                representationId++;\n            }\n\n            adaptationSet.Representation = (representations.length > 1) ? representations : representations[0];\n            adaptationSet.Representation_asArray = representations;\n            adaptationsSets.push(adaptationSet);\n\n            // Download and process representation (variant stream) playlist\n            quality = this.abrController.getPlaybackQuality(\"video\", adaptationsSets[0]).quality;\n            representation = adaptationsSets[0].Representation_asArray[quality];\n            playlistDefers.push(updatePlaylist.call(this, representation, adaptationSet));\n\n            // Alternative renditions of the same content (alternative audio tracks or subtitles) #EXT-X-MEDIA\n            medias = getMedias(manifest);\n            for (i = 0; i < medias.length; i++) {\n                media = medias[i];\n                adaptationSet = {\n                    name: 'AdaptationSet',\n                    isRoot: false,\n                    isArray: true,\n                    id: media.name,\n                    lang: media.language,\n                    contentType: media.type,\n                    mimeType: media.type === 'audio' ? 'audio/mp4' : 'text/vtt',\n                    maxWidth: 0,\n                    maxHeight: 0,\n                    BaseURL: period.BaseURL\n                };\n\n                representation = {\n                    name: 'Representation',\n                    isRoot: false,\n                    isArray: true,\n                    id: '',\n                    mimeType: media.type === 'audio' ? 'audio/mp4' : 'text/vtt',\n                    codecs: media.type === 'audio' ? streams[0].audioCodec : 'WebVTT',\n                    bandwidth: 0,\n                    width: 0,\n                    height: 0,\n                    url: getAbsoluteURI(media.uri, adaptationSet.BaseURL)\n                };\n                representation.BaseURL = parseBaseUrl(representation.url);\n\n                adaptationSet.Representation = representation;\n                adaptationSet.Representation_asArray = [representation];\n                adaptationsSets.push(adaptationSet);\n                playlistDefers.push(updatePlaylist.call(this, representation, adaptationSet));\n            }\n\n            // Get representation (variant stream) playlist\n            Q.all(playlistDefers).then(\n                function() {\n                    postProcess.call(self, mpd, quality).then(function() {\n                        deferred.resolve(mpd);\n                    });\n                },\n                function(error) {\n                    // error undefined in case of playlist download aborted\n                    if (error) {\n                        // Variant stream playlist download error\n                        deferred.reject(error);\n                    } else {\n                        // Variant stream playlist download aborted\n                        deferred.resolve(null);\n                    }\n                }\n            );\n\n            return deferred.promise;\n        },\n\n        internalParse = function(data, baseUrl) {\n            this.hlsDemux.reset();\n            this.debug.log(\"[HlsParser]\", \"Doing parse.\");\n            this.debug.log(\"[HlsParser]\", data);\n            return processManifest.call(this, data, baseUrl);\n        },\n\n        abort = function() {\n            if (xhrLoader !== null) {\n                xhrLoader.abort();\n            }\n        };\n\n    return {\n        debug: undefined,\n        config: undefined,\n        manifestModel: undefined,\n        fragmentLoader: undefined,\n        abrController: undefined,\n        hlsDemux: undefined,\n        metricsModel: undefined,\n\n        setup: function() {\n            retryAttempts = this.config.getParam(\"ManifestLoader.RetryAttempts\", \"number\", DEFAULT_RETRY_ATTEMPTS);\n            retryInterval = this.config.getParam(\"ManifestLoader.RetryInterval\", \"number\", DEFAULT_RETRY_INTERVAL);\n        },\n\n        parse: internalParse,\n\n        updatePlaylist: updatePlaylist,\n\n        abort: abort\n    };\n};\n\nHls.dependencies.HlsParser.prototype = {\n    constructor: Hls.dependencies.HlsParser\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Define Number.MAX_SAFE_INTEGER value in case it is not defined (such as in IE11)\nif (!Number.MAX_SAFE_INTEGER) {\n    Number.MAX_SAFE_INTEGER = 9007199254740991;\n}\n\nMss.dependencies.MssParser = function() {\n    \"use strict\";\n\n    var TIME_SCALE_100_NANOSECOND_UNIT = 10000000.0,\n        SUPPORTED_CODECS = [\"AAC\", \"AACL\", \"AVC1\", \"H264\", \"TTML\", \"DFXP\"],\n        samplingFrequencyIndex = {\n            96000: 0x0,\n            88200: 0x1,\n            64000: 0x2,\n            48000: 0x3,\n            44100: 0x4,\n            32000: 0x5,\n            24000: 0x6,\n            22050: 0x7,\n            16000: 0x8,\n            12000: 0x9,\n            11025: 0xA,\n            8000: 0xB,\n            7350: 0xC\n        },\n        mimeTypeMap = {\n            \"video\": \"video/mp4\",\n            \"audio\": \"audio/mp4\",\n            \"text\": \"application/ttml+xml+mp4\"\n        },\n        xmlDoc = null,\n        baseURL = null,\n\n        mapPeriod = function() {\n            var period = {},\n                adaptations = [],\n                adaptation,\n                smoothNode = this.domParser.getChildNode(xmlDoc, \"SmoothStreamingMedia\"),\n                i;\n\n            period.BaseURL = baseURL;\n\n            // For each StreamIndex node, create an AdaptationSet element\n            for (i = 0; i < smoothNode.childNodes.length; i++) {\n                if (smoothNode.childNodes[i].nodeName === \"StreamIndex\") {\n                    adaptation = mapAdaptationSet.call(this, smoothNode.childNodes[i]);\n                    if (adaptation !== null) {\n                        adaptations.push(adaptation);\n                    }\n                }\n            }\n\n            if (adaptations.length > 0) {\n                period.AdaptationSet = (adaptations.length > 1) ? adaptations : adaptations[0];\n            }\n            period.AdaptationSet_asArray = adaptations;\n\n            return period;\n        },\n\n        mapAdaptationSet = function(streamIndex) {\n\n            var adaptationSet = {},\n                representations = [],\n                representation,\n                segmentTemplate = {},\n                qualityLevels = null,\n                subType = null,\n                i;\n\n            adaptationSet.id = this.domParser.getAttributeValue(streamIndex, \"Name\");\n            adaptationSet.lang = this.domParser.getAttributeValue(streamIndex, \"Language\");\n            adaptationSet.contentType = this.domParser.getAttributeValue(streamIndex, \"Type\");\n            adaptationSet.mimeType = mimeTypeMap[adaptationSet.contentType];\n            adaptationSet.maxWidth = this.domParser.getAttributeValue(streamIndex, \"MaxWidth\");\n            adaptationSet.maxHeight = this.domParser.getAttributeValue(streamIndex, \"MaxHeight\");\n            adaptationSet.BaseURL = baseURL;\n\n            subType = this.domParser.getAttributeValue(streamIndex, \"Subtype\");\n            if (subType) {\n                adaptationSet.subType = subType;\n            }\n\n            // Create a SegmentTemplate with a SegmentTimeline\n            segmentTemplate = mapSegmentTemplate.call(this, streamIndex);\n\n            qualityLevels = this.domParser.getChildNodes(streamIndex, \"QualityLevel\");\n            // For each QualityLevel node, create a Representation element\n            for (i = 0; i < qualityLevels.length; i++) {\n                // Propagate BaseURL and mimeType\n                qualityLevels[i].BaseURL = adaptationSet.BaseURL;\n                qualityLevels[i].mimeType = adaptationSet.mimeType;\n\n                // Set quality level id\n                qualityLevels[i].Id = adaptationSet.id + \"_\" + this.domParser.getAttributeValue(qualityLevels[i], \"Index\");\n\n                // Map Representation to QualityLevel\n                representation = mapRepresentation.call(this, qualityLevels[i], streamIndex);\n\n                if (representation !== null) {\n                    // Copy SegmentTemplate into Representation\n                    representation.SegmentTemplate = segmentTemplate;\n\n                    representations.push(representation);\n                }\n            }\n\n            if (representations.length === 0) {\n                return null;\n            }\n\n            adaptationSet.Representation = (representations.length > 1) ? representations : representations[0];\n            adaptationSet.Representation_asArray = representations;\n\n            // Set SegmentTemplate\n            adaptationSet.SegmentTemplate = segmentTemplate;\n\n            return adaptationSet;\n        },\n\n        mapRepresentation = function(qualityLevel, streamIndex) {\n\n            var representation = {},\n                fourCCValue = null,\n                type = this.domParser.getAttributeValue(streamIndex, \"Type\");\n\n            representation.id = qualityLevel.Id;\n            representation.bandwidth = parseInt(this.domParser.getAttributeValue(qualityLevel, \"Bitrate\"), 10);\n            representation.mimeType = qualityLevel.mimeType;\n            representation.width = parseInt(this.domParser.getAttributeValue(qualityLevel, \"MaxWidth\"), 10);\n            representation.height = parseInt(this.domParser.getAttributeValue(qualityLevel, \"MaxHeight\"), 10);\n\n            fourCCValue = this.domParser.getAttributeValue(qualityLevel, \"FourCC\");\n\n            // If FourCC not defined at QualityLevel level, then get it from StreamIndex level\n            if (fourCCValue === null || fourCCValue === \"\") {\n                fourCCValue = this.domParser.getAttributeValue(streamIndex, \"FourCC\");\n            }\n\n            // If still not defined (optionnal for audio stream, see https://msdn.microsoft.com/en-us/library/ff728116%28v=vs.95%29.aspx),\n            // then we consider the stream is an audio AAC stream\n            if (fourCCValue === null || fourCCValue === \"\") {\n                if (type === 'audio') {\n                    fourCCValue = \"AAC\";\n                } else {\n                    this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED, type + \" codec/FourCC not provided\", {codec: ''});\n                    return null;\n                }\n            }\n\n            // Check if codec is supported\n            if (SUPPORTED_CODECS.indexOf(fourCCValue.toUpperCase()) === -1) {\n                // Do not send warning\n                //this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED, \"Codec/FourCC not supported\", {codec: fourCCValue});\n                this.debug.warn(\"[MssParser] Codec not supported: \" + fourCCValue);\n                return null;\n            }\n\n            // Get codecs value according to FourCC field\n            if (fourCCValue === \"H264\" || fourCCValue === \"AVC1\") {\n                representation.codecs = getH264Codec.call(this, qualityLevel);\n            } else if (fourCCValue.indexOf(\"AAC\") >= 0) {\n                representation.codecs = getAACCodec.call(this, qualityLevel, fourCCValue);\n                representation.audioSamplingRate = parseInt(this.domParser.getAttributeValue(qualityLevel, \"SamplingRate\"), 10);\n                representation.audioChannels = parseInt(this.domParser.getAttributeValue(qualityLevel, \"Channels\"), 10);\n            }\n\n            representation.codecPrivateData = \"\" + this.domParser.getAttributeValue(qualityLevel, \"CodecPrivateData\");\n            representation.BaseURL = qualityLevel.BaseURL;\n\n            return representation;\n        },\n\n        getH264Codec = function(qualityLevel) {\n            var codecPrivateData = this.domParser.getAttributeValue(qualityLevel, \"CodecPrivateData\").toString(),\n                nalHeader,\n                avcoti;\n\n\n            // Extract from the CodecPrivateData field the hexadecimal representation of the following\n            // three bytes in the sequence parameter set NAL unit.\n            // => Find the SPS nal header\n            nalHeader = /00000001[0-9]7/.exec(codecPrivateData);\n            // => Find the 6 characters after the SPS nalHeader (if it exists)\n            avcoti = nalHeader && nalHeader[0] ? (codecPrivateData.substr(codecPrivateData.indexOf(nalHeader[0]) + 10, 6)) : undefined;\n\n            return \"avc1.\" + avcoti;\n        },\n\n        getAACCodec = function(qualityLevel, fourCCValue) {\n            var objectType = 0,\n                codecPrivateData = this.domParser.getAttributeValue(qualityLevel, \"CodecPrivateData\").toString(),\n                codecPrivateDataHex,\n                samplingRate = parseInt(this.domParser.getAttributeValue(qualityLevel, \"SamplingRate\"), 10),\n                arr16,\n                indexFreq,\n                extensionSamplingFrequencyIndex;\n\n            //chrome problem, in implicit AAC HE definition, so when AACH is detected in FourCC\n            //set objectType to 5 => strange, it should be 2\n            if (fourCCValue === \"AACH\") {\n                objectType = 0x05;\n            }\n            //if codecPrivateData is empty, build it :\n            if (codecPrivateData === undefined || codecPrivateData === \"\") {\n                objectType = 0x02; //AAC Main Low Complexity => object Type = 2\n                indexFreq = samplingFrequencyIndex[samplingRate];\n                if (fourCCValue === \"AACH\") {\n                    // 4 bytes :     XXXXX         XXXX          XXXX             XXXX                  XXXXX      XXX   XXXXXXX\n                    //           ' ObjectType' 'Freq Index' 'Channels value'   'Extens Sampl Freq'  'ObjectType'  'GAS' 'alignment = 0'\n                    objectType = 0x05; // High Efficiency AAC Profile = object Type = 5 SBR\n                    codecPrivateData = new Uint8Array(4);\n                    extensionSamplingFrequencyIndex = samplingFrequencyIndex[samplingRate * 2]; // in HE AAC Extension Sampling frequence\n                    // equals to SamplingRate*2\n                    //Freq Index is present for 3 bits in the first byte, last bit is in the second\n                    codecPrivateData[0] = (objectType << 3) | (indexFreq >> 1);\n                    codecPrivateData[1] = (indexFreq << 7) | (qualityLevel.Channels << 3) | (extensionSamplingFrequencyIndex >> 1);\n                    codecPrivateData[2] = (extensionSamplingFrequencyIndex << 7) | (0x02 << 2); // origin object type equals to 2 => AAC Main Low Complexity\n                    codecPrivateData[3] = 0x0; //alignment bits\n\n                    arr16 = new Uint16Array(2);\n                    arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                    arr16[1] = (codecPrivateData[2] << 8) + codecPrivateData[3];\n                    //convert decimal to hex value\n                    codecPrivateDataHex = arr16[0].toString(16);\n                    codecPrivateDataHex = arr16[0].toString(16) + arr16[1].toString(16);\n\n                } else {\n                    // 2 bytes :     XXXXX         XXXX          XXXX              XXX\n                    //           ' ObjectType' 'Freq Index' 'Channels value'   'GAS = 000'\n                    codecPrivateData = new Uint8Array(2);\n                    //Freq Index is present for 3 bits in the first byte, last bit is in the second\n                    codecPrivateData[0] = (objectType << 3) | (indexFreq >> 1);\n                    codecPrivateData[1] = (indexFreq << 7) | (parseInt(this.domParser.getAttributeValue(qualityLevel, \"Channels\"), 10) << 3);\n                    // put the 2 bytes in an 16 bits array\n                    arr16 = new Uint16Array(1);\n                    arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                    //convert decimal to hex value\n                    codecPrivateDataHex = arr16[0].toString(16);\n                }\n\n                codecPrivateData = \"\" + codecPrivateDataHex;\n                codecPrivateData = codecPrivateData.toUpperCase();\n                qualityLevel.setAttribute(\"CodecPrivateData\", codecPrivateData);\n            } else if (objectType === 0) {\n                objectType = (parseInt(codecPrivateData.substr(0, 2), 16) & 0xF8) >> 3;\n            }\n\n            return \"mp4a.40.\" + objectType;\n        },\n\n        mapSegmentTemplate = function(streamIndex) {\n\n            var segmentTemplate = {},\n                mediaUrl;\n\n            mediaUrl = this.domParser.getAttributeValue(streamIndex, \"Url\").replace('{bitrate}', '$Bandwidth$');\n            mediaUrl = mediaUrl.replace('{start time}', '$Time$');\n\n            segmentTemplate.media = mediaUrl;\n            segmentTemplate.timescale = TIME_SCALE_100_NANOSECOND_UNIT;\n\n            segmentTemplate.SegmentTimeline = mapSegmentTimeline.call(this, streamIndex);\n\n            return segmentTemplate;\n        },\n\n        mapSegmentTimeline = function(streamIndex) {\n\n            var segmentTimeline = {},\n                chunks = this.domParser.getChildNodes(streamIndex, \"c\"),\n                segments = [],\n                segment,\n                prevSegment,\n                i, j, r,\n                tManifest,\n                duration = 0;\n\n            for (i = 0; i < chunks.length; i++) {\n                segment = {};\n\n                // Get time 't' attribute value (as string in order to handle large values, i.e. > 2^53)\n                tManifest = this.domParser.getAttributeValue(chunks[i], \"t\");\n\n                // Check if time is not greater than 2^53\n                // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n                // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n                if (tManifest && goog.math.Long.fromString(tManifest).greaterThan(goog.math.Long.fromNumber(Number.MAX_SAFE_INTEGER))) {\n                    segment.tManifest = tManifest;\n                }\n\n                segment.t = parseFloat(tManifest);\n\n                // Get duration 'd' attribute value\n                segment.d = parseFloat(this.domParser.getAttributeValue(chunks[i], \"d\"));\n\n                // If 't' not defined for first segment then t=0\n                if ((i === 0) && !segment.t) {\n                    segment.t = 0;\n                }\n\n                if (i > 0) {\n                    prevSegment = segments[segments.length - 1];\n                    // Update previous segment duration if not defined\n                    if (!prevSegment.d) {\n                       if (prevSegment.tManifest) {\n                           prevSegment.d = goog.math.Long.fromString(tManifest).subtract(goog.math.Long.fromString(prevSegment.tManifest)).toNumber();\n                       } else {\n                           prevSegment.d = segment.t - prevSegment.t;\n                       }\n                    }\n                    // Set segment absolute timestamp if not set in manifest\n                    if (!segment.t) {\n                        if (prevSegment.tManifest) {\n                           segment.tManifest = goog.math.Long.fromString(prevSegment.tManifest).add(goog.math.Long.fromNumber(prevSegment.d)).toString();\n                           segment.t = parseFloat(segment.tManifest);\n                       } else {\n                           segment.t = prevSegment.t + prevSegment.d;\n                       }\n                    }\n                }\n\n                duration += segment.d;\n\n                // Create new segment\n                segments.push(segment);\n\n                // Support for 'r' attribute (i.e. \"repeat\" as in MPEG-DASH)\n                r = parseFloat(this.domParser.getAttributeValue(chunks[i], \"r\"));\n                if (r) {\n\n                    for (j = 0; j < (r - 1); j++) {\n                        prevSegment = segments[segments.length - 1];\n                        segment = {};\n                        segment.t = prevSegment.t + prevSegment.d;\n                        segment.d = prevSegment.d;\n                        if (prevSegment.tManifest) {\n                            segment.tManifest  = goog.math.Long.fromString(prevSegment.tManifest).add(goog.math.Long.fromNumber(prevSegment.d)).toString();\n                        }\n                        duration += segment.d;\n                        segments.push(segment);\n                    }\n                }\n            }\n\n            segmentTimeline.S = segments;\n            segmentTimeline.S_asArray = segments;\n            segmentTimeline.duration = duration / TIME_SCALE_100_NANOSECOND_UNIT;\n\n            return segmentTimeline;\n        },\n\n        getKIDFromProtectionHeader = function(protectionHeader) {\n            var prHeader,\n                wrmHeader,\n                xmlReader,\n                KID;\n\n            // Get PlayReady header as byte array (base64 decoded)\n            prHeader = BASE64.decodeArray(protectionHeader.firstChild.data);\n\n            // Get Right Management header (WRMHEADER) from PlayReady header\n            wrmHeader = getWRMHeaderFromPRHeader(prHeader);\n\n            // Convert from multi-byte to unicode\n            wrmHeader = new Uint16Array(wrmHeader.buffer);\n\n            // Convert to string\n            wrmHeader = String.fromCharCode.apply(null, wrmHeader);\n\n            // Parse <WRMHeader> to get KID field value\n            xmlReader = (new DOMParser()).parseFromString(wrmHeader, \"application/xml\");\n            KID = xmlReader.querySelector(\"KID\").textContent;\n\n            // Get KID (base64 decoded) as byte array\n            KID = BASE64.decodeArray(KID);\n\n            // Convert UUID from little-endian to big-endian\n            convertUuidEndianness(KID);\n\n            return KID;\n        },\n\n        getWRMHeaderFromPRHeader = function(prHeader) {\n            var length,\n                recordCount,\n                recordType,\n                recordLength,\n                recordValue,\n                i = 0;\n\n            // Parse PlayReady header\n\n            // Length - 32 bits (LE format)\n            length = (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i];\n            i += 4;\n\n            // Record count - 16 bits (LE format)\n            recordCount = (prHeader[i + 1] << 8) + prHeader[i];\n            i += 2;\n\n            // Parse records\n            while (i < prHeader.length) {\n                // Record type - 16 bits (LE format)\n                recordType = (prHeader[i + 1] << 8) + prHeader[i];\n                i += 2;\n\n                // Check if Rights Management header (record type = 0x01)\n                if (recordType === 0x01) {\n\n                    // Record length - 16 bits (LE format)\n                    recordLength = (prHeader[i + 1] << 8) + prHeader[i];\n                    i += 2;\n\n                    // Record value => contains <WRMHEADER>\n                    recordValue = new Uint8Array(recordLength);\n                    recordValue.set(prHeader.subarray(i, i + recordLength));\n                    return recordValue;\n                }\n            }\n\n            return null;\n        },\n\n        convertUuidEndianness = function(uuid) {\n            swapBytes(uuid, 0, 3);\n            swapBytes(uuid, 1, 2);\n            swapBytes(uuid, 4, 5);\n            swapBytes(uuid, 6, 7);\n        },\n\n        swapBytes = function(bytes, pos1, pos2) {\n            var temp = bytes[pos1];\n            bytes[pos1] = bytes[pos2];\n            bytes[pos2] = temp;\n        },\n\n\n        createPRContentProtection = function(protectionHeader) {\n\n            var contentProtection = {},\n                keySystem = this.system.getObject(\"ksPlayReady\"),\n                pro;\n\n            pro = {\n                __text: protectionHeader.firstChild.data,\n                __prefix: \"mspr\"\n            };\n\n            contentProtection.schemeIdUri = keySystem.schemeIdURI;\n            contentProtection.value = keySystem.systemString;\n            contentProtection.pro = pro;\n            contentProtection.pro_asArray = pro;\n\n            return contentProtection;\n        },\n\n        createWidevineContentProtection = function(KID) {\n\n            var contentProtection = {},\n                keySystem = this.system.getObject(\"ksWidevine\");\n\n            contentProtection.schemeIdUri = keySystem.schemeIdURI;\n            contentProtection.value = keySystem.systemString;\n\n            // Create Widevine CENC header (Protocol Buffer) with KID value\n            var wvCencHeader = new Uint8Array(2 + KID.length);\n            wvCencHeader[0] = 0x12;\n            wvCencHeader[1] = 0x10;\n            wvCencHeader.set(KID, 2);\n    \n            // Create a pssh box\n            var length = 12 /* box length, type, version and flags */ + 16 /* SystemID */ + 4 /* data length */ + wvCencHeader.length,\n                pssh = new Uint8Array(length),\n                i = 0;\n    \n            // Set box length value\n            pssh[i++] = (length & 0xFF000000) >> 24;\n            pssh[i++] = (length & 0x00FF0000) >> 16;\n            pssh[i++] = (length & 0x0000FF00) >> 8;\n            pssh[i++] = (length & 0x000000FF);\n    \n            // Set type ('pssh'), version (0) and flags (0)\n            pssh.set([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00], i);\n            i += 8;\n    \n            // Set SystemID ('edef8ba9-79d6-4ace-a3c8-27dcd51d21ed')\n            pssh.set([0xed, 0xef, 0x8b, 0xa9,  0x79, 0xd6, 0x4a, 0xce, 0xa3, 0xc8, 0x27, 0xdc, 0xd5, 0x1d, 0x21, 0xed], i);\n            i += 16;\n    \n            // Set data length value\n            pssh[i++] = (wvCencHeader.length & 0xFF000000) >> 24;\n            pssh[i++] = (wvCencHeader.length & 0x00FF0000) >> 16;\n            pssh[i++] = (wvCencHeader.length & 0x0000FF00) >> 8;\n            pssh[i++] = (wvCencHeader.length & 0x000000FF);\n    \n            // Copy Widevine CENC header\n            pssh.set(wvCencHeader, i);\n    \n            // Convert to BASE64 string\n            pssh = String.fromCharCode.apply(null, pssh);\n            pssh = BASE64.encodeASCII(pssh);         \n            \n            // Add pssh value to ContentProtection\n            contentProtection.pssh = {\n                __text: pssh\n            };\n\n            return contentProtection;\n        },\n\n        addDVRInfo = function(adaptationSet) {\n            var segmentTemplate = adaptationSet.SegmentTemplate,\n                segments = segmentTemplate.SegmentTimeline.S_asArray;\n\n            if (segments.length === 0) {\n                return;\n            }\n\n            var range = {\n                start: segments[0].t / segmentTemplate.timescale,\n                end: (segments[segments.length - 1].t + segments[segments.length - 1].d) / segmentTemplate.timescale\n            };\n\n            this.metricsModel.addDVRInfo(adaptationSet.contentType, new Date(), range);\n        },\n\n        processManifest = function(manifestLoadedTime) {\n            var mpd = {},\n                period,\n                adaptations,\n                contentProtection,\n                contentProtections = [],\n                smoothNode = this.domParser.getChildNode(xmlDoc, \"SmoothStreamingMedia\"),\n                protection = this.domParser.getChildNode(smoothNode, 'Protection'),\n                protectionHeader = null,\n                KID,\n                timestampOffset,\n                startTime,\n                segments,\n                i, j;\n\n            // Set mpd node properties\n            mpd.name = 'MSS';\n            mpd.profiles = \"urn:mpeg:dash:profile:isoff-live:2011\";\n            var isLive = this.domParser.getAttributeValue(smoothNode, 'IsLive');\n            mpd.type = (isLive !== null && isLive.toLowerCase() === 'true') ? 'dynamic' : 'static';\n            mpd.timeShiftBufferDepth = parseFloat(this.domParser.getAttributeValue(smoothNode, 'DVRWindowLength')) / TIME_SCALE_100_NANOSECOND_UNIT;\n            var duration = parseFloat(this.domParser.getAttributeValue(smoothNode, 'Duration'));\n\n            // If live manifest with Duration, we consider it as a start-over manifest\n            if (mpd.type === \"dynamic\" && duration > 0) {\n                mpd.type = \"static\";\n                mpd.startOver = true;\n                // We set timeShiftBufferDepth to initial duration, to be used by MssFragmentController to update segment timeline\n                mpd.timeShiftBufferDepth = duration / TIME_SCALE_100_NANOSECOND_UNIT;\n                // Duration will be set according to current segment timeline duration (see below)\n            }\n\n            // Complete manifest/mpd initialization\n            mpd.mediaPresentationDuration = (duration === 0) ? Infinity : (duration / TIME_SCALE_100_NANOSECOND_UNIT);\n            mpd.BaseURL = baseURL;\n            mpd.minBufferTime = MediaPlayer.dependencies.BufferExtensions.DEFAULT_MIN_BUFFER_TIME;\n\n            // In case of live streams, set availabilityStartTime property according to DVRWindowLength\n            if (mpd.type === \"dynamic\") {\n                mpd.availabilityStartTime = new Date(manifestLoadedTime.getTime() - (mpd.timeShiftBufferDepth * 1000));\n            }\n\n            // Map period node to manifest root node\n            mpd.Period = mapPeriod.call(this);\n            mpd.Period_asArray = [mpd.Period];\n\n            period = mpd.Period;\n\n            // Complete period initialization\n            period.start = 0;\n\n            // Test live to static\n            // if (mpd.type !== 'static') {\n            //     mpd.type = 'static';\n            //     mpd.mediaPresentationDuration = mpd.timeShiftBufferDepth;\n            // }\n\n            // ContentProtection node\n            if (protection !== undefined) {\n                if (MediaPlayer.dependencies.ProtectionController) {\n                    protectionHeader = this.domParser.getChildNode(protection, 'ProtectionHeader');\n\n                    // Some packagers put newlines into the ProtectionHeader base64 string, which is not good\n                    // because this cannot be correctly parsed. Let's just filter out any newlines found in there.\n                    protectionHeader.firstChild.data = protectionHeader.firstChild.data.replace(/\\n|\\r/g, \"\");\n\n                    // Get KID (in CENC format) from protection header\n                    KID = getKIDFromProtectionHeader(protectionHeader);\n\n                    // Create ContentProtection for PR\n                    contentProtection = createPRContentProtection.call(this, protectionHeader);\n                    contentProtection[\"cenc:default_KID\"] = KID;\n                    contentProtections.push(contentProtection);\n\n                    // Create ContentProtection for Widevine (as a CENC protection)\n                    contentProtection = createWidevineContentProtection.call(this, KID);\n                    contentProtection[\"cenc:default_KID\"] = KID;\n                    contentProtections.push(contentProtection);\n\n                    mpd.ContentProtection = (contentProtections.length > 1) ? contentProtections : contentProtections[0];\n                    mpd.ContentProtection_asArray = contentProtections;\n                } else {\n                    mpd.error = {\n                        name: MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_ENCRYPTED,\n                        message: \"protected content detected but protection module is not included.\"\n                    };\n                    return mpd;\n                }\n            }\n\n            adaptations = period.AdaptationSet_asArray;\n\n            for (i = 0; i < adaptations.length; i += 1) {\n                // Propagate content protection information into each adaptation\n                if (mpd.ContentProtection !== undefined) {\n                    adaptations[i].ContentProtection = mpd.ContentProtection;\n                    adaptations[i].ContentProtection_asArray = mpd.ContentProtection_asArray;\n                }\n\n                if (mpd.type === \"dynamic\") {\n                    // Match timeShiftBufferDepth to video segment timeline duration\n                    if (mpd.timeShiftBufferDepth > 0 &&\n                        adaptations[i].contentType === 'video' &&\n                        mpd.timeShiftBufferDepth > adaptations[i].SegmentTemplate.SegmentTimeline.duration) {\n                        mpd.timeShiftBufferDepth = adaptations[i].SegmentTemplate.SegmentTimeline.duration;\n                    }\n\n                    // Add DVRInfo for live streams\n                    addDVRInfo.call(this, adaptations[i]);\n                }\n            }\n\n            if (mpd.timeShiftBufferDepth < mpd.minBufferTime) {\n                mpd.minBufferTime = mpd.timeShiftBufferDepth;\n            }\n\n            // Delete Content Protection under root mpd node\n            delete mpd.ContentProtection;\n            delete mpd.ContentProtection_asArray;\n\n            // In case of VOD streams, check if start time is greater than 0\n            // Then determine timestamp offset according to higher audio/video start time\n            // (use case = live stream delinearization)\n            if (mpd.type === \"static\") {\n                // In case of start-over stream and manifest reloading (due to track switch)\n                // we consider previous timestampOffset to keep timelines synchronized\n                var prevManifest = this.manifestModel.getValue();\n                if (prevManifest && prevManifest.timestampOffset) {\n                    timestampOffset = prevManifest.timestampOffset;\n                } else {\n                    for (i = 0; i < adaptations.length; i++) {\n                        if (adaptations[i].contentType === 'audio' || adaptations[i].contentType === 'video') {\n                            segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray;\n                            startTime = segments[0].t;\n                            if (timestampOffset === undefined) {\n                                timestampOffset = startTime;\n                            }\n                            timestampOffset = Math.min(timestampOffset, startTime);\n                            // Correct content duration according to minimum adaptation's segment timeline duration\n                            // in order to force <video> element sending 'ended' event\n                            mpd.mediaPresentationDuration = Math.min(mpd.mediaPresentationDuration, adaptations[i].SegmentTemplate.SegmentTimeline.duration);\n                        }\n                    }\n                }\n\n                // Patch segment templates timestamps and determine period start time (since audio/video should not be aligned to 0)\n                if (timestampOffset > 0) {\n                    mpd.timestampOffset = timestampOffset;\n                    for (i = 0; i < adaptations.length; i++) {\n                        segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray;\n                        for (j = 0; j < segments.length; j++) {\n                            if (!segments[j].tManifest) {\n                                segments[j].tManifest = segments[j].t;\n                            }\n                            segments[j].t -= timestampOffset;\n                        }\n                        if (adaptations[i].contentType === 'audio' || adaptations[i].contentType === 'video') {\n                            period.start = Math.max(segments[0].t, period.start);\n                        }\n                    }\n                    period.start /= TIME_SCALE_100_NANOSECOND_UNIT;\n                }\n            }\n\n            // Floor the duration to get around precision differences between segments timestamps and MSE buffer timestamps\n            // and the avoid 'ended' event not being raised\n            mpd.mediaPresentationDuration = Math.floor(mpd.mediaPresentationDuration * 1000) / 1000;\n            period.duration = mpd.mediaPresentationDuration;\n\n            return mpd;\n        },\n\n        internalParse = function(data, baseUrl) {\n            this.debug.info(\"[MssParser]\", \"Doing parse.\");\n\n            var start = new Date(),\n                xml = null,\n                manifest = null,\n                mss2dash = null;\n\n            //this.debug.log(\"[MssParser]\", \"Converting from XML.\");\n            xmlDoc = this.domParser.createXmlTree(data);\n            xml = new Date();\n\n            if (xmlDoc === null) {\n                return Q.reject(null);\n            }\n\n            baseURL = baseUrl;\n\n            // Convert MSS manifest into DASH manifest\n            manifest = processManifest.call(this, start);\n\n            if (manifest.error) {\n                return Q.reject(manifest.error);\n            }\n            mss2dash = new Date();\n            //this.debug.log(\"mpd: \" + JSON.stringify(manifest, null, '\\t'));\n\n            this.debug.info(\"[MssParser]\", \"Parsing complete (xmlParser: \" + (xml.getTime() - start.getTime()) + \"ms, mss2dash: \" + (mss2dash.getTime() - xml.getTime()) + \"ms, total: \" + ((new Date().getTime() - start.getTime()) / 1000) + \"s)\");\n            //console.info(\"manifest\",JSON.stringify(manifest) );\n            return Q.when(manifest);\n        };\n\n    return {\n        debug: undefined,\n        system: undefined,\n        errHandler: undefined,\n        domParser: undefined,\n        metricsModel: undefined,\n        manifestModel: undefined,\n\n        parse: internalParse\n    };\n};\n\nMss.dependencies.MssParser.prototype = {\n    constructor: Mss.dependencies.MssParser\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMss.dependencies.MssHandler = function() {\n    \"use strict\";\n\n    var getAudioChannels = function(adaptation, representation) {\n            var channels = 1;\n\n            if (adaptation.audioChannels) {\n                channels = adaptation.audioChannels;\n            } else if (representation.audioChannels) {\n                channels = representation.audioChannels;\n            }\n\n            return channels;\n        },\n\n        getAudioSamplingRate = function(adaptation, representation) {\n            var samplingRate = 1;\n\n            if (adaptation.audioSamplingRate) {\n                samplingRate = adaptation.audioSamplingRate;\n            } else {\n                samplingRate = representation.audioSamplingRate;\n            }\n\n            return samplingRate;\n        },\n\n        // Generates initialization segment data from representation information\n        // by using mp4lib library\n        getInitData = function(representation) {\n            var manifest = rslt.manifestModel.getValue(),\n                adaptation,\n                realAdaptation,\n                realRepresentation,\n                track,\n                codec;\n\n            if (representation.initData) {\n                return representation.initData;\n            }\n\n            // Get required media information from manifest  to generate initialisation segment\n            adaptation = representation.adaptation;\n            realAdaptation = manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index];\n            realRepresentation = realAdaptation.Representation_asArray[representation.index];\n\n            track = new MediaPlayer.vo.Mp4Track();\n            track.type = rslt.getType() || 'und';\n            track.trackId = adaptation.index + 1; // +1 since track_id shall start from '1'\n            track.timescale = representation.timescale;\n            track.duration = representation.adaptation.period.duration;\n            track.codecs = realRepresentation.codecs;\n            track.codecPrivateData = realRepresentation.codecPrivateData;\n            track.bandwidth = realRepresentation.bandwidth;\n\n            if (track.type !== 'text') {\n                codec = realRepresentation.mimeType + ';codecs=\"' + realRepresentation.codecs + '\"';\n                if (!this.capabilities.supportsCodec(this.videoModel.getElement(), codec)) {\n                    throw {\n                        name: MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED,\n                        message: 'Codec is not supported (HTMLMediaElement)',\n                        data: {\n                            codec: codec,\n                            bandwidth: realRepresentation.bandwidth,\n                            codecPrivateData: realRepresentation.codecPrivateData\n                        }\n                    };\n                }\n            }\n\n            // DRM Protected Adaptation is detected\n            if (realAdaptation.ContentProtection_asArray && (realAdaptation.ContentProtection_asArray.length > 0)) {\n                track.contentProtection = realAdaptation.ContentProtection_asArray;\n            }\n\n            // Video related informations\n            track.width = realRepresentation.width || realAdaptation.maxWidth;\n            track.height = realRepresentation.height || realAdaptation.maxHeight;\n\n            // Audio related informations\n            track.language = realAdaptation.lang ? realAdaptation.lang : 'und';\n\n            track.channels = getAudioChannels(realAdaptation, realRepresentation);\n            track.samplingRate = getAudioSamplingRate(realAdaptation, realRepresentation);\n\n            representation.initData = rslt.mp4Processor.generateInitSegment([track]);\n\n            return representation.initData;\n\n        };\n\n    var rslt = MediaPlayer.utils.copyMethods(Dash.dependencies.DashHandler);\n    rslt.mp4Processor = undefined;\n\n    rslt.getInitRequest = function(representation) {\n        var period = null,\n            self = this,\n            presentationStartTime = null,\n            request = null,\n            deferred = Q.defer();\n\n        if (!representation) {\n            throw new Error(\"MssHandler.getInitRequest(): representation is undefined\");\n        }\n\n        period = representation.adaptation.period;\n        presentationStartTime = period.start;\n\n        request = new MediaPlayer.vo.SegmentRequest();\n\n        request.streamType = rslt.getType();\n        request.type = \"Initialization Segment\";\n        request.url = null;\n\n        try {\n            request.data = getInitData.call(this, representation);\n        } catch (e) {\n            deferred.reject(e);\n            return deferred.promise;\n        }\n\n        request.range = representation.range;\n        request.availabilityStartTime = self.timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, rslt.getIsDynamic());\n        request.availabilityEndTime = self.timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, rslt.getIsDynamic());\n\n        //request.action = \"complete\"; //needed to avoid to execute request\n        request.quality = representation.index;\n        deferred.resolve(request);\n\n        return deferred.promise;\n    };\n\n    rslt.getIFrameRequest = function(request){\n        if (request && request.url && (request.streamType === \"video\" || request.streamType === \"audio\")) {\n            request.url = request.url.replace('Fragments','KeyFrames');\n        }\n\n        return request;\n    };\n\n    rslt.getFragmentInfoRequest = function(request){\n        if (request && request.url) {\n            request.url = request.url.replace('Fragments','FragmentInfo');\n            request.type = \"FragmentInfo Segment\";\n        }\n\n        return request;\n    };\n\n    return rslt;\n};\n\nMss.dependencies.MssHandler.prototype = {\n    constructor: Mss.dependencies.MssHandler\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMss.dependencies.MssFragmentController = function() {\n    \"use strict\";\n\n    var processTfrf = function(request, tfrf, tfdt, adaptation) {\n            var manifest = this.manifestModel.getValue(),\n                segments = adaptation.SegmentTemplate.SegmentTimeline.S_asArray,\n                timescale = adaptation.SegmentTemplate.timescale,\n                entries = tfrf.entry,\n                entry,\n                segment = null,\n                segmentTime,\n                t = 0,\n                availabilityStartTime = null,\n                type = adaptation.type,\n                range;\n\n            // Process tfrf only for live or start-over streams\n            if (!this.manifestExt.getIsDynamic(manifest) && !this.manifestExt.getIsStartOver(manifest)) {\n                return;\n            }\n\n            if (entries.length === 0) {\n                return;\n            }\n\n            // Consider only first tfrf entry (to avoid pre-condition failure on fragment info requests)\n            entry = entries[0];\n\n            // !! For tfrf fragment_absolute_time and fragment_duration are returned as goog.math.Long values (see mp4lib)\n\n            // Check if time is not greater than Number.MAX_SAFE_INTEGER (2^53-1), see MssParser\n            // => fragment_absolute_timeManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n            // => fragment_absolute_time = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n            if (entry.fragment_absolute_time.greaterThan(goog.math.Long.fromNumber(Number.MAX_SAFE_INTEGER))) {\n                entry.fragment_absolute_timeManifest = entry.fragment_absolute_time.toString();\n            }\n\n            // Convert goog.math.Long to Number values\n            entry.fragment_absolute_time = entry.fragment_absolute_time.toNumber();\n            entry.fragment_duration = entry.fragment_duration.toNumber();\n\n            // In case of start-over streams, check if we have reached end of original manifest duration (set in timeShiftBufferDepth)\n            // => then do not update anymore timeline\n            if (this.manifestExt.getIsStartOver(manifest)) {\n                // Get first segment time\n                segmentTime = segments[0].tManifest ? parseFloat(segments[0].tManifest) : segments[0].t;\n                if (entry.fragment_absolute_time > (segmentTime + (manifest.timeShiftBufferDepth * timescale))) {\n                    return;\n                }                    \n            }\n\n            // Get last segment time\n            segmentTime = segments[segments.length - 1].tManifest ? parseFloat(segments[segments.length - 1].tManifest) : segments[segments.length - 1].t;\n\n            // Check if we have to append new segment to timeline\n            if (entry.fragment_absolute_time <= segmentTime) {\n                return;\n            }\n\n            this.debug.log(\"[MssFragmentController][\" + type + \"] Add new segment - t = \" + (entry.fragment_absolute_time / timescale));\n            segment = {};\n            segment.t = entry.fragment_absolute_time;\n            segment.d = entry.fragment_duration;\n            // If timestamps starts at 0 relative to 1st segment (dynamic to static) then update segment time\n            if (segments[0].tManifest) {\n                segment.t -= parseFloat(segments[0].tManifest) - segments[0].t;\n            }\n            // Set tManifest either in case of timestamps greater then 2^53 or in case of dynamic to static streams\n            if (entry.fragment_absolute_timeManifest) {\n                segment.tManifest = entry.fragment_absolute_timeManifest;\n            } else if (segments[0].tManifest) {\n                segment.tManifest = entry.fragment_absolute_time;\n            }\n            segments.push(segment);\n\n            // In case of static start-over streams, update content duration\n            if (this.manifestExt.getIsStartOver(manifest)) {\n                if (type === 'video') {\n                    segment = segments[segments.length - 1];\n                    var end = (segment.t + segment.d) / timescale;\n                    if (end > this.videoModel.getDuration()) {\n                        this.system.notify(\"sourceDurationChanged\", end);\n                    }    \n                }\n                return;\n            }\n            // In case of live streams, update segment timeline according to DVR window\n            else if (manifest.timeShiftBufferDepth && manifest.timeShiftBufferDepth > 0) {\n                // Get timestamp of the last segment\n                segment = segments[segments.length - 1];\n                t = segment.t;\n\n                // Determine the segments' availability start time\n                availabilityStartTime = t - (manifest.timeShiftBufferDepth * timescale);\n\n                // Remove segments prior to availability start time\n                segment = segments[0];\n                while (segment.t < availabilityStartTime) {\n                    this.debug.log(\"[MssFragmentController][\" + type + \"] Remove segment  - t = \" + (segment.t / timescale));\n                    segments.splice(0, 1);\n                    segment = segments[0];\n                }\n\n                // Update DVR window range => set range's end to end time of current segment\n                range = {\n                    start: segments[0].t / adaptation.SegmentTemplate.timescale,\n                    end: (tfdt.baseMediaDecodeTime / adaptation.SegmentTemplate.timescale) + request.duration\n                };\n                var dvrInfos = this.metricsModel.getMetricsFor(adaptation.type).DVRInfo;\n                if (dvrInfos && dvrInfos.length > 0 && range.end > dvrInfos[dvrInfos.length - 1].range.end) {\n                    this.metricsModel.addDVRInfo(adaptation.type, new Date(), range);\n                }\n            }\n\n            return;\n        },\n\n        updateSegmentsList = function(bytes, request, adaptation) {\n            var fragment = null,\n                moof = null,\n                traf = null,\n                tfdt = null,\n                tfrf = null,\n                pos;\n\n            // Create new fragment\n            fragment = mp4lib.deserialize(bytes);\n            moof = fragment.getBoxByType(\"moof\");\n            traf = moof.getBoxByType(\"traf\");\n            // Create and add tfdt box\n            tfdt = traf.getBoxByType(\"tfdt\");\n            if (tfdt === null) {\n                tfdt = new mp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox();\n                tfdt.version = 1;\n                tfdt.flags = 0;\n                tfdt.baseMediaDecodeTime = Math.floor(request.startTime * request.timescale);\n                // Insert tfdt box just after the tfhd box (therefore before the trun box)\n                pos = traf.getBoxIndexByType(\"tfhd\");\n                traf.boxes.splice(pos + 1, 0, tfdt);\n            }\n            // Process tfrf box\n            tfrf = traf.getBoxesByType(\"tfrf\");\n            if (tfrf === null || tfrf.length === 0) {\n                throw {\n                    name: MediaPlayer.dependencies.ErrorHandler.prototype.MSS_NO_TFRF,\n                    message: 'Missing tfrf in live FragmentInfo segment',\n                    data: {\n                        url: request.url\n                    }\n                };\n            } else {\n                processTfrf.call(this, request, tfrf[0], tfdt, adaptation);\n            }\n        },\n\n        duplicateSample = function(fragment, segmentDuration) {\n            var moof = null,\n                mdat = null,\n                traf = null,\n                trun = null,\n                tfhd,\n                sepiff = null,\n                saiz = null,\n                i,\n                trunEntries,\n                trunDuration,\n                mdatData;\n\n            // This function duplicates the first sample (from KeyFrame request) to generate a full segment that lasts segmentDuration.\n\n            // Get references on boxes\n            moof = fragment.getBoxByType(\"moof\");\n            mdat = fragment.getBoxByType(\"mdat\");\n            traf = moof.getBoxByType(\"traf\");\n            trun = traf.getBoxByType(\"trun\");\n            tfhd = traf.getBoxByType(\"tfhd\");\n\n            // Set first sample duration (if not set)\n            // (sample duration has to be set for each sample in case we have to modify last sample duration to complete the segment)\n            if (!trun.samples_table[0].sample_duration) {\n                trun.samples_table[0].sample_duration = tfhd.default_sample_duration;\n            }\n\n            // Update trun flags to indicate sample-duration-present flag is set (since we do set sample_duration for each sample)\n            trun.flags |= 0x000100;\n\n            // Update tfhd flags to indicate default-sample-duration-present flag is not set (since we do set sample_duration for each sample)\n            tfhd.flags &= 0xFFFFF7;\n\n            // Determine number of samples according to the segment duration\n            trunEntries = Math.floor(segmentDuration / trun.samples_table[0].sample_duration);\n\n            // Duplicate 1st sample in trun box to complete fragment\n            for (i = 0; i < (trunEntries - 1); i++) {\n                trun.samples_table.push(trun.samples_table[0]);\n            }\n            trun.sample_count = trun.samples_table.length;\n\n            // Patch/lengthen the last sample duration if segment not complete\n            trunDuration = trunEntries * trun.samples_table[0].sample_duration;\n            if (trunDuration < segmentDuration) {\n                trun.samples_table[trun.samples_table.length - 1].sample_duration += segmentDuration - trunDuration;\n            }\n\n            // Update PIFF Sample Encryption box\n            sepiff = traf.getBoxByType(\"sepiff\");\n            if (sepiff !== null) {\n                // sepiff box may have already all original samples encryption data definition\n                // => we keep only first sample entry\n                if (sepiff.sample_count > 1) {\n                    sepiff.entry = sepiff.entry.slice(0, 1);\n                }\n                // Then, we duplicate this first entry\n                for (i = 0; i < (trunEntries - 1); i += 1) {\n                    sepiff.entry.push(sepiff.entry[0]);\n                }\n                sepiff.sample_count = sepiff.entry.length;\n            }\n\n            // Update saiz box\n            saiz = traf.getBoxByType(\"saiz\");\n            if (saiz !== null) {\n                if (saiz.default_sample_info_size === 0) {\n                    // Same process as for sepiff box....\n                    if (saiz.sample_count > 1) {\n                        saiz.sample_info_size = saiz.sample_info_size.slice(0, 1);\n                    }\n                    for (i = 0; i < (trunEntries - 1); i += 1) {\n                        saiz.sample_info_size.push(saiz.sample_info_size[0]);\n                    }\n                }\n                saiz.sample_count = sepiff.entry.length;\n            }\n\n            // Duplicate mdat data\n            mdatData = mdat.data;\n            mdat.data = new Uint8Array(mdatData.length * trun.sample_count);\n            for (i = 0; i < trun.sample_count; i++) {\n                mdat.data.set(mdatData, mdatData.length * i);\n            }\n        },\n\n        convertFragment = function(data, request, adaptation) {\n            var i = 0,\n                // Get track id corresponding to adaptation set\n                manifest = this.manifestModel.getValue(),\n                trackId = manifest ? this.manifestExt.getIndex(adaptation, manifest) + 1 : -1, // +1 since track_id shall start from '1'\n                // Create new fragment\n                fragment = mp4lib.deserialize(data),\n                moof = null,\n                mdat = null,\n                traf = null,\n                trun = null,\n                tfhd = null,\n                saio = null,\n                sepiff = null,\n                saiz = null,\n                tfdt = null,\n                tfrf = null,\n                fragmentDuration,\n                sampleDuration,\n                pos = -1,\n                fragment_size = 0,\n                moofPosInFragment = 0,\n                trafPosInMoof = 0,\n                sencPosInTraf = 0,\n                new_data = null;\n\n            if (!fragment) {\n                return null;\n            }\n\n            // Get references on boxes\n            moof = fragment.getBoxByType(\"moof\");\n            mdat = fragment.getBoxByType(\"mdat\");\n            traf = moof.getBoxByType(\"traf\");\n            trun = traf.getBoxByType(\"trun\");\n            tfhd = traf.getBoxByType(\"tfhd\");\n\n            // Patch trun and mdat boxes to duplicate first sample in order to have a complete fragment\n            // => use case in trick mode where we do request only Key (I) frames, while the <video> element\n            // requires continuous stream to enable playback\n            sampleDuration = trun.samples_table[0].sample_duration !== undefined ? trun.samples_table[0].sample_duration : tfhd.default_sample_duration;\n            fragmentDuration = request.duration * request.timescale;\n            if (trun.samples_table.length === 1 && sampleDuration < fragmentDuration) {\n                duplicateSample(fragment, fragmentDuration);\n            }\n\n            // if (tfhd.default_sample_duration) {\n            //     for (i = 0; i < trun.samples_table.length; i++) {\n            //         trun.samples_table[i].sample_duration = tfhd.default_sample_duration;\n            //     }\n            //     trun.flags |= 0x000100;\n            //     tfhd.flags &= 0xFFFFF7;\n            // }\n\n            // Update tfhd.track_ID field\n            tfhd.track_ID = trackId;\n\n            // Process tfxd boxes\n            // This box provide absolute timestamp but we take the segment start time for tfdt\n            traf.removeBoxByType(\"tfxd\");\n\n            // Create and add tfdt box\n            tfdt = traf.getBoxByType(\"tfdt\");\n            if (tfdt === null) {\n                tfdt = new mp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox();\n                tfdt.version = 1;\n                tfdt.flags = 0;\n                tfdt.baseMediaDecodeTime = Math.floor(request.startTime * request.timescale);\n                // Insert tfdt box just after the tfhd box (therefore before the trun box)\n                pos = traf.getBoxIndexByType(\"tfhd\");\n                traf.boxes.splice(pos + 1, 0, tfdt);\n            }\n\n            if (manifest.type === 'dynamic')  {\n                // Process tfrf box\n                tfrf = traf.getBoxesByType(\"tfrf\");\n                if (tfrf === null || tfrf.length === 0) {\n                    throw {\n                        name: MediaPlayer.dependencies.ErrorHandler.prototype.MSS_NO_TFRF,\n                        message: 'Missing tfrf in live media segment',\n                        data: {\n                            url: request.url\n                        }\n                    };\n                } else {\n                    processTfrf.call(this, request, tfrf[0], tfdt, adaptation);\n                    traf.removeBoxByType(\"tfrf\");\n                }\n            }\n\n            // If protected content in PIFF1.1 format (sepiff box = Sample Encryption PIFF)\n            // => convert sepiff box it into a senc box\n            // => create saio and saiz boxes (if not already present)\n            sepiff = traf.getBoxByType(\"sepiff\");\n            if (sepiff !== null) {\n                sepiff.boxtype = \"senc\";\n                sepiff.extended_type = undefined;\n\n                saio = traf.getBoxByType(\"saio\");\n                if (saio === null) {\n                    // Create Sample Auxiliary Information Offsets Box box (saio)\n                    saio = new mp4lib.boxes.SampleAuxiliaryInformationOffsetsBox();\n                    saio.version = 0;\n                    saio.flags = 0;\n                    saio.entry_count = 1;\n                    saio.offset = [];\n\n                    saiz = new mp4lib.boxes.SampleAuxiliaryInformationSizesBox();\n                    saiz.version = 0;\n                    saiz.flags = 0;\n                    saiz.sample_count = sepiff.sample_count;\n                    saiz.default_sample_info_size = 0;\n                    saiz.sample_info_size = [];\n\n                    if (sepiff.flags & 0x02) {\n                        // Sub-sample encryption => set sample_info_size for each sample\n                        for (i = 0; i < sepiff.sample_count; i += 1) {\n                            // 10 = 8 (InitializationVector field size) + 2 (subsample_count field size)\n                            // 6 = 2 (BytesOfClearData field size) + 4 (BytesOfEncryptedData field size)\n                            saiz.sample_info_size[i] = 10 + (6 * sepiff.entry[i].NumberOfEntries);\n                        }\n                    } else {\n                        // No sub-sample encryption => set default sample_info_size = InitializationVector field size (8)\n                        saiz.default_sample_info_size = 8;\n                    }\n\n                    //add saio and saiz box\n                    traf.boxes.push(saiz);\n                    traf.boxes.push(saio);\n                }\n            }\n\n            // Before determining new size of the converted fragment we update some box flags related to data offset\n            tfhd.flags &= 0xFFFFFE; // set tfhd.base-data-offset-present to false\n            tfhd.flags |= 0x020000; // set tfhd.default-base-is-moof to true\n            trun.flags |= 0x000001; // set trun.data-offset-present to true\n            trun.data_offset = 0; // Set a default value for trun.data_offset\n\n            // Determine new size of the converted fragment and allocate new data buffer\n            fragment_size = fragment.getLength();\n\n            // Update trun.data_offset field = offset of first data byte (inside mdat box)\n            trun.data_offset = fragment_size - mdat.size + 8; // 8 = 'size' + 'type' mdat fields length\n\n            // Update saio box offset field according to new senc box offset\n            saio = traf.getBoxByType(\"saio\");\n            if (saio !== null) {\n                moofPosInFragment = fragment.getBoxOffsetByType(\"moof\");\n                trafPosInMoof = moof.getBoxOffsetByType(\"traf\");\n                sencPosInTraf = traf.getBoxOffsetByType(\"senc\");\n                // Set offset from begin fragment to the first IV field in senc box\n                saio.offset[0] = moofPosInFragment + trafPosInMoof + sencPosInTraf + 16; // 16 = box header (12) + sample_count field size (4)\n            }\n\n            new_data = mp4lib.serialize(fragment);\n\n            return new_data;\n        };\n\n    var rslt = MediaPlayer.utils.copyMethods(MediaPlayer.dependencies.FragmentController);\n\n    rslt.manifestModel = undefined;\n    rslt.manifestExt = undefined;\n    rslt.metricsModel = undefined;\n    rslt.videoModel = undefined;\n    rslt.mediaSourceExt = undefined;\n\n    rslt.process = function(bytes, request, representation) {\n        var deferred = Q.defer(),\n            result = null,\n            manifest = this.manifestModel.getValue(),\n            adaptation = null;\n\n        if (bytes !== null && bytes !== undefined && bytes.byteLength > 0) {\n            result = new Uint8Array(bytes);\n        } else {\n            deferred.resolve(null);\n            return deferred.promise;\n        }\n\n        if (manifest && representation) {\n            try {\n                // Get adaptation containing provided representations\n                // (Note: here representations is of type Dash.vo.Representation)\n                adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n                if (request) {\n                    if (request.type === \"Media Segment\") {\n                        result = convertFragment.call(this, result, request, adaptation);\n                        deferred.resolve(!result ? null : result);\n                    } else if (request.type === \"FragmentInfo Segment\") {\n                        updateSegmentsList.call(this, result, request, adaptation);\n                        deferred.resolve(result);\n                    } else {\n                        deferred.resolve(result);\n                    }\n                }\n            } catch (e) {\n                deferred.reject(e);\n            }\n        } else {\n            deferred.resolve(result);\n        }\n\n        return deferred.promise;\n    };\n\n    return rslt;\n};\n\nMss.dependencies.MssFragmentController.prototype = {\n    constructor: Mss.dependencies.MssFragmentController\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nMss.dependencies.MssFragmentInfoController = function() {\n    \"use strict\";\n    var _ready = false,\n        _started = false,\n        _fragmentController = null,\n        _fragmentModel = null,\n        _type,\n        _bufferController,\n        _startTime = null,\n        _startFragmentTime = null,\n        _loadTimeout,\n        \n        initialize = function(type, fragmentController, bufferController) {\n            \n            this.debug.log(\"[MssFragmentInfoController][\" + type + \"] Initialize\");\n\n            _bufferController = bufferController;\n            _type = type;\n\n            _fragmentController = fragmentController;\n            _fragmentModel = _fragmentController.attachBufferController(this);\n            _fragmentModel.setType(type);\n        \n            _ready = true;\n        },\n\n        reset = function() {\n\n            stop.call(this);\n\n            if (_fragmentModel) {\n                _fragmentController.abortRequestsForModel(_fragmentModel);\n                _fragmentController.detachBufferController(_fragmentModel);\n                _fragmentModel = null;\n            }\n\n            return Q.when(null);\n        },\n\n        start = function(delay) {\n            if (!_ready || _started) {\n                return;\n            }\n\n            this.debug.info(\"[MssFragmentInfoController][\" + _type + \"] START\");\n            _started = true;\n            _startTime = new Date().getTime() + delay * 1000;\n\n            delayLoadNextFragmentInfo.call(this, delay);\n        },\n\n        stop = function() {\n            if (!_started) {\n                return;\n            }\n\n            this.debug.info(\"[MssFragmentInfoController][\" + _type + \"] STOP\");\n\n            // Abort current segment download            \n            _fragmentController.abortRequestsForModel(_fragmentModel);\n            \n            // Stop process\n            clearTimeout(_loadTimeout);\n            _started = false;\n        },\n\n        loadNextFragmentInfo = function() {\n            if (!_started) {\n                return;\n            }\n\n            var adaptation = _bufferController.getData(),\n                segments = adaptation.SegmentTemplate.SegmentTimeline.S_asArray,\n                segment = segments[segments.length - 1],\n                representation = adaptation.Representation_asArray[0],\n                request;\n\n            this.debug.log(\"[MssFragmentInfoController][\" + _type + \"] Load next fragment for time: \" + (segment.t / adaptation.SegmentTemplate.timescale));\n\n            request = getSegmentRequest(adaptation, representation, segment);\n            requestFragment.call(this, request);\n        },\n\n        getSegmentRequest = function(adaptation, representation, segment) {\n            var timescale = adaptation.SegmentTemplate.timescale,\n                request = new MediaPlayer.vo.SegmentRequest();\n\n            request.action = \"download\";\n            request.startTime = segment.t / timescale;\n            request.streamType = _type;\n            request.type = \"FragmentInfo Segment\";\n            request.duration = segment.d / timescale;\n            request.timescale = timescale;\n            request.quality = representation.quality;\n            request.url = adaptation.BaseURL + adaptation.SegmentTemplate.media;\n            request.url = request.url.replace('$Bandwidth$', representation.bandwidth);\n            request.url = request.url.replace('$Time$', segment.tManifest ? segment.tManifest : segment.t);\n            request.url = request.url.replace('/Fragments(', '/FragmentInfo(');\n\n            return request;\n        },\n        \n        requestFragment = function(request) {\n\n            if (_fragmentController.isFragmentLoadedOrPending(this, request)) {\n                // We may have reached end of timeline in case of start-over streams\n                this.debug.log(\"[MssFragmentInfoController][\" + _type + \"] No more fragments\");\n                return;\n            }\n\n            this.debug.log(\"[MssFragmentInfoController][\" + _type + \"] Request fragment info \" + request.url);\n            _fragmentController.prepareFragmentForLoading(this, request, onBytesLoadingStart, onBytesLoaded, onBytesError, null);\n            _fragmentController.onBufferControllerStateChange();\n        },\n\n        onBytesLoadingStart = function(request) {\n            this.debug.info(\"[MssFragmentInfoController][\" + _type + \"] Load request \", (request.url !== null) ? request.url : request.quality);\n        },\n\n        onBytesLoaded = function(request, response) {\n            var self = this,\n                representation = _bufferController.getAvailableRepresentations()[0],\n                deltaTime,\n                deltaTimestamp;\n\n            this.debug.log(\"[MssFragmentInfoController][\" + _type + \"] FragmentInfo loaded \", request.url);\n\n            if (!_startFragmentTime) {\n                _startFragmentTime = request.startTime;\n            }\n\n            try {\n                _fragmentController.process(response.data, request, representation).then(function(/*data*/) {\n                    deltaTime = (new Date().getTime() - _startTime) / 1000;\n                    deltaTimestamp = request.startTime + request.duration - _startFragmentTime;\n                    delayLoadNextFragmentInfo.call(self, Math.max(0, (deltaTimestamp - deltaTime)));\n                });\n            } catch (e) {\n                this.errHandler.sendError(MediaPlayer.dependencies.ErrorHandler.prototype.INTERNAL_ERROR, \"Internal error while processing fragment info segment\", e.message);\n            }\n        },\n\n        onBytesError = function(e) {\n            if (_started) {\n                return;\n            }\n\n            this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.DOWNLOAD_ERR_CONTENT,\n                \"Failed to download fragmentInfo segment\", {\n                    url: e.url,\n                    status: e.status\n                }\n            );\n        },\n\n        delayLoadNextFragmentInfo = function(delay) {\n            var self = this;\n\n            this.debug.log(\"[MssFragmentInfoController][\" + _type + \"] Load next fragment in \" + delay + \" s.\");\n\n            clearTimeout(_loadTimeout);\n            _loadTimeout = setTimeout(function() {\n                _loadTimeout = null;\n                loadNextFragmentInfo.call(self);\n            }, delay * 1000);\n        };\n\n    return {\n        debug: undefined,\n        system: undefined,\n        errHandler: undefined,\n\n        initialize: initialize,\n        reset: reset,\n        start: start,\n        stop: stop,\n\n        isReady: function() {\n            return _ready;\n        },\n    };\n};\n\nMss.dependencies.MssFragmentInfoController.prototype = {\n    constructor: Mss.dependencies.MssFragmentInfoController\n};","/* $Date: 2007-06-12 18:02:31 $ */\n\n// from: http://bannister.us/weblog/2007/06/09/simple-base64-encodedecode-javascript/\n// Handles encode/decode of ASCII and Unicode strings.\n\nvar UTF8 = {};\nUTF8.encode = function(s) {\n    var u = [];\n    for (var i = 0; i < s.length; ++i) {\n        var c = s.charCodeAt(i);\n        if (c < 0x80) {\n            u.push(c);\n        } else if (c < 0x800) {\n            u.push(0xC0 | (c >> 6));\n            u.push(0x80 | (63 & c));\n        } else if (c < 0x10000) {\n            u.push(0xE0 | (c >> 12));\n            u.push(0x80 | (63 & (c >> 6)));\n            u.push(0x80 | (63 & c));\n        } else {\n            u.push(0xF0 | (c >> 18));\n            u.push(0x80 | (63 & (c >> 12)));\n            u.push(0x80 | (63 & (c >> 6)));\n            u.push(0x80 | (63 & c));\n        }\n    }\n    return u;\n};\nUTF8.decode = function(u) {\n    var a = [];\n    var i = 0;\n    while (i < u.length) {\n        var v = u[i++];\n        if (v < 0x80) {\n            // no need to mask byte\n        } else if (v < 0xE0) {\n            v = (31 & v) << 6;\n            v |= (63 & u[i++]);\n        } else if (v < 0xF0) {\n            v = (15 & v) << 12;\n            v |= (63 & u[i++]) << 6;\n            v |= (63 & u[i++]);\n        } else {\n            v = (7 & v) << 18;\n            v |= (63 & u[i++]) << 12;\n            v |= (63 & u[i++]) << 6;\n            v |= (63 & u[i++]);\n        }\n        a.push(String.fromCharCode(v));\n    }\n    return a.join('');\n};\n\nvar BASE64 = {};\n(function(T){\n    var encodeArray = function(u) {\n        var i = 0;\n        var a = [];\n        var n = 0 | (u.length / 3);\n        while (0 < n--) {\n            var v = (u[i] << 16) + (u[i+1] << 8) + u[i+2];\n            i += 3;\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push(T.charAt(63 & (v >> 6)));\n            a.push(T.charAt(63 & v));\n        }\n        if (2 == (u.length - i)) {\n            var v = (u[i] << 16) + (u[i+1] << 8);\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push(T.charAt(63 & (v >> 6)));\n            a.push('=');\n        } else if (1 == (u.length - i)) {\n            var v = (u[i] << 16);\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push('==');\n        }\n        return a.join('');\n    }\n    var R = (function(){\n        var a = [];\n        for (var i=0; i<T.length; ++i) {\n            a[T.charCodeAt(i)] = i;\n        }\n        a['='.charCodeAt(0)] = 0;\n        return a;\n    })();\n    var decodeArray = function(s) {\n        var i = 0;\n        var u = [];\n        var n = 0 | (s.length / 4);\n        while (0 < n--) {\n            var v = (R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i+1)] << 12) + (R[s.charCodeAt(i+2)] << 6) + R[s.charCodeAt(i+3)];\n            u.push(255 & (v >> 16));\n            u.push(255 & (v >> 8));\n            u.push(255 & v);\n            i += 4;\n        }\n        if (u) {\n            if ('=' == s.charAt(i-2)) {\n                u.pop();\n                u.pop();\n            } else if ('=' == s.charAt(i-1)) {\n                u.pop();\n            }\n        }\n        return u;\n    }\n    var ASCII = {};\n    ASCII.encode = function(s) {\n        var u = [];\n        for (var i = 0; i<s.length; ++i) {\n            u.push(s.charCodeAt(i));\n        }\n        return u;\n    };\n    ASCII.decode = function(u) {\n        for (var i = 0; i<s.length; ++i) {\n            a[i] = String.fromCharCode(a[i]);\n        }\n        return a.join('');\n    };\n    BASE64.decodeArray = function(s) {\n        var u = decodeArray(s);\n        return new Uint8Array(u);\n    };\n    BASE64.encodeASCII = function(s) {\n        var u = ASCII.encode(s);\n        return encodeArray(u);\n    };\n    BASE64.decodeASCII = function(s) {\n        var a = decodeArray(s);\n        return ASCII.decode(a);\n    };\n    BASE64.encode = function(s) {\n        var u = UTF8.encode(s);\n        return encodeArray(u);\n    };\n    BASE64.decode = function(s) {\n        var u = decodeArray(s);\n        return UTF8.decode(u);\n    };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n\nif (undefined === btoa) {\n    var btoa = BASE64.encode;\n}\nif (undefined === atob) {\n    var atob = BASE64.decode;\n}\n","/*\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * author Digital Primates\n * copyright dash-if 2012\n */ \n if(typeof(utils) == \"undefined\"){\n \tvar utils = {};\n }\n \n if(typeof(utils.Math) == \"undefined\"){\n \tutils.Math = {};\n }\n \n utils.Math.to64BitNumber = function(low, high) {\n\tvar highNum, lowNum, expected;\n\n\thighNum = new goog.math.Long(0, high);\n\tlowNum = new goog.math.Long(low, 0);\n\texpected = highNum.add(lowNum);\n\n\treturn expected.toNumber();\n}","/**\n * @author <a href=\"http://www.creynders.be\">Camille Reynders</a>\n */\n( function ( scope ) {\n\n    \"use strict\";\n\n    /**\n     * @namespace\n     */\n    var dijon = {\n        /**\n         * framework version number\n         * @constant\n         * @type String\n         */\n        VERSION:'0.5.3'\n    };//dijon\n\n\n    //======================================//\n    // dijon.System\n    //======================================//\n\n    /**\n     * @class dijon.System\n     * @constructor\n     */\n    dijon.System = function () {\n        /** @private */\n        this._mappings = {};\n\n        /** @private */\n        this._outlets = {};\n\n        /** @private */\n        this._handlers = {};\n\n        /**\n         * When <code>true</code> injections are made only if an object has a property with the mapped outlet name.<br/>\n         * <strong>Set to <code>false</code> at own risk</strong>, may have quite undesired side effects.\n         * @example\n         * system.strictInjections = true\n         * var o = {};\n         * system.mapSingleton( 'userModel', UserModel );\n         * system.mapOutlet( 'userModel' );\n         * system.injectInto( o );\n         *\n         * //o is unchanged\n         *\n         * system.strictInjections = false;\n         * system.injectInto( o );\n         *\n         * //o now has a member 'userModel' which holds a reference to the singleton instance\n         * //of UserModel\n         * @type Boolean\n         * @default true\n         */\n        this.strictInjections = true;\n\n        /**\n         * Enables the automatic mapping of outlets for mapped values, singletons and classes\n         * When this is true any value, singleton or class that is mapped will automatically be mapped as a global outlet\n         * using the value of <code>key</code> as outlet name\n         *\n         * @example\n         * var o = {\n         *     userModel : undefined; //inject\n         * }\n         * system.mapSingleton( 'userModel', UserModel );\n         * system.injectInto( o ):\n         * //o.userModel now holds a reference to the singleton instance of UserModel\n         * @type Boolean\n         * @default false\n         */\n        this.autoMapOutlets = false;\n\n        /**\n         * The name of the method that will be called for all instances, right after injection has occured.\n         * @type String\n         * @default 'setup'\n         */\n        this.postInjectionHook = 'setup';\n\n    };//dijon.System\n\n    dijon.System.prototype = {\n\n        /**\n         * @private\n         * @param {Class} clazz\n         */\n        _createAndSetupInstance:function ( key, Clazz ) {\n            var instance = new Clazz();\n            this.injectInto( instance, key );\n            return instance;\n        },\n\n        /**\n         * @private\n         * @param {String} key\n         * @param {Boolean} overrideRules\n         * @return {Object}\n         */\n        _retrieveFromCacheOrCreate:function ( key, overrideRules ) {\n            if ( typeof overrideRules === 'undefined' ) {\n                overrideRules = false;\n            }\n            var output;\n            if ( this._mappings.hasOwnProperty( key ) ) {\n                var config = this._mappings[ key ];\n                if ( !overrideRules && config.isSingleton ) {\n                    if ( config.object == null ) {\n                        config.object = this._createAndSetupInstance( key, config.clazz );\n                    }\n                    output = config.object;\n                } else {\n                    if ( config.clazz ) {\n                        output = this._createAndSetupInstance( key, config.clazz );\n                    } else {\n                        //TODO shouldn't this be null\n                        output = config.object;\n                    }\n                }\n            } else {\n                throw new Error( 1000 );\n            }\n            return output;\n        },\n\n\n        /**\n         * defines <code>outletName</code> as an injection point in <code>targetKey</code>for the object mapped to <code>sourceKey</code>\n         * @example\n         system.mapSingleton( 'userModel', TestClassA );\n         var o = {\n         user : undefined //inject\n         }\n         system.mapOutlet( 'userModel', 'o', 'user' );\n         system.mapValue( 'o', o );\n\n         var obj = system.getObject( 'o' );\n         * //obj.user holds a reference to the singleton instance of UserModel\n         *\n         * @example\n         system.mapSingleton( 'userModel', TestClassA );\n         var o = {\n         userModel : undefined //inject\n         }\n         system.mapOutlet( 'userModel', 'o' );\n         system.mapValue( 'o', o );\n\n         var obj = system.getObject( 'o' );\n         * //obj.userModel holds a reference to the singleton instance of UserModel\n         *\n         * @example\n         system.mapSingleton( 'userModel', TestClassA );\n         system.mapOutlet( 'userModel' );\n         var o = {\n         userModel : undefined //inject\n         }\n         system.mapValue( 'o', o );\n\n         var obj = system.getObject( 'o' );\n         * //o.userModel holds a reference to the singleton instance of userModel\n         *\n         * @param {String} sourceKey the key mapped to the object that will be injected\n         * @param {String} [targetKey='global'] the key the outlet is assigned to.\n         * @param {String} [outletName=sourceKey] the name of the property used as an outlet.<br/>\n         * @return {dijon.System}\n         * @see dijon.System#unmapOutlet\n         */\n        mapOutlet:function ( sourceKey, targetKey, outletName ) {\n            if ( typeof sourceKey === 'undefined' ) {\n                throw new Error( 1010 );\n            }\n            targetKey = targetKey || \"global\";\n            outletName = outletName || sourceKey;\n\n            if ( !this._outlets.hasOwnProperty( targetKey ) ) {\n                this._outlets[ targetKey ] = {};\n            }\n            this._outlets[ targetKey ][ outletName ] = sourceKey;\n\n            return this;\n        },\n\n        /**\n         * Retrieve (or create) the object mapped to <code>key</code>\n         * @example\n         * system.mapValue( 'foo', 'bar' );\n         * var b = system.getObject( 'foo' ); //now contains 'bar'\n         * @param {Object} key\n         * @return {Object}\n         */\n        getObject:function ( key ) {\n            if ( typeof key === 'undefined' ) {\n                throw new Error( 1020 );\n            }\n            return this._retrieveFromCacheOrCreate( key );\n        },\n\n        /**\n         * Maps <code>useValue</code> to <code>key</code>\n         * @example\n         * system.mapValue( 'foo', 'bar' );\n         * var b = system.getObject( 'foo' ); //now contains 'bar'\n         * @param {String} key\n         * @param {Object} useValue\n         * @return {dijon.System}\n         */\n        mapValue:function ( key, useValue ) {\n            if ( typeof key === 'undefined' ) {\n                throw new Error( 1030 );\n            }\n            this._mappings[ key ] = {\n                clazz:null,\n                object:useValue,\n                isSingleton:true\n            };\n            if ( this.autoMapOutlets ) {\n                this.mapOutlet( key );\n            }\n            if ( this.hasMapping( key )) {\n                this.injectInto( useValue, key );\n            }\n            return this;\n        },\n\n        /**\n         * Returns whether the key is mapped to an object\n         * @example\n         * system.mapValue( 'foo', 'bar' );\n         * var isMapped = system.hasMapping( 'foo' );\n         * @param {String} key\n         * @return {Boolean}\n         */\n        hasMapping:function ( key ) {\n            if ( typeof key === 'undefined' ) {\n                throw new Error( 1040 );\n            }\n            return this._mappings.hasOwnProperty( key );\n        },\n\n        /**\n         * Maps <code>clazz</code> as a factory to <code>key</code>\n         * @example\n         * var SomeClass = function(){\n         * }\n         * system.mapClass( 'o', SomeClass );\n         *\n         * var s1 = system.getObject( 'o' );\n         * var s2 = system.getObject( 'o' );\n         *\n         * //s1 and s2 reference two different instances of SomeClass\n         *\n         * @param {String} key\n         * @param {Function} clazz\n         * @return {dijon.System}\n         */\n        mapClass:function ( key, clazz ) {\n            if ( typeof key === 'undefined' ) {\n                throw new Error( 1050 );\n            }\n            if ( typeof clazz === 'undefined' ) {\n                throw new Error( 1051 );\n            }\n            this._mappings[ key ] = {\n                clazz:clazz,\n                object:null,\n                isSingleton:false\n            };\n            if ( this.autoMapOutlets ) {\n                this.mapOutlet( key );\n            }\n            return this;\n        },\n\n        /**\n         * Maps <code>clazz</code> as a singleton factory to <code>key</code>\n         * @example\n         * var SomeClass = function(){\n         * }\n         * system.mapSingleton( 'o', SomeClass );\n         *\n         * var s1 = system.getObject( 'o' );\n         * var s2 = system.getObject( 'o' );\n         *\n         * //s1 and s2 reference the same instance of SomeClass\n         *\n         * @param {String} key\n         * @param {Function} clazz\n         * @return {dijon.System}\n         */\n        mapSingleton:function ( key, clazz ) {\n            if ( typeof key === 'undefined' ) {\n                throw new Error( 1060 );\n            }\n            if ( typeof clazz === 'undefined' ) {\n                throw new Error( 1061 );\n            }\n            this._mappings[ key ] = {\n                clazz:clazz,\n                object:null,\n                isSingleton:true\n            };\n            if ( this.autoMapOutlets ) {\n                this.mapOutlet( key );\n            }\n            return this;\n        },\n\n        /**\n         * Force instantiation of the class mapped to <code>key</code>, whether it was mapped as a singleton or not.\n         * When a value was mapped, the value will be returned.\n         * TODO: should this last rule be changed?\n         * @example\n         var SomeClass = function(){\n         }\n         system.mapClass( 'o', SomeClass );\n\n         var s1 = system.getObject( 'o' );\n         var s2 = system.getObject( 'o' );\n         * //s1 and s2 reference different instances of SomeClass\n         *\n         * @param {String} key\n         * @return {Object}\n         */\n        instantiate:function ( key ) {\n            if ( typeof key === 'undefined' ) {\n                throw new Error( 1070 );\n            }\n            return this._retrieveFromCacheOrCreate( key, true );\n        },\n\n        /**\n         * Perform an injection into an object's mapped outlets, satisfying all it's dependencies\n         * @example\n         * var UserModel = function(){\n         * }\n         * system.mapSingleton( 'userModel', UserModel );\n         * var SomeClass = function(){\n         *      user = undefined; //inject\n         * }\n         * system.mapSingleton( 'o', SomeClass );\n         * system.mapOutlet( 'userModel', 'o', 'user' );\n         *\n         * var foo = {\n         *      user : undefined //inject\n         * }\n         *\n         * system.injectInto( foo, 'o' );\n         *\n         * //foo.user now holds a reference to the singleton instance of UserModel\n         * @param {Object} instance\n         * @param {String} [key] use the outlet mappings as defined for <code>key</code>, otherwise only the globally\n         * mapped outlets will be used.\n         * @return {dijon.System}\n         */\n        injectInto:function ( instance, key ) {\n            if ( typeof instance === 'undefined' ) {\n                throw new Error( 1080 );\n            }\n\t\t\tif( ( typeof instance === 'object' ) ){\n\t\t\t\tvar o = [];\n\t\t\t\tif ( this._outlets.hasOwnProperty( 'global' ) ) {\n\t\t\t\t\to.push( this._outlets[ 'global' ] );\n\t\t\t\t}\n\t\t\t\tif ( typeof key !== 'undefined' && this._outlets.hasOwnProperty( key ) ) {\n\t\t\t\t\to.push( this._outlets[ key ] );\n\t\t\t\t}\n\t\t\t\tfor ( var i in o ) {\n\t\t\t\t\tvar l = o [ i ];\n\t\t\t\t\tfor ( var outlet in l ) {\n\t\t\t\t\t\tvar source = l[ outlet ];\n\t\t\t\t\t\t//must be \"in\" [!]\n\t\t\t\t\t\tif ( !this.strictInjections || outlet in instance ) {\n\t\t\t\t\t\t\tinstance[ outlet ] = this.getObject( source );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( \"setup\" in instance ) {\n\t\t\t\t\tinstance.setup.call( instance );\n\t\t\t\t}\n\t\t\t}\n            return this;\n        },\n\n        /**\n         * Remove the mapping of <code>key</code> from the system\n         * @param {String} key\n         * @return {dijon.System}\n         */\n        unmap:function ( key ) {\n            if ( typeof key === 'undefined' ) {\n                throw new Error( 1090 );\n            }\n            delete this._mappings[ key ];\n\n            return this;\n        },\n\n        /**\n         * removes an injection point mapping for a given object mapped to <code>key</code>\n         * @param {String} target\n         * @param {String} outlet\n         * @return {dijon.System}\n         * @see dijon.System#addOutlet\n         */\n        unmapOutlet:function ( target, outlet ) {\n            if ( typeof target === 'undefined' ) {\n                throw new Error( 1100 );\n            }\n            if ( typeof outlet === 'undefined' ) {\n                throw new Error( 1101 );\n            }\n            delete this._outlets[ target ][ outlet ];\n\n            return this;\n        },\n\n        /**\n         * maps a handler for an event/route.<br/>\n         * @example\n         var hasExecuted = false;\n         var userView = {\n         showUserProfile : function(){\n         hasExecuted = true;\n         }\n         }\n         system.mapValue( 'userView', userView );\n         system.mapHandler( 'user/profile', 'userView', 'showUserProfile' );\n         system.notify( 'user/profile' );\n         //hasExecuted is true\n         * @example\n         * var userView = {\n         *      showUserProfile : function(){\n         *          //do stuff\n         *      }\n         * }\n         * system.mapValue( 'userView', userView );\n         * <strong>system.mapHandler( 'showUserProfile', 'userView' );</strong>\n         * system.notify( 'showUserProfile' );\n         *\n         * //userView.showUserProfile is called\n         * @example\n         * var showUserProfile = function(){\n         *          //do stuff\n         * }\n         * <strong>system.mapHandler( 'user/profile', undefined, showUserProfile );</strong>\n         * system.notify( 'user/profile' );\n         *\n         * //showUserProfile is called\n         * @example\n         * var userView = {};\n         * var showUserProfile = function(){\n         *          //do stuff\n         * }\n         * system.mapValue( 'userView', userView );\n         * <strong>system.mapHandler( 'user/profile', 'userView', showUserProfile );</strong>\n         * system.notify( 'user/profile' );\n         *\n         * //showUserProfile is called within the scope of the userView object\n         * @example\n         * var userView = {\n         *      showUserProfile : function(){\n         *          //do stuff\n         *      }\n         * }\n         * system.mapValue( 'userView', userView );\n         * <strong>system.mapHandler( 'user/profile', 'userView', 'showUserProfile', true );</strong>\n         * system.notify( 'user/profile' );\n         * system.notify( 'user/profile' );\n         * system.notify( 'user/profile' );\n         *\n         * //userView.showUserProfile is called exactly once [!]\n         * @example\n         * var userView = {\n         *      showUserProfile : function( route ){\n         *          //do stuff\n         *      }\n         * }\n         * system.mapValue( 'userView', userView );\n         * <strong>system.mapHandler( 'user/profile', 'userView', 'showUserProfile', false, true );</strong>\n         * system.notify( 'user/profile' );\n         *\n         * //userView.showUserProfile is called and the route/eventName is passed to the handler\n         * @param {String} eventName/route\n         * @param {String} [key=undefined] If <code>key</code> is <code>undefined</code> the handler will be called without\n         * scope.\n         * @param {String|Function} [handler=eventName] If <code>handler</code> is <code>undefined</code> the value of\n         * <code>eventName</code> will be used as the name of the member holding the reference to the to-be-called function.\n         * <code>handler</code> accepts either a string, which will be used as the name of the member holding the reference\n         * to the to-be-called function, or a direct function reference.\n         * @param {Boolean} [oneShot=false] Defines whether the handler should be called exactly once and then automatically\n         * unmapped\n         * @param {Boolean} [passEvent=false] Defines whether the event object should be passed to the handler or not.\n         * @return {dijon.System}\n         * @see dijon.System#notify\n         * @see dijon.System#unmapHandler\n         */\n        mapHandler:function ( eventName, key, handler, oneShot, passEvent ) {\n            if ( typeof eventName === 'undefined' ) {\n                throw new Error( 1110 );\n            }\n            key = key || 'global';\n            handler = handler || eventName;\n\n            if ( typeof oneShot === 'undefined' ) {\n                oneShot = false;\n            }\n            if ( typeof passEvent === 'undefined' ) {\n                passEvent = false;\n            }\n            if ( !this._handlers.hasOwnProperty( eventName ) ) {\n                this._handlers[ eventName ] = {};\n            }\n            if ( !this._handlers[eventName].hasOwnProperty( key ) ) {\n                this._handlers[eventName][key] = [];\n            }\n            this._handlers[ eventName ][ key ].push( {\n                handler:handler,\n                oneShot:oneShot,\n                passEvent:passEvent\n            } );\n\n            return this;\n        },\n\n        /**\n         * Unmaps the handler for a specific event/route.\n         * @param {String} eventName Name of the event/route\n         * @param {String} [key=undefined] If <code>key</code> is <code>undefined</code> the handler is removed from the\n         * global mapping space. (If the same event is mapped globally and specifically for an object, then\n         * only the globally mapped one will be removed)\n         * @param {String | Function} [handler=eventName]\n         * @return {dijon.System}\n         * @see dijon.System#mapHandler\n         */\n        unmapHandler:function ( eventName, key, handler ) {\n            if ( typeof eventName === 'undefined' ) {\n                throw new Error( 1120 );\n            }\n            key = key || 'global';\n            //handler = handler || eventName;\n\n            if ( this._handlers.hasOwnProperty( eventName ) && this._handlers[ eventName ].hasOwnProperty( key ) ) {\n                var handlers = this._handlers[ eventName ][ key ];\n                for ( var i in handlers ) {\n                    var config = handlers[ i ];\n                    if ( (!handler) || (config.handler === handler) ) {\n                        handlers.splice( i, 1 );\n                        break;\n                    }\n                }\n            }\n            return this;\n        },\n\n        /**\n         * calls all handlers mapped to <code>eventName/route</code>\n         * @param {String} eventName/route\n         * @return {dijon.System}\n         * @see dijon.System#mapHandler\n         */\n        notify:function ( eventName ) {\n            if ( typeof eventName === 'undefined' ) {\n                throw new Error( 1130 );\n            }\n            var argsWithEvent = Array.prototype.slice.call( arguments );\n            var argsClean = argsWithEvent.slice( 1 );\n            if ( this._handlers.hasOwnProperty( eventName ) ) {\n                var handlers = this._handlers[ eventName ];\n                for ( var key in handlers ) {\n                    var configs = handlers[ key ];\n                    var instance;\n                    if ( key !== 'global' ) {\n                        instance = this.getObject( key );\n                    }\n                    var toBeDeleted = [];\n                    var i, n;\n                    for ( i = 0, n = configs.length ; i < n ; i++ ) {\n                        var handler;\n                        var config = configs[ i ];\n                        if ( instance && typeof config.handler === \"string\" ) {\n                            handler = instance[ config.handler ];\n                        } else {\n                            handler = config.handler;\n                        }\n\n                        //see deletion below\n                        if ( config.oneShot ) {\n                            toBeDeleted.unshift( i );\n                        }\n\n                        if ( config.passEvent ) {\n                            handler.apply( instance, argsWithEvent );\n                        } else {\n                            handler.apply( instance, argsClean );\n                        }\n                    }\n\n                    //items should be deleted in reverse order\n                    //either use push above and decrement here\n                    //or use unshift above and increment here\n                    for ( i = 0, n = toBeDeleted.length ; i < n ; i++ ) {\n                        configs.splice( toBeDeleted[ i ], 1 );\n                    }\n                }\n            }\n\n            return this;\n        }\n\n    };//dijon.System.prototype\n\n    scope.dijon = dijon;\n}( this ));\n\n\n","// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog = {};\ngoog.math = {};\n\n\n\n/**\n * @fileoverview Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n *\n */\n\n//goog.provide('goog.math.Long');\n\n\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n */\ngoog.math.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\ngoog.math.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = goog.math.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    goog.math.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Returns a Long representing the given value, provided that it is a finite\n * number.  Otherwise, zero is returned.\n * @param {number} value The number in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return goog.math.Long.ZERO;\n  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {\n    return goog.math.Long.MIN_VALUE;\n  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {\n    return goog.math.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return goog.math.Long.fromNumber(-value).negate();\n  } else {\n    return new goog.math.Long(\n        (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,\n        (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromBits = function(lowBits, highBits) {\n  return new goog.math.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return goog.math.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = goog.math.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = goog.math.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(goog.math.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(goog.math.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_32_DBL_ =\n    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_31_DBL_ =\n    goog.math.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_48_DBL_ =\n    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_64_DBL_ =\n    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_63_DBL_ =\n    goog.math.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.ZERO = goog.math.Long.fromInt(0);\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.ONE = goog.math.Long.fromInt(1);\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.MAX_VALUE =\n    goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!goog.math.Long} */\ngoog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!goog.math.Long}\n * @private\n */\ngoog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\ngoog.math.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\ngoog.math.Long.prototype.toNumber = function() {\n  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\ngoog.math.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = goog.math.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\ngoog.math.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\ngoog.math.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\ngoog.math.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\ngoog.math.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\ngoog.math.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\ngoog.math.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\ngoog.math.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\ngoog.math.Long.prototype.equals = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\ngoog.math.Long.prototype.notEquals = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\ngoog.math.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\ngoog.math.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\ngoog.math.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\ngoog.math.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {goog.math.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\ngoog.math.Long.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!goog.math.Long} The negation of this value. */\ngoog.math.Long.prototype.negate = function() {\n  if (this.equals(goog.math.Long.MIN_VALUE)) {\n    return goog.math.Long.MIN_VALUE;\n  } else {\n    return this.not().add(goog.math.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {goog.math.Long} other Long to add to this one.\n * @return {!goog.math.Long} The sum of this and the given Long.\n */\ngoog.math.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {goog.math.Long} other Long to subtract from this.\n * @return {!goog.math.Long} The difference of this and the given Long.\n */\ngoog.math.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {goog.math.Long} other Long to multiply with this.\n * @return {!goog.math.Long} The product of this and the other.\n */\ngoog.math.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return goog.math.Long.ZERO;\n  } else if (other.isZero()) {\n    return goog.math.Long.ZERO;\n  }\n\n  if (this.equals(goog.math.Long.MIN_VALUE)) {\n    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;\n  } else if (other.equals(goog.math.Long.MIN_VALUE)) {\n    return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&\n      other.lessThan(goog.math.Long.TWO_PWR_24_)) {\n    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {goog.math.Long} other Long by which to divide.\n * @return {!goog.math.Long} This Long divided by the given one.\n */\ngoog.math.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return goog.math.Long.ZERO;\n  }\n\n  if (this.equals(goog.math.Long.MIN_VALUE)) {\n    if (other.equals(goog.math.Long.ONE) ||\n        other.equals(goog.math.Long.NEG_ONE)) {\n      return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(goog.math.Long.MIN_VALUE)) {\n      return goog.math.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(goog.math.Long.ZERO)) {\n        return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(goog.math.Long.MIN_VALUE)) {\n    return goog.math.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = goog.math.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = goog.math.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = goog.math.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = goog.math.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {goog.math.Long} other Long by which to mod.\n * @return {!goog.math.Long} This Long modulo the given one.\n */\ngoog.math.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!goog.math.Long} The bitwise-NOT of this value. */\ngoog.math.Long.prototype.not = function() {\n  return goog.math.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to AND.\n * @return {!goog.math.Long} The bitwise-AND of this and the other.\n */\ngoog.math.Long.prototype.and = function(other) {\n  return goog.math.Long.fromBits(this.low_ & other.low_,\n                                 this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to OR.\n * @return {!goog.math.Long} The bitwise-OR of this and the other.\n */\ngoog.math.Long.prototype.or = function(other) {\n  return goog.math.Long.fromBits(this.low_ | other.low_,\n                                 this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to XOR.\n * @return {!goog.math.Long} The bitwise-XOR of this and the other.\n */\ngoog.math.Long.prototype.xor = function(other) {\n  return goog.math.Long.fromBits(this.low_ ^ other.low_,\n                                 this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the left by the given amount.\n */\ngoog.math.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return goog.math.Long.fromBits(\n          low << numBits,\n          (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return goog.math.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount.\n */\ngoog.math.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >> numBits);\n    } else {\n      return goog.math.Long.fromBits(\n          high >> (numBits - 32),\n          high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * the new top bits matching the current sign bit.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\ngoog.math.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits);\n    } else if (numBits == 32) {\n      return goog.math.Long.fromBits(high, 0);\n    } else {\n      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    // Turn off strict mode for this function so we can assign to global.Q\n    /*jshint strict: false*/\n    Q = definition();\n})(function () {\n\"use strict\";\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick;\nif (typeof process !== \"undefined\") {\n    // node\n    nextTick = process.nextTick;\n} else if (typeof setImmediate === \"function\") {\n    // In IE10, or use https://github.com/NobleJS/setImmediate\n    if (typeof window !== \"undefined\") {\n        nextTick = setImmediate.bind(window);\n    } else {\n        nextTick = setImmediate;\n    }\n} else {\n    (function () {\n        // linked list of tasks (single, with head node)\n        var head = {task: void 0, next: null}, tail = head,\n            maxPendingTicks = 2, pendingTicks = 0, queuedTasks = 0, usedTicks = 0,\n            requestTick;\n\n        function onTick() {\n            // In case of multiple tasks ensure at least one subsequent tick\n            // to handle remaining tasks in case one throws.\n            --pendingTicks;\n\n            if (++usedTicks >= maxPendingTicks) {\n                // Amortize latency after thrown exceptions.\n                usedTicks = 0;\n                maxPendingTicks *= 4; // fast grow!\n                var expectedTicks = queuedTasks && Math.min(queuedTasks - 1, maxPendingTicks);\n                while (pendingTicks < expectedTicks) {\n                    ++pendingTicks;\n                    requestTick();\n                }\n            }\n\n            while (queuedTasks) {\n                --queuedTasks; // decrement here to ensure it's never negative\n                head = head.next;\n                var task = head.task;\n                head.task = void 0;\n                task();\n            }\n\n            usedTicks = 0;\n        }\n\n        nextTick = function (task) {\n            tail = tail.next = {task: task, next: null};\n            if (pendingTicks < ++queuedTasks && pendingTicks < maxPendingTicks) {\n                ++pendingTicks;\n                requestTick();\n            }\n        };\n\n        if (typeof MessageChannel !== \"undefined\") {\n            // modern browsers\n            // http://www.nonblocking.io/2011/06/windownexttick.html\n            var channel = new MessageChannel();\n            channel.port1.onmessage = onTick;\n            requestTick = function () {\n                channel.port2.postMessage(0);\n            };\n\n        } else {\n            // old browsers\n            requestTick = function () {\n                setTimeout(onTick, 0);\n            };\n        }\n    })();\n}\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this does have the nice side-effect of reducing the size\n// of the code by reducing x.call() to merely x(), eliminating many\n// hard-to-minify characters.\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nfunction uncurryThis(f) {\n    var call = Function.call;\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\n// generator related shims\n\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nQ.longStackJumpLimit = 1;\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible (that is, if in V8), transform the error stack\n    // trace by removing Node and Q cruft, then concatenating with\n    // the stack trace of the promise we are ``done``ing. See #57.\n    if (promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        error.stack = filterStackString(error.stack) +\n            \"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\" +\n            filterStackString(promise.stack);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line)) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction isInternalFrame(stackLine) {\n    var pieces = /at .+ \\((.*):(\\d+):\\d+\\)/.exec(stackLine);\n\n    if (!pieces) {\n        return false;\n    }\n\n    var fileName = pieces[1];\n    var lineNumber = pieces[2];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (Error.captureStackTrace) {\n        var fileName, lineNumber;\n\n        var oldPrepareStackTrace = Error.prepareStackTrace;\n\n        Error.prepareStackTrace = function (error, frames) {\n            fileName = frames[1].getFileName();\n            lineNumber = frames[1].getLineNumber();\n        };\n\n        // teases call of temporary prepareStackTrace\n        // JSHint and Closure Compiler generate known warnings here\n        /*jshint expr: true */\n        new Error().stack;\n\n        Error.prepareStackTrace = oldPrepareStackTrace;\n        qFileName = fileName;\n        return lineNumber;\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" && typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative + \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Creates fulfilled promises from non-promises,\n * Passes Q promises through,\n * Coerces CommonJS/Promises/A+ promises to Q promises.\n */\nfunction Q(value) {\n    return resolve(value);\n}\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Constructs a {promise, resolve} object.\n *\n * The resolver is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke the resolver with any value that is\n * not a function. To reject the promise, invoke the resolver with a rejection\n * object. To put the promise in the same state as another promise, invoke the\n * resolver with that other promise.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"pending\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the pending array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the ref promise because it handles both fully\n    // resolved values and other promises gracefully.\n    var pending = [], progressListeners = [], value;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(makePromise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (pending) {\n            pending.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            nextTick(function () {\n                value.promiseDispatch.apply(value, args);\n            });\n        }\n    };\n\n    promise.valueOf = function () {\n        if (pending) {\n            return promise;\n        }\n        value = valueOf(value); // shorten chain\n        return value;\n    };\n\n    if (Error.captureStackTrace && Q.longStackJumpLimit > 0) {\n        Error.captureStackTrace(promise, defer);\n\n        // Reify the stack into a string by using the accessor; this prevents\n        // memory leaks as per GH-111. At the same time, cut off the first line;\n        // it's always just \"[object Promise]\\n\", as per the `toString`.\n        promise.stack = promise.stack.substring(promise.stack.indexOf(\"\\n\") + 1);\n    }\n\n    function become(resolvedValue) {\n        if (!pending) {\n            return;\n        }\n        value = resolve(resolvedValue);\n        array_reduce(pending, function (undefined, pending) {\n            nextTick(function () {\n                value.promiseDispatch.apply(value, pending);\n            });\n        }, void 0);\n        pending = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = become;\n    deferred.fulfill = function (value) {\n        become(fulfill(value));\n    };\n    deferred.reject = function (exception) {\n        become(reject(exception));\n    };\n    deferred.notify = function (progress) {\n        if (pending) {\n            array_reduce(progressListeners, function (undefined, progressListener) {\n                nextTick(function () {\n                    progressListener(progress);\n                });\n            }, void 0);\n        }\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param makePromise {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in makePromise\n */\nQ.promise = promise;\nfunction promise(makePromise) {\n    var deferred = defer();\n    fcall(\n        makePromise,\n        deferred.resolve,\n        deferred.reject,\n        deferred.notify\n    ).fail(deferred.reject);\n    return deferred.promise;\n}\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * put(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = makePromise;\nfunction makePromise(descriptor, fallback, valueOf, exception, isException) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\"Promise does not support operation: \" + op));\n        };\n    }\n\n    var promise = object_create(makePromise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    if (valueOf) {\n        promise.valueOf = valueOf;\n    }\n\n    if (isException) {\n        promise.exception = exception;\n    }\n\n    return promise;\n}\n\n// provide thenables, CommonJS/Promises/A\nmakePromise.prototype.then = function (fulfilled, rejected, progressed) {\n    return when(this, fulfilled, rejected, progressed);\n};\n\nmakePromise.prototype.thenResolve = function (value) {\n    return when(this, function () { return value; });\n};\n\n// Chainable methods\narray_reduce(\n    [\n        \"isFulfilled\", \"isRejected\", \"isPending\",\n        \"dispatch\",\n        \"when\", \"spread\",\n        \"get\", \"put\", \"set\", \"del\", \"delete\",\n        \"post\", \"send\", \"invoke\",\n        \"keys\",\n        \"fapply\", \"fcall\", \"fbind\",\n        \"all\", \"allResolved\",\n        \"timeout\", \"delay\",\n        \"catch\", \"finally\", \"fail\", \"fin\", \"progress\", \"done\",\n        \"nfcall\", \"nfapply\", \"nfbind\", \"denodeify\", \"nbind\",\n        \"ncall\", \"napply\", \"nbind\",\n        \"npost\", \"nsend\", \"ninvoke\",\n        \"nodeify\"\n    ],\n    function (undefined, name) {\n        makePromise.prototype[name] = function () {\n            return Q[name].apply(\n                Q,\n                [this].concat(array_slice(arguments))\n            );\n        };\n    },\n    void 0\n);\n\nmakePromise.prototype.toSource = function () {\n    return this.toString();\n};\n\nmakePromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\nQ.nearer = valueOf;\nfunction valueOf(value) {\n    if (isPromise(value)) {\n        return value.valueOf();\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object && typeof object.promiseDispatch === \"function\";\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return object && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return !isFulfilled(object) && !isRejected(object);\n}\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromiseAlike(valueOf(object));\n}\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    object = valueOf(object);\n    return isPromise(object) && 'exception' in object;\n}\n\nvar rejections = [];\nvar errors = [];\nvar errorsDisplayed;\nfunction displayErrors() {\n    \n    /* \n      HACK MGA :  remove !window.Touch in the condition\n      because window.Touch is defined in Chrome, so errors are never displayed... \n    */\n\n    if (\n        !errorsDisplayed &&\n        typeof window !== \"undefined\" &&\n        window.console\n    ) {\n        // This promise library consumes exceptions thrown in handlers so\n        // they can be handled by a subsequent promise.  The rejected\n        // promises get added to this array when they are created, and\n        // removed when they are handled.\n\n        //HACK MGA : change log level (log to error)\n        console.error(\"Should be empty:\", errors);\n    }\n    // HACK MGA : remove this affectation to display ALL errors\n    // errorsDisplayed = true;\n}\n\n// Show unhandled rejection if Node exits without handling an outstanding\n// rejection.  (Note that Browserify presently produces a process global\n// without the Emitter on interface)\nif (typeof process !== \"undefined\" && process.on) {\n    process.on(\"exit\", function () {\n        for (var i = 0; i < errors.length; i++) {\n            var error = errors[i];\n            if (error && typeof error.stack !== \"undefined\") {\n                console.warn(\"Unhandled rejected promise:\", error.stack);\n            } else {\n                console.warn(\"Unhandled rejected promise (no stack):\", error);\n            }\n        }\n    });\n}\n\n/**\n * Constructs a rejected promise.\n * @param exception value describing the failure\n */\nQ.reject = reject;\nfunction reject(exception) {\n    var rejection = makePromise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                var at = array_indexOf(rejections, this);\n                if (at !== -1) {\n                    errors.splice(at, 1);\n                    rejections.splice(at, 1);\n                }\n            }\n            return rejected ? rejected(exception) : this;\n        }\n    }, function fallback() {\n        return reject(exception);\n    }, function valueOf() {\n        return this;\n    }, exception, true);\n    rejections.push(rejection);\n    errors.push(exception);\n    // note that the error has not been handled\n    // HACK MGA : change call order because in disaplyErrors, we use errors...\n    //displayErrors();\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(object) {\n    return makePromise({\n        \"when\": function () {\n            return object;\n        },\n        \"get\": function (name) {\n            return object[name];\n        },\n        \"set\": function (name, value) {\n            object[name] = value;\n        },\n        \"delete\": function (name) {\n            delete object[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name == null) { // iff name is null or undefined\n                return object.apply(void 0, args);\n            } else {\n                return object[name].apply(object, args);\n            }\n        },\n        \"apply\": function (thisP, args) {\n            return object.apply(thisP, args);\n        },\n        \"keys\": function () {\n            return object_keys(object);\n        }\n    }, void 0, function valueOf() {\n        return object;\n    });\n}\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nQ.resolve = resolve;\nfunction resolve(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (isPromise(value)) {\n        return value;\n    }\n    // In order to break infinite recursion or loops between `then` and\n    // `resolve`, it is necessary to attempt to extract fulfilled values\n    // out of foreign promise implementations before attempting to wrap\n    // them as unresolved promises.  It is my hope that other\n    // implementations will implement `valueOf` to synchronously extract\n    // the fulfillment value from their fulfilled promises.  If the\n    // other promise library does not implement `valueOf`, the\n    // implementations on primordial prototypes are harmless.\n    value = valueOf(value);\n    // assimilate thenables, CommonJS/Promises/A+\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return makePromise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return valueOf(object);\n    });\n}\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, resolvedValue);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    var resolvedValue = resolve(value);\n    nextTick(function () {\n        resolvedValue.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    resolvedValue.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(promise, fulfilled, rejected) {\n    return when(promise, function (valuesOrPromises) {\n        return all(valuesOrPromises).then(function (values) {\n            return fulfilled.apply(void 0, values);\n        }, rejected);\n    }, rejected);\n}\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  This presently only works in\n * Firefox/Spidermonkey, however, this code does not cause syntax\n * errors in older engines.  This code should continue to work and\n * will in fact improve over time as the language improves.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n *  - in present implementations of generators, when a generator\n *    function is complete, it throws ``StopIteration``, ``return`` is\n *    a syntax error in the presence of ``yield``, so there is no\n *    observable return value. There is a proposal[1] to add support\n *    for ``return``, which would permit the value to be carried by a\n *    ``StopIteration`` instance, in which case it would fulfill the\n *    promise returned by the asynchronous generator.  This can be\n *    emulated today by throwing StopIteration explicitly with a value\n *    property.\n *\n *  [1]: http://wiki.ecmascript.org/doku.php?id=strawman:async_functions#reference_implementation\n *\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n            try {\n                result = generator[verb](arg);\n            } catch (exception) {\n                if (isStopIteration(exception)) {\n                    return exception.value;\n                } else {\n                    return reject(exception);\n                }\n            }\n            return when(result, callback, errback);\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"send\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n * Only useful presently in Firefox/SpiderMonkey since generators are\n * implemented.\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ['return'] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are resolved and passed as values (`this` is also resolved and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q.resolve(a), Q.resolve(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    var deferred = defer();\n    nextTick(function () {\n        resolve(object).promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n}\n\n/**\n * Constructs a promise method that can be used to safely observe resolution of\n * a promise for an arbitrarily named method like \"propfind\" in a future turn.\n *\n * \"dispatcher\" constructs methods like \"get(promise, name)\" and \"put(promise)\".\n */\nQ.dispatcher = dispatcher;\nfunction dispatcher(op) {\n    return function (object) {\n        var args = array_slice(arguments, 1);\n        return dispatch(object, op, args);\n    };\n}\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = dispatcher(\"get\");\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = dispatcher(\"set\");\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ[\"delete\"] = // XXX experimental\nQ.del = dispatcher(\"delete\");\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nvar post = Q.post = dispatcher(\"post\");\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = send;\nQ.invoke = send; // synonyms\nfunction send(value, name) {\n    var args = array_slice(arguments, 2);\n    return post(value, name, args);\n}\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = fapply;\nfunction fapply(value, args) {\n    return dispatch(value, \"apply\", [void 0, args]);\n}\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] = fcall; // XXX experimental\nQ.fcall = fcall;\nfunction fcall(value) {\n    var args = array_slice(arguments, 1);\n    return fapply(value, args);\n}\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = fbind;\nfunction fbind(value) {\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        var allArgs = args.concat(array_slice(arguments));\n        return dispatch(value, \"apply\", [this, allArgs]);\n    };\n}\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually resolved object\n */\nQ.keys = dispatcher(\"keys\");\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var countDown = promises.length;\n        if (countDown === 0) {\n            return resolve(promises);\n        }\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            if (isFulfilled(promise)) {\n                promises[index] = valueOf(promise);\n                if (--countDown === 0) {\n                    deferred.resolve(promises);\n                }\n            } else {\n                when(promise, function (value) {\n                    promises[index] = value;\n                    if (--countDown === 0) {\n                        deferred.resolve(promises);\n                    }\n                })\n                .fail(deferred.reject);\n            }\n        }, void 0);\n        return deferred.promise;\n    });\n}\n\n/**\n * Waits for all promises to be resolved, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = allResolved;\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, resolve);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ[\"catch\"] = // XXX experimental\nQ.fail = fail;\nfunction fail(promise, rejected) {\n    return when(promise, void 0, rejected);\n}\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(promise, progressed) {\n    return when(promise, void 0, void 0, progressed);\n}\n\n/**\n * Provides an opportunity to observe the rejection of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ[\"finally\"] = // XXX experimental\nQ.fin = fin;\nfunction fin(promise, callback) {\n    return when(promise, function (value) {\n        return when(callback(), function () {\n            return value;\n        });\n    }, function (exception) {\n        return when(callback(), function () {\n            return reject(exception);\n        });\n    });\n}\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = done;\nfunction done(promise, fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        nextTick(function () {\n            makeStackTraceLong(error, promise);\n\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promiseToHandle = fulfilled || rejected || progress ?\n        when(promise, fulfilled, rejected, progress) :\n        promise;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n    fail(promiseToHandle, onUnhandledError);\n}\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = timeout;\nfunction timeout(promise, ms) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        deferred.reject(new Error(\"Timed out after \" + ms + \" ms\"));\n    }, ms);\n\n    when(promise, function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    });\n\n    return deferred.promise;\n}\n\n/**\n * Returns a promise for the given value (or promised value) after some\n * milliseconds.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after some\n * time has elapsed.\n */\nQ.delay = delay;\nfunction delay(promise, timeout) {\n    if (timeout === void 0) {\n        timeout = promise;\n        promise = void 0;\n    }\n    var deferred = defer();\n    setTimeout(function () {\n        deferred.resolve(promise);\n    }, timeout);\n    return deferred.promise;\n}\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = nfapply;\nfunction nfapply(callback, args) {\n    var nodeArgs = array_slice(args);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n\n    fapply(callback, nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n}\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n *\n *      Q.nfcall(FS.readFile, __filename)\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfcall = nfcall;\nfunction nfcall(callback/*, ...args */) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n\n    fapply(callback, nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n}\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n *\n *      Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n *      .then(console.log)\n *      .done()\n *\n */\nQ.nfbind = nfbind;\nQ.denodeify = Q.nfbind; // synonyms\nfunction nfbind(callback/*, ...args */) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n\n        fapply(callback, nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n}\n\nQ.nbind = nbind;\nfunction nbind(callback/*, ... args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n\n        var thisArg = this;\n        function bound() {\n            return callback.apply(thisArg, arguments);\n        }\n\n        fapply(bound, nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n}\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.npost = npost;\nfunction npost(object, name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n\n    post(object, name, nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n}\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = nsend;\nQ.ninvoke = Q.nsend; // synonyms\nfunction nsend(object, name /*, ...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    post(object, name, nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n}\n\nQ.nodeify = nodeify;\nfunction nodeify(promise, nodeback) {\n    if (nodeback) {\n        promise.then(function (value) {\n            nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return promise;\n    }\n}\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar mp4lib = (function() {\n    var mp4lib = {\n        boxes:{},\n        fields:{},\n\n        // In debug mode, source data buffer is kept for each of deserialized box so any\n        // structural deserialization problems can be traced by serializing each box\n        // and comparing the resulting buffer with the source buffer.\n        // This greatly increases memory consumption, so it is turned off by default.\n        debug:false,\n\n        // A handler function may be hooked up to display warnings.\n        // A warning is typically non-critical issue, like unknown box in data buffer.\n        warningHandler:function(message){\n            //console.log(message);\n        }\n    };\n\n    var boxTypeArray = {};\n\n    mp4lib.registerTypeBoxes = function() {\n        boxTypeArray[\"moov\"] = mp4lib.boxes.MovieBox;\n        boxTypeArray[\"moof\"] = mp4lib.boxes.MovieFragmentBox;\n        boxTypeArray[\"ftyp\"] = mp4lib.boxes.FileTypeBox;\n        boxTypeArray[\"mfhd\"] = mp4lib.boxes.MovieFragmentHeaderBox;\n        boxTypeArray[\"mfra\"] = mp4lib.boxes.MovieFragmentRandomAccessBox;\n        boxTypeArray[\"udta\"] = mp4lib.boxes.UserDataBox;\n        boxTypeArray[\"trak\"] = mp4lib.boxes.TrackBox;\n        boxTypeArray[\"edts\"] = mp4lib.boxes.EditBox;\n        boxTypeArray[\"mdia\"] = mp4lib.boxes.MediaBox;\n        boxTypeArray[\"minf\"] = mp4lib.boxes.MediaInformationBox;\n        boxTypeArray[\"dinf\"] = mp4lib.boxes.DataInformationBox;\n        boxTypeArray[\"stbl\"] = mp4lib.boxes.SampleTableBox;\n        boxTypeArray[\"mvex\"] = mp4lib.boxes.MovieExtendsBox;\n        boxTypeArray[\"traf\"] = mp4lib.boxes.TrackFragmentBox;\n        boxTypeArray[\"meta\"] = mp4lib.boxes.MetaBox;\n        boxTypeArray[\"mvhd\"] = mp4lib.boxes.MovieHeaderBox;\n        boxTypeArray[\"mdat\"] = mp4lib.boxes.MediaDataBox;\n        boxTypeArray[\"free\"] = mp4lib.boxes.FreeSpaceBox;\n        boxTypeArray[\"sidx\"] = mp4lib.boxes.SegmentIndexBox;\n        boxTypeArray[\"tkhd\"] = mp4lib.boxes.TrackHeaderBox;\n        boxTypeArray[\"mdhd\"] = mp4lib.boxes.MediaHeaderBox;\n        boxTypeArray[\"mehd\"] = mp4lib.boxes.MovieExtendsHeaderBox;\n        boxTypeArray[\"hdlr\"] = mp4lib.boxes.HandlerBox;\n        boxTypeArray[\"stts\"] = mp4lib.boxes.TimeToSampleBox;\n        boxTypeArray[\"stsc\"] = mp4lib.boxes.SampleToChunkBox;\n        boxTypeArray[\"stco\"] = mp4lib.boxes.ChunkOffsetBox;\n        boxTypeArray[\"trex\"] = mp4lib.boxes.TrackExtendsBox;\n        boxTypeArray[\"vmhd\"] = mp4lib.boxes.VideoMediaHeaderBox;\n        boxTypeArray[\"smhd\"] = mp4lib.boxes.SoundMediaHeaderBox;\n        boxTypeArray[\"dref\"] = mp4lib.boxes.DataReferenceBox;\n        boxTypeArray[\"url \"] = mp4lib.boxes.DataEntryUrlBox;\n        boxTypeArray[\"urn \"] = mp4lib.boxes.DataEntryUrnBox;\n        boxTypeArray[\"tfhd\"] = mp4lib.boxes.TrackFragmentHeaderBox;\n        boxTypeArray[\"tfdt\"] = mp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox;\n        boxTypeArray[\"trun\"] = mp4lib.boxes.TrackFragmentRunBox;\n        boxTypeArray[\"stsd\"] = mp4lib.boxes.SampleDescriptionBox;\n        boxTypeArray[\"sdtp\"] = mp4lib.boxes.SampleDependencyTableBox;\n        boxTypeArray[\"avc1\"] = mp4lib.boxes.AVC1VisualSampleEntryBox;\n        boxTypeArray[\"encv\"] = mp4lib.boxes.EncryptedVideoBox;\n        boxTypeArray[\"avcC\"] = mp4lib.boxes.AVCConfigurationBox;\n        boxTypeArray[\"pasp\"] = mp4lib.boxes.PixelAspectRatioBox;\n        boxTypeArray[\"mp4a\"] = mp4lib.boxes.MP4AudioSampleEntryBox;\n        boxTypeArray[\"enca\"] = mp4lib.boxes.EncryptedAudioBox;\n        boxTypeArray[\"esds\"] = mp4lib.boxes.ESDBox;\n        boxTypeArray[\"stsz\"] = mp4lib.boxes.SampleSizeBox;\n        boxTypeArray[\"pssh\"] = mp4lib.boxes.ProtectionSystemSpecificHeaderBox;\n        boxTypeArray[\"senc\"] = mp4lib.boxes.SampleEncryptionBox;\n        boxTypeArray[\"saiz\"] = mp4lib.boxes.SampleAuxiliaryInformationSizesBox;\n        boxTypeArray[\"saio\"] = mp4lib.boxes.SampleAuxiliaryInformationOffsetsBox;\n        boxTypeArray[\"sinf\"] = mp4lib.boxes.ProtectionSchemeInformationBox;\n        boxTypeArray[\"schi\"] = mp4lib.boxes.SchemeInformationBox;\n        boxTypeArray[\"tenc\"] = mp4lib.boxes.TrackEncryptionBox;\n        boxTypeArray[\"schm\"] = mp4lib.boxes.SchemeTypeBox;\n        boxTypeArray[\"elst\"] = mp4lib.boxes.EditListBox;\n        boxTypeArray[\"hmhd\"] = mp4lib.boxes.HintMediaHeaderBox;\n        boxTypeArray[\"nmhd\"] = mp4lib.boxes.NullMediaHeaderBox;\n        boxTypeArray[\"ctts\"] = mp4lib.boxes.CompositionOffsetBox;\n        boxTypeArray[\"cslg\"] = mp4lib.boxes.CompositionToDecodeBox;\n        boxTypeArray[\"stss\"] = mp4lib.boxes.SyncSampleBox;\n        boxTypeArray[\"tref\"] = mp4lib.boxes.TrackReferenceBox;\n        boxTypeArray[\"frma\"] = mp4lib.boxes.OriginalFormatBox;\n        boxTypeArray[\"subs\"] = mp4lib.boxes.SubSampleInformationBox;\n        //extended types\n        boxTypeArray[JSON.stringify([0x6D, 0x1D, 0x9B, 0x05, 0x42, 0xD5, 0x44, 0xE6, 0x80, 0xE2, 0x14, 0x1D, 0xAF, 0xF7, 0x57, 0xB2])] = mp4lib.boxes.TfxdBox;\n        boxTypeArray[JSON.stringify([0xD4, 0x80, 0x7E, 0xF2, 0xCA, 0x39, 0x46, 0x95, 0x8E, 0x54, 0x26, 0xCB, 0x9E, 0x46, 0xA7, 0x9F])] = mp4lib.boxes.TfrfBox;\n        boxTypeArray[JSON.stringify([0xD0, 0x8A, 0x4F, 0x18, 0x10, 0xF3, 0x4A, 0x82, 0xB6, 0xC8, 0x32, 0xD8, 0xAB, 0xA1, 0x83, 0xD3])] = mp4lib.boxes.PiffProtectionSystemSpecificHeaderBox;\n        boxTypeArray[JSON.stringify([0x89, 0x74, 0xDB, 0xCE, 0x7B, 0xE7, 0x4C, 0x51, 0x84, 0xF9, 0x71, 0x48, 0xF9, 0x88, 0x25, 0x54])] = mp4lib.boxes.PiffTrackEncryptionBox;\n        boxTypeArray[JSON.stringify([0xA2, 0x39, 0x4F, 0x52, 0x5A, 0x9B, 0x4F, 0x14, 0xA2, 0x44, 0x6C, 0x42, 0x7C, 0x64, 0x8D, 0xF4])] = mp4lib.boxes.PiffSampleEncryptionBox;\n    };\n\n\n    mp4lib.constructorTypeBox = function (type) {\n        var obj, args;\n        obj = Object.create(type.prototype);\n        args = Array.prototype.slice.call(arguments, 1);\n        type.apply(obj, args);\n        return obj;\n    };\n\n    mp4lib.searchBox = function ( boxtype, uuid ){\n        var boxType;\n\n        if (uuid) {\n            boxType = boxTypeArray[uuid];\n        }\n        else {\n            boxType = boxTypeArray[boxtype];\n        }\n\n        if (!boxType){\n            boxType = mp4lib.boxes.UnknownBox;\n        }\n\n        return boxType;\n    };\n\n    mp4lib.createBox = function( boxtype,size, uuid) {\n        return mp4lib.constructorTypeBox.apply(null, [mp4lib.searchBox(boxtype, uuid),size]);\n    };\n\n    /**\n    deserialize binary data (uint8array) into mp4lib.File object\n    */\n    mp4lib.deserialize = function(uint8array) {\n        var f = new mp4lib.boxes.File();\n        try{\n            f.read(uint8array);\n        }catch(e){\n            mp4lib.warningHandler(e.message);\n            return null;\n        }\n        return f;\n    };\n\n    /**\n    serialize box (or mp4lib.File) into binary data (uint8array)\n    */\n    mp4lib.serialize = function(f) {\n        var file_size = f.getLength(),\n            uint8array = new Uint8Array(file_size);\n        f.write(uint8array);\n        return uint8array;\n    };\n\n    /**\n    exception thrown when binary data is malformed\n    it is thrown typically during deserialization\n    */\n    mp4lib.ParseException = function(message) {\n        this.message = message;\n        this.name = \"ParseException\";\n    };\n\n    /**\n    exception thrown when box objects contains invalid data,\n    ex. flag field is are not coherent with fields etc.\n    it is thrown typically during object manipulation or serialization\n    */\n    mp4lib.DataIntegrityException = function(message) {\n        this.message = message;\n        this.name = \"DataIntegrityException\";\n    };\n\n    return mp4lib;\n})();\n\n// This module is intended to work both on node.js and inside browser.\n// Since these environments differ in a way modules are stored/accessed,\n// we need to export the module in the environment-dependant way\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined')\n    module.exports = mp4lib; // node.js\nelse\n    window.mp4lib = mp4lib;  // browser\n\n","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nmp4lib.fields.readBytes = function(buf, pos, nbBytes) {\n    var value = 0,\n        i = 0;\n    for (i = 0; i < nbBytes; i++) {\n        value = value << 8;\n        value = value + buf[pos];\n        pos++;\n    }\n    return value;\n};\n\nmp4lib.fields.writeBytes = function(buf, pos, nbBytes, value) {\n    var i = 0;\n    for (i = 0; i < nbBytes; i++) {\n        buf[pos + nbBytes - i - 1] = value & 0xFF;\n        value = value >> 8;\n    }\n};\n\nmp4lib.fields.readString = function(buf, pos, count) {\n    var res = \"\",\n        i;\n    for (i = pos; i < pos + count; i++) {\n        res += String.fromCharCode(buf[i]);\n    }\n    return res;\n};\n\n//------------------------------- NumberField -------------------------------\n\nmp4lib.fields.NumberField = function(bits, signed) {\n    this.bits = bits;\n    this.signed = signed;\n};\n\nmp4lib.fields.NumberField.prototype.read = function(buf, pos) {\n    return mp4lib.fields.readBytes(buf, pos, this.bits / 8);\n};\n\nmp4lib.fields.NumberField.prototype.write = function(buf, pos, val) {\n    mp4lib.fields.writeBytes(buf, pos, this.bits / 8, val);\n};\n\nmp4lib.fields.NumberField.prototype.getLength = function() {\n    return this.bits / 8;\n};\n\n//------------------------------- 64BitsNumberField -------------------------------\n\nmp4lib.fields.LongNumberField = function() {};\n\nmp4lib.fields.LongNumberField.prototype.read = function(buf, pos) {\n    var high = mp4lib.fields.readBytes(buf, pos, 4),\n        low = mp4lib.fields.readBytes(buf, pos + 4, 4);\n    return goog.math.Long.fromBits(low, high);\n};\n\nmp4lib.fields.LongNumberField.prototype.write = function(buf, pos, val) {\n    var longNumber = (typeof val.getLowBits === 'function') ? val : goog.math.Long.fromNumber(val),\n        low = longNumber.getLowBits(),\n        high = longNumber.getHighBits();\n    mp4lib.fields.writeBytes(buf, pos, 4, high);\n    mp4lib.fields.writeBytes(buf, pos + 4, 4, low);\n};\n\nmp4lib.fields.LongNumberField.prototype.getLength = function() {\n    return 8;\n};\n\n//------------------------------- FixedLenStringField -------------------------------\n\nmp4lib.fields.FixedLenStringField = function(size) {\n    this.size = size;\n};\n\nmp4lib.fields.FixedLenStringField.prototype.read = function(buf, pos) {\n    var res = \"\",\n        i = 0;\n    for (i = 0; i < this.size; i++) {\n        res = res + String.fromCharCode(buf[pos + i]);\n    }\n    return res;\n};\n\nmp4lib.fields.FixedLenStringField.prototype.write = function(buf, pos, val) {\n    var i = 0;\n    for (i = 0; i < this.size; i++) {\n        buf[pos + i] = val.charCodeAt(i);\n    }\n};\n\nmp4lib.fields.FixedLenStringField.prototype.getLength = function() {\n    return this.size;\n};\n\n//------------------------------- BoxTypeField -------------------------------\n\nmp4lib.fields.BoxTypeField = function() {};\n\nmp4lib.fields.BoxTypeField.prototype.read = function(buf, pos) {\n    var res = \"\",\n        i = 0;\n    for (i = 0; i < 4; i++) {\n        res = res + String.fromCharCode(buf[pos + i]);\n    }\n    return res;\n};\n\nmp4lib.fields.BoxTypeField.prototype.write = function(buf, pos, val) {\n    var i = 0;\n    for (i = 0; i < 4; i++) {\n        buf[pos + i] = val.charCodeAt(i);\n    }\n};\n\nmp4lib.fields.BoxTypeField.prototype.getLength = function() {\n    return 4;\n};\n\n\n//------------------------------- StringField -------------------------------\n\nmp4lib.fields.StringField = function() {};\n\n\nmp4lib.fields.StringField.prototype.read = function(buf, pos, end) {\n    var res = \"\",\n        i = 0;\n\n    for (i = pos; i < end; i++) {\n        res = res + String.fromCharCode(buf[i]);\n        if (buf[i] === 0) {\n            return res;\n        }\n    }\n\n    if ((end - pos < 255) && (buf[0] == String.fromCharCode(end - pos))) {\n        res = res.substr(1, end - pos);\n        mp4lib.warningHandler('null-terminated string expected, ' +\n            'but found a string \"' + res + '\", which seems to be ' +\n            'length-prefixed instead. Conversion done.');\n        return res;\n    }\n\n    throw new mp4lib.ParseException('expected null-terminated string, ' +\n        'but end of field reached without termination. ' +\n        'Read so far:\"' + res + '\"');\n};\n\nmp4lib.fields.StringField.prototype.write = function(buf, pos, val) {\n    var i = 0;\n\n    for (i = 0; i < val.length; i++) {\n        buf[pos + i] = val.charCodeAt(i);\n    }\n    buf[pos + val.length] = 0;\n};\n\nmp4lib.fields.StringField.prototype.getLength = function(val) {\n    return val.length;\n};\n\n//------------------------------- ArrayField -------------------------------\n\nmp4lib.fields.ArrayField = function(innerField, size) {\n    this.innerField = innerField;\n    this.size = size;\n};\n\nmp4lib.fields.ArrayField.prototype.read = function(buf, pos) {\n    var innerFieldLength = -1,\n        res = [],\n        i = 0;\n    for (i = 0; i < this.size; i++) {\n\n        res.push(this.innerField.read(buf, pos));\n\n        if (innerFieldLength == -1) {\n            innerFieldLength = this.innerField.getLength(res[i]);\n        }\n        // it may happen that the size of field depends on the box flags, \n        // we need to count is having box and first structure constructed\n\n        pos += innerFieldLength;\n    }\n    return res;\n};\n\n// pre-defined shortcuts for common fields \n// ( it is recommended to use these shortcuts to avoid constructors \n//   being called for every field processing action )\nmp4lib.fields.FIELD_INT8 = new mp4lib.fields.NumberField(8, true);\nmp4lib.fields.FIELD_INT16 = new mp4lib.fields.NumberField(16, true);\nmp4lib.fields.FIELD_INT32 = new mp4lib.fields.NumberField(32, true);\nmp4lib.fields.FIELD_INT64 = new mp4lib.fields.LongNumberField();\nmp4lib.fields.FIELD_UINT8 = new mp4lib.fields.NumberField(8, false);\nmp4lib.fields.FIELD_UINT16 = new mp4lib.fields.NumberField(16, false);\nmp4lib.fields.FIELD_UINT32 = new mp4lib.fields.NumberField(32, false);\nmp4lib.fields.FIELD_UINT64 = new mp4lib.fields.LongNumberField();\nmp4lib.fields.FIELD_BIT8 = new mp4lib.fields.NumberField(8, false);\nmp4lib.fields.FIELD_BIT16 = new mp4lib.fields.NumberField(16, false);\nmp4lib.fields.FIELD_BIT24 = new mp4lib.fields.NumberField(24, false);\nmp4lib.fields.FIELD_BIT32 = new mp4lib.fields.NumberField(32, false);\nmp4lib.fields.FIELD_ID = new mp4lib.fields.BoxTypeField(4);\nmp4lib.fields.FIELD_STRING = new mp4lib.fields.StringField();","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// ---------- File (treated similarly to box in terms of processing) ----------\nmp4lib.boxes.File = function() {\n    this.boxes = [];\n};\n\nmp4lib.boxes.File.prototype.getBoxByType = function(boxType) {\n    var i = 0;\n\n    for (i = 0; i < this.boxes.length; i++) {\n        if (this.boxes[i].boxtype === boxType) {\n            return this.boxes[i];\n        }\n    }\n    return null;\n};\n\nmp4lib.boxes.File.prototype.getLength = function() {\n    var length = 0,\n        i = 0;\n\n    for (i = 0; i < this.boxes.length; i++) {\n        this.boxes[i].computeLength();\n        length += this.boxes[i].size;\n    }\n\n    return length;\n};\n\nmp4lib.boxes.File.prototype.write = function(data) {\n    var pos = 0,\n        i = 0;\n\n    for (i = 0; i < this.boxes.length; i++) {\n        pos = this.boxes[i].write(data, pos);\n    }\n};\n\nmp4lib.boxes.File.prototype.read = function(data) {\n    var size = 0,\n        boxtype = null,\n        uuidFieldPos = 0,\n        uuid = null,\n        pos = 0,\n        end = data.length,\n        box;\n\n    while (pos < end) {\n        // Read box size\n        size = mp4lib.fields.FIELD_UINT32.read(data, pos);\n\n        // Read boxtype\n        boxtype = mp4lib.fields.readString(data, pos + 4, 4);\n\n        // Extented type?\n        if (boxtype == \"uuid\") {\n            uuidFieldPos = (size == 1) ? 16 : 8;\n            uuid = new mp4lib.fields.ArrayField(mp4lib.fields.FIELD_INT8, 16).read(data, pos + uuidFieldPos, pos + uuidFieldPos + 16);\n            uuid = JSON.stringify(uuid);\n        }\n\n        box = mp4lib.createBox(boxtype, size, uuid);\n        if (boxtype === \"uuid\") {\n            pos = box.read(data, pos + mp4lib.fields.FIELD_INT8.getLength() * 16 + 8, pos + size);\n            uuid = null;\n        } else {\n            pos = box.read(data, pos + 8, pos + size);\n        }\n\n        // in debug mode, sourcebuffer is copied to each box,\n        // so any invalid deserializations may be found by comparing\n        // source buffer with serialized box\n        if (mp4lib.debug) {\n            box.__sourceBuffer = data.subarray(pos - box.size, pos);\n        }\n\n        //if boxtype is unknown, don't add it to the list box\n        if (box.boxtype) {\n            this.boxes.push(box);\n        }\n\n        if (box.size <= 0 || box.size === null) {\n            throw new mp4lib.ParseException('Problem on size of box ' + box.boxtype +\n                ', parsing stopped to avoid infinite loop');\n        }\n    }\n};\n\n/**\nfind child position\n*/\nmp4lib.boxes.File.prototype.getBoxOffsetByType = function(boxType) {\n    var offset = 0,\n        i = 0;\n\n    for (i = 0; i < this.boxes.length; i++) {\n        if (this.boxes[i].boxtype === boxType) {\n            return offset;\n        }\n        offset += this.boxes[i].size;\n    }\n    return -1;\n};\n\nmp4lib.boxes.File.prototype.getBoxIndexByType = function(boxType) {\n    var index = 0,\n        i = 0;\n\n    for (i = 0; i < this.boxes.length; i++) {\n        if (this.boxes[i].boxtype === boxType) {\n            return index;\n        }\n        index++;\n    }\n    return -1;\n};\n\n\n// ---------- Generic Box -------------------------------\nmp4lib.boxes.Box = function(boxType, size, uuid, largesize) {\n    this.size = size || null;\n    this.boxtype = boxType;\n    //large size management to do...\n    if (this.size === 1 && largesize) {\n        this.largesize = largesize;\n    }\n\n    if (uuid) {\n        this.extended_type = uuid;\n    }\n\n    this.localPos = 0;\n    this.localEnd = 0;\n};\n\nmp4lib.boxes.Box.prototype.write = function(data, pos) {\n    this.localPos = pos;\n    var i = 0;\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.size);\n    //if extended_type is not defined, boxtype must have this.boxtype value\n    if (!this.extended_type) {\n        this._writeData(data, mp4lib.fields.FIELD_ID, this.boxtype);\n    } else { //if extended_type is defined, boxtype must have 'uuid' value\n        this._writeData(data, mp4lib.fields.FIELD_ID, 'uuid');\n    }\n\n    if (this.size === 1) {\n        this._writeData(data, mp4lib.fields.FIELD_INT64, this.largesize);\n    }\n\n    if (this.extended_type) {\n        for (i = 0; i < 16; i++) {\n            this._writeData(data, mp4lib.fields.FIELD_INT8, this.extended_type[i]);\n        }\n    }\n};\n\nmp4lib.boxes.Box.prototype.getBoxByType = function(boxType) {\n    var i = 0;\n    if (this.hasOwnProperty('boxes')) {\n        for (i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].boxtype === boxType) {\n                return this.boxes[i];\n            }\n        }\n    }\n    return null;\n};\n\n\nmp4lib.boxes.Box.prototype.getBoxesByType = function(boxType) {\n    var resu = [],\n        i = 0;\n    if (this.hasOwnProperty('boxes')) {\n        for (i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].boxtype === boxType) {\n                resu.push(this.boxes[i]);\n            }\n        }\n    }\n    return resu;\n};\n\n/**\nremove child from a box\n*/\nmp4lib.boxes.Box.prototype.removeBoxByType = function(boxType) {\n    var i = 0;\n\n    if (this.hasOwnProperty('boxes')) {\n        for (i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].boxtype === boxType) {\n                this.boxes.splice(i, 1);\n            }\n        }\n    } else {\n        mp4lib.warningHandler('' + this.boxtype + 'does not have ' + boxType + ' box, impossible to remove it');\n    }\n};\n\n/**\nfind child position\n*/\nmp4lib.boxes.Box.prototype.getBoxOffsetByType = function(boxType) {\n    var offset = 8,\n        i = 0;\n\n    if (this.hasOwnProperty('boxes')) {\n        for (i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].boxtype === boxType) {\n                return offset;\n            }\n            offset += this.boxes[i].size;\n        }\n    }\n    return null;\n};\n\nmp4lib.boxes.Box.prototype.getBoxIndexByType = function(boxType) {\n    var index = 0,\n        i = 0;\n\n    if (this.hasOwnProperty('boxes')) {\n        for (i = 0; i < this.boxes.length; i++) {\n            if (this.boxes[i].boxtype === boxType) {\n                return index;\n            }\n            index++;\n        }\n    }\n    return null;\n};\n\nmp4lib.boxes.Box.prototype.computeLength = function() {\n    this.size = mp4lib.fields.FIELD_UINT32.getLength() + mp4lib.fields.FIELD_ID.getLength(); //size and boxtype length\n\n    /*if (this.size === 1) {\n        this.size += mp4lib.fields.FIELD_INT64.getLength(); //add large_size length\n    }*/\n    if (this.extended_type) {\n        this.size += mp4lib.fields.FIELD_INT8.getLength() * 16; //add extended_type length.\n    }\n};\n\nmp4lib.boxes.Box.prototype._readData = function(data, dataType) {\n    var resu = dataType.read(data, this.localPos, this.localEnd);\n    this.localPos += dataType.getLength(resu);\n    return resu;\n};\n\nmp4lib.boxes.Box.prototype._writeData = function(data, dataType, dataField) {\n    if (dataField === undefined || dataField === null) {\n        throw new mp4lib.ParseException('a field to write is null or undefined for box : ' + this.boxtype);\n    } else {\n        dataType.write(data, this.localPos, dataField);\n        this.localPos += dataType.getLength(dataField);\n    }\n};\n\nmp4lib.boxes.Box.prototype._writeBuffer = function(data, dataField, size) {\n    data.set(dataField, this.localPos);\n    this.localPos += size;\n};\n\nmp4lib.boxes.Box.prototype._writeArrayData = function(data, dataArrayType, array) {\n    var i = 0;\n\n    if (array === undefined || array === null || array.length === 0) {\n        throw new mp4lib.ParseException('an array to write is null, undefined or length = 0 for box : ' + this.boxtype);\n    }\n\n    for (i = 0; i < array.length; i++) {\n        this._writeData(data, dataArrayType, array[i]);\n    }\n};\n\nmp4lib.boxes.Box.prototype._readArrayData = function(data, dataArrayType) {\n    var array = [],\n        dataArrayTypeLength = dataArrayType.getLength(),\n        size = (this.localEnd - this.localPos) / dataArrayTypeLength,\n        i = 0;\n\n    for (i = 0; i < size; i++) {\n        array.push(dataArrayType.read(data, this.localPos));\n        this.localPos += dataArrayTypeLength;\n    }\n    return array;\n};\n\nmp4lib.boxes.Box.prototype._readArrayFieldData = function(data, dataArrayType, arraySize) {\n    var innerFieldLength = -1,\n        array = [],\n        i = 0;\n\n    for (i = 0; i < arraySize; i++) {\n\n        array.push(dataArrayType.read(data, this.localPos));\n\n        if (innerFieldLength === -1) {\n            innerFieldLength = dataArrayType.getLength(array[i]);\n        }\n        // it may happen that the size of field depends on the box flags,\n        // we need to count is having box and first structure constructed\n\n        this.localPos += innerFieldLength;\n    }\n    return array;\n};\n\n// ---------- Abstract Container Box -------------------------------\nmp4lib.boxes.ContainerBox = function(boxType, size) {\n    mp4lib.boxes.Box.call(this, boxType, size);\n    this.boxes = [];\n};\n\nmp4lib.boxes.ContainerBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.ContainerBox.prototype.constructor = mp4lib.boxes.ContainerBox;\n\nmp4lib.boxes.ContainerBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    var i = 0;\n    for (i = 0; i < this.boxes.length; i++) {\n        this.boxes[i].computeLength();\n        this.size += this.boxes[i].size;\n    }\n};\n\nmp4lib.boxes.ContainerBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    for (i = 0; i < this.boxes.length; i++) {\n        this.localPos = this.boxes[i].write(data, this.localPos);\n    }\n\n    return this.localPos;\n};\n\nmp4lib.boxes.ContainerBox.prototype.read = function(data, pos, end) {\n    var size = 0,\n        uuidFieldPos = 0,\n        uuid = null,\n        boxtype,\n        box;\n\n    while (pos < end) {\n        // Read box size\n        size = mp4lib.fields.FIELD_UINT32.read(data, pos);\n\n        // Read boxtype\n        boxtype = mp4lib.fields.readString(data, pos + 4, 4);\n\n        // Extented type?\n        if (boxtype === \"uuid\") {\n            uuidFieldPos = (size == 1) ? 16 : 8;\n            uuid = new mp4lib.fields.ArrayField(mp4lib.fields.FIELD_INT8, 16).read(data, pos + uuidFieldPos, pos + uuidFieldPos + 16);\n            uuid = JSON.stringify(uuid);\n        }\n\n        box = mp4lib.createBox(boxtype, size, uuid);\n        if (boxtype === \"uuid\") {\n            pos = box.read(data, pos + mp4lib.fields.FIELD_INT8.getLength() * 16 + 8, pos + size);\n            uuid = null;\n        } else {\n            pos = box.read(data, pos + 8, pos + size);\n        }\n\n        // in debug mode, sourcebuffer is copied to each box,\n        // so any invalid deserializations may be found by comparing\n        // source buffer with serialized box\n        if (mp4lib.debug) {\n            box.__sourceBuffer = data.subarray(pos - box.size, pos);\n        }\n        \n        //if boxtype is unknown, don't add it to the list box\n        if (box.boxtype) {\n            this.boxes.push(box);\n        }\n\n        if (box.size <= 0 || box.size === null) {\n            throw new mp4lib.ParseException('Problem on size of box ' + box.boxtype +\n                ', parsing stopped to avoid infinite loop');\n        }\n    }\n\n    return pos;\n};\n\n// ---------- Full Box -------------------------------\nmp4lib.boxes.FullBox = function(boxType, size, uuid) {\n    mp4lib.boxes.Box.call(this, boxType, size, uuid);\n    this.version = null;\n    this.flags = null;\n};\n\nmp4lib.boxes.FullBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.FullBox.prototype.constructor = mp4lib.boxes.FullBox;\n\nmp4lib.boxes.FullBox.prototype.read = function(data, pos, end) {\n    this.localPos = pos;\n    this.localEnd = end;\n    this.version = this._readData(data, mp4lib.fields.FIELD_INT8);\n    this.flags = this._readData(data, mp4lib.fields.FIELD_BIT24);\n};\n\nmp4lib.boxes.FullBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_INT8, this.version);\n    this._writeData(data, mp4lib.fields.FIELD_BIT24, this.flags);\n};\n\nmp4lib.boxes.FullBox.prototype.getFullBoxAttributesLength = function() {\n    this.size += mp4lib.fields.FIELD_INT8.getLength() + mp4lib.fields.FIELD_BIT24.getLength(); //version and flags size\n};\n\nmp4lib.boxes.FullBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    mp4lib.boxes.FullBox.prototype.getFullBoxAttributesLength.call(this);\n};\n\n// ---------- Abstract Container FullBox -------------------------------\nmp4lib.boxes.ContainerFullBox = function(boxType, size) {\n    mp4lib.boxes.FullBox.call(this, boxType, size);\n    this.boxes = [];\n};\n\nmp4lib.boxes.ContainerFullBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.ContainerFullBox.prototype.constructor = mp4lib.boxes.ContainerFullBox;\n\nmp4lib.boxes.ContainerFullBox.prototype.computeLength = function(isEntryCount) {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    var i = 0;\n\n    if (isEntryCount) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    }\n\n    for (i = 0; i < this.boxes.length; i++) {\n        this.boxes[i].computeLength();\n        this.size += this.boxes[i].size;\n    }\n};\n\nmp4lib.boxes.ContainerFullBox.prototype.read = function(data, pos, end, isEntryCount) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var size = 0,\n        uuidFieldPos = 0,\n        uuid = null,\n        boxtype, box;\n\n    if (isEntryCount) {\n        this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n\n    while (this.localPos < this.localEnd) {\n        // Read box size\n        size = mp4lib.fields.FIELD_UINT32.read(data, this.localPos);\n\n        // Read boxtype\n        boxtype = mp4lib.fields.readString(data, this.localPos + 4, 4);\n\n        // Extented type?\n        if (boxtype == \"uuid\") {\n            uuidFieldPos = (size == 1) ? 16 : 8;\n            uuid = new mp4lib.fields.ArrayField(mp4lib.fields.FIELD_INT8, 16).read(data, this.localPos + uuidFieldPos, this.localPos + uuidFieldPos + 16);\n            uuid = JSON.stringify(uuid);\n        }\n\n        box = mp4lib.createBox(boxtype, size, uuid);\n        if (boxtype === \"uuid\") {\n            this.localPos = box.read(data, this.localPos + mp4lib.fields.FIELD_INT8.getLength() * 16 + 8, this.localPos + size);\n            uuid = null;\n        } else {\n            this.localPos = box.read(data, this.localPos + 8, this.localPos + size);\n        }\n\n        // in debug mode, sourcebuffer is copied to each box,\n        // so any invalid deserializations may be found by comparing\n        // source buffer with serialized box\n        if (mp4lib.debug) {\n            box.__sourceBuffer = data.subarray(this.localPos - box.size, this.localPos);\n        }\n\n        if (box.boxtype) {\n            this.boxes.push(box);\n        }\n\n        if (box.size <= 0 || box.size === null) {\n            throw new mp4lib.ParseException('Problem on size of box ' + box.boxtype +\n                ', parsing stopped to avoid infinite loop');\n        }\n    }\n\n    return this.localPos;\n};\n\nmp4lib.boxes.ContainerFullBox.prototype.write = function(data, pos, isEntryCount) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    if (isEntryCount === true) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n    }\n\n    for (i = 0; i < this.boxes.length; i++) {\n        this.localPos = this.boxes[i].write(data, this.localPos);\n    }\n\n    return this.localPos;\n};\n\n// ----------- Unknown Box -----------------------------\n\nmp4lib.boxes.UnknownBox = function(size) {\n    mp4lib.boxes.Box.call(this, null, size);\n};\n\nmp4lib.boxes.UnknownBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.UnknownBox.prototype.constructor = mp4lib.boxes.UnknownBox;\n\nmp4lib.boxes.UnknownBox.prototype.read = function(data, pos, end) {\n    this.localPos = pos;\n    this.localEnd = end;\n\n    this.unrecognized_data = data.subarray(this.localPos, this.localEnd);\n\n    return this.localEnd;\n};\n\nmp4lib.boxes.UnknownBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n\n    this._writeBuffer(data, this.unrecognized_data, this.unrecognized_data.length);\n\n    return this.localPos;\n};\n\nmp4lib.boxes.UnknownBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    this.size += this.unrecognized_data.length;\n};\n\n// --------------------------- ftyp ----------------------------------\n\nmp4lib.boxes.FileTypeBox = function(size) {\n    mp4lib.boxes.Box.call(this, 'ftyp', size);\n};\n\nmp4lib.boxes.FileTypeBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.FileTypeBox.prototype.constructor = mp4lib.boxes.FileTypeBox;\n\nmp4lib.boxes.FileTypeBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_INT32.getLength() * 2 + mp4lib.fields.FIELD_INT32.getLength() * this.compatible_brands.length;\n};\n\nmp4lib.boxes.FileTypeBox.prototype.read = function(data, pos, end) {\n    this.localPos = pos;\n    this.localEnd = end;\n\n    this.major_brand = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.minor_brand = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.compatible_brands = this._readArrayData(data, mp4lib.fields.FIELD_INT32);\n\n    return this.localPos;\n};\n\nmp4lib.boxes.FileTypeBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.major_brand);\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.minor_brand);\n    this._writeArrayData(data, mp4lib.fields.FIELD_INT32, this.compatible_brands);\n\n    return this.localPos;\n};\n// --------------------------- moov ----------------------------------\n\nmp4lib.boxes.MovieBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'moov', size);\n};\n\nmp4lib.boxes.MovieBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.MovieBox.prototype.constructor = mp4lib.boxes.MovieBox;\n\n// --------------------------- moof ----------------------------------\nmp4lib.boxes.MovieFragmentBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'moof', size);\n};\n\nmp4lib.boxes.MovieFragmentBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.MovieFragmentBox.prototype.constructor = mp4lib.boxes.MovieFragmentBox;\n\n// --------------------------- mfra ----------------------------------\nmp4lib.boxes.MovieFragmentRandomAccessBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'mfra', size);\n};\n\nmp4lib.boxes.MovieFragmentRandomAccessBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.MovieFragmentRandomAccessBox.prototype.constructor = mp4lib.boxes.MovieFragmentRandomAccessBox;\n\n// --------------------------- udta ----------------------------------\nmp4lib.boxes.UserDataBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'udta', size);\n};\n\nmp4lib.boxes.UserDataBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.UserDataBox.prototype.constructor = mp4lib.boxes.UserDataBox;\n\n// --------------------------- trak ----------------------------------\nmp4lib.boxes.TrackBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'trak', size);\n};\n\nmp4lib.boxes.TrackBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.TrackBox.prototype.constructor = mp4lib.boxes.TrackBox;\n\n// --------------------------- edts ----------------------------------\nmp4lib.boxes.EditBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'edts', size);\n};\n\nmp4lib.boxes.EditBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.EditBox.prototype.constructor = mp4lib.boxes.EditBox;\n\n// --------------------------- mdia ----------------------------------\nmp4lib.boxes.MediaBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'mdia', size);\n};\n\nmp4lib.boxes.MediaBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.MediaBox.prototype.constructor = mp4lib.boxes.MediaBox;\n\n// --------------------------- minf ----------------------------------\nmp4lib.boxes.MediaInformationBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'minf', size);\n};\n\nmp4lib.boxes.MediaInformationBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.MediaInformationBox.prototype.constructor = mp4lib.boxes.MediaInformationBox;\n\n// --------------------------- dinf ----------------------------------\nmp4lib.boxes.DataInformationBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'dinf', size);\n};\n\nmp4lib.boxes.DataInformationBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.DataInformationBox.prototype.constructor = mp4lib.boxes.DataInformationBox;\n\n// --------------------------- stbl ----------------------------------\nmp4lib.boxes.SampleTableBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'stbl', size);\n};\n\nmp4lib.boxes.SampleTableBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.SampleTableBox.prototype.constructor = mp4lib.boxes.SampleTableBox;\n\n// --------------------------- mvex ----------------------------------\nmp4lib.boxes.MovieExtendsBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'mvex', size);\n};\n\nmp4lib.boxes.MovieExtendsBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.MovieExtendsBox.prototype.constructor = mp4lib.boxes.MovieExtendsBox;\n\n// --------------------------- traf ----------------------------------\nmp4lib.boxes.TrackFragmentBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'traf', size);\n};\n\nmp4lib.boxes.TrackFragmentBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.TrackFragmentBox.prototype.constructor = mp4lib.boxes.TrackFragmentBox;\n\n// --------------------------- meta -----------------------------\nmp4lib.boxes.MetaBox = function(size) {\n    mp4lib.boxes.ContainerFullBox.call(this, 'meta', size);\n};\n\nmp4lib.boxes.MetaBox.prototype = Object.create(mp4lib.boxes.ContainerFullBox.prototype);\nmp4lib.boxes.MetaBox.prototype.constructor = mp4lib.boxes.MetaBox;\n\nmp4lib.boxes.MetaBox.prototype.computeLength = function() {\n    mp4lib.boxes.ContainerFullBox.prototype.computeLength.call(this, false);\n};\n\nmp4lib.boxes.MetaBox.prototype.read = function(data, pos, end) {\n    return mp4lib.boxes.ContainerFullBox.prototype.read.call(this, data, pos, end, false);\n};\n\nmp4lib.boxes.MetaBox.prototype.write = function(data, pos) {\n    return mp4lib.boxes.ContainerFullBox.prototype.write.call(this, data, pos, false);\n};\n\n// --------------------------- mvhd ----------------------------------\nmp4lib.boxes.MovieHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'mvhd', size);\n};\n\nmp4lib.boxes.MovieHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.MovieHeaderBox.prototype.constructor = mp4lib.boxes.MovieHeaderBox;\n\nmp4lib.boxes.MovieHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_INT32.getLength() /*rate size*/ + mp4lib.fields.FIELD_INT16.getLength() * 2 /*volume size and reserved size*/ ;\n    this.size += mp4lib.fields.FIELD_INT32.getLength() * 2 /*reserved_2 size*/ + mp4lib.fields.FIELD_INT32.getLength() * 9 /*matrix size*/ ;\n    this.size += mp4lib.fields.FIELD_BIT32.getLength() * 6 /*pre_defined size*/ + mp4lib.fields.FIELD_UINT32.getLength() /*next_track_ID size*/ ;\n    if (this.version === 1) {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength() * 3 + mp4lib.fields.FIELD_UINT32.getLength();\n    } else {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength() * 4;\n    }\n};\n\nmp4lib.boxes.MovieHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    if (this.version === 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.creation_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.modification_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.timescale);\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.duration);\n    } else {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.creation_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.modification_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.timescale);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.duration);\n    }\n\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.rate);\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.volume);\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.reserved);\n    this._writeArrayData(data, mp4lib.fields.FIELD_INT32, this.reserved_2);\n    this._writeArrayData(data, mp4lib.fields.FIELD_INT32, this.matrix);\n    this._writeArrayData(data, mp4lib.fields.FIELD_BIT32, this.pre_defined);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.next_track_ID);\n\n    return this.localPos;\n};\n\nmp4lib.boxes.MovieHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.version == 1) {\n        this.creation_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        this.modification_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        this.timescale = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.duration = this._readData(data, mp4lib.fields.FIELD_UINT64);\n    } else {\n        this.creation_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.modification_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.timescale = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n\n    this.rate = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.volume = this._readData(data, mp4lib.fields.FIELD_INT16);\n    this.reserved = this._readData(data, mp4lib.fields.FIELD_INT16);\n    this.reserved_2 = this._readArrayFieldData(data, mp4lib.fields.FIELD_INT32, 2);\n    this.matrix = this._readArrayFieldData(data, mp4lib.fields.FIELD_INT32, 9);\n    this.pre_defined = this._readArrayFieldData(data, mp4lib.fields.FIELD_BIT32, 6);\n    this.next_track_ID = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n    return this.localPos;\n};\n\n// --------------------------- mdat ----------------------------------\nmp4lib.boxes.MediaDataBox = function(size) {\n    mp4lib.boxes.Box.call(this, 'mdat', size);\n};\n\nmp4lib.boxes.MediaDataBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.MediaDataBox.prototype.constructor = mp4lib.boxes.MediaDataBox;\n\nmp4lib.boxes.MediaDataBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    this.size += this.data.length;\n};\n\nmp4lib.boxes.MediaDataBox.prototype.read = function(data, pos, end) {\n    this.data = data.subarray(pos, end);\n\n    return end;\n};\n\nmp4lib.boxes.MediaDataBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n\n    this._writeBuffer(data, this.data, this.data.length);\n\n    return this.localPos;\n};\n\n// --------------------------- free ----------------------------------\nmp4lib.boxes.FreeSpaceBox = function(size) {\n    mp4lib.boxes.Box.call(this, 'free', size);\n};\n\nmp4lib.boxes.FreeSpaceBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.FreeSpaceBox.prototype.constructor = mp4lib.boxes.FreeSpaceBox;\n\nmp4lib.boxes.FreeSpaceBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    this.size += this.data.length;\n};\n\nmp4lib.boxes.FreeSpaceBox.prototype.read = function(data, pos, end) {\n    this.localPos = pos;\n    this.localEnd = end;\n    this.data = data.subarray(this.localPos, this.localEnd);\n    return this.localEnd;\n};\n\nmp4lib.boxes.FreeSpaceBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n\n    this._writeBuffer(data, this.data, this.data.length);\n\n    return this.localPos;\n};\n\n// --------------------------- sidx ----------------------------------\nmp4lib.boxes.SegmentIndexBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'sidx', size);\n};\n\nmp4lib.boxes.SegmentIndexBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SegmentIndexBox.prototype.constructor = mp4lib.boxes.SegmentIndexBox;\n\nmp4lib.boxes.SegmentIndexBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * 2; /* reference_ID and timescale size*/\n    if (this.version === 1) {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength() * 2; /* earliest_presentation_time and first_offset size*/\n    } else {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength() * 2; /* earliest_presentation_time and first_offset size*/\n    }\n    this.size += mp4lib.fields.FIELD_UINT16.getLength(); /* reserved size*/\n    this.size += mp4lib.fields.FIELD_UINT16.getLength(); /* reference_count size*/\n    this.size += (mp4lib.fields.FIELD_UINT64.getLength() /* reference_info size*/ + mp4lib.fields.FIELD_UINT32.getLength() /* SAP size*/ ) * this.reference_count;\n};\n\n\nmp4lib.boxes.SegmentIndexBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    var i = 0,\n        struct = {};\n\n    this.reference_ID = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.timescale = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n    if (this.version === 1) {\n        this.earliest_presentation_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        this.first_offset = this._readData(data, mp4lib.fields.FIELD_UINT64);\n    } else {\n        this.earliest_presentation_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.first_offset = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    this.reserved = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.reference_count = this._readData(data, mp4lib.fields.FIELD_UINT16);\n\n    this.references = [];\n\n    for (i = 0; i < this.reference_count; i++) {\n        struct = {};\n\n        struct.reference_info = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        struct.SAP = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n        this.references.push(struct);\n    }\n\n    return this.localPos;\n};\n\nmp4lib.boxes.SegmentIndexBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.reference_ID);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.timescale);\n\n    if (this.version === 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.earliest_presentation_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.first_offset);\n    } else {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.earliest_presentation_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.first_offset);\n    }\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.reserved);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.reference_count);\n\n    for (i = 0; i < this.reference_count; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.references[i].reference_info);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.references[i].SAP);\n    }\n    return this.localPos;\n};\n\n// --------------------------- tkhd ----------------------------------\nmp4lib.boxes.TrackHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'tkhd', size);\n};\n\nmp4lib.boxes.TrackHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TrackHeaderBox.prototype.constructor = mp4lib.boxes.TrackHeaderBox;\n\nmp4lib.boxes.TrackHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_INT16.getLength() * 4 + mp4lib.fields.FIELD_INT32.getLength() * 2 + mp4lib.fields.FIELD_UINT32.getLength() * 2 + mp4lib.fields.FIELD_INT32.getLength() * 9;\n    if (this.version == 1) {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength() * 3 + mp4lib.fields.FIELD_UINT32.getLength() * 2;\n    } else {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength() * 5;\n    }\n};\n\nmp4lib.boxes.TrackHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.version === 1) {\n        this.creation_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        this.modification_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        this.track_id = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.reserved = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.duration = this._readData(data, mp4lib.fields.FIELD_UINT64);\n    } else {\n        this.creation_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.modification_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.track_id = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.reserved = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n\n    this.reserved_2 = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT32, 2);\n    this.layer = this._readData(data, mp4lib.fields.FIELD_INT16);\n    this.alternate_group = this._readData(data, mp4lib.fields.FIELD_INT16);\n    this.volume = this._readData(data, mp4lib.fields.FIELD_INT16);\n    this.reserved_3 = this._readData(data, mp4lib.fields.FIELD_INT16);\n    this.matrix = this._readArrayFieldData(data, mp4lib.fields.FIELD_INT32, 9);\n    this.width = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.height = this._readData(data, mp4lib.fields.FIELD_INT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.TrackHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    if (this.version === 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.creation_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.modification_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.track_id);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.reserved);\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.duration);\n    } else {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.creation_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.modification_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.track_id);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.reserved);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.duration);\n    }\n\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT32, this.reserved_2);\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.layer);\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.alternate_group);\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.volume);\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.reserved_3);\n    this._writeArrayData(data, mp4lib.fields.FIELD_INT32, this.matrix);\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.width);\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.height);\n    return this.localPos;\n};\n\n// --------------------------- mdhd ----------------------------------\nmp4lib.boxes.MediaHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'mdhd', size);\n};\n\nmp4lib.boxes.MediaHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.MediaHeaderBox.prototype.constructor = mp4lib.boxes.MediaHeaderBox;\n\nmp4lib.boxes.MediaHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT16.getLength() * 2;\n    if (this.version == 1) {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength() * 3 + mp4lib.fields.FIELD_UINT32.getLength();\n    } else {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength() * 4;\n    }\n};\n\nmp4lib.boxes.MediaHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.version === 1) {\n        this.creation_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        this.modification_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        this.timescale = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.duration = this._readData(data, mp4lib.fields.FIELD_UINT64);\n    } else {\n        this.creation_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.modification_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.timescale = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n\n    this.language = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.pre_defined = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    return this.localPos;\n};\n\nmp4lib.boxes.MediaHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    if (this.version === 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.creation_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.modification_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.timescale);\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.duration);\n    } else {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.creation_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.modification_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.timescale);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.duration);\n    }\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.language);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.pre_defined);\n    return this.localPos;\n};\n\n// --------------------------- mehd ----------------------------------\nmp4lib.boxes.MovieExtendsHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'mehd', size);\n};\n\nmp4lib.boxes.MovieExtendsHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.MovieExtendsHeaderBox.prototype.constructor = mp4lib.boxes.MovieExtendsHeaderBox;\n\nmp4lib.boxes.MovieExtendsHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    if (this.version == 1) {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength();\n    } else {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    }\n};\n\nmp4lib.boxes.MovieExtendsHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.version === 1) {\n        this.fragment_duration = this._readData(data, mp4lib.fields.FIELD_UINT64);\n    } else {\n        this.fragment_duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.MovieExtendsHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    if (this.version === 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.fragment_duration);\n    } else {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.fragment_duration);\n    }\n    return this.localPos;\n};\n\n// --------------------------- hdlr --------------------------------\nmp4lib.boxes.HandlerBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'hdlr', size);\n};\n\nmp4lib.boxes.HandlerBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.HandlerBox.prototype.constructor = mp4lib.boxes.HandlerBox;\n\n//add NAN\nmp4lib.boxes.HandlerBox.prototype.HANDLERTYPEVIDEO = \"vide\";\nmp4lib.boxes.HandlerBox.prototype.HANDLERTYPEAUDIO = \"soun\";\nmp4lib.boxes.HandlerBox.prototype.HANDLERTYPETEXT = \"meta\";\nmp4lib.boxes.HandlerBox.prototype.HANDLERVIDEONAME = \"Video Track\";\nmp4lib.boxes.HandlerBox.prototype.HANDLERAUDIONAME = \"Audio Track\";\nmp4lib.boxes.HandlerBox.prototype.HANDLERTEXTNAME = \"Text Track\";\n\nmp4lib.boxes.HandlerBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * 2 + mp4lib.fields.FIELD_UINT32.getLength() * 3 +\n        mp4lib.fields.FIELD_STRING.getLength(this.name);\n};\n\nmp4lib.boxes.HandlerBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.pre_defined = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.handler_type = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.reserved = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT32, 3);\n    this.name = this._readData(data, mp4lib.fields.FIELD_STRING);\n    return this.localPos;\n};\n\nmp4lib.boxes.HandlerBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.pre_defined);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.handler_type);\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT32, this.reserved);\n    this._writeData(data, mp4lib.fields.FIELD_STRING, this.name);\n    return this.localPos;\n};\n\n// --------------------------- stts ----------------------------------\nmp4lib.boxes.TimeToSampleBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'stts', size);\n};\n\nmp4lib.boxes.TimeToSampleBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TimeToSampleBox.prototype.constructor = mp4lib.boxes.TimeToSampleBox;\n\nmp4lib.boxes.TimeToSampleBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    this.size += this.entry_count * (mp4lib.fields.FIELD_UINT32.getLength() * 2);\n};\n\nmp4lib.boxes.TimeToSampleBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        struct = {};\n\n    this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n    this.entry = [];\n\n    for (i = 0; i < this.entry_count; i++) {\n        struct = {};\n\n        struct.sample_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        struct.sample_delta = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n        this.entry.push(struct);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.TimeToSampleBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n\n    for (i = 0; i < this.entry_count; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].sample_count);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].sample_delta);\n    }\n    return this.localPos;\n};\n\n// --------------------------- stsc ----------------------------------\nmp4lib.boxes.SampleToChunkBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'stsc', size);\n};\n\nmp4lib.boxes.SampleToChunkBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SampleToChunkBox.prototype.constructor = mp4lib.boxes.SampleToChunkBox;\n\nmp4lib.boxes.SampleToChunkBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    this.size += this.entry_count * (mp4lib.fields.FIELD_UINT32.getLength() * 3);\n};\n\nmp4lib.boxes.SampleToChunkBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        struct = {};\n\n    this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n    this.entry = [];\n\n    for (i = 0; i < this.entry_count; i++) {\n        struct = {};\n\n        struct.first_chunk = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        struct.samples_per_chunk = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        struct.samples_description_index = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n        this.entry.push(struct);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.SampleToChunkBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n    for (i = 0; i < this.entry_count; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].first_chunk);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].samples_per_chunk);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].samples_description_index);\n    }\n    return this.localPos;\n};\n\n// --------------------------- stco ----------------------------------\nmp4lib.boxes.ChunkOffsetBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'stco', size);\n};\n\nmp4lib.boxes.ChunkOffsetBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.ChunkOffsetBox.prototype.constructor = mp4lib.boxes.ChunkOffsetBox;\n\nmp4lib.boxes.ChunkOffsetBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() + this.entry_count * mp4lib.fields.FIELD_UINT32.getLength();\n};\n\nmp4lib.boxes.ChunkOffsetBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.chunk_offset = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n    return this.localPos;\n};\n\nmp4lib.boxes.ChunkOffsetBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n\n    for (i = 0; i < this.entry_count; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.chunk_offset[i]);\n    }\n    return this.localPos;\n};\n\n// --------------------------- trex ----------------------------------\nmp4lib.boxes.TrackExtendsBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'trex', size);\n};\n\nmp4lib.boxes.TrackExtendsBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TrackExtendsBox.prototype.constructor = mp4lib.boxes.TrackExtendsBox;\n\nmp4lib.boxes.TrackExtendsBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * 5;\n};\n\nmp4lib.boxes.TrackExtendsBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.track_ID = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.default_sample_description_index = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.default_sample_duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.default_sample_size = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.default_sample_flags = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.TrackExtendsBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.track_ID);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.default_sample_description_index);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.default_sample_duration);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.default_sample_size);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.default_sample_flags);\n    return this.localPos;\n};\n\n// --------------------------- vmhd ----------------------------------\nmp4lib.boxes.VideoMediaHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'vmhd', size);\n};\n\nmp4lib.boxes.VideoMediaHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.VideoMediaHeaderBox.prototype.constructor = mp4lib.boxes.VideoMediaHeaderBox;\n\nmp4lib.boxes.VideoMediaHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_INT16.getLength() + mp4lib.fields.FIELD_UINT16.getLength() * 3;\n};\n\nmp4lib.boxes.VideoMediaHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.graphicsmode = this._readData(data, mp4lib.fields.FIELD_INT16);\n    this.opcolor = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT16, 3);\n    return this.localPos;\n};\n\nmp4lib.boxes.VideoMediaHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.graphicsmode);\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT16, this.opcolor);\n    return this.localPos;\n};\n\n// --------------------------- smhd ----------------------------------\nmp4lib.boxes.SoundMediaHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'smhd', size);\n};\n\nmp4lib.boxes.SoundMediaHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SoundMediaHeaderBox.prototype.constructor = mp4lib.boxes.SoundMediaHeaderBox;\n\nmp4lib.boxes.SoundMediaHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_INT16.getLength() + mp4lib.fields.FIELD_UINT16.getLength();\n};\n\nmp4lib.boxes.SoundMediaHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.balance = this._readData(data, mp4lib.fields.FIELD_INT16);\n    this.reserved = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    return this.localPos;\n};\n\nmp4lib.boxes.SoundMediaHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.balance);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.reserved);\n    return this.localPos;\n};\n\n// --------------------------- dref ----------------------------------\nmp4lib.boxes.DataReferenceBox = function(size) {\n    mp4lib.boxes.ContainerFullBox.call(this, 'dref', size);\n};\n\nmp4lib.boxes.DataReferenceBox.prototype = Object.create(mp4lib.boxes.ContainerFullBox.prototype);\nmp4lib.boxes.DataReferenceBox.prototype.constructor = mp4lib.boxes.DataReferenceBox;\n\nmp4lib.boxes.DataReferenceBox.prototype.computeLength = function() {\n    mp4lib.boxes.ContainerFullBox.prototype.computeLength.call(this, true);\n};\n\nmp4lib.boxes.DataReferenceBox.prototype.read = function(data, pos, end) {\n    return mp4lib.boxes.ContainerFullBox.prototype.read.call(this, data, pos, end, true);\n};\n\nmp4lib.boxes.DataReferenceBox.prototype.write = function(data, pos) {\n    if (!this.entry_count) {\n        //if entry_count has not been set, set it to boxes array length\n        this.entry_count = this.boxes.length;\n    }\n    return mp4lib.boxes.ContainerFullBox.prototype.write.call(this, data, pos, true);\n};\n\n// --------------------------- url  ----------------------------------\nmp4lib.boxes.DataEntryUrlBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'url ', size);\n};\n\nmp4lib.boxes.DataEntryUrlBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.DataEntryUrlBox.prototype.constructor = mp4lib.boxes.DataEntryUrlBox;\n\nmp4lib.boxes.DataEntryUrlBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    //NAN : test on location value, not definition, probleme in IE\n    if (this.location !== undefined /*&& this.location !==\"\"*/ ) {\n        //this.flags = this.flags | 1;\n        this.size += mp4lib.fields.FIELD_STRING.getLength(this.location);\n    }\n};\n\nmp4lib.boxes.DataEntryUrlBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.flags & '0x000001' === 0) {\n        this.location = this._readData(data, mp4lib.fields.FIELD_STRING);\n    }\n\n    return this.localPos;\n};\n\nmp4lib.boxes.DataEntryUrlBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    if (this.location !== undefined /* && this.location !== \"\"*/ ) {\n        this._writeData(data, mp4lib.fields.FIELD_STRING, this.location);\n    }\n    return this.localPos;\n};\n\n// --------------------------- urn  ----------------------------------\nmp4lib.boxes.DataEntryUrnBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'urn ', size);\n};\n\nmp4lib.boxes.DataEntryUrnBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.DataEntryUrnBox.prototype.constructor = mp4lib.boxes.DataEntryUrnBox;\n\nmp4lib.boxes.DataEntryUrnBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    if (this.flags & '0x000001' === 0) {\n        this.size += mp4lib.fields.FIELD_STRING.getLength(this.name) + mp4lib.fields.FIELD_STRING.getLength(this.location);\n    }\n};\n\nmp4lib.boxes.DataEntryUrnBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.flags & '0x000001' === 0) {\n        this.name = this._readData(data, mp4lib.fields.FIELD_STRING);\n        this.location = this._readData(data, mp4lib.fields.FIELD_STRING);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.DataEntryUrnBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    if (this.flags & '0x000001' === 0) {\n        this._writeData(data, mp4lib.fields.FIELD_STRING, this.name);\n        this._writeData(data, mp4lib.fields.FIELD_STRING, this.location);\n    }\n    return this.localPos;\n};\n\n// --------------------------- mfhd ----------------------------------\nmp4lib.boxes.MovieFragmentHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'mfhd', size);\n};\n\nmp4lib.boxes.MovieFragmentHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.MovieFragmentHeaderBox.prototype.constructor = mp4lib.boxes.MovieFragmentHeaderBox;\n\nmp4lib.boxes.MovieFragmentHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength();\n};\n\nmp4lib.boxes.MovieFragmentHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    this.sequence_number = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.MovieFragmentHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.sequence_number);\n    return this.localPos;\n};\n\n// --------------------------- tfhd ----------------------------------\nmp4lib.boxes.TrackFragmentHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'tfhd', size);\n};\n\nmp4lib.boxes.TrackFragmentHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TrackFragmentHeaderBox.prototype.constructor = mp4lib.boxes.TrackFragmentHeaderBox;\n\nmp4lib.boxes.TrackFragmentHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    //even if, for example base_data_offset is defined, test the flags value\n    //to know if base_data_offset size should be added to global size.\n    if ((this.flags & 0x000001) !== 0 && this.base_data_offset !== undefined) {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength();\n    }\n    if ((this.flags & 0x000002) !== 0 && this.sample_description_index !== undefined) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    }\n    if ((this.flags & 0x000008) !== 0 && this.default_sample_duration !== undefined) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    }\n    if ((this.flags & 0x000010) !== 0 && this.default_sample_size !== undefined) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    }\n    if ((this.flags & 0x000020) !== 0 && this.default_sample_flags !== undefined) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    }\n};\n\nmp4lib.boxes.TrackFragmentHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.track_ID = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    if ((this.flags & 0x000001) !== 0) {\n        this.base_data_offset = this._readData(data, mp4lib.fields.FIELD_UINT64);\n    }\n    if ((this.flags & 0x000002) !== 0) {\n        this.sample_description_index = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    if ((this.flags & 0x000008) !== 0) {\n        this.default_sample_duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    if ((this.flags & 0x000010) !== 0) {\n        this.default_sample_size = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    if ((this.flags & 0x000020) !== 0) {\n        this.default_sample_flags = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.TrackFragmentHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.track_ID);\n\n    if ((this.flags & 0x000001) !== 0) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.base_data_offset);\n    }\n    if ((this.flags & 0x000002) !== 0) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.sample_description_index);\n    }\n    if ((this.flags & 0x000008) !== 0) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.default_sample_duration);\n    }\n    if ((this.flags & 0x000010) !== 0) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.default_sample_size);\n    }\n    if ((this.flags & 0x000020) !== 0) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.default_sample_flags);\n    }\n    return this.localPos;\n};\n\n// --------------------------- tfdt ----------------------------------\nmp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'tfdt', size);\n};\n\nmp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox.prototype.constructor = mp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox;\n\nmp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    if (this.version === 1) {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength();\n    } else {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    }\n};\n\nmp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.version === 1) {\n        this.baseMediaDecodeTime = this._readData(data, mp4lib.fields.FIELD_UINT64);\n    } else {\n        this.baseMediaDecodeTime = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.TrackFragmentBaseMediaDecodeTimeBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    if (this.version === 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.baseMediaDecodeTime);\n    } else {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.baseMediaDecodeTime);\n    }\n    return this.localPos;\n};\n\n// --------------------------- trun ----------------------------------\nmp4lib.boxes.TrackFragmentRunBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'trun', size);\n};\n\nmp4lib.boxes.TrackFragmentRunBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TrackFragmentRunBox.prototype.constructor = mp4lib.boxes.TrackFragmentRunBox;\n\nmp4lib.boxes.TrackFragmentRunBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    var i = 0;\n    this.size += mp4lib.fields.FIELD_UINT32.getLength(); //sample_count size\n    if ((this.flags & 0x000001) !== 0 && this.data_offset !== undefined) {\n        this.size += mp4lib.fields.FIELD_INT32.getLength();\n    }\n    if ((this.flags & 0x000004) !== 0 && this.first_sample_flags !== undefined) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    }\n\n    for (i = 0; i < this.sample_count; i++) {\n        if ((this.flags & 0x000100) !== 0 && this.samples_table[i].sample_duration !== undefined) {\n            this.size += mp4lib.fields.FIELD_UINT32.getLength();\n        }\n        if ((this.flags & 0x000200) !== 0 && this.samples_table[i].sample_size !== undefined) {\n            this.size += mp4lib.fields.FIELD_UINT32.getLength();\n        }\n        if ((this.flags & 0x000400) !== 0 && this.samples_table[i].sample_flags !== undefined) {\n            this.size += mp4lib.fields.FIELD_UINT32.getLength();\n        }\n\n        if (this.version === 1) {\n            if ((this.flags & 0x000800) !== 0 && this.samples_table[i].sample_composition_time_offset !== undefined) {\n                this.size += mp4lib.fields.FIELD_INT32.getLength();\n            }\n        } else {\n            if ((this.flags & 0x000800) !== 0 && this.samples_table[i].sample_composition_time_offset !== undefined) {\n                this.size += mp4lib.fields.FIELD_UINT32.getLength();\n            }\n        }\n    }\n};\n\nmp4lib.boxes.TrackFragmentRunBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        struct = {};\n\n    this.sample_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n    if ((this.flags & 0x000001) !== 0) {\n        this.data_offset = this._readData(data, mp4lib.fields.FIELD_INT32);\n    }\n    if ((this.flags & 0x000004) !== 0) {\n        this.first_sample_flags = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n\n    this.samples_table = [];\n\n    for (i = 0; i < this.sample_count; i++) {\n        struct = {};\n        if ((this.flags & 0x000100) !== 0) {\n            struct.sample_duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        }\n        if ((this.flags & 0x000200) !== 0) {\n            struct.sample_size = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        }\n        if ((this.flags & 0x000400) !== 0) {\n            struct.sample_flags = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        }\n\n        if (this.version === 1) {\n            if ((this.flags & 0x000800) !== 0) {\n                struct.sample_composition_time_offset = this._readData(data, mp4lib.fields.FIELD_INT32);\n            }\n        } else {\n            if ((this.flags & 0x000800) !== 0) {\n                struct.sample_composition_time_offset = this._readData(data, mp4lib.fields.FIELD_UINT32);\n            }\n        }\n        this.samples_table.push(struct);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.TrackFragmentRunBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.sample_count);\n\n    if ((this.flags & 0x000001) !== 0) {\n        this._writeData(data, mp4lib.fields.FIELD_INT32, this.data_offset);\n    }\n    if ((this.flags & 0x000004) !== 0) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.first_sample_flags);\n    }\n\n    for (i = 0; i < this.sample_count; i++) {\n\n        if ((this.flags & 0x000100) !== 0) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.samples_table[i].sample_duration);\n        }\n        if ((this.flags & 0x000200) !== 0) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.samples_table[i].sample_size);\n        }\n        if ((this.flags & 0x000400) !== 0) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.samples_table[i].sample_flags);\n        }\n\n        if (this.version === 1) {\n            if ((this.flags & 0x000800) !== 0) {\n                this._writeData(data, mp4lib.fields.FIELD_INT32, this.samples_table[i].sample_composition_time_offset);\n            }\n        } else {\n            if ((this.flags & 0x000800) !== 0) {\n                this._writeData(data, mp4lib.fields.FIELD_UINT32, this.samples_table[i].sample_composition_time_offset);\n            }\n        }\n    }\n    return this.localPos;\n};\n\n// --------------------------- stsd ----------------------------------\nmp4lib.boxes.SampleDescriptionBox = function(size) {\n    mp4lib.boxes.ContainerFullBox.call(this, 'stsd', size);\n};\n\nmp4lib.boxes.SampleDescriptionBox.prototype = Object.create(mp4lib.boxes.ContainerFullBox.prototype);\nmp4lib.boxes.SampleDescriptionBox.prototype.constructor = mp4lib.boxes.SampleDescriptionBox;\n\nmp4lib.boxes.SampleDescriptionBox.prototype.computeLength = function() {\n    mp4lib.boxes.ContainerFullBox.prototype.computeLength.call(this, true);\n};\n\nmp4lib.boxes.SampleDescriptionBox.prototype.read = function(data, pos, end) {\n    return mp4lib.boxes.ContainerFullBox.prototype.read.call(this, data, pos, end, true);\n};\n\nmp4lib.boxes.SampleDescriptionBox.prototype.write = function(data, pos) {\n    this.entry_count = this.boxes.length;\n    return mp4lib.boxes.ContainerFullBox.prototype.write.call(this, data, pos, true);\n};\n\n// --------------------------- sdtp ----------------------------------\nmp4lib.boxes.SampleDependencyTableBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'sdtp', size);\n};\n\nmp4lib.boxes.SampleDependencyTableBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SampleDependencyTableBox.prototype.constructor = mp4lib.boxes.SampleDependencyTableBox;\n\nmp4lib.boxes.SampleDependencyTableBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT8.getLength() * this.sample_dependency_table.length;\n};\n\nmp4lib.boxes.SampleDependencyTableBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    this.sample_dependency_table = this._readArrayData(data, mp4lib.fields.FIELD_UINT8);\n    return this.localPos;\n};\n\nmp4lib.boxes.SampleDependencyTableBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT8, this.sample_dependency_table);\n    return this.localPos;\n};\n\n// --------------------------- abstract SampleEntry ----------------------------------\nmp4lib.boxes.SampleEntryBox = function(boxType, size) {\n    mp4lib.boxes.Box.call(this, boxType, size);\n};\n\nmp4lib.boxes.SampleEntryBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.SampleEntryBox.prototype.constructor = mp4lib.boxes.SampleEntryBox;\n\nmp4lib.boxes.SampleEntryBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT16.getLength() + mp4lib.fields.FIELD_UINT8.getLength() * 6;\n};\n\nmp4lib.boxes.SampleEntryBox.prototype.read = function(data, pos, end) {\n    this.localPos = pos;\n    this.localEnd = end;\n\n    this.reserved = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT8, 6);\n    this.data_reference_index = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    return this.localPos;\n};\n\nmp4lib.boxes.SampleEntryBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT8, this.reserved);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.data_reference_index);\n    return this.localPos;\n};\n\n// --------------------------- abstract VisualSampleEntry ----------------------------------\nmp4lib.boxes.VisualSampleEntryBox = function(boxType, size) {\n    mp4lib.boxes.SampleEntryBox.call(this, boxType, size);\n};\n\nmp4lib.boxes.VisualSampleEntryBox.prototype = Object.create(mp4lib.boxes.SampleEntryBox.prototype);\nmp4lib.boxes.VisualSampleEntryBox.prototype.constructor = mp4lib.boxes.VisualSampleEntryBox;\n\nmp4lib.boxes.VisualSampleEntryBox.prototype.computeLength = function() {\n    mp4lib.boxes.SampleEntryBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT16.getLength() * 7 + mp4lib.fields.FIELD_UINT32.getLength() * 3;\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * 3;\n    this.size += 32; //compressorname size\n};\n\nmp4lib.boxes.VisualSampleEntryBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.SampleEntryBox.prototype.read.call(this, data, pos, end);\n    this.pre_defined = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.reserved_2 = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    // there is already field called reserved from SampleEntry, so we need to call it reserved_2\n    this.pre_defined_2 = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT32, 3);\n    this.width = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.height = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.horizresolution = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.vertresolution = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.reserved_3 = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.frame_count = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.compressorname = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT8, 32);\n    this.depth = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.pre_defined_3 = this._readData(data, mp4lib.fields.FIELD_INT16);\n    return this.localPos;\n};\n\nmp4lib.boxes.VisualSampleEntryBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.SampleEntryBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.pre_defined);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.reserved_2);\n    // there is already field called reserved from SampleEntry, so we need to call it reserved_2\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT32, this.pre_defined_2);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.width);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.height);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.horizresolution);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.vertresolution);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.reserved_3);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.frame_count);\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT8, this.compressorname);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.depth);\n    this._writeData(data, mp4lib.fields.FIELD_INT16, this.pre_defined_3);\n    return this.localPos;\n};\n\n// --------------------------- abstract VisualSampleEntryContainer ----------------------------------\nmp4lib.boxes.VisualSampleEntryContainerBox = function(boxType, size) {\n    mp4lib.boxes.VisualSampleEntryBox.call(this, boxType, size);\n    this.boxes = [];\n};\n\nmp4lib.boxes.VisualSampleEntryContainerBox.prototype = Object.create(mp4lib.boxes.VisualSampleEntryBox.prototype);\nmp4lib.boxes.VisualSampleEntryContainerBox.prototype.constructor = mp4lib.boxes.VisualSampleEntryContainerBox;\n\nmp4lib.boxes.VisualSampleEntryContainerBox.prototype.computeLength = function() {\n    mp4lib.boxes.VisualSampleEntryBox.prototype.computeLength.call(this);\n    var i = 0;\n    for (i = 0; i < this.boxes.length; i++) {\n        this.boxes[i].computeLength();\n        this.size += this.boxes[i].size;\n    }\n};\n\nmp4lib.boxes.VisualSampleEntryContainerBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.VisualSampleEntryBox.prototype.read.call(this, data, pos, end);\n\n    var size = 0,\n        uuidFieldPos = 0,\n        uuid = null,\n        boxtype,\n        box;\n\n    while (this.localPos < this.localEnd) {\n        // Read box size\n        size = mp4lib.fields.FIELD_UINT32.read(data, this.localPos);\n\n        // Read boxtype\n        boxtype = mp4lib.fields.readString(data, this.localPos + 4, 4);\n\n        // Extented type?\n        if (boxtype == \"uuid\") {\n            uuidFieldPos = (size == 1) ? 16 : 8;\n            uuid = new mp4lib.fields.ArrayField(mp4lib.fields.FIELD_INT8, 16).read(data, this.localPos + uuidFieldPos, this.localPos + uuidFieldPos + 16);\n            uuid = JSON.stringify(uuid);\n        }\n\n        box = mp4lib.createBox(boxtype, size, uuid);\n        if (boxtype === \"uuid\") {\n            this.localPos = box.read(data, this.localPos + mp4lib.fields.FIELD_INT8.getLength() * 16 + 8, this.localPos + size);\n        } else {\n            this.localPos = box.read(data, this.localPos + 8, this.localPos + size);\n        }\n\n        // in debug mode, sourcebuffer is copied to each box,\n        // so any invalid deserializations may be found by comparing\n        // source buffer with serialized box\n        if (mp4lib.debug) {\n            box.__sourceBuffer = data.subarray(this.localPos - box.size, this.localPos);\n        }\n\n        this.boxes.push(box);\n\n        if (box.size <= 0 || box.size === null) {\n            throw new mp4lib.ParseException('Problem on size of box ' + box.boxtype +\n                ', parsing stopped to avoid infinite loop');\n        }\n\n        if (!box.boxtype) {\n            throw new mp4lib.ParseException('Problem on unknown box, parsing stopped to avoid infinite loop');\n        }\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.VisualSampleEntryContainerBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.VisualSampleEntryBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    for (i = 0; i < this.boxes.length; i++) {\n        this.localPos = this.boxes[i].write(data, this.localPos);\n    }\n    return this.localPos;\n};\n\n// --------------------------- avc1 ----------------------------------\nmp4lib.boxes.AVC1VisualSampleEntryBox = function(size) {\n    mp4lib.boxes.VisualSampleEntryContainerBox.call(this, 'avc1', size);\n};\n\nmp4lib.boxes.AVC1VisualSampleEntryBox.prototype = Object.create(mp4lib.boxes.VisualSampleEntryContainerBox.prototype);\nmp4lib.boxes.AVC1VisualSampleEntryBox.prototype.constructor = mp4lib.boxes.AVC1VisualSampleEntryBox;\n\n//-------------------------- encv ------------------------------------\nmp4lib.boxes.EncryptedVideoBox = function(size) {\n    mp4lib.boxes.VisualSampleEntryContainerBox.call(this, 'encv', size);\n};\n\nmp4lib.boxes.EncryptedVideoBox.prototype = Object.create(mp4lib.boxes.VisualSampleEntryContainerBox.prototype);\nmp4lib.boxes.EncryptedVideoBox.prototype.constructor = mp4lib.boxes.EncryptedVideoBox;\n\n// --------------------------- avcc ----------------------------------\nmp4lib.boxes.AVCConfigurationBox = function(size) {\n    mp4lib.boxes.Box.call(this, 'avcC', size);\n};\n\nmp4lib.boxes.AVCConfigurationBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.AVCConfigurationBox.prototype.constructor = mp4lib.boxes.AVCConfigurationBox;\n\nmp4lib.boxes.AVCConfigurationBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT8.getLength() * 4 + mp4lib.fields.FIELD_UINT8.getLength() * 3;\n    this.size += this._getNALLength(this.numOfSequenceParameterSets, this.SPS_NAL);\n    this.size += this._getNALLength(this.numOfPictureParameterSets, this.PPS_NAL);\n};\n\nmp4lib.boxes.AVCConfigurationBox.prototype._getNALLength = function(nbElements, nalArray) {\n    var size_NAL = 0,\n        i = 0;\n\n    for (i = 0; i < nbElements; i++) {\n        size_NAL += mp4lib.fields.FIELD_UINT16.getLength() + nalArray[i].NAL_length;\n    }\n\n    return size_NAL;\n};\n\nmp4lib.boxes.AVCConfigurationBox.prototype.read = function(data, pos, end) {\n    this.localPos = pos;\n    this.localEnd = end;\n    this.configurationVersion = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.AVCProfileIndication = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.profile_compatibility = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.AVCLevelIndication = this._readData(data, mp4lib.fields.FIELD_UINT8);\n\n    this.temp = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    // 6 bits for reserved =63 and two bits for NAL length = 2-bit length byte size type\n    this.lengthSizeMinusOne = this.temp & 3;\n    this.numOfSequenceParameterSets_tmp = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.numOfSequenceParameterSets = this.numOfSequenceParameterSets_tmp & 31;\n\n    this.SPS_NAL = this._readNAL(data, this.numOfSequenceParameterSets);\n\n    this.numOfPictureParameterSets = this._readData(data, mp4lib.fields.FIELD_UINT8);\n\n    this.PPS_NAL = this._readNAL(data, this.numOfPictureParameterSets);\n    return this.localPos;\n};\n\nmp4lib.boxes.AVCConfigurationBox.prototype._readNAL = function(data, nbElements) {\n    var nalArray = [],\n        i = 0,\n        struct = {};\n\n    for (i = 0; i < nbElements; i++) {\n        struct = {};\n\n        struct.NAL_length = this._readData(data, mp4lib.fields.FIELD_UINT16);\n        struct.NAL = data.subarray(this.localPos, this.localPos + struct.NAL_length);\n        this.localPos += struct.NAL_length;\n        nalArray.push(struct);\n    }\n    return nalArray;\n};\n\nmp4lib.boxes.AVCConfigurationBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.configurationVersion);\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.AVCProfileIndication);\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.profile_compatibility);\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.AVCLevelIndication);\n\n    this.temp = this.lengthSizeMinusOne | 252;\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.temp);\n    this.numOfSequenceParameterSets = this.SPS_NAL.length;\n    this.numOfSequenceParameterSets_tmp = this.numOfSequenceParameterSets | 224;\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.numOfSequenceParameterSets_tmp);\n    this._writeNAL(data, this.numOfSequenceParameterSets, this.SPS_NAL);\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.numOfPictureParameterSets);\n    this._writeNAL(data, this.numOfPictureParameterSets, this.PPS_NAL);\n    return this.localPos;\n};\n\nmp4lib.boxes.AVCConfigurationBox.prototype._writeNAL = function(data, nbElements, nalArray) {\n    var i = 0;\n\n    for (i = 0; i < nbElements; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT16, nalArray[i].NAL_length);\n        this._writeBuffer(data, nalArray[i].NAL, nalArray[i].NAL_length);\n    }\n};\n\n// --------------------------- pasp ----------------------------------\nmp4lib.boxes.PixelAspectRatioBox = function(size) {\n    mp4lib.boxes.Box.call(this, 'pasp', size);\n};\n\nmp4lib.boxes.PixelAspectRatioBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.PixelAspectRatioBox.prototype.constructor = mp4lib.boxes.PixelAspectRatioBox;\n\nmp4lib.boxes.PixelAspectRatioBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_INT32.getLength() * 2;\n};\n\nmp4lib.boxes.PixelAspectRatioBox.prototype.read = function(data, pos, end) {\n    this.localPos = pos;\n    this.localEnd = end;\n\n    this.hSpacing = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.vSpacing = this._readData(data, mp4lib.fields.FIELD_INT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.PixelAspectRatioBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.hSpacing);\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.vSpacing);\n    return this.localPos;\n};\n\n// --------------------------- abstract VisualSampleEntry ----------------------------------\nmp4lib.boxes.AudioSampleEntryBox = function(boxType, size) {\n    mp4lib.boxes.SampleEntryBox.call(this, boxType, size);\n};\n\nmp4lib.boxes.AudioSampleEntryBox.prototype = Object.create(mp4lib.boxes.SampleEntryBox.prototype);\nmp4lib.boxes.AudioSampleEntryBox.prototype.constructor = mp4lib.boxes.AudioSampleEntryBox;\n\nmp4lib.boxes.AudioSampleEntryBox.prototype.computeLength = function() {\n    mp4lib.boxes.SampleEntryBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT16.getLength() * 4 + mp4lib.fields.FIELD_UINT32.getLength() * 3;\n};\n\nmp4lib.boxes.AudioSampleEntryBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.SampleEntryBox.prototype.read.call(this, data, pos, end);\n\n    this.reserved_2 = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT32, 2);\n    this.channelcount = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.samplesize = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.pre_defined = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.reserved_3 = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.samplerate = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.AudioSampleEntryBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.SampleEntryBox.prototype.write.call(this, data, pos);\n\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT32, this.reserved_2);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.channelcount);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.samplesize);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.pre_defined);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.reserved_3);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.samplerate);\n    return this.localPos;\n};\n\n// --------------------------- abstract AudioSampleEntryContainer ----------------------------------\nmp4lib.boxes.AudioSampleEntryContainerBox = function(boxType, size) {\n    mp4lib.boxes.AudioSampleEntryBox.call(this, boxType, size);\n    this.boxes = [];\n};\n\nmp4lib.boxes.AudioSampleEntryContainerBox.prototype = Object.create(mp4lib.boxes.AudioSampleEntryBox.prototype);\nmp4lib.boxes.AudioSampleEntryContainerBox.prototype.constructor = mp4lib.boxes.AudioSampleEntryContainerBox;\n\nmp4lib.boxes.AudioSampleEntryContainerBox.prototype.computeLength = function() {\n    mp4lib.boxes.AudioSampleEntryBox.prototype.computeLength.call(this);\n    var i = 0;\n    for (i = 0; i < this.boxes.length; i++) {\n        this.boxes[i].computeLength();\n        this.size += this.boxes[i].size;\n    }\n};\n\nmp4lib.boxes.AudioSampleEntryContainerBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.AudioSampleEntryBox.prototype.read.call(this, data, pos, end);\n\n    var size = 0,\n        uuidFieldPos = 0,\n        uuid = null,\n        boxtype,\n        box;\n\n    while (this.localPos < this.localEnd) {\n        // Read box size\n        size = mp4lib.fields.FIELD_UINT32.read(data, this.localPos);\n\n        // Read boxtype\n        boxtype = mp4lib.fields.readString(data, this.localPos + 4, 4);\n\n        // Extented type?\n        if (boxtype == \"uuid\") {\n            uuidFieldPos = (size == 1) ? 16 : 8;\n            uuid = new mp4lib.fields.ArrayField(mp4lib.fields.FIELD_INT8, 16).read(data, this.localPos + uuidFieldPos, this.localPos + uuidFieldPos + 16);\n            uuid = JSON.stringify(uuid);\n        }\n\n        box = mp4lib.createBox(boxtype, size, uuid);\n        if (boxtype === \"uuid\") {\n            this.localPos = box.read(data, this.localPos + mp4lib.fields.FIELD_INT8.getLength() * 16 + 8, this.localPos + size);\n        } else {\n            this.localPos = box.read(data, this.localPos + 8, this.localPos + size);\n        }\n\n        // in debug mode, sourcebuffer is copied to each box,\n        // so any invalid deserializations may be found by comparing\n        // source buffer with serialized box\n        if (mp4lib.debug) {\n            box.__sourceBuffer = data.subarray(this.localPos - box.size, this.localPos);\n        }\n\n        this.boxes.push(box);\n\n        if (box.size <= 0 || box.size === null) {\n            throw new mp4lib.ParseException('Problem on size of box ' + box.boxtype +\n                ', parsing stopped to avoid infinite loop');\n        }\n\n        if (!box.boxtype) {\n            throw new mp4lib.ParseException('Problem on unknown box, parsing stopped to avoid infinite loop');\n        }\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.AudioSampleEntryContainerBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.AudioSampleEntryBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    for (i = 0; i < this.boxes.length; i++) {\n        this.localPos = this.boxes[i].write(data, this.localPos);\n    }\n    return this.localPos;\n};\n\n// --------------------------- mp4a ----------------------------------\nmp4lib.boxes.MP4AudioSampleEntryBox = function(size) {\n    mp4lib.boxes.AudioSampleEntryContainerBox.call(this, 'mp4a', size);\n};\n\nmp4lib.boxes.MP4AudioSampleEntryBox.prototype = Object.create(mp4lib.boxes.AudioSampleEntryContainerBox.prototype);\nmp4lib.boxes.MP4AudioSampleEntryBox.prototype.constructor = mp4lib.boxes.MP4AudioSampleEntryBox;\n\n//-------------------------- enca ------------------------------------\nmp4lib.boxes.EncryptedAudioBox = function(size) {\n    mp4lib.boxes.AudioSampleEntryContainerBox.call(this, 'enca', size);\n};\n\nmp4lib.boxes.EncryptedAudioBox.prototype = Object.create(mp4lib.boxes.AudioSampleEntryContainerBox.prototype);\nmp4lib.boxes.EncryptedAudioBox.prototype.constructor = mp4lib.boxes.EncryptedAudioBox;\n\n// --------------------------- esds ----------------------------\nmp4lib.boxes.ESDBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'esds', size);\n};\n\nmp4lib.boxes.ESDBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.ESDBox.prototype.constructor = mp4lib.boxes.ESDBox;\n\nmp4lib.boxes.ESDBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT8.getLength() * 2 + this.ES_length;\n};\n\nmp4lib.boxes.ESDBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.ES_tag = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.ES_length = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.ES_data = data.subarray(this.localPos, this.localPos + this.ES_length);\n    this.localPos += this.ES_length;\n    return this.localPos;\n};\n\nmp4lib.boxes.ESDBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.ES_tag);\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.ES_length);\n    this._writeBuffer(data, this.ES_data, this.ES_length);\n    return this.localPos;\n};\n\n// --------------------------- stsz ----------------------------------\nmp4lib.boxes.SampleSizeBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'stsz', size);\n};\n\nmp4lib.boxes.SampleSizeBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SampleSizeBox.prototype.constructor = mp4lib.boxes.SampleSizeBox;\n\nmp4lib.boxes.SampleSizeBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * 2 + mp4lib.fields.FIELD_UINT32.getLength() * this.sample_count;\n};\n\nmp4lib.boxes.SampleSizeBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.sample_size = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.sample_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.entries = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT32, this.sample_count);\n    return this.localPos;\n};\n\nmp4lib.boxes.SampleSizeBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.sample_size);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.sample_count);\n    for (i = 0; i < this.sample_count; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entries[i]);\n    }\n    return this.localPos;\n};\n\n// ------------------------- pssh ------------------------------------\nmp4lib.boxes.ProtectionSystemSpecificHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'pssh', size);\n};\n\nmp4lib.boxes.ProtectionSystemSpecificHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.ProtectionSystemSpecificHeaderBox.prototype.constructor = mp4lib.boxes.ProtectionSystemSpecificHeaderBox;\n\nmp4lib.boxes.ProtectionSystemSpecificHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_UINT8.getLength() * 16;\n    this.size += mp4lib.fields.FIELD_UINT32.getLength();\n    this.size += mp4lib.fields.FIELD_UINT8.getLength() * this.DataSize;\n};\n\nmp4lib.boxes.ProtectionSystemSpecificHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.SystemID = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT8, 16);\n    this.DataSize = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.Data = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT8, this.DataSize);\n    return this.localPos;\n};\n\nmp4lib.boxes.ProtectionSystemSpecificHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n\n    for (i = 0; i < 16; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT8, this.SystemID[i]);\n    }\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.DataSize);\n    for (i = 0; i < this.DataSize; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT8, this.Data[i]);\n    }\n    return this.localPos;\n};\n\n\n// --------------------------- senc ----------------------------------\nmp4lib.boxes.SampleEncryptionBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'senc', size);\n};\n\nmp4lib.boxes.SampleEncryptionBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SampleEncryptionBox.prototype.constructor = mp4lib.boxes.SampleEncryptionBox;\n\nmp4lib.boxes.SampleEncryptionBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    var i = 0,\n        j = 0;\n\n    this.size += mp4lib.fields.FIELD_UINT32.getLength(); //sample_count size\n    if (this.flags & 1) {\n        this.size += mp4lib.fields.FIELD_UINT8.getLength(); //IV_size size\n    }\n    for (i = 0; i < this.sample_count; i++) {\n        this.size += 8; // InitializationVector size\n        if (this.flags & 2) {\n            this.size += mp4lib.fields.FIELD_UINT16.getLength(); // NumberOfEntries size\n            for (j = 0; j < this.entry[i].NumberOfEntries; j++) {\n                this.size += mp4lib.fields.FIELD_UINT16.getLength(); //BytesOfClearData size\n                this.size += mp4lib.fields.FIELD_UINT32.getLength(); //BytesOfEncryptedData size\n            }\n        }\n    }\n};\n\nmp4lib.boxes.SampleEncryptionBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0,\n        j = 0;\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.sample_count);\n    if (this.flags & 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT8, this.IV_size);\n    }\n    for (i = 0; i < this.sample_count; i++) {\n        this._writeBuffer(data, this.entry[i].InitializationVector, 8);\n\n        if (this.flags & 2) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT16, this.entry[i].NumberOfEntries); // NumberOfEntries\n\n            for (j = 0; j < this.entry[i].NumberOfEntries; j++) {\n                this._writeData(data, mp4lib.fields.FIELD_UINT16, this.entry[i].clearAndCryptedData[j].BytesOfClearData); //BytesOfClearData\n                this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].clearAndCryptedData[j].BytesOfEncryptedData); //BytesOfEncryptedData size\n            }\n        }\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.SampleEncryptionBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        j = 0,\n        clearAndCryptedStruct = {},\n        struct = {};\n    this.sample_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    if (this.flags & 1) {\n        this.IV_size = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    }\n    this.entry = [];\n    for (i = 0; i < this.sample_count; i++) {\n        struct = {};\n        struct.InitializationVector = data.subarray(this.localPos, this.localPos + 8);\n        this.localPos += 8; //InitializationVector size\n\n        if (this.flags & 2) {\n            struct.NumberOfEntries = this._readData(data, mp4lib.fields.FIELD_UINT16); // NumberOfEntries\n            struct.clearAndCryptedData = [];\n            for (j = 0; j < struct.NumberOfEntries; j++) {\n                clearAndCryptedStruct = {};\n                clearAndCryptedStruct.BytesOfClearData = this._readData(data, mp4lib.fields.FIELD_UINT16); //BytesOfClearData\n                clearAndCryptedStruct.BytesOfEncryptedData = this._readData(data, mp4lib.fields.FIELD_UINT32); //BytesOfEncryptedData size\n                struct.clearAndCryptedData.push(clearAndCryptedStruct);\n            }\n        }\n        this.entry.push(struct);\n    }\n    return this.localPos;\n};\n\n// ------------------------- saiz ------------------------------------\nmp4lib.boxes.SampleAuxiliaryInformationSizesBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'saiz', size);\n};\n\nmp4lib.boxes.SampleAuxiliaryInformationSizesBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SampleAuxiliaryInformationSizesBox.prototype.constructor = mp4lib.boxes.SampleAuxiliaryInformationSizesBox;\n\nmp4lib.boxes.SampleAuxiliaryInformationSizesBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    if (this.flags & 1) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength() * 2;\n    }\n\n    this.size += mp4lib.fields.FIELD_UINT8.getLength() + mp4lib.fields.FIELD_UINT32.getLength();\n\n    if (this.default_sample_info_size === 0) {\n        this.size += mp4lib.fields.FIELD_UINT8.getLength() * this.sample_count;\n    }\n};\n\nmp4lib.boxes.SampleAuxiliaryInformationSizesBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.flags & 1) {\n        this.aux_info_type = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.aux_info_type_parameter = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    this.default_sample_info_size = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.sample_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n    if (this.default_sample_info_size === 0) {\n        this.sample_info_size = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT8, this.sample_count);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.SampleAuxiliaryInformationSizesBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n    if (this.flags & 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.aux_info_type);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.aux_info_type_parameter);\n    }\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.default_sample_info_size);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.sample_count);\n    if (this.default_sample_info_size === 0) {\n        for (i = 0; i < this.sample_count; i++) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT8, this.sample_info_size[i]);\n        }\n    }\n    return this.localPos;\n};\n\n//------------------------- saio ------------------------------------\nmp4lib.boxes.SampleAuxiliaryInformationOffsetsBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'saio', size);\n};\n\nmp4lib.boxes.SampleAuxiliaryInformationOffsetsBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SampleAuxiliaryInformationOffsetsBox.prototype.constructor = mp4lib.boxes.SampleAuxiliaryInformationOffsetsBox;\n\nmp4lib.boxes.SampleAuxiliaryInformationOffsetsBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    if (this.flags & 1) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength() * 2;\n    }\n    this.size += mp4lib.fields.FIELD_UINT32.getLength(); /*entry_count size */\n    if (this.version === 0) {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength() * this.entry_count;\n    } else {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength() * this.entry_count;\n    }\n};\n\nmp4lib.boxes.SampleAuxiliaryInformationOffsetsBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.flags & 1) {\n        this.aux_info_type = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.aux_info_type_parameter = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n\n    this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n    if (this.version === 0) {\n        this.offset = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n    } else {\n        this.offset = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT64, this.entry_count);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.SampleAuxiliaryInformationOffsetsBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    var i = 0;\n    if (this.flags & 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.aux_info_type);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.aux_info_type_parameter);\n    }\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n    if (this.version === 0) {\n        for (i = 0; i < this.entry_count; i++) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.offset[i]);\n        }\n    } else {\n        for (i = 0; i < this.entry_count; i++) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT64, this.offset[i]);\n        }\n    }\n    return this.localPos;\n};\n\n//------------------------- sinf ------------------------------------\nmp4lib.boxes.ProtectionSchemeInformationBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'sinf', size);\n};\n\nmp4lib.boxes.ProtectionSchemeInformationBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.ProtectionSchemeInformationBox.prototype.constructor = mp4lib.boxes.ProtectionSchemeInformationBox;\n\n//------------------------ schi --------------------------------------\nmp4lib.boxes.SchemeInformationBox = function(size) {\n    mp4lib.boxes.ContainerBox.call(this, 'schi', size);\n};\n\nmp4lib.boxes.SchemeInformationBox.prototype = Object.create(mp4lib.boxes.ContainerBox.prototype);\nmp4lib.boxes.SchemeInformationBox.prototype.constructor = mp4lib.boxes.SchemeInformationBox;\n\n//------------------------ tenc --------------------------------------\nmp4lib.boxes.TrackEncryptionBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'tenc', size);\n};\n\nmp4lib.boxes.TrackEncryptionBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TrackEncryptionBox.prototype.constructor = mp4lib.boxes.TrackEncryptionBox;\n\nmp4lib.boxes.TrackEncryptionBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_BIT24.getLength();\n    this.size += mp4lib.fields.FIELD_UINT8.getLength();\n    this.size += mp4lib.fields.FIELD_UINT8.getLength() * 16;\n};\n\nmp4lib.boxes.TrackEncryptionBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.default_IsEncrypted = this._readData(data, mp4lib.fields.FIELD_BIT24);\n    this.default_IV_size = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.default_KID = this._readArrayFieldData(data, mp4lib.fields.FIELD_UINT8, 16);\n    return this.localPos;\n};\n\nmp4lib.boxes.TrackEncryptionBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_BIT24, this.default_IsEncrypted);\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.default_IV_size);\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT8, this.default_KID);\n    return this.localPos;\n};\n\n//------------------------- schm -------------------------------------\nmp4lib.boxes.SchemeTypeBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'schm', size);\n};\n\nmp4lib.boxes.SchemeTypeBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SchemeTypeBox.prototype.constructor = mp4lib.boxes.SchemeTypeBox;\n\nmp4lib.boxes.SchemeTypeBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * 2;\n    if (this.flags & 0x000001) {\n        this.size += mp4lib.fields.FIELD_STRING.getLength(this.scheme_uri);\n    }\n};\n\nmp4lib.boxes.SchemeTypeBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.scheme_type = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.scheme_version = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    if (this.flags & 0x000001) {\n        this.scheme_uri = this._readData(data, mp4lib.fields.FIELD_STRING);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.SchemeTypeBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.scheme_type);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.scheme_version);\n    if (this.flags & 0x000001) {\n        this._writeData(data, mp4lib.fields.FIELD_STRING, this.scheme_uri);\n    }\n    return this.localPos;\n};\n\n// --------------------------- elst ----------------------------------\nmp4lib.boxes.EditListBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'elst', size);\n    this.entries = [];\n};\n\nmp4lib.boxes.EditListBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.EditListBox.prototype.constructor = mp4lib.boxes.EditListBox;\n\nmp4lib.boxes.EditListBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_UINT32.getLength(); //entry_count size\n\n    if (this.version === 1) {\n        this.size += (mp4lib.fields.FIELD_UINT64.getLength() * 2 /*segment_duration and media_time size*/ +\n            mp4lib.fields.FIELD_UINT16.getLength() * 2 /*media_rate_integer and media_rate_fraction size)*/ ) * this.entry_count;\n    } else { // version==0\n        this.size += (mp4lib.fields.FIELD_UINT32.getLength() * 2 /*segment_duration and media_time size*/ +\n            mp4lib.fields.FIELD_UINT16.getLength() * 2 /*media_rate_integer and media_rate_fraction size)*/ ) * this.entry_count;\n    }\n};\n\nmp4lib.boxes.EditListBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        struct = {};\n    this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n\n    for (i = 0; i < this.entry_count; i++) {\n        struct = {};\n        if (this.version === 1) {\n            struct.segment_duration = this._readData(data, mp4lib.fields.FIELD_UINT64);\n            struct.media_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        } else { // version==0\n            struct.segment_duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n            struct.media_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        }\n        struct.media_rate_integer = this._readData(data, mp4lib.fields.FIELD_UINT16);\n        struct.media_rate_fraction = this._readData(data, mp4lib.fields.FIELD_UINT16);\n        this.entries.push(struct);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.EditListBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n    for (i = 0; i < this.entry_count; i++) {\n\n        if (this.version === 1) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT64, this.entries[i].segment_duration);\n            this._writeData(data, mp4lib.fields.FIELD_UINT64, this.entries[i].media_time);\n        } else { // version==0\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entries[i].segment_duration);\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entries[i].media_time);\n        }\n        this._writeData(data, mp4lib.fields.FIELD_UINT16, this.entries[i].media_rate_integer);\n        this._writeData(data, mp4lib.fields.FIELD_UINT16, this.entries[i].media_rate_fraction);\n    }\n    return this.localPos;\n};\n\n// --------------------------- hmhd ----------------------------------\nmp4lib.boxes.HintMediaHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'hmhd', size);\n};\n\nmp4lib.boxes.HintMediaHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.HintMediaHeaderBox.prototype.constructor = mp4lib.boxes.HintMediaHeaderBox;\n\nmp4lib.boxes.HintMediaHeaderBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_UINT16.getLength() * 2; //maxPDUsize and avgPDUsize size\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * 3; //maxbitrate, avgbitrate and reserved size\n};\n\nmp4lib.boxes.HintMediaHeaderBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.maxPDUsize = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.avgPDUsize = this._readData(data, mp4lib.fields.FIELD_UINT16);\n    this.maxbitrate = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.avgbitrate = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.reserved = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.HintMediaHeaderBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.maxPDUsize);\n    this._writeData(data, mp4lib.fields.FIELD_UINT16, this.avgPDUsize);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.maxbitrate);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.avgbitrate);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.reserved);\n    return this.localPos;\n};\n\n// --------------------------- nmhd ----------------------------------\nmp4lib.boxes.NullMediaHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'nmhd', size);\n};\n\nmp4lib.boxes.NullMediaHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.NullMediaHeaderBox.prototype.constructor = mp4lib.boxes.NullMediaHeaderBox;\n\n// --------------------------- ctts ----------------------------------\nmp4lib.boxes.CompositionOffsetBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'ctts', size);\n    this.entries = [];\n};\n\nmp4lib.boxes.CompositionOffsetBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.CompositionOffsetBox.prototype.constructor = mp4lib.boxes.CompositionOffsetBox;\n\nmp4lib.boxes.CompositionOffsetBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_UINT32.getLength(); //entry_count size\n\n    if (this.version === 0) {\n        this.size += (mp4lib.fields.FIELD_UINT32.getLength() * 2 /*sample_count and sample_offset size*/ ) * this.entry_count;\n    } else { // version===1\n        this.size += (mp4lib.fields.FIELD_UINT32.getLength() /*sample_count size*/ + mp4lib.fields.FIELD_INT32.getLength()\n            /*sample_offset size*/\n        ) * this.entry_count;\n    }\n};\n\nmp4lib.boxes.CompositionOffsetBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        struct = {};\n    this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    for (i = 0; i < this.entry_count; i++) {\n        struct = {};\n\n        if (this.version === 0) {\n            struct.sample_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n            struct.sample_offset = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        } else { // version==1\n            struct.sample_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n            struct.sample_offset = this._readData(data, mp4lib.fields.FIELD_INT32);\n        }\n        this.entries.push(struct);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.CompositionOffsetBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n    for (i = 0; i < this.entry_count; i++) {\n        if (this.version === 0) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entries[i].sample_count);\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entries[i].sample_offset);\n        } else { // version==1\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entries[i].sample_count);\n            this._writeData(data, mp4lib.fields.FIELD_INT32, this.entries[i].sample_offset);\n        }\n    }\n    return this.localPos;\n};\n\n// --------------------------- cslg ----------------------------------\nmp4lib.boxes.CompositionToDecodeBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'cslg', size);\n};\n\nmp4lib.boxes.CompositionToDecodeBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.CompositionToDecodeBox.prototype.constructor = mp4lib.boxes.CompositionToDecodeBox;\n\nmp4lib.boxes.CompositionToDecodeBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_INT32.getLength() * 5;\n};\n\nmp4lib.boxes.CompositionToDecodeBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    this.compositionToDTSShift = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.leastDecodeToDisplayDelta = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.greatestDecodeToDisplayDelta = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.compositionStartTime = this._readData(data, mp4lib.fields.FIELD_INT32);\n    this.compositionEndTime = this._readData(data, mp4lib.fields.FIELD_INT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.CompositionToDecodeBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.compositionToDTSShift);\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.leastDecodeToDisplayDelta);\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.greatestDecodeToDisplayDelta);\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.compositionStartTime);\n    this._writeData(data, mp4lib.fields.FIELD_INT32, this.compositionEndTime);\n    return this.localPos;\n};\n\n// --------------------------- stss ----------------------------------\nmp4lib.boxes.SyncSampleBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'stss', size);\n    this.entries = [];\n};\n\nmp4lib.boxes.SyncSampleBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SyncSampleBox.prototype.constructor = mp4lib.boxes.SyncSampleBox;\n\nmp4lib.boxes.SyncSampleBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength(); //entry_count size\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * this.entry_count; //entries size\n};\n\nmp4lib.boxes.SyncSampleBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        struct = {};\n\n    this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    for (i = 0; i < this.entry_count; i++) {\n        struct = {};\n        struct.sample_number = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.entries.push(struct);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.SyncSampleBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry_count);\n    for (i = 0; i < this.entry_count; i++) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entries[i].sample_number);\n    }\n    return this.localPos;\n};\n\n// --------------------------- tref ----------------------------------\nmp4lib.boxes.TrackReferenceBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'tref', size);\n};\n\nmp4lib.boxes.TrackReferenceBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TrackReferenceBox.prototype.constructor = mp4lib.boxes.TrackReferenceBox;\n\nmp4lib.boxes.TrackReferenceBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength() * this.track_IDs.length;\n};\n\nmp4lib.boxes.TrackReferenceBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    this.track_IDs = this._readArrayData(data, mp4lib.fields.FIELD_UINT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.TrackReferenceBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    this._writeArrayData(data, mp4lib.fields.FIELD_UINT32, this.track_IDs);\n    return this.localPos;\n};\n\n//---------------------------- frma ----------------------------------\nmp4lib.boxes.OriginalFormatBox = function(size) {\n    mp4lib.boxes.Box.call(this, 'frma', size);\n};\n\nmp4lib.boxes.OriginalFormatBox.prototype = Object.create(mp4lib.boxes.Box.prototype);\nmp4lib.boxes.OriginalFormatBox.prototype.constructor = mp4lib.boxes.OriginalFormatBox;\n\nmp4lib.boxes.OriginalFormatBox.prototype.computeLength = function() {\n    mp4lib.boxes.Box.prototype.computeLength.call(this);\n    this.size += mp4lib.fields.FIELD_UINT32.getLength();\n};\n\nmp4lib.boxes.OriginalFormatBox.prototype.read = function(data, pos, end) {\n    this.localPos = pos;\n    this.localEnd = end;\n    this.data_format = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    return this.localPos;\n};\n\nmp4lib.boxes.OriginalFormatBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.Box.prototype.write.call(this, data, pos);\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.data_format);\n    return this.localPos;\n};\n\n// -------------------------------------------------------------------\n// Microsoft Smooth Streaming specific boxes\n// -------------------------------------------------------------------\n\n// --------------------------- piff ----------------------------------\n//PIFF Sample Encryption box\nmp4lib.boxes.PiffSampleEncryptionBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'sepiff', size, [0xA2, 0x39, 0x4F, 0x52, 0x5A, 0x9B, 0x4F, 0x14, 0xA2, 0x44, 0x6C, 0x42, 0x7C, 0x64, 0x8D, 0xF4]);\n};\n\nmp4lib.boxes.PiffSampleEncryptionBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.PiffSampleEncryptionBox.prototype.constructor = mp4lib.boxes.PiffSampleEncryptionBox;\n\nmp4lib.boxes.PiffSampleEncryptionBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    var i = 0,\n        j = 0;\n\n    this.size += mp4lib.fields.FIELD_UINT32.getLength(); //sample_count size\n    if (this.flags & 1) {\n        this.size += mp4lib.fields.FIELD_UINT8.getLength(); //IV_size size\n    }\n    for (i = 0; i < this.sample_count; i++) {\n        this.size += 8; // InitializationVector size\n        if (this.flags & 2) {\n            this.size += mp4lib.fields.FIELD_UINT16.getLength(); // NumberOfEntries size\n            for (j = 0; j < this.entry[i].NumberOfEntries; j++) {\n                this.size += mp4lib.fields.FIELD_UINT16.getLength(); //BytesOfClearData size\n                this.size += mp4lib.fields.FIELD_UINT32.getLength(); //BytesOfEncryptedData size\n            }\n        }\n    }\n};\n\nmp4lib.boxes.PiffSampleEncryptionBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0,\n        j = 0;\n    this._writeData(data, mp4lib.fields.FIELD_UINT32, this.sample_count);\n    if (this.flags & 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT8, this.IV_size);\n    }\n    for (i = 0; i < this.sample_count; i++) {\n        this._writeBuffer(data, this.entry[i].InitializationVector, 8);\n\n        if (this.flags & 2) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT16, this.entry[i].NumberOfEntries); // NumberOfEntries\n\n            for (j = 0; j < this.entry[i].NumberOfEntries; j++) {\n                this._writeData(data, mp4lib.fields.FIELD_UINT16, this.entry[i].clearAndCryptedData[j].BytesOfClearData); //BytesOfClearData\n                this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].clearAndCryptedData[j].BytesOfEncryptedData); //BytesOfEncryptedData size\n            }\n        }\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.PiffSampleEncryptionBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        j = 0,\n        clearAndCryptedStruct = {},\n        struct = {};\n    this.sample_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    if (this.flags & 1) {\n        this.IV_size = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    }\n    this.entry = [];\n    for (i = 0; i < this.sample_count; i++) {\n        struct = {};\n        struct.InitializationVector = data.subarray(this.localPos, this.localPos + 8);\n        this.localPos += 8; //InitializationVector size\n\n        if (this.flags & 2) {\n            struct.NumberOfEntries = this._readData(data, mp4lib.fields.FIELD_UINT16); // NumberOfEntries\n            struct.clearAndCryptedData = [];\n            for (j = 0; j < struct.NumberOfEntries; j++) {\n                clearAndCryptedStruct = {};\n                clearAndCryptedStruct.BytesOfClearData = this._readData(data, mp4lib.fields.FIELD_UINT16); //BytesOfClearData\n                clearAndCryptedStruct.BytesOfEncryptedData = this._readData(data, mp4lib.fields.FIELD_UINT32); //BytesOfEncryptedData size\n                struct.clearAndCryptedData.push(clearAndCryptedStruct);\n            }\n        }\n        this.entry.push(struct);\n    }\n    return this.localPos;\n};\n\n//PIFF Track Encryption Box\nmp4lib.boxes.PiffTrackEncryptionBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'tepiff', size, [0x89, 0x74, 0xDB, 0xCE, 0x7B, 0xE7, 0x4C, 0x51, 0x84, 0xF9, 0x71, 0x48, 0xF9, 0x88, 0x25, 0x54]);\n};\n\nmp4lib.boxes.PiffTrackEncryptionBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.PiffTrackEncryptionBox.prototype.constructor = mp4lib.boxes.PiffTrackEncryptionBox;\n\n//PIFF Protection System Specific Header Box\nmp4lib.boxes.PiffProtectionSystemSpecificHeaderBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'psshpiff', size, [0xD0, 0x8A, 0x4F, 0x18, 0x10, 0xF3, 0x4A, 0x82, 0xB6, 0xC8, 0x32, 0xD8, 0xAB, 0xA1, 0x83, 0xD3]);\n};\n\nmp4lib.boxes.PiffProtectionSystemSpecificHeaderBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.PiffProtectionSystemSpecificHeaderBox.prototype.constructor = mp4lib.boxes.PiffProtectionSystemSpecificHeaderBox;\n\n// --------------------------- tfdx -----------------------------\nmp4lib.boxes.TfxdBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'tfxd', size, [0x6D, 0x1D, 0x9B, 0x05, 0x42, 0xD5, 0x44, 0xE6, 0x80, 0xE2, 0x14, 0x1D, 0xAF, 0xF7, 0x57, 0xB2]);\n};\n\nmp4lib.boxes.TfxdBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TfxdBox.prototype.constructor = mp4lib.boxes.TfxdBox;\n\nmp4lib.boxes.TfxdBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    if (this.version === 1) {\n        this.size += mp4lib.fields.FIELD_UINT64.getLength() * 2;\n    } else {\n        this.size += mp4lib.fields.FIELD_UINT32.getLength() * 2;\n    }\n};\n\nmp4lib.boxes.TfxdBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n\n    if (this.version === 1) {\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.fragment_absolute_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT64, this.fragment_duration);\n    } else {\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.fragment_absolute_time);\n        this._writeData(data, mp4lib.fields.FIELD_UINT32, this.fragment_duration);\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.TfxdBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n\n    if (this.version === 1) {\n        this.fragment_absolute_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        this.fragment_duration = this._readData(data, mp4lib.fields.FIELD_UINT64);\n    } else {\n        this.fragment_absolute_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        this.fragment_duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    }\n    return this.localPos;\n};\n\n// --------------------------- tfrf -----------------------------\nmp4lib.boxes.TfrfBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'tfrf', size, [0xD4, 0x80, 0x7E, 0xF2, 0xCA, 0x39, 0x46, 0x95, 0x8E, 0x54, 0x26, 0xCB, 0x9E, 0x46, 0xA7, 0x9F]);\n};\n\nmp4lib.boxes.TfrfBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.TfrfBox.prototype.constructor = mp4lib.boxes.TfrfBox;\n\nmp4lib.boxes.TfrfBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n\n    this.size += mp4lib.fields.FIELD_UINT8.getLength(); //fragment_count size\n    if (this.version === 1) {\n        this.size += (mp4lib.fields.FIELD_UINT64.getLength() * 2 /*fragment_absolute_time and fragment_duration size*/ ) * this.fragment_count;\n    } else {\n        this.size += (mp4lib.fields.FIELD_UINT32.getLength() * 2 /*fragment_absolute_time and fragment_duration size*/ ) * this.fragment_count;\n    }\n};\n\nmp4lib.boxes.TfrfBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    var i = 0;\n    this._writeData(data, mp4lib.fields.FIELD_UINT8, this.fragment_count);\n    for (i = 0; i < this.fragment_count; i++) {\n        if (this.version === 1) {\n            this._writeData(data, mp4lib.fields.FIELD_UINT64, this.entry[i].fragment_absolute_time);\n            this._writeData(data, mp4lib.fields.FIELD_UINT64, this.entry[i].fragment_duration);\n        } else {\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].fragment_absolute_time);\n            this._writeData(data, mp4lib.fields.FIELD_UINT32, this.entry[i].fragment_duration);\n        }\n    }\n    return this.localPos;\n};\n\nmp4lib.boxes.TfrfBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        struct = {};\n    this.fragment_count = this._readData(data, mp4lib.fields.FIELD_UINT8);\n    this.entry = [];\n    for (i = 0; i < this.fragment_count; i++) {\n        struct = {};\n        if (this.version === 1) {\n            struct.fragment_absolute_time = this._readData(data, mp4lib.fields.FIELD_UINT64);\n            struct.fragment_duration = this._readData(data, mp4lib.fields.FIELD_UINT64);\n        } else {\n            struct.fragment_absolute_time = this._readData(data, mp4lib.fields.FIELD_UINT32);\n            struct.fragment_duration = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        }\n        this.entry.push(struct);\n    }\n    return this.localPos;\n};\n\n// --------------------------- subs -----------------------------\nmp4lib.boxes.SubSampleInformationBox = function(size) {\n    mp4lib.boxes.FullBox.call(this, 'subs', size);\n};\n\nmp4lib.boxes.SubSampleInformationBox.prototype = Object.create(mp4lib.boxes.FullBox.prototype);\nmp4lib.boxes.SubSampleInformationBox.prototype.constructor = mp4lib.boxes.SubSampleInformationBox;\n\nmp4lib.boxes.SubSampleInformationBox.prototype.computeLength = function() {\n    mp4lib.boxes.FullBox.prototype.computeLength.call(this);\n    // To Define if needed\n};\n\nmp4lib.boxes.SubSampleInformationBox.prototype.read = function(data, pos, end) {\n    mp4lib.boxes.FullBox.prototype.read.call(this, data, pos, end);\n    var i = 0,\n        j = 0,\n        struct = {},\n        subSampleStruct = {};\n\n    this.entry_count = this._readData(data, mp4lib.fields.FIELD_UINT32);\n    this.entry = [];\n    for (i = 0; i < this.entry_count; i++) {\n        struct = {};\n        struct.sample_delta = this._readData(data, mp4lib.fields.FIELD_UINT32);\n        struct.subsample_count = this._readData(data, mp4lib.fields.FIELD_UINT16);\n        if (struct.subsample_count > 0) {\n            struct.subSampleEntries = [];\n            for (j=0; j < struct.subsample_count; j++) {\n                subSampleStruct = {};\n                if (this.version === 1) {\n                    subSampleStruct.subsample_size = this._readData(data, mp4lib.fields.FIELD_UINT32);\n                } else {\n                    subSampleStruct.subsample_size = this._readData(data, mp4lib.fields.FIELD_UINT16);\n                }\n                subSampleStruct.subsample_priority = this._readData(data, mp4lib.fields.FIELD_UINT8);\n                subSampleStruct.discardable = this._readData(data, mp4lib.fields.FIELD_UINT8);\n                subSampleStruct.reserved = this._readData(data, mp4lib.fields.FIELD_UINT32);\n                struct.subSampleEntries.push(subSampleStruct);\n            }\n        }\n        this.entry.push(struct);\n    }\n\n    return this.localPos;\n};\n\nmp4lib.boxes.SubSampleInformationBox.prototype.write = function(data, pos) {\n    mp4lib.boxes.FullBox.prototype.write.call(this, data, pos);\n    // To Define if needed\n};\n\nmp4lib.registerTypeBoxes();","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar mpegts = (function() {\n    return {\n        pes: {},\n        si: {},\n        binary: {},\n        ts: {},\n        Pts: {},\n        aac: {},\n        h264: {}\n    };\n}());\n\n// This module is intended to work both on node.js and inside browser.\n// Since these environments differ in a way modules are stored/accessed,\n// we need to export the module in the environment-dependant way\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined')\n    module.exports = mpegts; // node.js\nelse\n    window.mpegts = mpegts; // browser","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nmpegts.si.PSISection = function(table_id) {\n    this.m_table_id = table_id;\n    this.m_section_syntax_indicator = 1;\n    this.m_section_length = mpegts.si.PSISection.prototype.SECTION_LENGTH;\n    this.m_transport_stream_id = 0;\n    this.m_version_number = 0;\n    this.m_current_next_indicator = true;\n    this.m_section_number = 0;\n    this.m_last_section_number = 0;\n    this.m_bValid = null;\n};\n\nmpegts.si.PSISection.prototype.parse = function(data) {\n    this.m_bValid = false;\n\n    var id = 0;\n\n    var pointerField = data[id];\n\n    //if pointerField = 0 payload data start immediately otherwise, shift pointerField value\n    id = pointerField === 0 ? id + 1 : id + pointerField;\n\n    this.m_table_id = data[id];\n    id++;\n    this.m_section_syntax_indicator = mpegts.binary.getBitFromByte(data[id], 0);\n    this.m_section_length = mpegts.binary.getValueFrom2Bytes(data.subarray(id, id + 2), 4);\n    id += 2;\n    this.m_transport_stream_id = mpegts.binary.getValueFrom2Bytes(data.subarray(id, id + 2));\n    id += 2;\n    this.m_version_number = mpegts.binary.getValueFromByte(data[id], 2, 5);\n    this.m_current_next_indicator = mpegts.binary.getBitFromByte(data[id], 7);\n    id++;\n    this.m_section_number = data[id];\n    id++;\n    this.m_last_section_number = data[id];\n\n    /*if (nLength < (m_section_length + 3))\n\t{\n\t\tm_bComplete = false;\n\t\tSAFE_DELETE(m_pBytestream);\n\t\tm_pBytestream = new unsigned char[m_section_length + 3];\n\t\tmemcpy(m_pBytestream, pBytestream, nLength);\n\t\tm_nSectionIndex = nLength;\n\t\treturn;\n\t}\n\n\tm_nSectionIndex = 0;\n\tm_bComplete = true;*/\n    this.m_bValid = true;\n\n    return id;\n};\n\nmpegts.si.PSISection.prototype.getSectionLength = function() {\n    return this.m_section_length;\n};\n\nmpegts.si.PSISection.prototype.SECTION_LENGTH = 9;\nmpegts.si.PSISection.prototype.HEADER_LENGTH = 8;","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// Sampling frequency dependent on sampling_frequency_index\nmpegts.aac.SAMPLING_FREQUENCY = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\nmpegts.aac.getAudioSpecificConfig = function(data) { // data as Uint8Array\n\n    // We need to parse the beginning of the adts_frame in order to get\n    // object type, sampling frequency and channel configuration\n    var profile = mpegts.binary.getValueFromByte(data[2], 0, 2);\n    var sampling_frequency_index = mpegts.binary.getValueFromByte(data[2], 2, 4);\n    var channel_configuration = mpegts.binary.getValueFrom2Bytes(data.subarray(2, 5), 7, 3);\n\n    var audioSpecificConfig = new Uint8Array(2);\n\n    // audioObjectType = profile = MPEG-4 Audio Object Type minus 1\n    audioSpecificConfig[0] = (profile + 1) << 3;\n\n    // samplingFrequencyIndex\n    audioSpecificConfig[0] |= (sampling_frequency_index & 0x0E) >> 1;\n    audioSpecificConfig[1] |= (sampling_frequency_index & 0x01) << 7;\n\n    // channelConfiguration\n    audioSpecificConfig[1] |= channel_configuration << 3;\n\n    /*  code for HE AAC v2 to be tested\n\n    var audioSpecificConfig = new Uint8Array(4);\n\n    // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n    audioSpecificConfig[0] = 29 << 3;\n\n    // samplingFrequencyIndex\n    audioSpecificConfig[0] |= (sampling_frequency_index & 0x0E) >> 1;\n    audioSpecificConfig[1] |= (sampling_frequency_index & 0x01) << 7;\n\n    // channelConfiguration\n    audioSpecificConfig[1] |= channel_configuration << 3;\n    \n    var extensionSamplingFrequencyIndex = 5;// in HE AAC Extension Sampling frequence\n\n    audioSpecificConfig[1] |= extensionSamplingFrequencyIndex >> 1;\n       \n    audioSpecificConfig[2] = (extensionSamplingFrequencyIndex << 7) | ((profile+1) << 2);// origin object type equals to 2 => AAC Main Low Complexity\n    audioSpecificConfig[3] = 0x0; //alignment bits\n\n   */\n\n    return audioSpecificConfig;\n};\n\nmpegts.aac.parseADTS = function(data, cts) { // data as Uint8Array, cts as an array of cts for each frame index\n\n    var aacFrames = [],\n        adtsHeader = {},\n        aacFrame,\n        adtsFrameIndex,\n        i = 0;\n\n    while (i < data.length) {\n        // = adts_frame\n        adtsFrameIndex = i;\n\n        // == adts_fixed_header\n        adtsHeader.syncword = (data[i] << 4) + ((data[i + 1] & 0xF0) >> 4);\n        // adtsHeader.ID\n        // adtsHeader.layer\n        adtsHeader.protection_absent = data[i + 1] & 0x01;\n        // adtsHeader.profile\n        adtsHeader.sampling_frequency_index = (data[i + 2] & 0x3C) >> 2;\n        // adtsHeader.private_bit\n        adtsHeader.channel_configuration = ((data[i + 2] & 0x01) << 1) + ((data[i + 3] & 0xC0) >> 6);\n        // adtsHeader.original_copy\n        // adtsHeader.home\n\n        // == adts_variable_header\n        // adtsHeader.copyright_identification_bit\n        // adtsHeader.copyright_identification_start\n        adtsHeader.aac_frame_length = ((data[i + 3] & 0x03) << 11) + (data[i + 4] << 3) + ((data[i + 5] & 0xE0) >> 5);\n        // adtsHeader.adts_buffer_fullness\n        adtsHeader.number_of_raw_data_blocks_in_frame = (data[i + 6] & 0x03) >> 2;\n\n        i += 7;\n\n        if (adtsHeader.number_of_raw_data_blocks_in_frame === 0) {\n            // == adts_error_check()\n            if (adtsHeader.protection_absent === 0) {\n                i += 2;\n            }\n\n            // == raw_data_block() => create AAC frame\n            aacFrame = {};\n            aacFrame.offset = i;\n            aacFrame.length = adtsHeader.aac_frame_length - (i - adtsFrameIndex);\n\n            if (cts && cts[adtsFrameIndex]) {\n                aacFrame.cts = cts[adtsFrameIndex];\n            }\n\n            aacFrames.push(aacFrame);\n\n            i += aacFrame.length;\n        } else {\n            // == adts_header_error_check\n        }\n    }\n\n    return aacFrames;\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nmpegts.ts.AdaptationField = function() {\n    /** adaptation field fields */\n    this.m_cAFLength = null;\n    this.m_bDiscontinuityInd = null;\n    this.m_bRAI = null;\n    this.m_bESPriority = null;\n\n    /** Optional fields flags */\n    this.m_bPCRFlag = null;\n    this.m_bOPCRFlag = null;\n    this.m_bSplicingPointFlag = null;\n    this.m_bPrivateDataFlag = null;\n    this.m_bAdaptationFieldExtFlag = null;\n};\n\nmpegts.ts.AdaptationField.prototype.getLength = function() {\n    return (this.m_cAFLength + 1);\n};\n\nmpegts.ts.AdaptationField.prototype.parse = function(data) {\n    this.m_cAFLength = data[0];\n\n    if (this.m_cAFLength === 0) {\n        // = exactly 1 stuffing byte\n        return;\n    }\n\n    var index = 1;\n\n    this.m_bDiscontinuityInd = mpegts.binary.getBitFromByte(data[index], 0);\n    this.m_bRAI = mpegts.binary.getBitFromByte(data[index], 1);\n    this.m_bESPriority = mpegts.binary.getBitFromByte(data[index], 2);\n    this.m_bPCRFlag = mpegts.binary.getBitFromByte(data[index], 3);\n    this.m_bOPCRFlag = mpegts.binary.getBitFromByte(data[index], 4);\n    this.m_bSplicingPointFlag = mpegts.binary.getBitFromByte(data[index], 5);\n    this.m_bPrivateDataFlag = mpegts.binary.getBitFromByte(data[index], 6);\n    this.m_bAdaptationFieldExtFlag = mpegts.binary.getBitFromByte(data[index], 7);\n\n    //other flags are not useful for the conversion HLS => MP4\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nmpegts.binary.readBytes = function(buf, pos, nbBytes) {\n    var value = 0;\n    for (var i = 0; i < nbBytes; i++) {\n        value = value << 8;\n        value = value + buf[pos];\n        pos++;\n    }\n    return value;\n};\n\n/**\n * Returns a bit value from the given byte\n * @param data the input byte\n * @param bitIndex the bit index inside the byte (0=msb to 7=lsb)\n * @return the bit value as a boolean (0 => false, 1 => true)\n */\nmpegts.binary.getBitFromByte = function(data, bitIndex) {\n    var cMask = 0x00;\n    cMask += (1 << (7 - bitIndex));\n\n    return ((data & cMask) !== 0);\n};\n\n/**\n * Returns the value extracted from three consecutive bytes\n * @param pBytes the input bytes\n * @param msbIndex the index of the first bit to extract ( 0=msb to 15=lsb )\n * @param nbBits the number of bits to extract (if '-1' then extract up to the last bit)\n * @return the value of the extracted bits as an unsigned short, or 0xFFFFFFFF if a problem has occured\n */\nmpegts.binary.getValueFrom3Bytes = function(pBytes, msbIndex /* = 0*/ , nbBits /* = -1*/ ) {\n    if (typeof nbBits === \"undefined\") {\n        nbBits = -1;\n    }\n    if (typeof msbIndex === \"undefined\") {\n        msbIndex = 0;\n    }\n    var nbBits2 = nbBits == -1 ? -1 : (nbBits - (16 - msbIndex));\n    var nbLsbShift = nbBits == -1 ? 0 : (8 - nbBits2);\n    var cValue0 = mpegts.binary.getValueFromByte(pBytes[0], msbIndex);\n    var cValue1 = mpegts.binary.getValueFromByte(pBytes[1]);\n    var cValue2 = mpegts.binary.getValueFromByte(pBytes[2], 0, nbBits2, false);\n\n    return ((((cValue0 << 16) & 0x00FF0000) | ((cValue1 << 8) & 0x0000FF00) | (cValue2 & 0x000000FF)) >> nbLsbShift);\n};\n\n/**\n * Returns the value extracted from two consecutive bytes\n * @param data the input bytes\n * @param msbIndex the index of the first bit to extract ( 0=msb to 15=lsb )\n * @param nbBits the number of bits to extract (if '-1' then extract up to the last bit)\n * @return the value of the extracted bits as an unsigned short, or 0xFFFF if a problem has occured\n */\nmpegts.binary.getValueFrom2Bytes = function(data, msbIndex /* = 0*/ , nbBits /* = -1*/ ) {\n    if (typeof nbBits === \"undefined\") {\n        nbBits = -1;\n    }\n    if (typeof msbIndex === \"undefined\") {\n        msbIndex = 0;\n    }\n\n    var nbBits1 = nbBits == -1 ? -1 : (nbBits - (8 - msbIndex));\n    var nbLsbShift = nbBits == -1 ? 0 : (8 - nbBits1);\n    var cValue0 = mpegts.binary.getValueFromByte(data[0], msbIndex);\n    var cValue1 = mpegts.binary.getValueFromByte(data[1], 0, nbBits1, false);\n\n    return ((((cValue0 << 8) & 0xFF00) | (cValue1 & 0x00FF)) >> nbLsbShift);\n};\n\n/**\n * Returns the value extracted from the given byte\n * @param data the input byte\n * @param msbIndex the index of the first bit to extract ( 0=msb to 7=lsb )\n * @param nbBits the number of bits to extract (if '-1' then extract up to the last bit)\n * @param bShift true if the bits have to be shifted to the right\n * @return the value of the extracted bits as an unsigned char, or 0xFF if a problem has occurred\n */\nmpegts.binary.getValueFromByte = function(data, msbIndex /* = 0*/ , nbBits /* = -1*/ , bShift /* = true*/ ) {\n    var cMask = 0x00;\n    var i = 0;\n\n    if (typeof nbBits === \"undefined\") {\n        nbBits = -1;\n    }\n    if (typeof msbIndex === \"undefined\") {\n        msbIndex = 0;\n    }\n\n    var lsbIndex = (nbBits == -1) ? 7 : (msbIndex + nbBits - 1);\n    for (i = msbIndex; i <= lsbIndex; i++) {\n        cMask += (1 << (7 - i));\n    }\n\n    var cValue = data & cMask;\n    if (bShift || typeof bShift === \"undefined\") {\n        cValue >>= (7 - lsbIndex);\n    }\n    return cValue;\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nmpegts.h264.getSequenceHeader = function(data) { // data as Uint8Array\n\n    var pos = -1,\n        length = -1,\n        i = 0,\n        naluType,\n        sequenceHeader = null,\n        width = 0,\n        height = 0;\n\n    while (i < data.length) {\n        if ((data[i] === 0x00) && (data[i + 1] === 0x00) && (data[i + 2] === 0x00) && (data[i + 3] === 0x01)) {\n\n            naluType = data[i + 4] & 0x1F;\n\n            // Start of SPS or PPS\n            if ((naluType >= mpegts.h264.NALUTYPE_SPS) && (naluType <= mpegts.h264.NALUTYPE_PPS)) {\n                // First NALU of this type => we start storing the sequence header\n                if (pos === -1) {\n                    pos = i;\n                }\n\n                // SPS => parse to get width and height\n                if (naluType === mpegts.h264.NALUTYPE_SPS) {\n                    var sps = mpegts.h264.parseSPS(data.subarray(i + 5)); // +5 => after nal_unit_type byte\n                    width = (sps.pic_width_in_mbs_minus1 + 1) << 4;\n                    height = (sps.pic_height_in_map_units_minus1 + 1) << 4;\n                }\n            } else if (pos > 0) {\n                length = i - pos;\n            }\n\n            // Start of coded picture NALU\n            if ((naluType === mpegts.h264.NALUTYPE_IDR) || (naluType === mpegts.h264.NALUTYPE_NONIDR)) {\n                break;\n            }\n\n            i += 4;\n        } else if ((data[i] === 0x00) && (data[i + 1] === 0x00) && (data[i + 2] === 0x01)) {\n            if (pos > 0) {\n                length = i - pos;\n            }\n            break;\n        } else {\n            i++;\n        }\n    }\n\n    if ((pos === -1) || (length === -1)) {\n        return null;\n    }\n\n    sequenceHeader = new Uint8Array(length);\n    sequenceHeader.set(data.subarray(pos, pos + length));\n\n    return {\n        bytes: sequenceHeader,\n        width: width,\n        height: height\n    };\n};\n\nmpegts.h264.read_ue = function(data, ctx) {\n\n    var value = 1,\n        temp = 0,\n        numZeros = 0;\n\n    ctx._bit = (ctx._byte >> ctx._bitPos) & 0x01;\n    ctx._bitPos--;\n    if (ctx._bitPos < 0) {\n        ctx._byte = data[ctx._bytePos];\n        ctx._bytePos++;\n        ctx._bitPos = 7;\n    }\n\n    while (ctx._bit === 0) {\n        numZeros++;\n        value = value << 1;\n        ctx._bit = (ctx._byte >> ctx._bitPos) & 0x01;\n        ctx._bitPos--;\n        if (ctx._bitPos < 0) {\n            ctx._byte = data[ctx._bytePos];\n            ctx._bytePos++;\n            ctx._bitPos = 7;\n        }\n    }\n\n    value -= 1;\n    temp = 0;\n    if (numZeros) {\n        while (numZeros > 0) {\n            ctx._bit = (ctx._byte >> ctx._bitPos) & 0x01;\n            ctx._bitPos--;\n            temp = (temp << 1) + ctx._bit;\n            numZeros--;\n            if (ctx._bitPos < 0) {\n                ctx._byte = data[ctx._bytePos];\n                ctx._bytePos++;\n                ctx._bitPos = 7;\n            }\n        }\n    }\n    value += temp;\n\n    return value;\n};\n\nmpegts.h264.read_flag = function(data, ctx) {\n\n    var value = 0;\n\n    ctx._bit = (ctx._byte >> ctx._bitPos) & 0x01;\n    ctx._bitPos--;\n    if (ctx._bitPos < 0) {\n        ctx._byte = data[ctx._bytePos];\n        ctx._bytePos++;\n        ctx._bitPos = 7;\n    }\n    value = ctx._bit;\n\n    return value;\n};\n\n\nmpegts.h264.parseSPS = function(data) {\n\n    var sps = {\n            profile_idc: 0,\n            constraint_set0_flag: 0,\n            constraint_set1_flag: 0,\n            constraint_set2_flag: 0,\n            constraint_set3_flag: 0,\n            level_idc: 0,\n            seq_parameter_set_id: 0,\n            chroma_format_idc: 0,\n            separate_colour_plane_flag: 0,\n            bit_depth_luma_minus8: 0,\n            bit_depth_chroma_minus8: 0,\n            qpprime_y_zero_transform_bypass_flag: 0,\n            seq_scaling_matrix_present_flag: 0,\n            log2_max_frame_num_minus4: 0,\n            pic_order_cnt_type: 0,\n            log2_max_pic_order_cnt_lsb_minus4: 0,\n            num_ref_frames: 0,\n            gaps_in_frame_num_value_allowed_flag: 0,\n            pic_width_in_mbs_minus1: 0,\n            pic_height_in_map_units_minus1: 0\n        },\n\n        ctx = {\n            _byte: 0,\n            _bit: 0,\n            _bytePos: 0,\n            _bitPos: 0\n        };\n\n\n    ctx._bytePos = ctx._bitPos = 0;\n\n    // profile_idc - u(8)\n    ctx._byte = data[ctx._bytePos];\n    ctx._bytePos++;\n    sps.profile_idc = ctx._byte;\n\n    // constraint_set_flag (0/1/2/3 + reserved bits) - u(8)\n    ctx._byte = data[ctx._bytePos];\n    ctx._bytePos++;\n    sps.constraint_set0_flag = (ctx._byte & 0x80) >> 7;\n    sps.constraint_set1_flag = (ctx._byte & 0x40) >> 6;\n    sps.constraint_set2_flag = (ctx._byte & 0x20) >> 5;\n    sps.constraint_set3_flag = (ctx._byte & 0x10) >> 4;\n\n    // level_idc - u(8)\n    ctx._byte = data[ctx._bytePos];\n    ctx._bytePos++;\n    sps.level_idc = ctx._byte;\n\n    // seq_parameter_set_id - ue(v)\n    ctx._byte = data[ctx._bytePos];\n    ctx._bytePos++;\n    ctx._bitPos = 7;\n    sps.seq_parameter_set_id = mpegts.h264.read_ue(data, ctx);\n\n    if ((sps.profile_idc === 100) ||\n        (sps.profile_idc === 110) ||\n        (sps.profile_idc === 122) ||\n        (sps.profile_idc === 244) ||\n        (sps.profile_idc === 44) ||\n        (sps.profile_idc === 83) ||\n        (sps.profile_idc === 86)) {\n\n        // chroma_format_idc - ue(v)\n        sps.chroma_format_idc = mpegts.h264.read_ue(data, ctx);\n\n        if (sps.chroma_format_idc === 3) {\n            // separate_colour_plane_flag - u(1)\n            sps.separate_colour_plane_flag = mpegts.h264.read_flag(data, ctx);\n        }\n\n        // bit_depth_luma_minus8 - ue(v)\n        sps.bit_depth_luma_minus8 = mpegts.h264.read_ue(data, ctx);\n\n        // bit_depth_chroma_minus8 - ue(v)\n        sps.bit_depth_chroma_minus8 = mpegts.h264.read_ue(data, ctx);\n\n        // qpprime_y_zero_transform_bypass_flag - u(1)\n        sps.qpprime_y_zero_transform_bypass_flag = mpegts.h264.read_flag(data, ctx);\n\n        // seq_scaling_matrix - u(1)\n        sps.seq_scaling_matrix_present_flag = mpegts.h264.read_flag(data, ctx);\n\n        if (sps.seq_scaling_matrix_present_flag === 1) {\n            // NOT IMPLEMENTED\n            //console.log(\"H.264 SPS parsing: (seq_scaling_matrix_present_flag = 1) not implemented\");\n        }\n    }\n\n    // log2_max_frame_num_minus4 - ue(v)\n    sps.log2_max_frame_num_minus4 = mpegts.h264.read_ue(data, ctx);\n\n    // pic_order_cnt_type - ue(v)\n    sps.pic_order_cnt_type = mpegts.h264.read_ue(data, ctx);\n\n    if (sps.pic_order_cnt_type === 0) {\n        // log2_max_pic_order_cnt_lsb_minus4 - ue(v)\n        sps.log2_max_pic_order_cnt_lsb_minus4 = mpegts.h264.read_ue(data, ctx);\n    } else if (sps.pic_order_cnt_type === 1) {\n        // NOT IMPLEMENTED\n        //console.log(\"H.264 SPS parsing: (log2_max_pic_order_cnt_lsb_minus4 = 1) not implemented\");\n    }\n\n    // num_ref_frames - ue(v)\n    sps.num_ref_frames = mpegts.h264.read_ue(data, ctx);\n\n    // gaps_in_frame_num_value_allowed_flag - u(1)\n    sps.gaps_in_frame_num_value_allowed_flag = mpegts.h264.read_flag(data, ctx);\n\n    // pic_width_in_mbs_minus1 - ue(v)\n    sps.pic_width_in_mbs_minus1 = mpegts.h264.read_ue(data, ctx);\n\n    // pic_height_in_map_units_minus1 - ue(v)\n    sps.pic_height_in_map_units_minus1 = mpegts.h264.read_ue(data, ctx);\n\n    return sps;\n};\n\nmpegts.h264.parseNALUs = function(data) { // data as Uint8Array\n\n    var i = 0,\n        length = data.length,\n        numZeroBytes = 0,\n        nalus = [],\n        nalu;\n\n    // console.log(\"[H264] PARSE NALUs ------------------------------------------\");\n    while (i < length) {\n        if (data[i] === 0) {\n            numZeroBytes++;\n        }\n        if ((data[i] === 1) && (numZeroBytes >= 2)) {\n            i++;\n            // Update previous NALU size\n            if (nalus.length > 0) {\n                nalus[nalus.length - 1].size = i - (numZeroBytes + 1) - nalus[nalus.length - 1].offset;\n            }\n\n            nalu = {};\n            nalu.type = data[i] & 0x1F;\n            nalu.offset = i;\n            nalus.push(nalu);\n\n            // console.log(\"[H264] NALU: SC = \" + (numZeroBytes + 1) + \", type = \" + nalu.type);\n            numZeroBytes = 0;\n        }\n        if (data[i]) {\n            numZeroBytes = 0;\n        }\n        i++;\n    }\n\n    // Update last NALU size\n    if (nalus.length > 0) {\n        nalus[nalus.length - 1].size = i - nalus[nalus.length - 1].offset;\n    }\n\n    return nalus;\n};\n\n\nmpegts.h264.bytestreamToMp4 = function(data) { // data as Uint8Array\n\n    var i = 0,\n        length = data.length,\n        startCodeIndex = -1,\n        naluSize = 0;\n\n    while (i < length) {\n        if ((data[i] === 0x00) && (data[i + 1] === 0x00) && (data[i + 2] === 0x00) && (data[i + 3] === 0x01)) {\n\n            if (startCodeIndex >= 0) {\n                naluSize = (i - startCodeIndex - 4); // 4 = start code length or NALU-size field length\n                data[startCodeIndex] = (naluSize & 0xFF000000) >> 24;\n                data[startCodeIndex + 1] = (naluSize & 0x00FF0000) >> 16;\n                data[startCodeIndex + 2] = (naluSize & 0x0000FF00) >> 8;\n                data[startCodeIndex + 3] = (naluSize & 0x000000FF);\n                // console.log(\"[H264] NALU: type = \" + (data[i + 4] & 0x1F) + \", size = \" + naluSize);\n            }\n\n            startCodeIndex = i;\n            i += 4;\n        } else {\n            i++;\n        }\n    }\n\n    // Last NAL unit\n    naluSize = (i - startCodeIndex - 4); // 4 = start code length or NALU-size field length\n    data[startCodeIndex] = (naluSize & 0xFF000000) >> 24;\n    data[startCodeIndex + 1] = (naluSize & 0x00FF0000) >> 16;\n    data[startCodeIndex + 2] = (naluSize & 0x0000FF00) >> 8;\n    data[startCodeIndex + 3] = (naluSize & 0x000000FF);\n    // console.log(\"[H264] NALU: type = \" + (data[i + 4] & 0x1F) + \", size = \" + naluSize);\n\n};\n\nmpegts.h264.isIDR = function(data) { // data as Uint8Array\n    var i = 0,\n        naluType;\n\n    while (i < data.length) {\n        if ((data[i] === 0x00) && (data[i + 1] === 0x00) && (data[i + 2] === 0x01)) {\n            naluType = data[i + 3] & 0x1F;\n            if (naluType === mpegts.h264.NALUTYPE_IDR) {\n                return true;\n            }\n            i += 3;\n        } else {\n            i++;\n        }\n    }\n    return false;\n};\n\nmpegts.h264.NALUTYPE_NONIDR = 1;\nmpegts.h264.NALUTYPE_IDR = 5;\nmpegts.h264.NALUTYPE_SEI = 6;\nmpegts.h264.NALUTYPE_SPS = 7;\nmpegts.h264.NALUTYPE_PPS = 8;\nmpegts.h264.NALUTYPE_AU_DELIMITER = 9;","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nmpegts.si.PAT = function() {\n    mpegts.si.PSISection.call(this, mpegts.si.PAT.prototype.TABLE_ID);\n    this.m_listOfProgramAssociation = [];\n    this.m_network_pid = null;\n};\n\nmpegts.si.PAT.prototype = Object.create(mpegts.si.PSISection.prototype);\nmpegts.si.PAT.prototype.constructor = mpegts.si.PAT;\n\nmpegts.si.PAT.prototype.parse = function(data) {\n    var id = mpegts.si.PSISection.prototype.parse.call(this, data);\n    id++;\n\n    if (!this.m_bValid) {\n        //console.log(\"PSI Parsing Problem during PAT parsing!\");\n        return;\n    }\n    this.m_bValid = false;\n\n    if (this.m_table_id !== this.TABLE_ID) {\n        return;\n    }\n\n    var remainingBytes = this.getSectionLength() - this.SECTION_LENGTH;\n\n    while (remainingBytes >= 4) {\n        var prog = new mpegts.si.ProgramAssociation(data.subarray(id, id + 4));\n\n        if (prog.getProgramNumber() === 0) {\n            // Network PID\n            this.m_network_pid = prog.getProgramMapPid();\n        } else {\n            this.m_listOfProgramAssociation.push(prog);\n        }\n        remainingBytes -= 4;\n        id += 4;\n    }\n\n    this.m_bValid = true;\n};\n\n/**\n * returns the PID of the PMT associated to the first program\n *\n * @return the PID of the PMT associated to the first program\n */\nmpegts.si.PAT.prototype.getPmtPid = function() {\n    var pid = mpegts.ts.TsPacket.prototype.UNDEFINED_PID;\n\n    if (this.m_listOfProgramAssociation.length >= 1) {\n        var prog = this.m_listOfProgramAssociation[0];\n        pid = prog.getProgramMapPid();\n    }\n\n    return pid;\n};\n\nmpegts.si.PAT.prototype.TABLE_ID = 0x00;\nmpegts.si.PAT.prototype.PID = 0x00;\n\n\nmpegts.si.ProgramAssociation = function(data) {\n    this.m_program_number = 0;\n    this.m_program_map_pid = 0;\n    this.parse(data);\n};\n\nmpegts.si.ProgramAssociation.prototype.getProgramNumber = function() {\n    return this.m_program_number;\n};\n\nmpegts.si.ProgramAssociation.prototype.getProgramMapPid = function() {\n    return this.m_program_map_pid;\n};\n\nmpegts.si.ProgramAssociation.prototype.getLength = function() {\n    return 4;\n};\n\n/**\n * Parse the ProgramAssociation from given stream\n */\nmpegts.si.ProgramAssociation.prototype.parse = function(data) {\n    this.m_program_number = mpegts.binary.getValueFrom2Bytes(data.subarray(0, 2));\n    this.m_program_map_pid = mpegts.binary.getValueFrom2Bytes(data.subarray(2, 4), 3, 13);\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nmpegts.pes.PesPacket = function() {\n    this.m_cStreamID = null;\n    this.m_nPESPacketLength = null;\n    this.m_cPESScramblingCtrl = null;\n    this.m_bPESpriority = null;\n    this.m_bDataAlignement = null;\n    this.m_bCopyright = null;\n    this.m_bOriginalOrCopy = null;\n    this.m_cPES_header_data_length = null;\n    this.m_cPTS_DTS_flags = null;\n    this.m_bESCR_flag = null;\n    this.m_bES_rate_flag = null;\n    this.m_bDSM_trick_mode_flag = null;\n    this.m_bAdditional_copy_info_flag = null;\n    this.m_bPES_CRC_flag = null;\n    this.m_bPES_extension_flag = null;\n    this.m_pPTS = null;\n    this.m_pDTS = null;\n    this.m_pESCR = null;\n    this.m_ES_rate = null;\n    this.m_DSM_trick_mode = null;\n    this.m_Additional_copy_info = null;\n    this.m_PES_CRC = null;\n    this.m_cNbStuffingBytes = null;\n    this.m_pPESExtension = null;\n    this.m_pPrivateData = null;\n    this.m_payloadArray = null;\n    this.m_nPayloadLength = null;\n    this.m_bDirty = null;\n    this.m_bValid = false;\n};\n\nmpegts.pes.PesPacket.prototype.parse = function(data) {\n    var index = 0;\n    this.m_nLength = data.length;\n    // packet_start_code_prefix\n    var nStartCode = mpegts.binary.getValueFrom3Bytes(data.subarray(index, index + 3));\n    if (nStartCode !== this.START_CODE_PREFIX) {\n        //console.log(\"PES Packet start code not define!\");\n        return;\n    }\n\n    index = 3; // 3 = packet_start_code_prefix length\n\n    // stream_id\n    this.m_cStreamID = data[index];\n    index++;\n\n    // PES_packet_length\n    this.m_nPESPacketLength = mpegts.binary.getValueFrom2Bytes(data.subarray(index, index + 2));\n    index += 2;\n\n    // Padding bytes\n    if (this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_PADDING_STREAM) {\n        // Padding bytes => no more field, no payload\n        this.m_bValid = true;\n        return;\n    }\n\n    // PES_packet_data_byte (no optional header)\n    if (!this.hasOptionalPESHeader()) {\n        //NAN => to Validate!!!!\n        // no more header field, only payload\n        this.m_payloadArray = data.subarray(index + mpegts.pes.PesPacket.prototype.FIXED_HEADER_LENGTH);\n        this.m_nPayloadLength = this.m_nLength - mpegts.pes.PesPacket.prototype.FIXED_HEADER_LENGTH;\n        this.m_bValid = true;\n        return;\n    }\n\n    // Optional PES header\n    var reserved = mpegts.binary.getValueFromByte(data[index], 0, 2);\n    if (reserved !== 0x02) {\n        return;\n    }\n    this.m_cPESScramblingCtrl = mpegts.binary.getValueFromByte(data[index], 2, 2);\n    this.m_bPESpriority = mpegts.binary.getBitFromByte(data[index], 4);\n    this.m_bDataAlignement = mpegts.binary.getBitFromByte(data[index], 5);\n    this.m_bCopyright = mpegts.binary.getBitFromByte(data[index], 6);\n    this.m_bOriginalOrCopy = mpegts.binary.getBitFromByte(data[index], 7);\n    index++;\n\n    // 7 flags\n    this.m_cPTS_DTS_flags = mpegts.binary.getValueFromByte(data[index], 0, 2);\n    this.m_bESCR_flag = mpegts.binary.getBitFromByte(data[index], 2);\n    this.m_bES_rate_flag = mpegts.binary.getBitFromByte(data[index], 3);\n    this.m_bDSM_trick_mode_flag = mpegts.binary.getBitFromByte(data[index], 4);\n    this.m_bAdditional_copy_info_flag = mpegts.binary.getBitFromByte(data[index], 5);\n    this.m_bPES_CRC_flag = mpegts.binary.getBitFromByte(data[index], 6);\n    this.m_bPES_extension_flag = mpegts.binary.getBitFromByte(data[index], 7);\n    index++;\n\n    // PES_header_data_length\n    this.m_cPES_header_data_length = (data[index] & 0xFF);\n    index++;\n\n    // PTS\n    if ((this.m_cPTS_DTS_flags & mpegts.pes.PesPacket.prototype.FLAG_PTS) == mpegts.pes.PesPacket.prototype.FLAG_PTS) {\n        this.m_pPTS = new mpegts.Pts(data.subarray(index, index + 5));\n        index += 5;\n    }\n\n    // DTS\n    if ((this.m_cPTS_DTS_flags & mpegts.pes.PesPacket.prototype.FLAG_DTS) == mpegts.pes.PesPacket.prototype.FLAG_DTS) {\n        this.m_pDTS = new mpegts.Pts(data.subarray(index, index + 5));\n        index += 5;\n    }\n\n    // ESCR\n    if (this.m_bESCR_flag) {\n        //NAN => to Complete\n        //this.m_pESCR = new PCR(m_pBytestream + index);\n        index += 6;\n    }\n\n    // ES_rate\t\n    if (this.m_bES_rate_flag) {\n        this.m_ES_rate = mpegts.binary.getValueFrom3Bytes(data.subarray(index, index + 3), 1, 22);\n        index += 3;\n    }\n\n    // DSM_trick_mode\n    if (this.m_bDSM_trick_mode_flag) {\n        this.m_DSM_trick_mode = data[index];\n        index++;\n    }\n\n    // Additional_copy_info\n    if (this.m_bAdditional_copy_info_flag) {\n        this.m_Additional_copy_info = data[index];\n        index++;\n    }\n\n    // PES_CRC\n    if (this.m_bPES_CRC_flag) {\n        this.m_PES_CRC = mpegts.binary.getValueFrom2Bytes(data.subarray(index, index + 2));\n        index += 2;\n    }\n\n    // PES_extension\n    if (this.m_bPES_extension_flag) {\n        //NAN => to Complete\n        //this.m_pPESExtension = new PESExtension(m_pBytestream + index, m_cPES_header_data_length);\n        //index += m_pPESExtension->getLength();\n    }\n\n    // Stuffing bytes\n    var uiHeaderLength = mpegts.pes.PesPacket.prototype.FIXED_HEADER_LENGTH + mpegts.pes.PesPacket.prototype.FIXED_OPTIONAL_HEADER_LENGTH + this.m_cPES_header_data_length;\n    this.m_cNbStuffingBytes = uiHeaderLength - index;\n    index += this.m_cNbStuffingBytes;\n\n    // Payload\n    this.m_nPayloadLength = this.m_nLength - uiHeaderLength;\n    this.m_payloadArray = data.subarray(uiHeaderLength, uiHeaderLength + this.m_nPayloadLength);\n\n    this.m_bValid = true;\n};\n\n\n/**\n * Returns true if header contains optional PES header.\n * @return true if header contains optional PES header\n */\nmpegts.pes.PesPacket.prototype.hasOptionalPESHeader = function() {\n\n    if ((this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_PROGRAM_STREAM_MAP) ||\n        (this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_PADDING_STREAM) ||\n        (this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_PRIVATE_STREAM_2) ||\n        (this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_ECM_STREAM) ||\n        (this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_EMM_STREAM) ||\n        (this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_PROGRAM_STREAM_DIRECTORY) ||\n        (this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_DSMCC_STREAM) ||\n        (this.m_cStreamID === mpegts.ts.TsPacket.prototype.STREAM_ID_H2221_TYPE_E_STREAM)) {\n        return false;\n    }\n\n    return true;\n};\n\nmpegts.pes.PesPacket.prototype.getHeaderLength = function() {\n    return mpegts.pes.PesPacket.prototype.FIXED_HEADER_LENGTH +\n        mpegts.pes.PesPacket.prototype.FIXED_OPTIONAL_HEADER_LENGTH +\n        this.m_cPES_header_data_length;\n};\n\nmpegts.pes.PesPacket.prototype.getPayload = function() {\n    return this.m_payloadArray;\n};\n\nmpegts.pes.PesPacket.prototype.getPts = function() {\n    return this.m_pPTS;\n};\n\nmpegts.pes.PesPacket.prototype.getDts = function() {\n    return this.m_pDTS;\n};\n\n/** The start code prefix */\nmpegts.pes.PesPacket.prototype.START_CODE_PREFIX = 0x000001;\n/** The first fixed header fields length (start_code + stream_id + PES_packet_length fields) **/\nmpegts.pes.PesPacket.prototype.FIXED_HEADER_LENGTH = 6;\n/** The first optional fixed header fields length **/\nmpegts.pes.PesPacket.prototype.FIXED_OPTIONAL_HEADER_LENGTH = 3;\n/** PTS_DTS_flags possible values */\nmpegts.pes.PesPacket.prototype.FLAG_DTS = 0x01;\nmpegts.pes.PesPacket.prototype.FLAG_PTS = 0x02;","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nmpegts.si.PMT = function() {\n    mpegts.si.PSISection.call(this, mpegts.si.PMT.prototype.TABLE_ID);\n    this.m_listOfComponents = [];\n    this.m_PCR_PID = null;\n    this.m_program_info_length = null;\n};\n\nmpegts.si.PMT.prototype = Object.create(mpegts.si.PSISection.prototype);\nmpegts.si.PMT.prototype.constructor = mpegts.si.PMT;\n\nmpegts.si.PMT.prototype.parse = function(data) {\n    var id = mpegts.si.PSISection.prototype.parse.call(this, data);\n    id++;\n\n    if (!this.m_bValid) {\n        //console.log(\"PSI Parsing Problem during PMT parsing!\");\n        return;\n    }\n    this.m_bValid = false;\n\n    // Check table_id field value\n    if (this.m_table_id !== this.TABLE_ID) {\n        return;\n    }\n\n    var remainingBytes = this.getSectionLength() - this.SECTION_LENGTH;\n\n    // check if we have almost PCR_PID and program_info_length fields\n    if (remainingBytes < 4) {\n        return;\n    }\n\n    this.m_PCR_PID = mpegts.binary.getValueFrom2Bytes(data.subarray(id, id + 2), 3);\n    id += 2;\n    this.m_program_info_length = mpegts.binary.getValueFrom2Bytes(data.subarray(id, id + 2), 4);\n    id += 2;\n\n    // Parse program descriptors\n    id += this.m_program_info_length;\n\n    // Parse ES descriptions\n    remainingBytes = (this.m_section_length - this.SECTION_LENGTH - 4 - this.m_program_info_length);\n    var pESDescription = null;\n    while (remainingBytes > 0) {\n        pESDescription = new mpegts.si.ESDescription(data.subarray(id, id + remainingBytes));\n        this.m_listOfComponents.push(pESDescription);\n        remainingBytes -= pESDescription.getLength();\n        id += pESDescription.getLength();\n    }\n\n    this.m_bValid = true;\n};\n\nmpegts.si.PMT.prototype.TABLE_ID = 0x02;\n\nmpegts.si.PMT.prototype.gStreamTypes = [\n    /*  0 - 0x00 */\n    {\n        name: \"Reserved\",\n        value: 0x00,\n        desc: \"ITU-T | ISO/IEC Reserved\"\n    },\n    /*  1 - 0x01 */\n    {\n        name: \"MPEG1-Video\",\n        value: 0xE0,\n        desc: \"ISO/IEC 11172-2 Video\"\n    },\n    /*  2 - 0x02 */\n    {\n        name: \"MPEG2-Video\",\n        value: 0xE0,\n        desc: \"ITU-T Rec. H.262 | ISO/IEC 13818-2 Video or ISO/IEC 11172-2 constrained parameter video stream\"\n    },\n    /*  3 - 0x03 */\n    {\n        name: \"MPEG1-Audio\",\n        value: 0xC0,\n        desc: \"ISO/IEC 11172-3 Audio\"\n    },\n    /*  4 - 0x04 */\n    {\n        name: \"MPEG2-Audio\",\n        value: 0xC0,\n        desc: \"ISO/IEC 13818-3 Audio\"\n    },\n    /*  5 - 0x05 */\n    {\n        name: \"PRIVATE_SECTIONS\",\n        value: 0xBD,\n        desc: \"ITU-T Rec. H.222.0 | ISO/IEC 13818-1 private_sections\"\n    },\n    /*  6 - 0x06 */\n    {\n        name: \"PRIVATE\",\n        value: 0xBD,\n        desc: \"ITU-T Rec. H.222.0 | ISO/IEC 13818-1 PES packets containing private data\"\n    },\n    /*  7 - 0x07 */\n    {\n        name: \"MHEG\",\n        value: 0xF3,\n        desc: \"ISO/IEC 13522 MHEG\"\n    },\n    /*  8 - 0x08 */\n    {\n        name: \"MPEG1-DSM-CC\",\n        value: 0xF2,\n        desc: \"ITU-T Rec. H.222.0 | ISO/IEC 13818-1 Annex A DSM-CC\"\n    },\n    /*  9 - 0x09 */\n    {\n        name: \"H.222.1\",\n        value: 0xF4,\n        desc: \"ITU-T Rec. H.222.1\"\n    },\n    /* 10 - 0x0A */\n    {\n        name: \"DSM-CC_A\",\n        value: 0xF4,\n        desc: \"ISO/IEC 13818-6 type A\"\n    },\n    /* 11 - 0x0B */\n    {\n        name: \"DSM-CC_B\",\n        value: 0xF5,\n        desc: \"ISO/IEC 13818-6 type B\"\n    },\n    /* 12 - 0x0C */\n    {\n        name: \"DSM-CC_C\",\n        value: 0xF6,\n        desc: \"ISO/IEC 13818-6 type C\"\n    },\n    /* 13 - 0x0D */\n    {\n        name: \"DSM-CC_D\",\n        value: 0xF7,\n        desc: \"ISO/IEC 13818-6 type D\"\n    },\n    /* 14 - 0x0E */\n    {\n        name: \"Auxiliary\",\n        value: 0x00,\n        desc: \"ITU-T Rec. H.222.0 | ISO/IEC 13818-1 auxiliary\"\n    },\n    /* 15 - 0x0F */\n    {\n        name: \"MPEG2-AAC-ADTS\",\n        value: 0xC0,\n        desc: \"ISO/IEC 13818-7 Audio with ADTS transport syntax\"\n    },\n    /* 16 - 0x10 */\n    {\n        name: \"MPEG4-Video\",\n        value: 0xE0,\n        desc: \"ISO/IEC 14496-2 Visual\"\n    },\n    /* 17 - 0x11 */\n    {\n        name: \"MPEG4-AAC-LATM\",\n        value: 0xC0,\n        desc: \"ISO/IEC 14496-3 Audio with the LATM transport syntax as defined in ISO/IEC 14496-3/AMD-1\"\n    },\n    /* 18 - 0x12 */\n    {\n        name: \"MPEG4-SL\",\n        value: 0xFA,\n        desc: \"ISO/IEC 14496-1 SL-packetized stream or FlexMux stream carried in PES packets\"\n    },\n    /* 19 - 0x13 */\n    {\n        name: \"MPEG4-SL\",\n        value: 0xFA,\n        desc: \"ISO/IEC 14496-1 SL-packetized stream or FlexMux stream carried in ISO/IEC14496_sections\"\n    },\n    /* 20 - 0x14 */\n    {\n        name: \"DSM-CC_SDP\",\n        value: 0x00,\n        desc: \"ISO/IEC 13818-6 Synchronized Download Protocol\"\n    },\n    /* 21 - 0x15 */\n    {\n        name: \"META_PES\",\n        value: 0xFC,\n        desc: \"Metadata carried in PES packets\"\n    },\n    /* 22 - 0x16 */\n    {\n        name: \"META_SECTIONS\",\n        value: 0xFC,\n        desc: \"Metadata carried in metadata_sections\"\n    },\n    /* 23 - 0x17 */\n    {\n        name: \"META_DSM-CC\",\n        value: 0xFC,\n        desc: \"Metadata carried in ISO/IEC 13818-6 Data Carousel\"\n    },\n    /* 24 - 0x18 */\n    {\n        name: \"META_DSM-CC\",\n        value: 0xFC,\n        desc: \"Metadata carried in ISO/IEC 13818-6 Object Carousel\"\n    },\n    /* 25 - 0x19 */\n    {\n        name: \"META_DSM-CC\",\n        value: 0xFC,\n        desc: \"Metadata carried in ISO/IEC 13818-6 Synchronized Download Protocol\"\n    },\n    /* 26 - 0x1A */\n    {\n        name: \"MPEG2-IPMP\",\n        value: 0x00,\n        desc: \"IPMP stream (defined in ISO/IEC 13818-11, MPEG-2 IPMP)\"\n    },\n    /* 27 - 0x1B */\n    {\n        name: \"H.264\",\n        value: 0xE0,\n        desc: \"AVC video stream as defined in ITU-T Rec. H.264 | ISO/IEC 14496-10 Video\"\n    },\n    /* 28 - 0x1C */\n    {\n        name: \"MPEG4AAC\",\n        value: 0xC0,\n        desc: \"ISO/IEC 14496-3 Audio, without using any additional transport syntax, such as DST, ALS and SLS\"\n    },\n    /* 29 - 0x1D */\n    {\n        name: \"MPEG4Text\",\n        value: 0x00,\n        desc: \"ISO/IEC 14496-17 Text\"\n    },\n    /* 30 - 0x1E */\n    {\n        name: \"Aux. Video (23002-3)\",\n        value: 0x1E,\n        desc: \"Auxiliary video stream as defined in ISO/IEC 23002-3\"\n    },\n    /* 31 - 0x1F */\n    {\n        name: \"H.264-SVC\",\n        value: 0xE0,\n        desc: \"SVC video sub-bitstream of a video stream as defined in the Annex G of ITU-T Rec. H.264 | ISO/IEC 14496-10 Video\"\n    },\n    /* 32 - 0x20 */\n    {\n        name: \"H.264-MVC\",\n        value: 0xE0,\n        desc: \"MVC video sub-bitstream of a video stream as defined in the Annex H of ITU-T Rec. H.264 | ISO/IEC 14496-10 Video\"\n    },\n    /* 33 - 0x21 */\n    {\n        name: \"Reserved1\",\n        value: 0x00,\n        desc: \"TBC Reserved\"\n    },\n    /* 34 - 0x22 */\n    {\n        name: \"Reserved2\",\n        value: 0x00,\n        desc: \"TBC Reserved\"\n    },\n    /* 35 - 0x23 */\n    {\n        name: \"Reserved3\",\n        value: 0x00,\n        desc: \"TBC Reserved\"\n    },\n    /* 36 - 0x24 */\n    {\n        name: \"HEVC\",\n        value: 0xE0,\n        desc: \"ITU.-T Rec H.26x | ISO/IEC 23008-2 video stream\"\n    }\n];\n\nmpegts.si.PMT.prototype.MPEG2_VIDEO_STREAM_TYPE = 0x02;\nmpegts.si.PMT.prototype.AVC_VIDEO_STREAM_TYPE = 0x1B;\nmpegts.si.PMT.prototype.MPEG1_AUDIO_STREAM_TYPE = 0x03;\nmpegts.si.PMT.prototype.MPEG2_AUDIO_STREAM_TYPE = 0x04;\nmpegts.si.PMT.prototype.AAC_AUDIO_STREAM_TYPE = 0x11;\nmpegts.si.PMT.prototype.AC3_AUDIO_STREAM_TYPE = 0x06;\nmpegts.si.PMT.prototype.SUB_STREAM_TYPE = 0x06;\n\nmpegts.si.PMT.prototype.STREAM_TYPE_MP1V = 0x01;\nmpegts.si.PMT.prototype.STREAM_TYPE_MP2V = 0x02;\nmpegts.si.PMT.prototype.STREAM_TYPE_MP1A = 0x03;\nmpegts.si.PMT.prototype.STREAM_TYPE_MP2A = 0x04;\nmpegts.si.PMT.prototype.STREAM_TYPE_PRIVATE = 0x06;\nmpegts.si.PMT.prototype.STREAM_TYPE_TELETEXT = 0x06;\nmpegts.si.PMT.prototype.STREAM_TYPE_DVBSUBTITLE = 0x06;\nmpegts.si.PMT.prototype.STREAM_TYPE_AC3 = 0x06;\nmpegts.si.PMT.prototype.STREAM_TYPE_MP2AAC_ADTS = 0x0F;\nmpegts.si.PMT.prototype.STREAM_TYPE_MP4AAC_LATM = 0x11;\nmpegts.si.PMT.prototype.STREAM_TYPE_H264 = 0x1B;\nmpegts.si.PMT.prototype.STREAM_TYPE_MP4AAC = 0x1C;\nmpegts.si.PMT.prototype.STREAM_TYPE_AUX_23002_3 = 0x1E;\nmpegts.si.PMT.prototype.STREAM_TYPE_SVC = 0x1F;\nmpegts.si.PMT.prototype.STREAM_TYPE_MVC = 0x20;\nmpegts.si.PMT.prototype.STREAM_TYPE_HEVC = 0x24;\n\n\nmpegts.si.ESDescription = function(data) {\n    /** ES description fields */\n    this.m_stream_type = null;\n    this.m_elementary_PID = null;\n    this.m_ES_info_length = null;\n    this.parse(data);\n};\n\n/**\n * Gets the stream type associated to this ES\n * @return the stream type associated to this ES\n */\nmpegts.si.ESDescription.prototype.getStreamType = function() {\n    return this.m_stream_type;\n};\n\n/**\n * Gets the pid on which this ES may be found\n * @return the pid on which this ES may be found\n */\nmpegts.si.ESDescription.prototype.getPID = function() {\n    return this.m_elementary_PID;\n};\n\n/**\n * Returns the elementary stream description length\n * @return the elementary stream description length\n */\nmpegts.si.ESDescription.prototype.getLength = function() {\n    return 5 + this.m_ES_info_length;\n};\n\n/**\n * Parse the ESDescription from given bytestream\n * @param the bytestream to parse\n * @return the bytestream length\n */\nmpegts.si.ESDescription.prototype.parse = function(data) {\n    this.m_stream_type = data[0];\n    this.m_elementary_PID = mpegts.binary.getValueFrom2Bytes(data.subarray(1, 3), 3);\n    this.m_ES_info_length = mpegts.binary.getValueFrom2Bytes(data.subarray(3, 5), 4);\n};","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nmpegts.Pts = function(data) {\n\n    var low,\n        high;\n\n    //initialize an unsigned 64 bits long number\n    //this.m_lPTS = goog.math.Long.fromNumber(0);\n\n    //=> PTS is defined on 33 bits\n    //=> In the first byte, bit number 2 to 4 is useful\n    var bits3230 = data[0] >> 1 & 0x7;\n\n    //thirty-third bit in the high member\n    high = bits3230 >> 2;\n    //32 and 31 bits in th low member, shift by 30 bits\n    low = ((bits3230 & 0x3) << 30) >>> 0; //=> http://www.codeonastick.com/2013/06/javascript-convert-signed-integer-to.html unsigned int!!!!!!\n\n    //=> In the second byte, all the bits are useful\n    var bits2922 = data[1];\n    low = (low | (bits2922 << 22)) >>> 0; //=> http://www.codeonastick.com/2013/06/javascript-convert-signed-integer-to.html unsigned int!!!!!!\n\n    //=> In the third byte, bit number 2 to 8 is useful\n    var bits2115 = data[2] >> 1;\n    low = (low | (bits2115 << 15)) >>> 0; //=> http://www.codeonastick.com/2013/06/javascript-convert-signed-integer-to.html unsigned int!!!!!!\n\n    //=> In the fourth byte, all the bits are useful\n    var bits1407 = data[3];\n    low = (low | (bits1407 << 7)) >>> 0; //=> http://www.codeonastick.com/2013/06/javascript-convert-signed-integer-to.html unsigned int!!!!!!\n\n    //=> In the fifth byte, bit number 2 to 8 is useful\n    var bits0701 = data[4] >> 1;\n    low = (low | bits0701) >>> 0; //=> http://www.codeonastick.com/2013/06/javascript-convert-signed-integer-to.html unsigned int!!!!!!\n\n    this.m_lPTS = goog.math.Long.fromBits(low, high).toNumber();\n    this.m_fPTS = this.m_lPTS / mpegts.Pts.prototype.SYSTEM_CLOCK_FREQUENCY;\n};\n\n/**\n * Returns the PTS value in units of system clock frequency.\n * @return the PTS value in units of system clock frequency\n */\nmpegts.Pts.prototype.getValue = function() {\n    return this.m_lPTS;\n};\n\n/**\n * Returns the PTS value in seconds.\n * @return the PTS value in seconds\n */\nmpegts.Pts.prototype.getValueInSeconds = function() {\n    return this.m_fPTS;\n};\n\nmpegts.Pts.prototype.SYSTEM_CLOCK_FREQUENCY = 90000;","/*\n * The copyright in this software module is being made available under the BSD License, included below. This software module may be subject to other third party and/or contributor rights, including patent rights, and no such rights are granted under this license.\n * The whole software resulting from the execution of this software module together with its external dependent software modules from dash.js project may be subject to Orange and/or other third party rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2014, Orange\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * •  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * •  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * •  Neither the name of the Orange nor the names of its contributors may be used to endorse or promote products derived from this software module without specific prior written permission.\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nmpegts.ts.TsPacket = function() {\n    this.m_cSync = null;\n    this.m_bTransportError = null;\n    this.m_bPUSI = null;\n    this.m_bTransportPriority = null;\n    this.m_nPID = null;\n    this.m_cTransportScramblingCtrl = null;\n    this.m_cAdaptationFieldCtrl = null;\n    this.m_cContinuityCounter = null;\n    this.m_pAdaptationField = null;\n    this.m_payloadArray = null;\n    this.m_cPayloadLength = null;\n    this.m_bDirty = null;\n    this.m_time = null;\n    this.m_arrivalTime = null;\n    this.m_bIgnored = null;\n};\n\nmpegts.ts.TsPacket.prototype.parse = function(data) {\n    var byteId = 0;\n    this.m_cSync = data[byteId];\n    if (this.m_cSync !== this.SYNC_WORD) {\n        //console.log(\"TS Packet Malformed!\");\n        return;\n    }\n\n    byteId++;\n\n    this.m_bTransportError = mpegts.binary.getBitFromByte(data[byteId], 0);\n    this.m_bPUSI = mpegts.binary.getBitFromByte(data[byteId], 1);\n    this.m_bTransportPriority = mpegts.binary.getBitFromByte(data[byteId], 2);\n    this.m_nPID = mpegts.binary.getValueFrom2Bytes(data.subarray(byteId, byteId + 2), 3, 13);\n\n    byteId += 2;\n\n    this.m_cTransportScramblingCtrl = mpegts.binary.getValueFromByte(data[byteId], 0, 2);\n    this.m_cAdaptationFieldCtrl = mpegts.binary.getValueFromByte(data[byteId], 2, 2);\n    this.m_cContinuityCounter = mpegts.binary.getValueFromByte(data[byteId], 4, 4);\n\n    byteId++;\n\n    // Adaptation field\n    // NAN => to Validate\n    if (this.m_cAdaptationFieldCtrl & 0x02) {\n        // Check adaptation field length before parsing\n        var cAFLength = data[byteId];\n        if ((cAFLength + byteId) >= this.TS_PACKET_SIZE) {\n            //console.log(\"TS Packet Size Problem!\");\n            return;\n        }\n        this.m_pAdaptationField = new mpegts.ts.AdaptationField();\n        this.m_pAdaptationField.parse(data.subarray(byteId));\n        byteId += this.m_pAdaptationField.getLength();\n    }\n\n    // Check packet validity\n    if (this.m_cAdaptationFieldCtrl === 0x00) {\n        //console.log(\"TS Packet is invalid!\");\n        return;\n    }\n\n    // Payload\n    if (this.m_cAdaptationFieldCtrl & 0x01) {\n        this.m_cPayloadLength = this.TS_PACKET_SIZE - byteId;\n        this.m_payloadArray = data.subarray(byteId, byteId + this.m_cPayloadLength);\n    }\n};\n\nmpegts.ts.TsPacket.prototype.checkSyncWord = function(data) {\n    var byteId = 0;\n    var sync = data[byteId];\n\n    return (sync === this.SYNC_WORD);\n};\n\nmpegts.ts.TsPacket.prototype.getPid = function() {\n    return this.m_nPID;\n};\n\nmpegts.ts.TsPacket.prototype.getPayload = function() {\n    return this.m_payloadArray;\n};\n\nmpegts.ts.TsPacket.prototype.getPayloadLength = function() {\n    return this.m_cPayloadLength;\n};\n\nmpegts.ts.TsPacket.prototype.getPusi = function() {\n    return this.m_bPUSI;\n};\n\nmpegts.ts.TsPacket.prototype.hasAdaptationFieldOnly = function() {\n    return (this.m_cAdaptationFieldCtrl === 0x02);\n};\n\nmpegts.ts.TsPacket.prototype.SYNC_WORD = 0x47;\nmpegts.ts.TsPacket.prototype.TS_PACKET_SIZE = 188;\nmpegts.ts.TsPacket.prototype.UNDEFINED_PID = 0xFFFF;\nmpegts.ts.TsPacket.prototype.PAT_PID = 0;\nmpegts.ts.TsPacket.prototype.STREAM_ID_PROGRAM_STREAM_MAP = 0xBC;\nmpegts.ts.TsPacket.prototype.STREAM_ID_PADDING_STREAM = 0xBE;\nmpegts.ts.TsPacket.prototype.STREAM_ID_PADDING_STREAM = 0xBE;\nmpegts.ts.TsPacket.prototype.STREAM_ID_PRIVATE_STREAM_2 = 0xBF;\nmpegts.ts.TsPacket.prototype.STREAM_ID_ECM_STREAM = 0xF0;\nmpegts.ts.TsPacket.prototype.STREAM_ID_EMM_STREAM = 0xF1;\nmpegts.ts.TsPacket.prototype.STREAM_ID_DSMCC_STREAM = 0xF2;\nmpegts.ts.TsPacket.prototype.STREAM_ID_H2221_TYPE_E_STREAM = 0xF8;\nmpegts.ts.TsPacket.prototype.STREAM_ID_PROGRAM_STREAM_DIRECTORY = 0xFF;\n"]}